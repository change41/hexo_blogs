{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape-plus/source/css/bdshare.styl","path":"css/bdshare.styl","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/img/scrollup.png","path":"img/scrollup.png","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/landscape-plus/.gitattributes","hash":"082442a106c29adb09669f321f984c1bf606f780","modified":1546882157153},{"_id":"themes/landscape-plus/.gitignore","hash":"b64fca798c2e9164bd1c9d8d641c4b2b22334da5","modified":1546882157153},{"_id":"themes/landscape-plus/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1546882157153},{"_id":"themes/landscape-plus/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1546882157153},{"_id":"themes/landscape-plus/README.md","hash":"3b370d9fc7e2c86d3e3e79d1b0eeeb2af461815f","modified":1546882157153},{"_id":"themes/landscape-plus/_config.yml","hash":"c9b2117b1c4ac73c624204b3fedd3ddc350c9ec5","modified":1546882157153},{"_id":"themes/landscape-plus/package.json","hash":"5deaa023c44f9f59f3df6e2a033a5fc2586797e6","modified":1546882157156},{"_id":"source/_drafts/RH254-控制服务和守护进程.md","hash":"ceed44149bd3efe55608159e0f08125f7e3e42df","modified":1546797734798},{"_id":"source/_posts/Chapter-10-Analyzing-and-Storing-Logs.md","hash":"eed4e0f17c5d45f10e62db266abe8ae1d0242157","modified":1546702201262},{"_id":"source/_posts/autofs-e8-87-aa-e5-8a-a8-e6-8c-82-e8-bd-bd.md","hash":"c282c2fb9c27be812215165d7fedf1d6243ab462","modified":1546701301444},{"_id":"source/_posts/chapter-11-manager-network.md","hash":"5d69188996977ef1130386a9090bd2e1a393211b","modified":1546702368136},{"_id":"source/_posts/chapter-12-archiving-and-copying-files.md","hash":"7693fdc38969cf09cc34b9309075e084547bfe76","modified":1546702669199},{"_id":"source/_posts/chapter-14-accessing-linux-file-system.md","hash":"464f8d3c3e7b4f0e13cd0636f990c55d5ab98e65","modified":1546789134513},{"_id":"source/_posts/chapter-15-using-virtualized-system.md","hash":"ed132d14f1faf37ad3fec7fc4b865beba032a811","modified":1546789228498},{"_id":"source/_posts/chapter-2-managing-files-from-the-command-line.md","hash":"8aba3efedbe10efb53b57ace65abfd89b024f76b","modified":1546728986559},{"_id":"source/_posts/chapter-3-getting-help-in-red-hat-enterprise-linux.md","hash":"4953b36235ec7d6d0a7754865097d2ade31e3366","modified":1546729711495},{"_id":"source/_posts/chapter-4-creatingviewingand-editing-text-files.md","hash":"0831fdbfd7434b2ae36ba3bde4c9382c01dfff84","modified":1546730751031},{"_id":"source/_posts/chapter-5-managing-local-linux-users-and-groups.md","hash":"5d838679098ab2cd8f09cfe58af211964164ca2b","modified":1546731432013},{"_id":"source/_posts/chapter-6-controlling-access-to-files-with-linux-file-system-permissions.md","hash":"93605fbd759ccbaa9b777fbb4d2d629c906a0b6d","modified":1546731728479},{"_id":"source/_posts/chapter-7-monitoring-and-managing-linux-processes.md","hash":"18a1cd0013891eb7209dea0e0bc7ade6c82e34ac","modified":1546732333059},{"_id":"source/_posts/chapter-8-systemctl.md","hash":"d491a849d1615a3845296bea4c5dfb9781e8efb5","modified":1546788810344},{"_id":"source/_posts/chapter-9-openssh.md","hash":"2b2d650ab1099c942e837dcb6ba321fcfbd27999","modified":1546788977420},{"_id":"source/_posts/chapter1-accessing-the-command-line.md","hash":"6a5d14b1eb22c7a432033eb5396596ecc5d075c0","modified":1546789318920},{"_id":"source/_posts/chatper-13-installing-and-updating-software-packages.md","hash":"784b37bc6d7d2f0209f1d66c0421c9e5df811008","modified":1546789729203},{"_id":"source/_posts/e7-ac-ac-e4-ba-8c-e7-ab-a0-e9-80-9a-e8-bf-87grep-e4-bd-bf-e7-94-a8-e6-ad-a3-e5-88-99-e8-a1-a8-e8-be-be-e5-bc-8f.md","hash":"ffb9bdd158cef93afd18043eee5214dc322aff04","modified":1546789947837},{"_id":"source/_posts/example.jpg","hash":"32f8d50f057a3fa476d3e8401a9b67779e95ae55","modified":1546859825638},{"_id":"source/_posts/iptables-e7-ab-af-e5-8f-a3-e8-bd-ac-e5-8f-91.md","hash":"8d1610e5ff9a5eae7028848b728f8ac34fa29579","modified":1546790521747},{"_id":"source/_posts/md.txt","hash":"5a49d635a930600a78026cbe2929afba04ba84de","modified":1546638756416},{"_id":"source/_posts/rh124-recored.md","hash":"0238d22bb444db3c61165f96eb2e5bb6f35054bd","modified":1546792372971},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85.md","hash":"98dad3a49dba6edcd101eddb84aaf29e5c83c600","modified":1546793021306},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7.md","hash":"8e12ebf5c4647ac416f2b29c91a88738dfa5f77b","modified":1546793553549},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-89-e7-ab-a0-e4-bd-bf-e7-94-a8vim-e5-88-9b-e5-bb-ba-e5-92-8c-e7-bc-96-e8-be-91-e6-96-87-e6-9c-ac-e6-96-87-e4-bb-b6.md","hash":"cc5bbb640ebc4cb92126a3508b6037df882ed0b9","modified":1546793995185},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f.md","hash":"52ed1f47d39946bd2b7b051003757571e9c19ab0","modified":1546638756520},{"_id":"source/_posts/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7.md","hash":"7fb36ccde586a7c6193d1eed34c5594cd6dde849","modified":1546794170467},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ab-e7-ab-a0-e8-bf-9e-e6-8e-a5-e5-88-b0-e7-bd-91-e7-bb-9c-e5-ae-9a-e4-b9-89-e7-9a-84-e7-94-a8-e6-88-b7-e5-92-8c-e7-bb-84.md","hash":"c7a6983c507d00fe66b386b9f5a74a562ac6a8b2","modified":1546796178717},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae.md","hash":"0ebad024433735ceb0a9117122b704ab350382f7","modified":1546796367274},{"_id":"source/_posts/rh134-e7-ac-ac-e5-8d-81-e4-b8-80-e7-ab-a0-e8-ae-bf-e9-97-ae-e5-85-b7-e6-9c-89-e7-bd-91-e7-bb-9c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f-ef-bc-88nfs-ef-bc-89-e7-9a-84-e7-bd-91-e7-bb-9c-e5-ad-98-e5-82-a8.md","hash":"958b3abcab5093bb7b058f5d01329cbc62c82b83","modified":1546794461044},{"_id":"source/_posts/rh134-e7-ac-ac-e5-8d-81-e4-b8-89-e7-ab-a0-e5-af-b9-red-hat-enterprise-linux-e5-90-af-e5-8a-a8-e8-bf-87-e7-a8-8b-e8-bf-9b-e7-a8-8b-e6-8e-a7-e5-88-b6-e6-95-85-e9-9a-9c-e6-8e-92-e9-99-a4.md","hash":"ba3ff944c5b9e44bf6f4859713b422afdcd9decd","modified":1546794809985},{"_id":"source/_posts/rh134-e7-ac-ac-e5-8d-81-e4-ba-8c-e7-ab-a0-e8-ae-bf-e9-97-ae-e5-85-b7-e6-9c-89smb-e7-9a-84-e7-bd-91-e7-bb-9c-e5-ad-98-e5-82-a8.md","hash":"e4790c8fd5daca202438a424716e5ce895d5d8d6","modified":1546794945328},{"_id":"source/_posts/rh134-e7-ac-ac-e5-8d-81-e4-ba-94-e7-ab-a0-e7-b3-bb-e7-bb-9f-e7-ae-a1-e7-90-86-e4-ba-8c-e6-80-bb-e5-a4-8d-e4-b9-a0.md","hash":"ba4876b8391c28dedea3713e5c9ac1913fa16ddd","modified":1546795514171},{"_id":"source/_posts/rh134-e7-ac-ac-e5-8d-81-e5-9b-9b-e7-ab-a0-e4-bd-bf-e7-94-a8-firewalld-e9-99-90-e5-88-b6-e7-bd-91-e7-bb-9c-e9-80-9a-e4-bf-a1.md","hash":"1a421ef57f919023d0cf045dfff92503b60bca01","modified":1546795733640},{"_id":"source/_posts/rh134-e7-ac-ac-e5-9b-9b-e7-ab-a0-e8-ae-a1-e5-88-92-e5-b0-86-e6-9d-a5-e7-9a-84linux-e4-bb-bb-e5-8a-a1.md","hash":"16702e2aff4ca2a8437a0df7c8d78865e6c59710","modified":1546796085780},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8.md","hash":"c85156fb14c3351ca129dde9413fd3514ae1affc","modified":1546796752945},{"_id":"source/_posts/wordpress.sh","hash":"e9ae55ff3cd8a21625721a8efd6554a272dc9a0b","modified":1546638748376},{"_id":"themes/landscape-plus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1546882157148},{"_id":"themes/landscape-plus/.git/config","hash":"7ce5643b5b75ae59707d945c9e466892038c88d9","modified":1546882157149},{"_id":"themes/landscape-plus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1546882152655},{"_id":"themes/landscape-plus/.git/index","hash":"707821281a1fe71c93b35518f97ff9f0ef698ee4","modified":1546882157165},{"_id":"themes/landscape-plus/.git/packed-refs","hash":"37915f5293cf10ee9f30f3bbcb6ce91a47acb19b","modified":1546882157147},{"_id":"themes/landscape-plus/languages/default.yml","hash":"0270b76db4c94f8905d4c0dc2303da5d5e756a19","modified":1546882157154},{"_id":"themes/landscape-plus/languages/zh-CN.yml","hash":"bab536eff019db1c8615a83e24e142105f397398","modified":1546882157154},{"_id":"themes/landscape-plus/languages/zh-TW.yml","hash":"1187826de31c687542e882835fc8062c2bc7a551","modified":1546882157154},{"_id":"themes/landscape-plus/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1546882157155},{"_id":"themes/landscape-plus/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1546882157155},{"_id":"themes/landscape-plus/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1546882157155},{"_id":"themes/landscape-plus/layout/layout.ejs","hash":"3626a74826657529bea744fb014dd9607e9834d0","modified":1546882157155},{"_id":"themes/landscape-plus/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1546882157156},{"_id":"themes/landscape-plus/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1546882157156},{"_id":"themes/landscape-plus/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1546882157156},{"_id":"themes/landscape-plus/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1546882157156},{"_id":"themes/landscape-plus/source/css/bdshare.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546882157157},{"_id":"source/_drafts/RH254-控制服务和守护进程/QQ截图20190103131704.png","hash":"5389efd2dd2b7e731fd6fc77e81f90888d156c30","modified":1546768738953},{"_id":"source/_drafts/RH254-控制服务和守护进程/image-1.png","hash":"ab8c63bfc819b153e8c4445bb8cdfe6a63850538","modified":1546768885480},{"_id":"source/_drafts/RH254-控制服务和守护进程/QQ截图20190103143253.png","hash":"ee68453313d583eb7279063bbd804a1f7715819a","modified":1546768815504},{"_id":"source/_drafts/RH254-控制服务和守护进程/QQ截图20190103143415.png","hash":"b03baf12ea9a5c929fcbb675345de865bb2714e3","modified":1546768834554},{"_id":"source/_drafts/RH254-控制服务和守护进程/QQ截图20190103143559.png","hash":"b02e4ade17018fadc1e0c6703051da2c110cc83e","modified":1546768859177},{"_id":"source/_posts/Chapter-10-Analyzing-and-Storing-Logs/1523427823840955.png","hash":"80daee855bae2bf6690eecc6dd017cef03785e3a","modified":1546638756050},{"_id":"source/_posts/Chapter-10-Analyzing-and-Storing-Logs/1523429897556805.png","hash":"b81a00b45bc0d276ec7622d5fb5b7ad8005a030e","modified":1546638756050},{"_id":"source/_posts/chapter-12-archiving-and-copying-files/1523583168668639.png","hash":"44e97b731ddc2736daef687894cd548b3ee32d74","modified":1546638756110},{"_id":"source/_posts/chapter-14-accessing-linux-file-system/1523949252627674.png","hash":"cf6ee90c349bc31428d7dbe4c60699e7e32660c5","modified":1546638756130},{"_id":"source/_posts/chapter-14-accessing-linux-file-system/1523949409259777.png","hash":"a6a852bfaba27f497981510508e367c317225956","modified":1546638756130},{"_id":"source/_posts/chapter-4-creatingviewingand-editing-text-files/1524818166553035.png","hash":"297f97fb44dbfea284065e446ab62040535549fa","modified":1546638756224},{"_id":"source/_posts/chapter-4-creatingviewingand-editing-text-files/1524818174855912.png","hash":"6c414f40cecf25e3c2d95c26758b4389ad6b5c00","modified":1546638756224},{"_id":"source/_posts/chapter-4-creatingviewingand-editing-text-files/1524818180473442.png","hash":"6aadf478752af9b562d24ecd1e2bd5ebe5e0a70f","modified":1546638756224},{"_id":"source/_posts/chapter-4-creatingviewingand-editing-text-files/1524818191991552.png","hash":"bd25751a19dac0d51777a2c72851845e54ffc5e7","modified":1546638756224},{"_id":"source/_posts/chapter-4-creatingviewingand-editing-text-files/1524818205308304.png","hash":"927e8825cbfd3314ecb5b078c50c0ae718d469ad","modified":1546638756224},{"_id":"source/_posts/chapter-4-creatingviewingand-editing-text-files/1524818219547743.png","hash":"17bb22af1295d81e97dcf1f63b6f7c52a0dc0ddb","modified":1546638756224},{"_id":"source/_posts/chapter-4-creatingviewingand-editing-text-files/1524823368317604.png","hash":"d6cd998f99f295fc427c4dd9883f83ad6ab86dce","modified":1546638756224},{"_id":"source/_posts/chapter-4-creatingviewingand-editing-text-files/1524823380758403.png","hash":"7221677260a78f90bca3f8a268592a7ee7dced14","modified":1546638756224},{"_id":"source/_posts/chapter-5-managing-local-linux-users-and-groups/1524823773815913.png","hash":"30db4860e174ad1bbe964acdcf636fe2fbc4da89","modified":1546638756246},{"_id":"source/_posts/chapter-5-managing-local-linux-users-and-groups/1525166687554964.png","hash":"003ae4780ac45bc90f0749ece8e7f4e6fbb4912f","modified":1546638756246},{"_id":"source/_posts/chapter-8-systemctl/1523433401385622.png","hash":"b7b195933aa5a67987a120c1061ad71ff56c7d11","modified":1546638756302},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85/1525422261580488.png","hash":"9a940fc3624722b7cea0ae37d35d89ef37098705","modified":1546638756443},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85/1525422300234129.png","hash":"3c2577c6e9b2ec15389d2cbf8f7dd4a3e2bdb277","modified":1546638756444},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85/1525422328135998.png","hash":"ad9a9947b338a26536f17b577de50a48fdd76a81","modified":1546638756444},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85/1525422388734744.png","hash":"bd7446d7971e5f6ddadc481d10f8b703437f3c8f","modified":1546638756444},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526607016211181.png","hash":"0702d3e5f6e4bd8ca34b1358fac26f6065a5a0e5","modified":1546638756465},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526867174600183.png","hash":"a673ace31105b3d1beb6a2ebc4ea972fc85e7c45","modified":1546638756465},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526868454617069.png","hash":"8b67e22808ed20ef19be2757782f413562e47be6","modified":1546638756468},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526868484423514.png","hash":"8358faa05c785bb7116748b72a6683afe1b29378","modified":1546638756468},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526871627344712.png","hash":"d211332bafff7b0493c76800bd96d7b675e102f9","modified":1546638756468},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526872601651338.png","hash":"56aff5158ad65998a7b957d55aa5c9fc340af131","modified":1546638756468},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526892834926496.png","hash":"8e622688322784f97a039008620a64f0f481eac0","modified":1546638756468},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526892939342968.png","hash":"1489350c67acb3fa1d2d208bb0e514fa195966de","modified":1546638756468},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276497330227.png","hash":"eb546289b3f12fef3582afaf9e31908ac21f9cc2","modified":1546638756509},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276592930306.png","hash":"46c65770fd0c514ea403f94140304cfc3c8d59f4","modified":1546638756509},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276722303229.png","hash":"2a74ea971905afb6189f3b87e72c273bc7b98063","modified":1546638756509},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276804698343.png","hash":"1cb32979096462378a78b996b2df40547e2b14d9","modified":1546638756509},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276896690206.png","hash":"e3361cae73f4dccb35a58898e0ac2562437f0424","modified":1546638756509},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276914317730.png","hash":"c5b87e26c3d31b4350c8a7e7ed460c36dc995f02","modified":1546638756510},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276934798991.png","hash":"7adb3fd01abb003fc06f0246741b0b193781b171","modified":1546638756510},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276954842354.png","hash":"e250314493c22d1c8f02592890441937fde56266","modified":1546638756510},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276971677806.png","hash":"3333c806aa1ed8c3431d7ee6066647db37cd0259","modified":1546638756511},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276989994678.png","hash":"2525f09274847f74a315441be3530aa4051d77dc","modified":1546638756511},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531277008909144.png","hash":"89811a134b4a5195e1d6d253020c05446313bb44","modified":1546638756511},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531296248918343.png","hash":"e28976a9f973d748dfd9131a0105a03dd65e048e","modified":1546638756511},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531296936475764.png","hash":"940f0ace945b293504124eef51ef4fa67dfc6d09","modified":1546638756511},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531297457952475.png","hash":"2576890b9e1d56c678aad3b35c26ec1f857621ae","modified":1546638756511},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531297827908462.png","hash":"80b33b100368d64808c88ccbb73f5d549697ea24","modified":1546638756511},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531359731927864.png","hash":"dd5c4fe5cf1198314373d98babdf28ee04df0ac0","modified":1546638756511},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531359756116868.png","hash":"30eec57f4766b085c0e127e34c118da626d1f1da","modified":1546638756511},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531359953672134.png","hash":"792b819dead4b66af3a1e4a6d1d8e9f21cf45152","modified":1546638756511},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531359975493820.png","hash":"50c7ae44998b7a31a20cc00923f4710c0d3cd5d0","modified":1546638756511},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531360582174595.png","hash":"42fc25b489a81f7d9eb76be6ac34e72a18befe0e","modified":1546638756511},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531360808313305.png","hash":"0a18189fd4b764dac9ef8fa85188f4339f60c79f","modified":1546638756512},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531365704503638.png","hash":"5a9ff65c6bbf681609cd71bccf4a51ae8621f36e","modified":1546638756512},{"_id":"source/_posts/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526262567734231.png","hash":"cf8a38ebd826a17f5158ebbb0e477fc99fe8a07f","modified":1546638756532},{"_id":"source/_posts/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526266653786433.png","hash":"13ce55293168d2ad0b6877608e85f8af3478ed38","modified":1546638756532},{"_id":"source/_posts/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526266685205928.png","hash":"b1f400a043307868b81dd7c2a517d85c2523973d","modified":1546638756532},{"_id":"source/_posts/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526266722562134.png","hash":"9324b8ea6ed480db18e4be33ff1845dc5aeb8c98","modified":1546638756534},{"_id":"source/_posts/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526266750818667.png","hash":"23dff337087145adfeea2572b9578ba7004120a1","modified":1546638756534},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526285537683356.png","hash":"3c921ca5ab63f1f7cf16dd8cc4d427de13abcb14","modified":1546638756576},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526286552326310.png","hash":"655cd0260b62d3a69e08b1d215105f439eb10e9a","modified":1546638756577},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526286600143773.png","hash":"5eea634befefdf6062616ba62daa806744707011","modified":1546638756577},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526286628954630.png","hash":"17f6bc4db6b4898eefabf28ea88e4002db641238","modified":1546638756577},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526288457208748.png","hash":"ecdd88a86c4ba02358635983ffcc34b607ff2b92","modified":1546638756577},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526288467671948.png","hash":"a14c706cdb601d217ce7cf6c579f87a3bf99ade9","modified":1546638756577},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526288669879354.png","hash":"4e7522375f2e90fbee8f021b8f7d9faaa3b66790","modified":1546638756578},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526288787444516.png","hash":"b680e660a28a09e8b014750b09b6efc68e1ea970","modified":1546638756578},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526347461483244.png","hash":"1202bd7c0e9572195f9660156b6d0c29fb3069c9","modified":1546638756578},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526347563548361.png","hash":"b29d9093021a70ddb1044679aea60953184e7904","modified":1546638756578},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526347790707759.png","hash":"0b927936e167b29a820e09f3c5aca6ee63263f07","modified":1546638756578},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526347988908292.png","hash":"28bc8241cc05eda1b8c6a2ffa1616ec2b8cd28ec","modified":1546638756578},{"_id":"source/_posts/rh134-e7-ac-ac-e5-9b-9b-e7-ab-a0-e8-ae-a1-e5-88-92-e5-b0-86-e6-9d-a5-e7-9a-84linux-e4-bb-bb-e5-8a-a1/1525771056304457.png","hash":"4074806f0409ce0f3fe5f7a99791aae411eac17c","modified":1546638756696},{"_id":"source/_posts/rh134-e7-ac-ac-e5-9b-9b-e7-ab-a0-e8-ae-a1-e5-88-92-e5-b0-86-e6-9d-a5-e7-9a-84linux-e4-bb-bb-e5-8a-a1/1526219726507971.png","hash":"09b7f85f42d7aeef1f1154aab47ea6904b759ce2","modified":1546638756698},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532915604992709.png","hash":"241d350dddfcfab371709f247a6804d801daa8c0","modified":1546636680411},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532915758521488.png","hash":"455bf1fd311996c854304c54b483f0feb24480db","modified":1546636680412},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532916156887043.png","hash":"8c2633a1d845c88c1229437120f0e682379fb30f","modified":1546636680413},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532916442904085.png","hash":"42506053cfd87bb179e8f95aeb82339c20270a23","modified":1546636680413},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532917059786660.png","hash":"577449d0ec126d99bae134260f27ea47dfb1b5d9","modified":1546636680415},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923101657518.png","hash":"a40d3f697ac71c4b38c11e5208646641ae71f41a","modified":1546636680415},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923218881106.png","hash":"61bcd4fecb827895442c7ff5b4459252e1405ce4","modified":1546636680416},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923227946554.png","hash":"c7239f1c7c3b7ae52efad0413d2312158ea6c536","modified":1546636680417},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923483491728.png","hash":"b11a17a80f6b1681678ce69d42f168dad96619d1","modified":1546636680417},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923530769371.png","hash":"8c85192d65fd4bc2bd816a74917cbce2f6cba2e6","modified":1546636680417},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923545926922.png","hash":"55e8b036eb6de39e2135a3ca8f55a00b0e3b94ba","modified":1546636680417},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923602504982.png","hash":"7bb62b7fe06c0ac155b78a31fc7b9aef3de82cf1","modified":1546636680417},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934683798263.png","hash":"63eace0e70efa0ed6958b61d8dc7cfcff4dd09ac","modified":1546636680422},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934694227911.png","hash":"fe9dbfc335d9273119197477955fbc6bcd98ae51","modified":1546636680422},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934705170371.png","hash":"d7399fe810bc737cb2e53afb0fb45ad53d933561","modified":1546636680422},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934716787931.png","hash":"e70086a7e8b91119e4dda8826140ba022f1678cf","modified":1546636680422},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934896111896.png","hash":"d1485ed678f8832aae3fbf69505e774ea0c2480f","modified":1546636680422},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532935348576038.png","hash":"061b983cb116911220c4e0323a877c0fe9e42fa8","modified":1546636680422},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532935692930444.png","hash":"8b4e662cb3b7207b9e6b58a63f19a6d4e9cf34c9","modified":1546636680422},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532935843642498.png","hash":"bf68ce868b5f7c54997445a7f5cd0be978940838","modified":1546636680422},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532936322407591.png","hash":"02bb8f00050aa628f39013584d547129c2cb45e0","modified":1546636680422},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1533021882431708.png","hash":"46d08481c5baae4c49fc15c24a4d5f4d3eaadfb9","modified":1546636680428},{"_id":"themes/landscape-plus/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1546882152656},{"_id":"themes/landscape-plus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1546882152657},{"_id":"themes/landscape-plus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1546882152657},{"_id":"themes/landscape-plus/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1546882152658},{"_id":"themes/landscape-plus/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1546882152658},{"_id":"themes/landscape-plus/.git/hooks/pre-push.sample","hash":"503c3d2cd9066c2329ae84309c03a4c274f6d90e","modified":1546882152659},{"_id":"themes/landscape-plus/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1546882152659},{"_id":"themes/landscape-plus/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1546882152660},{"_id":"themes/landscape-plus/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1546882152661},{"_id":"themes/landscape-plus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1546882152661},{"_id":"themes/landscape-plus/.git/logs/HEAD","hash":"f3bd4255792d5779f3d4497e8d33e6197ed23914","modified":1546882157149},{"_id":"themes/landscape-plus/layout/_partial/after-footer.ejs","hash":"999505b46330ff068bbae49aea4700e0bca57e88","modified":1546882157154},{"_id":"themes/landscape-plus/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1546882157154},{"_id":"themes/landscape-plus/layout/_partial/archive.ejs","hash":"ff1e925ab5f512a89a7adb2c337f4bd021982154","modified":1546882157154},{"_id":"themes/landscape-plus/layout/_partial/article.ejs","hash":"2116236daed16cb9f97855ee93b4bc580249d7d2","modified":1546882157154},{"_id":"themes/landscape-plus/layout/_partial/footer.ejs","hash":"46d36b67fdb672c3d308c0ba3574811cbba5bbc6","modified":1546882157154},{"_id":"themes/landscape-plus/layout/_partial/google-analytics.ejs","hash":"78823298e9e47d8e6556fc2bb4598fc2814f2d52","modified":1546882157154},{"_id":"themes/landscape-plus/layout/_partial/head.ejs","hash":"b37dfc4cae60ff4900aa53b3cf2e07bba12441de","modified":1546882157154},{"_id":"themes/landscape-plus/layout/_partial/header.ejs","hash":"e9bd1af5969f641611251076b13d07002065b2aa","modified":1546882157154},{"_id":"themes/landscape-plus/layout/_partial/mathjax.ejs","hash":"204ed307e7b7cedb6d598b9ee14769b8d41180ca","modified":1546882157154},{"_id":"themes/landscape-plus/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1546882157154},{"_id":"themes/landscape-plus/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1546882157155},{"_id":"themes/landscape-plus/layout/_partial/totop.ejs","hash":"aa3a3eadf31d9b3e4d3081cd3ca61860e55ef553","modified":1546882157155},{"_id":"themes/landscape-plus/layout/_widget/archive.ejs","hash":"bbb86beab343e08e689a372ddb60bfa782e93bc4","modified":1546882157155},{"_id":"themes/landscape-plus/layout/_widget/category.ejs","hash":"ae96217d072f637925c907f5f467450083863f50","modified":1546882157155},{"_id":"themes/landscape-plus/layout/_widget/links.ejs","hash":"ff4eb9afa0b9e5b31c55c6775880452222c57f53","modified":1546882157155},{"_id":"themes/landscape-plus/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1546882157155},{"_id":"themes/landscape-plus/layout/_widget/tag.ejs","hash":"b461390feb5ef82df7aef9677a31d5137c352f61","modified":1546882157155},{"_id":"themes/landscape-plus/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1546882157155},{"_id":"themes/landscape-plus/source/css/_extend.styl","hash":"3f8a9e4e63b7249408ac54559a5f9633d703e132","modified":1546882157157},{"_id":"themes/landscape-plus/source/css/_variables.styl","hash":"5e4e6940979c312b58d2edb88383dd7935c577f7","modified":1546882157157},{"_id":"themes/landscape-plus/source/css/style.styl","hash":"30fdb982f5324d0023f38c28e83238b9518f2756","modified":1546882157163},{"_id":"themes/landscape-plus/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1546882157163},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1546882157163},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1546882157163},{"_id":"themes/landscape-plus/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1546882157164},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1546882157164},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1546882157164},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1546882157164},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1546882157165},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1546882157165},{"_id":"themes/landscape-plus/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1546882157165},{"_id":"themes/landscape-plus/source/js/script.js","hash":"89f3a9ba53e1481a0609cbb62e9530ca339b052d","modified":1546882157165},{"_id":"source/_posts/chapter-2-managing-files-from-the-command-line/1524194156616572.png","hash":"e94324d22f78e10d0ba693b6a9d1dbe3819c5cd3","modified":1546638756187},{"_id":"source/_posts/chapter-4-creatingviewingand-editing-text-files/1524823338808284.png","hash":"32e43fdc488c081e1180e8cf2c9af914cac814a1","modified":1546638756224},{"_id":"source/_posts/chapter-5-managing-local-linux-users-and-groups/1525167668913001.png","hash":"09b2d153238a26af6f7456d75947440f8b9616d8","modified":1546638756246},{"_id":"source/_posts/chatper-13-installing-and-updating-software-packages/1523863565421240.png","hash":"cf1ad22d2e47d3cd42888ff208d7f2c7d6ffc4b8","modified":1546638756337},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526892877639896.png","hash":"0a8b0e326390848c64cf7f063149dded2e73ed81","modified":1546638756468},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526892917350022.png","hash":"cf14492c2a28587b0ad68a5008677f6dbc0e88e0","modified":1546638756468},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ab-e7-ab-a0-e8-bf-9e-e6-8e-a5-e5-88-b0-e7-bd-91-e7-bb-9c-e5-ae-9a-e4-b9-89-e7-9a-84-e7-94-a8-e6-88-b7-e5-92-8c-e7-bb-84/1530842356574303.png","hash":"42d5ec3b9523be358dea7a88e004fac38047b0d7","modified":1546638756553},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ab-e7-ab-a0-e8-bf-9e-e6-8e-a5-e5-88-b0-e7-bd-91-e7-bb-9c-e5-ae-9a-e4-b9-89-e7-9a-84-e7-94-a8-e6-88-b7-e5-92-8c-e7-bb-84/1530861460111883.png","hash":"9538571df80db005133793b04626c05bdb182bf3","modified":1546638756553},{"_id":"source/_posts/rh134-e7-ac-ac-e5-8d-81-e4-ba-94-e7-ab-a0-e7-b3-bb-e7-bb-9f-e7-ae-a1-e7-90-86-e4-ba-8c-e6-80-bb-e5-a4-8d-e4-b9-a0/1539846626591619.png","hash":"e3631ccc30a733f473aac03ed8d130b4b9f01dcf","modified":1546638756657},{"_id":"source/_posts/rh134-e7-ac-ac-e5-8d-81-e4-ba-94-e7-ab-a0-e7-b3-bb-e7-bb-9f-e7-ae-a1-e7-90-86-e4-ba-8c-e6-80-bb-e5-a4-8d-e4-b9-a0/1539847801848346.png","hash":"d5744b278e328e03ed6df4fe8c13c4620f23e112","modified":1546638756657},{"_id":"source/_posts/rh134-e7-ac-ac-e5-8d-81-e4-ba-94-e7-ab-a0-e7-b3-bb-e7-bb-9f-e7-ae-a1-e7-90-86-e4-ba-8c-e6-80-bb-e5-a4-8d-e4-b9-a0/1539848579837356.png","hash":"7394663895b8ec451ced374873345baa0d4d2563","modified":1546638756658},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532914548221728.png","hash":"58534ca337fe3bae8ea6297b1031ab3993ea940d","modified":1546636680408},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532915362809606.png","hash":"8e74c1d34ada60433d3ff336984be44286296711","modified":1546636680411},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526868364153324.png","hash":"71c7b83d28f7977c844a42d7d1b193976956778a","modified":1546638756468},{"_id":"themes/landscape-plus/.git/objects/pack/pack-325c3f711c79fc8aae821bf1317fadb1baab5f52.idx","hash":"1599974bc3fdbe90c1c2470a436b7772b1771c77","modified":1546882157129},{"_id":"themes/landscape-plus/.git/refs/heads/master","hash":"1577bf49971ab7aa396a37216dd4e701e4e2e78d","modified":1546882157149},{"_id":"themes/landscape-plus/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1546882157154},{"_id":"themes/landscape-plus/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1546882157155},{"_id":"themes/landscape-plus/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1546882157155},{"_id":"themes/landscape-plus/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1546882157155},{"_id":"themes/landscape-plus/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1546882157155},{"_id":"themes/landscape-plus/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1546882157155},{"_id":"themes/landscape-plus/source/css/_partial/archive.styl","hash":"19b5af4e0969d93fb757577bd6ff380ef2224eb9","modified":1546882157157},{"_id":"themes/landscape-plus/source/css/_partial/article.styl","hash":"1bd06c119e4b64b85dbc37ba22f5210edf10e0b4","modified":1546882157157},{"_id":"themes/landscape-plus/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1546882157157},{"_id":"themes/landscape-plus/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1546882157157},{"_id":"themes/landscape-plus/source/css/_partial/header.styl","hash":"5fcf0eb261a7a8b7729ed82061cd81fd63c8837c","modified":1546882157157},{"_id":"themes/landscape-plus/source/css/_partial/highlight.styl","hash":"a3c2f696d9477223bd45b49e5f996d7998ae52e5","modified":1546882157157},{"_id":"themes/landscape-plus/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1546882157157},{"_id":"themes/landscape-plus/source/css/_partial/sidebar-aside.styl","hash":"c9ea5b3956b73418dc8b1572e32eb65dc68ca0e5","modified":1546882157157},{"_id":"themes/landscape-plus/source/css/_partial/sidebar-bottom.styl","hash":"bc5487b9a0bfe5f745423331824d3f3637ccd430","modified":1546882157157},{"_id":"themes/landscape-plus/source/css/_partial/sidebar.styl","hash":"b7bdc11effa98c6d88850eff75634e2ea9207c14","modified":1546882157157},{"_id":"themes/landscape-plus/source/css/_partial/totop.styl","hash":"817f36dd591d6beef9d41011ae8490d31d5e2e50","modified":1546882157157},{"_id":"themes/landscape-plus/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1546882157157},{"_id":"themes/landscape-plus/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1546882157157},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1546882157158},{"_id":"themes/landscape-plus/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1546882157164},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1546882157164},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1546882157164},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1546882157164},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1546882157164},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1546882157164},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1546882157162},{"_id":"themes/landscape-plus/source/css/fonts/FontAwesome.otf","hash":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1546882157158},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1546882157161},{"_id":"themes/landscape-plus/.git/logs/refs/heads/master","hash":"f3bd4255792d5779f3d4497e8d33e6197ed23914","modified":1546882157149},{"_id":"themes/landscape-plus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1546882157148},{"_id":"source/_posts/chapter-15-using-virtualized-system/1524011869875353.png","hash":"69a94a5b433d896b3713f7279a95e8773df40be6","modified":1546638756147},{"_id":"source/_posts/wp-content/uploads/2018/04/Alan-Walker-Fade-mp3-image-150x150.jpg","hash":"40ff9a306b3ecb40c3725f070f9cdb2790ae5477","modified":1523434252000},{"_id":"source/_posts/wp-content/uploads/2018/04/Alan-Walker-Fade-mp3-image-300x300.jpg","hash":"f7c85ead641f0d1767780a4238b83652e814b473","modified":1523434252000},{"_id":"source/_posts/wp-content/uploads/2018/04/Alan-Walker-Fade-mp3-image-360x240.jpg","hash":"1a82fac59904d88152a0f89847a04b3399fc1c56","modified":1523434252000},{"_id":"source/_posts/wp-content/uploads/2018/04/Alan-Walker-Fade-mp3-image.jpg","hash":"752db156eace09252908f31f3739e63135be4d45","modified":1523434252000},{"_id":"source/_posts/wp-content/uploads/2018/04/1145989.png","hash":"22226543d820d718a61101034d001a06835fef11","modified":1523424620000},{"_id":"source/_posts/wp-content/uploads/2018/04/1145989-150x150.png","hash":"cceb1d8e67dd98edd3749de5637d50e80299a8cc","modified":1523424620000},{"_id":"source/_posts/wp-content/uploads/2018/04/1145989-256x240.png","hash":"4df09363bc937e4cc7cb0cdf895823a90976393a","modified":1523424620000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-1145989-1-192x192.png","hash":"8b14418e1b51d08152ccd5e9b0e4ef7f62899fe6","modified":1523424638000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-1145989-1-270x270.png","hash":"397310a238d0609e935505c69ffdf846a24553ed","modified":1523424638000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-1145989-1-300x300.png","hash":"69525a131d8b145b5bb3a9272c855a3b5d798936","modified":1523424638000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-1145989-1-32x32.png","hash":"0af6bb5e0969d45a6aa89bba03b156930a6dd707","modified":1523424638000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-1145989-1-360x240.png","hash":"26495a0dc142596aba7e3a52ee1ae3ea806d4b3a","modified":1523424638000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-1145989-1.png","hash":"b06d563e711320b4800264168e99410307ad517a","modified":1523424638000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-1145989-150x150.png","hash":"cceb1d8e67dd98edd3749de5637d50e80299a8cc","modified":1523424629000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-1145989-256x240.png","hash":"4df09363bc937e4cc7cb0cdf895823a90976393a","modified":1523424629000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-1145989.png","hash":"d418c55da6f5720f00e2a17d28d9f9f83b82ff22","modified":1523424629000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head-1-150x150.jpg","hash":"b9f2b2d32dcc2a2f3fa13638a470b32961abf390","modified":1523424427000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head-1-300x225.jpg","hash":"2712a9f163648282480e1b72be7996d5071493d7","modified":1523424427000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head-1-360x240.jpg","hash":"796adf48837f7c45380f9f929306f4b48e857f19","modified":1523424427000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head-1.jpg","hash":"e0b427b910ee8202792397f5b568a87efa63ca4d","modified":1523424427000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head-150x150.jpg","hash":"68b1125afb650433462df95bd16b7cbe382812a6","modified":1523424397000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head-180x180.jpg","hash":"5bbbb6175fd5e34c4a52ae4ed847f40ad7d67a85","modified":1523424397000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head-192x192.jpg","hash":"dea87c15d1ae710d502f248559b69a7c4814b4e3","modified":1523424397000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head-270x270.jpg","hash":"695e4eef52b13ee7338c9515f715ba1ad8f91eda","modified":1523424397000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head-300x300.jpg","hash":"b60e039e2de9bf467593ab9a1f48a0c55e25b375","modified":1523424397000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head-32x32.jpg","hash":"328ffc58705c22c4eeca1586a9c3b9d8d09b8963","modified":1523424397000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head-360x240.jpg","hash":"79eb393404a108752d98172c660a1509ecdbbde3","modified":1523424397000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head.jpg","hash":"18bf534837de66a4eb0341d91c3b0686d245dcb4","modified":1523424397000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head1-1-150x150.jpg","hash":"8c6436cad5d16847d2f8cfe19928e3e9f4c97804","modified":1523424493000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head1-1-300x271.jpg","hash":"82da1af50e086f20454cbf75ddc9048aa1982c28","modified":1523424493000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head1-1-360x240.jpg","hash":"16627a50ca35ff346a3e0e947f01e1306806408f","modified":1523424493000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head1-1-768x693.jpg","hash":"c486ede33412bc7e2bd12a7b3960256bd2081d53","modified":1523424493000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head1-1.jpg","hash":"b4dcd3ec9077b8b712bfd19f50e47131939f3207","modified":1523424493000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head1-150x150.jpg","hash":"917f583b71bc3b31cf84d69f5d2b6310729ca12e","modified":1523424462000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head1-180x180.jpg","hash":"d6fa7bafc8a48f7a11ec59ac01d1ff5a3ced6f2a","modified":1523424462000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head1-192x192.jpg","hash":"76895c7ff4aa0036476492bb9684546a4b2344c2","modified":1523424462000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head1-2-150x150.jpg","hash":"6893a38175bb2b5ef9909d4869889b7585b3612c","modified":1523424753000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head1-2-300x300.jpg","hash":"2e9c7fa511d252fa7f2473f2af32fc5ab6c29348","modified":1523424753000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head1-2-360x240.jpg","hash":"93019963210acd0e226b4615a7b709679048d04f","modified":1523424753000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head1-2-768x768.jpg","hash":"78af9b5899a87bd23d60976a06af80bfb3072031","modified":1523424753000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head1-300x300.jpg","hash":"1ffc24a11b752581a08b57c02ad4ed33d2d9a152","modified":1523424462000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head1-32x32.jpg","hash":"5f94d41524025544388fb38047ff8c6e95e07a8a","modified":1523424462000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head1-360x240.jpg","hash":"cac276728cbc162b265c70331368742b646e0edf","modified":1523424462000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head1.jpg","hash":"2aeaaf1cc800d7be6e37e70041bc21e7907c8adb","modified":1523424462000},{"_id":"source/_posts/wp-content/uploads/2018/04/h2-150x150.jpg","hash":"7719d5c5a4303aaa1113fc896bb75a82c86bb4ca","modified":1523426136000},{"_id":"source/_posts/wp-content/uploads/2018/04/h2-300x170.jpg","hash":"3e627eb8a188ade917f13bf90875fe382cfcf734","modified":1523426136000},{"_id":"source/_posts/wp-content/uploads/2018/04/h2-360x240.jpg","hash":"1d5718b5f9efd4ade07e736a1774945ad4d1718b","modified":1523426136000},{"_id":"source/_posts/wp-content/uploads/2018/04/h2-768x435.jpg","hash":"be51165623c26312bec37f8e10df173d1bfd9c45","modified":1523426136000},{"_id":"source/_posts/wp-content/uploads/2018/04/h2.jpg","hash":"079429c006bcb1e710bac546d81907c2beffe82d","modified":1523426136000},{"_id":"source/_posts/wp-content/uploads/2018/04/h3-150x150.jpg","hash":"c7292547bba142fe719049a4c5bf3c7b99d13659","modified":1523426136000},{"_id":"source/_posts/wp-content/uploads/2018/04/h3-300x106.jpg","hash":"bc71ffb5203e1c285367e6eb3faf4c7afa4309aa","modified":1523426137000},{"_id":"source/_posts/wp-content/uploads/2018/04/h3-360x240.jpg","hash":"f6cff2ff2f49cece63748fecc4e5891be8fcc5fb","modified":1523426137000},{"_id":"source/_posts/wp-content/uploads/2018/04/h3-768x271.jpg","hash":"8e816db07c395dc57b3325dc593bd19565389ccb","modified":1523426137000},{"_id":"source/_posts/wp-content/uploads/2018/04/h3.jpg","hash":"964f19d29ccc6dc35cb044eeeb84fdf71c1dddb1","modified":1523426136000},{"_id":"source/_posts/wp-content/uploads/2018/04/rhel-10-1-150x141.png","hash":"7745061b1f70d68d80a1bbf055ee6a9d12662c0a","modified":1523426851000},{"_id":"source/_posts/wp-content/uploads/2018/04/rhel-10-1-300x62.png","hash":"73cb342d7329bdc09daf9a6d9df921b11cfadfcc","modified":1523426851000},{"_id":"source/_posts/wp-content/uploads/2018/04/rhel-10-1-360x141.png","hash":"04cab440002f722d73aec5e7a74c42d9602a6a54","modified":1523426851000},{"_id":"source/_posts/wp-content/uploads/2018/04/rhel-10-1.png","hash":"80daee855bae2bf6690eecc6dd017cef03785e3a","modified":1523426851000},{"_id":"source/_posts/wp-content/uploads/2018/04/rhel-10-2-150x150.png","hash":"a5e4679d106df410a03c8683d6b7035a0803ce0b","modified":1523426852000},{"_id":"source/_posts/wp-content/uploads/2018/04/rhel-10-2-300x146.png","hash":"17607493c69f0b4ee36500cbf596159fd68aac36","modified":1523426852000},{"_id":"source/_posts/wp-content/uploads/2018/04/rhel-10-2-360x240.png","hash":"c7d3ca094bd18d13d018edc973eaf637c5e097c2","modified":1523426852000},{"_id":"source/_posts/wp-content/uploads/2018/04/rhel-10-2.png","hash":"b81a00b45bc0d276ec7622d5fb5b7ad8005a030e","modified":1523426852000},{"_id":"source/_posts/wp-content/uploads/2018/07/aa-1024x273.jpg","hash":"ceff69d1c9530ca84755eb564f94385bb9d33157","modified":1531356053000},{"_id":"source/_posts/wp-content/uploads/2018/07/aa-150x150.jpg","hash":"53525b33e5acddc1a83561677c97898801f4d87c","modified":1531356053000},{"_id":"source/_posts/wp-content/uploads/2018/07/aa-300x80.jpg","hash":"952659a2afadfd7c5e6970da6f0c80d55816b103","modified":1531356053000},{"_id":"source/_posts/wp-content/uploads/2018/07/aa-360x240.jpg","hash":"5e1f47fa7c2b4b7dbe6742cf89d66c1ab09e6747","modified":1531356053000},{"_id":"source/_posts/wp-content/uploads/2018/07/aa-768x205.jpg","hash":"b0a68a41c151f50558acb0c713719c73d7b8f6f5","modified":1531356053000},{"_id":"source/_posts/wp-content/uploads/2018/07/bb31a12f5d3b4d713cc606aefb808472-150x150.jpg","hash":"163dd0bd34a8f16543c51852d44404768364dea7","modified":1531355797000},{"_id":"source/_posts/wp-content/uploads/2018/07/bb31a12f5d3b4d713cc606aefb808472-300x169.jpg","hash":"47757c76ea4e73c3c0cb1ce24a81775c59f5f7bf","modified":1531355797000},{"_id":"source/_posts/wp-content/uploads/2018/07/bb31a12f5d3b4d713cc606aefb808472-360x240.jpg","hash":"0a01730fda140e2c4e9f518c3e4c41123fc64ce7","modified":1531355797000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery1-150x150.jpg","hash":"d313817d6a542aed98a018319dca9fcc1879dc38","modified":1539251557000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery1-293x300.jpg","hash":"5887ed17ddd53520e530a55bc5e4f793452add90","modified":1539251557000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery1.jpg","hash":"4e7b4f5cb3b7b9e3fbd0aed44e7e9b05c217bb44","modified":1539251557000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery10-150x150.jpg","hash":"158d48c676fead6961aa1f86673650d1abde4920","modified":1539251560000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery10-293x300.jpg","hash":"5bc81e34084024d6698a8dd38cf30369befdedab","modified":1539251560000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery10.jpg","hash":"91a8f2df59bb1380ff1678e4bce274f7a96bc1a2","modified":1539251560000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery11-150x150.jpg","hash":"5ad3287bcd92f87aee9b6753b263c7632ca04d36","modified":1539251560000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery11-293x300.jpg","hash":"c6946bb692c8581fca89dd62ca0d8a025301eb90","modified":1539251560000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery11.jpg","hash":"8d711cc38772be892ef635437aa3f0b4504b4ff7","modified":1539251560000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery12-150x150.jpg","hash":"b99409d7190d2bd5452737ab833a4d366b76de88","modified":1539251560000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery12-293x300.jpg","hash":"7ec0b8d2fa6db154859908dcc79681dd2b098477","modified":1539251560000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery12.jpg","hash":"553caaa369a83d6fc1655e9bb420821f56558a98","modified":1539251560000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery2-150x150.jpg","hash":"7f3954d70e3d07e331905767e55245f168d7dda2","modified":1539251558000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery2-293x300.jpg","hash":"0f0cce2c9350487a9402e4984ad1836d3c8f30fc","modified":1539251558000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery2.jpg","hash":"ad8a03ede6befbe98e4fee3342540399bbb9ea8e","modified":1539251558000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery3-150x150.jpg","hash":"136f0137a20ec00d399bcbd966867c3398e3e28b","modified":1539251558000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery3-293x300.jpg","hash":"b1db03e822c5ef53a3f982729bfca12717287e06","modified":1539251558000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery3.jpg","hash":"eacdfbea45326d0fa550229bc1f37b6c98c50736","modified":1539251558000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery4-150x150.jpg","hash":"8fa7fdd31d1c8920bdb3a228a57bbcc8b24c4e75","modified":1539251559000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery4.jpg","hash":"c11db548da70acf43cb10e9accd45f1dd24add0a","modified":1539251559000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery5-150x150.jpg","hash":"ea575cbd8f0a4a70b7b622c1cb03e1f4448fb808","modified":1539251559000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery5-293x300.jpg","hash":"9931d71cc2a6815b157e0462a675d166307754e6","modified":1539251559000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery5.jpg","hash":"7fac097ff5b882c0955c337316a17e49e2fcaf11","modified":1539251559000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-1145989-1-150x150.png","hash":"43444556047da64758e4bac60f4d522dfd5b20f2","modified":1523424638000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery6-150x150.jpg","hash":"b767f38bacd92efabea7ea6168c9f8193df1783a","modified":1539251559000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-1145989-1-180x180.png","hash":"e05251ec0396eb31593f84195e6db043f085b1e4","modified":1523424638000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery6-293x300.jpg","hash":"389951f6ec72dac27b0eb995867653d0d6c6b12e","modified":1539251559000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery6.jpg","hash":"92b777c22af3e4d1ba572e1cb049e71099f9e9f8","modified":1539251559000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery7-150x150.jpg","hash":"fa13ac49917c035ec04e5487d6b378e69789ca20","modified":1539251560000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery7.jpg","hash":"42c7fa067e67d1b5ac8ae6e397763c89a04cdf80","modified":1539251560000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery7-293x300.jpg","hash":"a1bde003fd36252099fe53529b96be107abe844c","modified":1539251560000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery9-150x150.jpg","hash":"4f2267b02522fd56393ff42071577231a6717335","modified":1539251560000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery9-293x300.jpg","hash":"dbb4aaf597b5667af598495f1282e3ec4fb51176","modified":1539251560000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery9.jpg","hash":"6a43e70100079405c4eb077b4b6d5a1160c6007c","modified":1539251560000},{"_id":"source/_posts/wp-content/uploads/2018/10/logo-150x48.png","hash":"57e84011668bbeb8685aaac336196f824aaa72c5","modified":1539251560000},{"_id":"source/_posts/wp-content/uploads/2018/10/logo.png","hash":"2e7cd97ba1f651a6088bc8e5c92d87b823072e94","modified":1539251560000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103131704-120x90.png","hash":"0104b501625bb4b814f7d4af5c0b2d7c3b93b8cb","modified":1546492636000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103131704-300x113.png","hash":"b30b243333f69ca8b6c94fb1b76c988beb76ba2b","modified":1546492635000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103131704-300x296.png","hash":"84e49243fcf7e3c43f6c70d1bed849f81d6a6fcd","modified":1546492636000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103131704-540x296.png","hash":"85fcc0b2f80eeef4b753751a984435f291a14e63","modified":1546492636000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103131704.png","hash":"5389efd2dd2b7e731fd6fc77e81f90888d156c30","modified":1546492635000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103143253-120x90.png","hash":"ce826efdf79a7bd9485dc896d935e3e380ab7434","modified":1546497186000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery8-150x150.jpg","hash":"b09b79045d8eba446e089febb16a67db4fb26ba8","modified":1539251560000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery8-293x300.jpg","hash":"160246c945632302b2c7cb1968ee4322c75530b0","modified":1539251560000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103143253-150x150.png","hash":"078cdefc5d5904626a30991f003aff0bafcb90d0","modified":1546497186000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery8.jpg","hash":"c7036d72e714f31f5520a09fd2fd4167a24e4f30","modified":1539251560000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103143253-300x100.png","hash":"e09cb34483bdf57742e2c8357d892d7f257d4344","modified":1546497186000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103143253-300x246.png","hash":"b7f7575969405ca967a189cba3b62bb4fa0fcf66","modified":1546497186000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103143253-540x246.png","hash":"508e1bf74dcd9a97a03a7f80b3cf1e94707c3c4a","modified":1546497186000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103143253.png","hash":"ee68453313d583eb7279063bbd804a1f7715819a","modified":1546497186000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103143415-120x90.png","hash":"f1f5dbd50ab96bfa47b60ebb6218878c0837ab5a","modified":1546497267000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103143415-150x150.png","hash":"6a7b7b67273dad5a44a8b25c4e3b00ebf99b8c6b","modified":1546497267000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103143415-300x105.png","hash":"26ea562fa71636d8a42c5c932c7b39fd7959d3ef","modified":1546497267000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103143415-300x257.png","hash":"2747c9043d091b00746295e2ec9366441d663730","modified":1546497267000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103143415-540x257.png","hash":"171ee64bf908e2adedb807d4bcf415b71fc4e104","modified":1546497267000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103143415.png","hash":"b03baf12ea9a5c929fcbb675345de865bb2714e3","modified":1546497267000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103143559-120x90.png","hash":"5e8fd26bbc873a447b84cc6b0d228d058764a5a7","modified":1546497372000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103143559-150x150.png","hash":"f55537cab3eedd800b593933ab2eb23ea1926398","modified":1546497372000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103143559-300x137.png","hash":"0be98f14b73a8000c05239e0445fbd4d5c6fa0ae","modified":1546497372000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103143559-300x300.png","hash":"891f0c7f27eb4a09f951f260e34fef3d8d74cb12","modified":1546497372000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103143559.png","hash":"b02e4ade17018fadc1e0c6703051da2c110cc83e","modified":1546497372000},{"_id":"source/_posts/wp-content/uploads/2019/01/image-1-120x65.png","hash":"77aa2635abae0a65aa9b45682327bcb8e2e1ee71","modified":1546498021000},{"_id":"source/_posts/wp-content/uploads/2019/01/image-1-150x65.png","hash":"3a71e7da4146f2b19485b488b8847dcbe818923a","modified":1546498021000},{"_id":"source/_posts/wp-content/uploads/2019/01/image-1-300x34.png","hash":"d2e79f47c37cb0c98db5921a95d32b634cd5b5e4","modified":1546498021000},{"_id":"source/_posts/wp-content/uploads/2019/01/image-1-300x65.png","hash":"339915e6b9dd9673add885cca7188a3549f14ddd","modified":1546498021000},{"_id":"source/_posts/wp-content/uploads/2019/01/image-1-540x65.png","hash":"610bd843fefd971ddeac00b767548c76853f66ab","modified":1546498021000},{"_id":"source/_posts/wp-content/uploads/2019/01/image-1.png","hash":"ab8c63bfc819b153e8c4445bb8cdfe6a63850538","modified":1546498021000},{"_id":"source/_posts/wp-content/uploads/2019/01/image-120x90.png","hash":"b36c436e0c0ef669e686fe4f1041e145f6389b55","modified":1546497998000},{"_id":"source/_posts/wp-content/uploads/2019/01/image-150x150.png","hash":"a46386ba8c4a069236f1d671f7d76c089a63e769","modified":1546497998000},{"_id":"source/_posts/wp-content/uploads/2019/01/image-300x248.png","hash":"309a8b52aed1c32b69865146b6a197b0aa3c5b27","modified":1546497998000},{"_id":"source/_posts/wp-content/uploads/2019/01/image-300x98.png","hash":"1bcbf653ca4c45d7b3a69e7166e31006246b2de6","modified":1546497998000},{"_id":"source/_posts/wp-content/uploads/2019/01/image-540x248.png","hash":"a7cb01b0f8f72bd8376c50c668f893015bd6336d","modified":1546497998000},{"_id":"source/_posts/wp-content/uploads/2019/01/image.png","hash":"b7ef7b1a60974db602ee9ad75e9581487423f476","modified":1546497998000},{"_id":"source/_posts/wp-content/uploads/image/20180411/1523427823840955.png","hash":"80daee855bae2bf6690eecc6dd017cef03785e3a","modified":1523427823000},{"_id":"source/_posts/wp-content/uploads/image/20180411/1523429897556805.png","hash":"b81a00b45bc0d276ec7622d5fb5b7ad8005a030e","modified":1523429897000},{"_id":"source/_posts/wp-content/uploads/image/20180411/1523433401385622.png","hash":"b7b195933aa5a67987a120c1061ad71ff56c7d11","modified":1523433401000},{"_id":"source/_posts/wp-content/uploads/image/20180412/1523538628751935.png","hash":"d12f84c53836e8408c369a99cfa1b3e963973c52","modified":1523538628000},{"_id":"source/_posts/wp-content/uploads/image/20180412/1523539690389911.png","hash":"d12f84c53836e8408c369a99cfa1b3e963973c52","modified":1523539690000},{"_id":"source/_posts/wp-content/uploads/image/20180413/1523583168668639.png","hash":"44e97b731ddc2736daef687894cd548b3ee32d74","modified":1523583168000},{"_id":"source/_posts/wp-content/uploads/image/20180417/1523949081549738.png","hash":"c1b979c1bae7e48fab3ad9455472b21e5871b73b","modified":1523949081000},{"_id":"source/_posts/wp-content/uploads/image/20180417/1523949252627674.png","hash":"cf6ee90c349bc31428d7dbe4c60699e7e32660c5","modified":1523949252000},{"_id":"source/_posts/wp-content/uploads/image/20180417/1523949375605017.png","hash":"72aa976e30961f0aca2a8fe607e0372a1bda7d9e","modified":1523949375000},{"_id":"source/_posts/wp-content/uploads/image/20180417/1523949409259777.png","hash":"a6a852bfaba27f497981510508e367c317225956","modified":1523949409000},{"_id":"source/_posts/wp-content/uploads/image/20180419/1524099481495901.png","hash":"c557a2cb17b3ca16ce6a69b1d86e8e800248c6ac","modified":1524099481000},{"_id":"source/_posts/wp-content/uploads/image/20180427/1524818144803644.png","hash":"297f97fb44dbfea284065e446ab62040535549fa","modified":1524818144000},{"_id":"source/_posts/wp-content/uploads/image/20180427/1524818166553035.png","hash":"297f97fb44dbfea284065e446ab62040535549fa","modified":1524818166000},{"_id":"source/_posts/wp-content/uploads/image/20180427/1524818174855912.png","hash":"6c414f40cecf25e3c2d95c26758b4389ad6b5c00","modified":1524818174000},{"_id":"source/_posts/wp-content/uploads/image/20180427/1524818180473442.png","hash":"6aadf478752af9b562d24ecd1e2bd5ebe5e0a70f","modified":1524818180000},{"_id":"source/_posts/wp-content/uploads/image/20180427/1524818191991552.png","hash":"bd25751a19dac0d51777a2c72851845e54ffc5e7","modified":1524818191000},{"_id":"source/_posts/wp-content/uploads/image/20180427/1524818205308304.png","hash":"927e8825cbfd3314ecb5b078c50c0ae718d469ad","modified":1524818205000},{"_id":"source/_posts/wp-content/uploads/image/20180427/1524818219547743.png","hash":"17bb22af1295d81e97dcf1f63b6f7c52a0dc0ddb","modified":1524818219000},{"_id":"source/_posts/wp-content/uploads/image/20180427/1524823368317604.png","hash":"d6cd998f99f295fc427c4dd9883f83ad6ab86dce","modified":1524823368000},{"_id":"source/_posts/wp-content/uploads/image/20180427/1524823380758403.png","hash":"7221677260a78f90bca3f8a268592a7ee7dced14","modified":1524823380000},{"_id":"source/_posts/wp-content/uploads/image/20180427/1524823773815913.png","hash":"30db4860e174ad1bbe964acdcf636fe2fbc4da89","modified":1524823773000},{"_id":"source/_posts/wp-content/uploads/image/20180501/1525166687554964.png","hash":"003ae4780ac45bc90f0749ece8e7f4e6fbb4912f","modified":1525166687000},{"_id":"source/_posts/wp-content/uploads/image/20180503/1525317731282237.png","hash":"d524c70660571b50b321bd0fb946ace7c634a343","modified":1525317731000},{"_id":"source/_posts/wp-content/uploads/image/20180504/1525422261580488.png","hash":"9a940fc3624722b7cea0ae37d35d89ef37098705","modified":1525422261000},{"_id":"source/_posts/wp-content/uploads/image/20180504/1525422300234129.png","hash":"3c2577c6e9b2ec15389d2cbf8f7dd4a3e2bdb277","modified":1525422300000},{"_id":"source/_posts/wp-content/uploads/image/20180504/1525422328135998.png","hash":"ad9a9947b338a26536f17b577de50a48fdd76a81","modified":1525422328000},{"_id":"source/_posts/wp-content/uploads/image/20180504/1525422388734744.png","hash":"bd7446d7971e5f6ddadc481d10f8b703437f3c8f","modified":1525422388000},{"_id":"source/_posts/wp-content/uploads/image/20180508/1525771056304457.png","hash":"4074806f0409ce0f3fe5f7a99791aae411eac17c","modified":1525771056000},{"_id":"source/_posts/wp-content/uploads/image/20180513/1526219726507971.png","hash":"09b7f85f42d7aeef1f1154aab47ea6904b759ce2","modified":1526219726000},{"_id":"source/_posts/wp-content/uploads/image/20180514/1526262567734231.png","hash":"cf8a38ebd826a17f5158ebbb0e477fc99fe8a07f","modified":1526262567000},{"_id":"source/_posts/wp-content/uploads/image/20180514/1526266421343400.png","hash":"20e0a918e484ec11cc6f6f3e30a214d6c8256f59","modified":1526266421000},{"_id":"source/_posts/wp-content/uploads/image/20180514/1526266519714961.png","hash":"5b4dc880277ff1fa58083eb5f27ac722d875829d","modified":1526266519000},{"_id":"source/_posts/wp-content/uploads/image/20180514/1526266607507718.png","hash":"9c4af0b35c0bb02463a66541d00a05cc63c1adb8","modified":1526266607000},{"_id":"source/_posts/wp-content/uploads/image/20180514/1526266653786433.png","hash":"13ce55293168d2ad0b6877608e85f8af3478ed38","modified":1526266653000},{"_id":"source/_posts/wp-content/uploads/image/20180514/1526266685205928.png","hash":"b1f400a043307868b81dd7c2a517d85c2523973d","modified":1526266685000},{"_id":"source/_posts/wp-content/uploads/image/20180514/1526266722562134.png","hash":"9324b8ea6ed480db18e4be33ff1845dc5aeb8c98","modified":1526266722000},{"_id":"source/_posts/wp-content/uploads/image/20180514/1526266750818667.png","hash":"23dff337087145adfeea2572b9578ba7004120a1","modified":1526266750000},{"_id":"source/_posts/wp-content/uploads/image/20180514/1526286600143773.png","hash":"5eea634befefdf6062616ba62daa806744707011","modified":1526286600000},{"_id":"source/_posts/wp-content/uploads/image/20180514/1526286628954630.png","hash":"17f6bc4db6b4898eefabf28ea88e4002db641238","modified":1526286628000},{"_id":"source/_posts/wp-content/uploads/image/20180514/1526288457208748.png","hash":"ecdd88a86c4ba02358635983ffcc34b607ff2b92","modified":1526288457000},{"_id":"source/_posts/wp-content/uploads/image/20180514/1526288467671948.png","hash":"a14c706cdb601d217ce7cf6c579f87a3bf99ade9","modified":1526288467000},{"_id":"source/_posts/wp-content/uploads/image/20180515/1526347461483244.png","hash":"1202bd7c0e9572195f9660156b6d0c29fb3069c9","modified":1526347461000},{"_id":"source/_posts/wp-content/uploads/image/20180515/1526347790707759.png","hash":"0b927936e167b29a820e09f3c5aca6ee63263f07","modified":1526347790000},{"_id":"source/_posts/wp-content/uploads/image/20180515/1526347988908292.png","hash":"28bc8241cc05eda1b8c6a2ffa1616ec2b8cd28ec","modified":1526347988000},{"_id":"source/_posts/wp-content/uploads/image/20180518/1526607016211181.png","hash":"0702d3e5f6e4bd8ca34b1358fac26f6065a5a0e5","modified":1526607016000},{"_id":"source/_posts/wp-content/uploads/image/20180521/1526867174600183.png","hash":"a673ace31105b3d1beb6a2ebc4ea972fc85e7c45","modified":1526867174000},{"_id":"source/_posts/wp-content/uploads/image/20180521/1526868454617069.png","hash":"8b67e22808ed20ef19be2757782f413562e47be6","modified":1526868454000},{"_id":"source/_posts/wp-content/uploads/image/20180521/1526868484423514.png","hash":"8358faa05c785bb7116748b72a6683afe1b29378","modified":1526868484000},{"_id":"source/_posts/wp-content/uploads/image/20180515/1526347563548361.png","hash":"b29d9093021a70ddb1044679aea60953184e7904","modified":1526347563000},{"_id":"source/_posts/wp-content/uploads/image/20180514/1526288787444516.png","hash":"b680e660a28a09e8b014750b09b6efc68e1ea970","modified":1526288787000},{"_id":"source/_posts/wp-content/uploads/image/20180521/1526892834926496.png","hash":"8e622688322784f97a039008620a64f0f481eac0","modified":1526892834000},{"_id":"source/_posts/wp-content/uploads/image/20180514/1526288669879354.png","hash":"4e7522375f2e90fbee8f021b8f7d9faaa3b66790","modified":1526288669000},{"_id":"source/_posts/wp-content/uploads/image/20180521/1526892939342968.png","hash":"1489350c67acb3fa1d2d208bb0e514fa195966de","modified":1526892939000},{"_id":"source/_posts/wp-content/uploads/image/20180514/1526286586512721.png","hash":"3da12277a344086f2a10dadca70443718da45bed","modified":1526286586000},{"_id":"source/_posts/wp-content/uploads/image/20180514/1526285537683356.png","hash":"3c921ca5ab63f1f7cf16dd8cc4d427de13abcb14","modified":1526285537000},{"_id":"source/_posts/wp-content/uploads/image/20180711/1531276497330227.png","hash":"eb546289b3f12fef3582afaf9e31908ac21f9cc2","modified":1531276497000},{"_id":"source/_posts/wp-content/uploads/image/20180711/1531276592930306.png","hash":"46c65770fd0c514ea403f94140304cfc3c8d59f4","modified":1531276592000},{"_id":"source/_posts/wp-content/uploads/image/20180711/1531276722303229.png","hash":"2a74ea971905afb6189f3b87e72c273bc7b98063","modified":1531276722000},{"_id":"source/_posts/wp-content/uploads/image/20180711/1531276804698343.png","hash":"1cb32979096462378a78b996b2df40547e2b14d9","modified":1531276804000},{"_id":"source/_posts/wp-content/uploads/image/20180521/1526872601651338.png","hash":"56aff5158ad65998a7b957d55aa5c9fc340af131","modified":1526872601000},{"_id":"source/_posts/wp-content/uploads/image/20180711/1531276914317730.png","hash":"c5b87e26c3d31b4350c8a7e7ed460c36dc995f02","modified":1531276914000},{"_id":"source/_posts/wp-content/uploads/image/20180711/1531276934798991.png","hash":"7adb3fd01abb003fc06f0246741b0b193781b171","modified":1531276934000},{"_id":"source/_posts/wp-content/uploads/image/20180711/1531276954842354.png","hash":"e250314493c22d1c8f02592890441937fde56266","modified":1531276954000},{"_id":"source/_posts/wp-content/uploads/image/20180711/1531276971677806.png","hash":"3333c806aa1ed8c3431d7ee6066647db37cd0259","modified":1531276971000},{"_id":"source/_posts/wp-content/uploads/image/20180711/1531276989994678.png","hash":"2525f09274847f74a315441be3530aa4051d77dc","modified":1531276989000},{"_id":"source/_posts/wp-content/uploads/image/20180711/1531277008909144.png","hash":"89811a134b4a5195e1d6d253020c05446313bb44","modified":1531277008000},{"_id":"source/_posts/wp-content/uploads/image/20180711/1531296248918343.png","hash":"e28976a9f973d748dfd9131a0105a03dd65e048e","modified":1531296248000},{"_id":"source/_posts/wp-content/uploads/image/20180711/1531296936475764.png","hash":"940f0ace945b293504124eef51ef4fa67dfc6d09","modified":1531296936000},{"_id":"source/_posts/wp-content/uploads/image/20180711/1531297276363185.png","hash":"0c409cf6b950bd592f6e1590ceaff2c975f51f90","modified":1531297276000},{"_id":"source/_posts/wp-content/uploads/image/20180711/1531276896690206.png","hash":"e3361cae73f4dccb35a58898e0ac2562437f0424","modified":1531276896000},{"_id":"source/_posts/wp-content/uploads/image/20180521/1526871627344712.png","hash":"d211332bafff7b0493c76800bd96d7b675e102f9","modified":1526871627000},{"_id":"source/_posts/wp-content/uploads/image/20180711/1531297827908462.png","hash":"80b33b100368d64808c88ccbb73f5d549697ea24","modified":1531297827000},{"_id":"source/_posts/wp-content/uploads/image/20180712/1531359731927864.png","hash":"dd5c4fe5cf1198314373d98babdf28ee04df0ac0","modified":1531359731000},{"_id":"source/_posts/wp-content/uploads/image/20180712/1531359756116868.png","hash":"30eec57f4766b085c0e127e34c118da626d1f1da","modified":1531359756000},{"_id":"source/_posts/wp-content/uploads/image/20180712/1531359953672134.png","hash":"792b819dead4b66af3a1e4a6d1d8e9f21cf45152","modified":1531359953000},{"_id":"source/_posts/wp-content/uploads/image/20180712/1531359975493820.png","hash":"50c7ae44998b7a31a20cc00923f4710c0d3cd5d0","modified":1531359975000},{"_id":"source/_posts/wp-content/uploads/image/20180514/1526286552326310.png","hash":"655cd0260b62d3a69e08b1d215105f439eb10e9a","modified":1526286552000},{"_id":"source/_posts/wp-content/uploads/image/20180711/1531297457952475.png","hash":"2576890b9e1d56c678aad3b35c26ec1f857621ae","modified":1531297457000},{"_id":"source/_posts/wp-content/uploads/image/20180712/1531365704503638.png","hash":"5a9ff65c6bbf681609cd71bccf4a51ae8621f36e","modified":1531365704000},{"_id":"source/_posts/wp-content/uploads/image/20180711/1531297796103870.png","hash":"66fd778be43a8470ebd60bf98106818cb74e2bd6","modified":1531297796000},{"_id":"source/_posts/wp-content/uploads/image/20180712/1531360808313305.png","hash":"0a18189fd4b764dac9ef8fa85188f4339f60c79f","modified":1531360808000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532916156887043.png","hash":"8c2633a1d845c88c1229437120f0e682379fb30f","modified":1532916156000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532916442904085.png","hash":"42506053cfd87bb179e8f95aeb82339c20270a23","modified":1532916442000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532916993540093.png","hash":"2d7a8ed68baa2e8353b1f019db1b38f317d4fa39","modified":1532916993000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532917059786660.png","hash":"577449d0ec126d99bae134260f27ea47dfb1b5d9","modified":1532917059000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532923101657518.png","hash":"a40d3f697ac71c4b38c11e5208646641ae71f41a","modified":1532923101000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532923218881106.png","hash":"61bcd4fecb827895442c7ff5b4459252e1405ce4","modified":1532923218000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532923227946554.png","hash":"c7239f1c7c3b7ae52efad0413d2312158ea6c536","modified":1532923227000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532923483491728.png","hash":"b11a17a80f6b1681678ce69d42f168dad96619d1","modified":1532923483000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532923530769371.png","hash":"8c85192d65fd4bc2bd816a74917cbce2f6cba2e6","modified":1532923530000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532915758521488.png","hash":"455bf1fd311996c854304c54b483f0feb24480db","modified":1532915758000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532915604992709.png","hash":"241d350dddfcfab371709f247a6804d801daa8c0","modified":1532915604000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532923545926922.png","hash":"55e8b036eb6de39e2135a3ca8f55a00b0e3b94ba","modified":1532923545000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532934694227911.png","hash":"fe9dbfc335d9273119197477955fbc6bcd98ae51","modified":1532934694000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532934705170371.png","hash":"d7399fe810bc737cb2e53afb0fb45ad53d933561","modified":1532934705000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532934716787931.png","hash":"e70086a7e8b91119e4dda8826140ba022f1678cf","modified":1532934716000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532934896111896.png","hash":"d1485ed678f8832aae3fbf69505e774ea0c2480f","modified":1532934896000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532935348576038.png","hash":"061b983cb116911220c4e0323a877c0fe9e42fa8","modified":1532935348000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532935692930444.png","hash":"8b4e662cb3b7207b9e6b58a63f19a6d4e9cf34c9","modified":1532935692000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532935843642498.png","hash":"bf68ce868b5f7c54997445a7f5cd0be978940838","modified":1532935843000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532936322407591.png","hash":"02bb8f00050aa628f39013584d547129c2cb45e0","modified":1532936322000},{"_id":"source/_posts/wp-content/uploads/image/20180731/1533021882431708.png","hash":"46d08481c5baae4c49fc15c24a4d5f4d3eaadfb9","modified":1533021882000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532923602504982.png","hash":"7bb62b7fe06c0ac155b78a31fc7b9aef3de82cf1","modified":1532923602000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532934683798263.png","hash":"63eace0e70efa0ed6958b61d8dc7cfcff4dd09ac","modified":1532934683000},{"_id":"source/_posts/wp-content/uploads/image/20180712/1531360582174595.png","hash":"42fc25b489a81f7d9eb76be6ac34e72a18befe0e","modified":1531360582000},{"_id":"source/_posts/wp-content/uploads/image/20181018/1539846556259346.png","hash":"e3631ccc30a733f473aac03ed8d130b4b9f01dcf","modified":1539846556000},{"_id":"source/_posts/wp-content/uploads/image/20181018/1539846626591619.png","hash":"e3631ccc30a733f473aac03ed8d130b4b9f01dcf","modified":1539846626000},{"_id":"themes/landscape-plus/.git/logs/refs/remotes/origin/HEAD","hash":"f3bd4255792d5779f3d4497e8d33e6197ed23914","modified":1546882157148},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head1-2.jpg","hash":"1bf58702bade6e61a1b57710825bc6d151cea057","modified":1523424753000},{"_id":"source/_posts/wp-content/uploads/2018/04/cropped-head1-270x270.jpg","hash":"69fc92c008a3ac91367971d2cd93193184952121","modified":1523424462000},{"_id":"source/_posts/wp-content/uploads/2018/04/h2-1024x580.jpg","hash":"8b24824c30c7dee3ffd06311284dabb19048b713","modified":1523426136000},{"_id":"source/_posts/wp-content/uploads/2018/07/aa.jpg","hash":"c84a3e56800048ae26362ffe9f3488ceb55ddeab","modified":1531356053000},{"_id":"source/_posts/wp-content/uploads/2018/07/bb31a12f5d3b4d713cc606aefb808472-1024x576.jpg","hash":"7f8a6ee6044c9c5b397dbf913d0961ca4b227770","modified":1531355797000},{"_id":"source/_posts/wp-content/uploads/2018/07/bb31a12f5d3b4d713cc606aefb808472-768x432.jpg","hash":"c8917b461cb83a8039fa5858c2946a574b62604d","modified":1531355797000},{"_id":"source/_posts/wp-content/uploads/2018/10/gallery4-293x300.jpg","hash":"b7bdd602e855e86c9f4be44f62dd7cf8d6e200d2","modified":1539251559000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103131704-150x150.png","hash":"1fd4038068e707952331d2d520355fd66ea84c60","modified":1546492635000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103131704-768x289.png","hash":"6a0d570e72919855b9dd46490098ccb690ff9497","modified":1546492635000},{"_id":"source/_posts/wp-content/uploads/2019/01/QQ截图20190103143559-540x304.png","hash":"2733b28507872703ab55dc3ff531803f30af13ae","modified":1546497372000},{"_id":"source/_posts/wp-content/uploads/image/20180416/1523863565421240.png","hash":"cf1ad22d2e47d3cd42888ff208d7f2c7d6ffc4b8","modified":1523863565000},{"_id":"source/_posts/wp-content/uploads/image/20180419/1524099475937672.png","hash":"8522e10147c421b12ee86d4fa7056cd741963000","modified":1524099475000},{"_id":"source/_posts/wp-content/uploads/image/20180420/1524192754865329.png","hash":"e94324d22f78e10d0ba693b6a9d1dbe3819c5cd3","modified":1524192754000},{"_id":"source/_posts/wp-content/uploads/image/20180420/1524193992683275.png","hash":"e94324d22f78e10d0ba693b6a9d1dbe3819c5cd3","modified":1524193992000},{"_id":"source/_posts/wp-content/uploads/image/20180420/1524194156616572.png","hash":"e94324d22f78e10d0ba693b6a9d1dbe3819c5cd3","modified":1524194156000},{"_id":"source/_posts/wp-content/uploads/image/20180427/1524823338808284.png","hash":"32e43fdc488c081e1180e8cf2c9af914cac814a1","modified":1524823338000},{"_id":"source/_posts/wp-content/uploads/image/20180501/1525167668913001.png","hash":"09b2d153238a26af6f7456d75947440f8b9616d8","modified":1525167668000},{"_id":"source/_posts/wp-content/uploads/image/20180521/1526873523851944.png","hash":"bb7c11394fee4846164ae36963887e2511bc8fba","modified":1526873523000},{"_id":"source/_posts/wp-content/uploads/image/20180521/1526892877639896.png","hash":"0a8b0e326390848c64cf7f063149dded2e73ed81","modified":1526892877000},{"_id":"source/_posts/wp-content/uploads/image/20180521/1526892917350022.png","hash":"cf14492c2a28587b0ad68a5008677f6dbc0e88e0","modified":1526892917000},{"_id":"source/_posts/wp-content/uploads/image/20180706/1530842356574303.png","hash":"42d5ec3b9523be358dea7a88e004fac38047b0d7","modified":1530842356000},{"_id":"source/_posts/wp-content/uploads/image/20180706/1530861460111883.png","hash":"9538571df80db005133793b04626c05bdb182bf3","modified":1530861460000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532914436370766.png","hash":"30e41b0746daddb2de7b23ff39dafb05f5c91326","modified":1532914436000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532914548221728.png","hash":"58534ca337fe3bae8ea6297b1031ab3993ea940d","modified":1532914548000},{"_id":"source/_posts/wp-content/uploads/image/20180730/1532915362809606.png","hash":"8e74c1d34ada60433d3ff336984be44286296711","modified":1532915362000},{"_id":"source/_posts/wp-content/uploads/image/20181018/1539847801848346.png","hash":"d5744b278e328e03ed6df4fe8c13c4620f23e112","modified":1539847801000},{"_id":"source/_posts/wp-content/uploads/image/20181018/1539848579837356.png","hash":"7394663895b8ec451ced374873345baa0d4d2563","modified":1539848579000},{"_id":"themes/landscape-plus/source/css/images/banner.jpg","hash":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1546882157163},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1546882157160},{"_id":"source/_posts/wp-content/uploads/image/20180521/1526868364153324.png","hash":"71c7b83d28f7977c844a42d7d1b193976956778a","modified":1526868364000},{"_id":"source/_posts/wp-content/uploads/image/20180419/1524099486323931.png","hash":"a62bf12966ddc2e9cc580681bfd99116b5bf0dbc","modified":1524099486000},{"_id":"source/_posts/wp-content/uploads/2018/07/bb31a12f5d3b4d713cc606aefb808472.jpg","hash":"21bbab19e621e8c0ee8f6638f834575673d526bf","modified":1531355796000},{"_id":"source/_posts/wp-content/uploads/image/20180418/1524011869875353.png","hash":"69a94a5b433d896b3713f7279a95e8773df40be6","modified":1524011869000},{"_id":"source/_posts/wp-content/uploads/image/20180419/1524105499824161.png","hash":"75e09facf5c62b180f3d7b9a6c543ccf76c37389","modified":1524105499000},{"_id":"source/_posts/wp-content/uploads/image/20180420/1524211580464092.png","hash":"bdf244203dbd749282dde5954abee937333d945c","modified":1524211580000},{"_id":"themes/landscape-plus/.git/objects/pack/pack-325c3f711c79fc8aae821bf1317fadb1baab5f52.pack","hash":"1aa226f6086eb1be33c7146b97a52b90f0b0dbd8","modified":1546882157128},{"_id":"source/_posts/wp-content/uploads/2018/04/Alan-Walker-Fade.mp3","hash":"064e79d112efa857cc160e23def7b5aaddb60539","modified":1523434252000},{"_id":"source/_posts/wp-content.tar.gz","hash":"d1249756bcdda6f5bd80dfc7d5f4ae5faad33876","modified":1546594232000},{"_id":"public/2018/04/20/rh124-recored/index.html","hash":"c8a6e23030b4e5685f81da7f14859bb7280df022","modified":1546882227299},{"_id":"public/2018/04/11/chapter-8-systemctl/index.html","hash":"8e1473ebb24139256bb80a6a9745c9026b40763f","modified":1546882227299},{"_id":"public/2018/04/11/chapter-9-openssh/index.html","hash":"57e7c3e0869cbde89effcde647b9f3f73e1125bd","modified":1546882227300},{"_id":"public/archives/page/3/index.html","hash":"73e7ab954a2b2c8815543c7e0dffc25e539c8075","modified":1546882227300},{"_id":"public/archives/page/4/index.html","hash":"7e6745462d5af1d7a6748ad856ce395037e53508","modified":1546882227300},{"_id":"public/archives/2018/page/3/index.html","hash":"bff3a9f9618b9ceaf015b68b3085167420c90377","modified":1546882227300},{"_id":"public/archives/2018/page/4/index.html","hash":"bed04bc71ddc2e299115d0cc51c1e13beb2c66e2","modified":1546882227300},{"_id":"public/archives/2018/04/index.html","hash":"81d443f8a7e15ee3e5f5d769ed139c6c991c1d10","modified":1546882227300},{"_id":"public/archives/2018/04/page/2/index.html","hash":"3e1f78887865c60db3094da90ab636d8956049a2","modified":1546882227300},{"_id":"public/archives/2018/05/index.html","hash":"05777c50d03b00b29f05a23bedceb6ca1212cb58","modified":1546882227300},{"_id":"public/archives/2018/07/index.html","hash":"21ec3056fa8d87ba4bcf3fb11005988a4c92bb9f","modified":1546882227301},{"_id":"public/archives/2018/09/index.html","hash":"e44589359e0ed7feaa0f6ab13d7acd35c3ec5961","modified":1546882227301},{"_id":"public/archives/2018/10/index.html","hash":"5173740cc1d9b7bb5db3b2d944d5c64f422ec288","modified":1546882227301},{"_id":"public/categories/RHEL124/index.html","hash":"0dd839872f6fc66c0405356e45ad04d286a35ba8","modified":1546882227301},{"_id":"public/categories/RHEL124/page/2/index.html","hash":"3b7ac41e2bb36e12c07de8f94c5acf66eebb7721","modified":1546882227301},{"_id":"public/categories/未分类/index.html","hash":"05a8b9891324ec77b30dc3d458b1133db2fe31b6","modified":1546882227301},{"_id":"public/categories/RHEL134/page/2/index.html","hash":"5e8da0d24f2092112962b4f065554e187240aaf5","modified":1546882227301},{"_id":"public/tags/pxe/index.html","hash":"328dae3f1e2bb872d93dc39c68903d5259cf73ba","modified":1546882227301},{"_id":"public/tags/samba/index.html","hash":"89595e39d3939ca07ae8a37d69c46715a9302804","modified":1546882227301},{"_id":"public/2018/10/18/rh134-e7-ac-ac-e5-8d-81-e4-ba-94-e7-ab-a0-e7-b3-bb-e7-bb-9f-e7-ae-a1-e7-90-86-e4-ba-8c-e6-80-bb-e5-a4-8d-e4-b9-a0/index.html","hash":"03971d1d171f4a5964eac8859c4456b62d56c0fb","modified":1546882227301},{"_id":"public/2018/10/17/rh134-e7-ac-ac-e5-8d-81-e5-9b-9b-e7-ab-a0-e4-bd-bf-e7-94-a8-firewalld-e9-99-90-e5-88-b6-e7-bd-91-e7-bb-9c-e9-80-9a-e4-bf-a1/index.html","hash":"97ce5faf71e1ca3ff75a29dc2ec0dce42b268b45","modified":1546882227301},{"_id":"public/2018/10/16/rh134-e7-ac-ac-e5-8d-81-e4-b8-89-e7-ab-a0-e5-af-b9-red-hat-enterprise-linux-e5-90-af-e5-8a-a8-e8-bf-87-e7-a8-8b-e8-bf-9b-e7-a8-8b-e6-8e-a7-e5-88-b6-e6-95-85-e9-9a-9c-e6-8e-92-e9-99-a4/index.html","hash":"5e4b4550ccb0b628202fda81b3ffa748fb2537c7","modified":1546882227302},{"_id":"public/2018/10/12/autofs-e8-87-aa-e5-8a-a8-e6-8c-82-e8-bd-bd/index.html","hash":"2859b86783f8af9350129f5ffe1a629fe3f889bb","modified":1546882227302},{"_id":"public/2018/10/11/rh134-e7-ac-ac-e5-8d-81-e4-ba-8c-e7-ab-a0-e8-ae-bf-e9-97-ae-e5-85-b7-e6-9c-89smb-e7-9a-84-e7-bd-91-e7-bb-9c-e5-ad-98-e5-82-a8/index.html","hash":"89d5cbaeadffa1cb1fb50e0b91424e866a1a5a4b","modified":1546882227302},{"_id":"public/2018/09/10/rh134-e7-ac-ac-e5-8d-81-e4-b8-80-e7-ab-a0-e8-ae-bf-e9-97-ae-e5-85-b7-e6-9c-89-e7-bd-91-e7-bb-9c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f-ef-bc-88nfs-ef-bc-89-e7-9a-84-e7-bd-91-e7-bb-9c-e5-ad-98-e5-82-a8/index.html","hash":"1d862cf5c4de9257efadd9b23129fdce188f1cd9","modified":1546882227302},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/index.html","hash":"957b2f98f2ad78fa8d14ed96f3d1426a99379e1f","modified":1546882227302},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/index.html","hash":"0b80c4172476a87c611e83a66bc063ca74bd9161","modified":1546882227302},{"_id":"public/2018/07/06/rh134-e7-ac-ac-e5-85-ab-e7-ab-a0-e8-bf-9e-e6-8e-a5-e5-88-b0-e7-bd-91-e7-bb-9c-e5-ae-9a-e4-b9-89-e7-9a-84-e7-94-a8-e6-88-b7-e5-92-8c-e7-bb-84/index.html","hash":"5217c7991bb2d6f529a50c39dc8ce68f09e36081","modified":1546882227302},{"_id":"public/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/index.html","hash":"4aceb9c5e9a0456d9df92454a397452dbde65bfe","modified":1546882227302},{"_id":"public/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/index.html","hash":"57172788ddefee54fd5a503d61a1bf974bee07f1","modified":1546882227302},{"_id":"public/2018/05/14/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/index.html","hash":"d3f113fd4fc28a2f34a57c22da9f31ef91b7555b","modified":1546882227302},{"_id":"public/2018/05/14/rh134-e7-ac-ac-e5-9b-9b-e7-ab-a0-e8-ae-a1-e5-88-92-e5-b0-86-e6-9d-a5-e7-9a-84linux-e4-bb-bb-e5-8a-a1/index.html","hash":"b724bab0dbb0432236c452b5de4b1bc4f8b14e89","modified":1546882227302},{"_id":"public/2018/05/08/rh134-e7-ac-ac-e4-b8-89-e7-ab-a0-e4-bd-bf-e7-94-a8vim-e5-88-9b-e5-bb-ba-e5-92-8c-e7-bc-96-e8-be-91-e6-96-87-e6-9c-ac-e6-96-87-e4-bb-b6/index.html","hash":"cedab984a4843b1c6d73a56e2a0c773d7b0a0d5e","modified":1546882227303},{"_id":"public/2018/05/06/e7-ac-ac-e4-ba-8c-e7-ab-a0-e9-80-9a-e8-bf-87grep-e4-bd-bf-e7-94-a8-e6-ad-a3-e5-88-99-e8-a1-a8-e8-be-be-e5-bc-8f/index.html","hash":"d6344393b0a068bff926e76bad7d49e3e2e9a576","modified":1546882227303},{"_id":"public/2018/05/05/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85/index.html","hash":"0ae66511b906f5b2b888f8868eb32914765f68b7","modified":1546882227303},{"_id":"public/2018/05/03/chapter-6-controlling-access-to-files-with-linux-file-system-permissions/index.html","hash":"32d82634748436c5b62bea31596515d77724b36e","modified":1546882227303},{"_id":"public/2018/04/30/chapter-5-managing-local-linux-users-and-groups/index.html","hash":"11b6cb9372d6587ae300dcbf3605762b6963d12e","modified":1546882227304},{"_id":"public/2018/04/27/chapter-4-creatingviewingand-editing-text-files/index.html","hash":"241bf57a090c62c548a1c2a19e986c154db58193","modified":1546882227304},{"_id":"public/2018/04/26/chapter-3-getting-help-in-red-hat-enterprise-linux/index.html","hash":"22a66064b45b3d844848c442edef1bf3a62fca3c","modified":1546882227305},{"_id":"public/2018/04/24/iptables-e7-ab-af-e5-8f-a3-e8-bd-ac-e5-8f-91/index.html","hash":"07b88a906c9ce42e4ea34172c9e22beab35e03a7","modified":1546882227305},{"_id":"public/2018/04/20/chapter-2-managing-files-from-the-command-line/index.html","hash":"d56c9522a8152071bc15d651a9222b8d1026d6f9","modified":1546882227305},{"_id":"public/2018/04/20/chapter1-accessing-the-command-line/index.html","hash":"28aed5ec33d2e7163e80475a9066c684e4fa93af","modified":1546882227305},{"_id":"public/2018/04/19/chapter-7-monitoring-and-managing-linux-processes/index.html","hash":"9f31b642cff4a05c141137a66767126c50762536","modified":1546882227305},{"_id":"public/2018/04/18/chapter-15-using-virtualized-system/index.html","hash":"010a66713e2b5ef3473df085f55ca2a76d958fc9","modified":1546882227305},{"_id":"public/2018/04/17/chapter-14-accessing-linux-file-system/index.html","hash":"d3a966a77d53141446090fd59236402e12a1d6b0","modified":1546882227305},{"_id":"public/2018/04/17/chatper-13-installing-and-updating-software-packages/index.html","hash":"1170ad8cf13cf68b8ded50a266656a97e6226c57","modified":1546882227305},{"_id":"public/2018/04/12/chapter-12-archiving-and-copying-files/index.html","hash":"8365babcff1813990bf8c55abf494a5f9ffb1d21","modified":1546882227305},{"_id":"public/2018/04/11/chapter-11-manager-network/index.html","hash":"7f824220fbfab02c90908e26f50509d47f9d7935","modified":1546882227305},{"_id":"public/2018/04/11/Chapter-10-Analyzing-and-Storing-Logs/index.html","hash":"3bc43837c524a888035aad5a2712ca1f6756e310","modified":1546882227306},{"_id":"public/archives/index.html","hash":"de48df017519aa5a46627dcf0cbfa15a37be0f5c","modified":1546882227306},{"_id":"public/archives/page/2/index.html","hash":"a00d99dc80f89c4ad8923acd6e2c8b7aa92274e8","modified":1546882227306},{"_id":"public/archives/2018/index.html","hash":"65e7022da67ff0156bc31d699fc8272550d6eba0","modified":1546882227306},{"_id":"public/archives/2018/page/2/index.html","hash":"cb0101f03b6846521692fbbcf7326550cd6f9bc9","modified":1546882227306},{"_id":"public/categories/RHEL134/index.html","hash":"a1bc9f6141a73af72b17e0531d07bc082079d44e","modified":1546882227306},{"_id":"public/index.html","hash":"e1054115a9264d6df8cc0116ef3325e659860946","modified":1546882227306},{"_id":"public/page/2/index.html","hash":"d1c2f76dbac5686992cc68933fb067d5c5605860","modified":1546882227306},{"_id":"public/page/3/index.html","hash":"0b8d31b383de206dc095321c588d079cf82825e6","modified":1546882227306},{"_id":"public/page/4/index.html","hash":"7a96a299c2af659d5780391e484283e149e76512","modified":1546882227306},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1546882227332},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1546882227332},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1546882227332},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1546882227332},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1546882227332},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1546882227332},{"_id":"public/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1546882227332},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1546882227332},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1546882227332},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1546882227332},{"_id":"public/2018/04/12/chapter-12-archiving-and-copying-files/1523583168668639.png","hash":"44e97b731ddc2736daef687894cd548b3ee32d74","modified":1546882227333},{"_id":"public/2018/04/11/chapter-8-systemctl/1523433401385622.png","hash":"b7b195933aa5a67987a120c1061ad71ff56c7d11","modified":1546882227333},{"_id":"public/2018/04/11/Chapter-10-Analyzing-and-Storing-Logs/1523427823840955.png","hash":"80daee855bae2bf6690eecc6dd017cef03785e3a","modified":1546882227333},{"_id":"public/2018/04/11/Chapter-10-Analyzing-and-Storing-Logs/1523429897556805.png","hash":"b81a00b45bc0d276ec7622d5fb5b7ad8005a030e","modified":1546882227333},{"_id":"public/2018/05/05/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85/1525422261580488.png","hash":"9a940fc3624722b7cea0ae37d35d89ef37098705","modified":1546882227333},{"_id":"public/2018/05/05/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85/1525422300234129.png","hash":"3c2577c6e9b2ec15389d2cbf8f7dd4a3e2bdb277","modified":1546882227333},{"_id":"public/2018/05/05/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85/1525422328135998.png","hash":"ad9a9947b338a26536f17b577de50a48fdd76a81","modified":1546882227333},{"_id":"public/2018/05/05/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85/1525422388734744.png","hash":"bd7446d7971e5f6ddadc481d10f8b703437f3c8f","modified":1546882227333},{"_id":"public/2018/05/14/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526262567734231.png","hash":"cf8a38ebd826a17f5158ebbb0e477fc99fe8a07f","modified":1546882227333},{"_id":"public/2018/05/14/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526266653786433.png","hash":"13ce55293168d2ad0b6877608e85f8af3478ed38","modified":1546882227333},{"_id":"public/2018/05/14/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526266685205928.png","hash":"b1f400a043307868b81dd7c2a517d85c2523973d","modified":1546882227334},{"_id":"public/2018/05/14/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526266722562134.png","hash":"9324b8ea6ed480db18e4be33ff1845dc5aeb8c98","modified":1546882227334},{"_id":"public/2018/05/14/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526266750818667.png","hash":"23dff337087145adfeea2572b9578ba7004120a1","modified":1546882227334},{"_id":"public/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524818166553035.png","hash":"297f97fb44dbfea284065e446ab62040535549fa","modified":1546882227334},{"_id":"public/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524818174855912.png","hash":"6c414f40cecf25e3c2d95c26758b4389ad6b5c00","modified":1546882227334},{"_id":"public/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524818180473442.png","hash":"6aadf478752af9b562d24ecd1e2bd5ebe5e0a70f","modified":1546882227334},{"_id":"public/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524818191991552.png","hash":"bd25751a19dac0d51777a2c72851845e54ffc5e7","modified":1546882227334},{"_id":"public/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524818205308304.png","hash":"927e8825cbfd3314ecb5b078c50c0ae718d469ad","modified":1546882227334},{"_id":"public/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524818219547743.png","hash":"17bb22af1295d81e97dcf1f63b6f7c52a0dc0ddb","modified":1546882227334},{"_id":"public/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524823368317604.png","hash":"d6cd998f99f295fc427c4dd9883f83ad6ab86dce","modified":1546882227334},{"_id":"public/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524823380758403.png","hash":"7221677260a78f90bca3f8a268592a7ee7dced14","modified":1546882227334},{"_id":"public/2018/04/17/chapter-14-accessing-linux-file-system/1523949252627674.png","hash":"cf6ee90c349bc31428d7dbe4c60699e7e32660c5","modified":1546882227335},{"_id":"public/2018/04/17/chapter-14-accessing-linux-file-system/1523949409259777.png","hash":"a6a852bfaba27f497981510508e367c317225956","modified":1546882227335},{"_id":"public/2018/04/30/chapter-5-managing-local-linux-users-and-groups/1524823773815913.png","hash":"30db4860e174ad1bbe964acdcf636fe2fbc4da89","modified":1546882227335},{"_id":"public/2018/04/30/chapter-5-managing-local-linux-users-and-groups/1525166687554964.png","hash":"003ae4780ac45bc90f0749ece8e7f4e6fbb4912f","modified":1546882227335},{"_id":"public/2018/10/18/rh134-e7-ac-ac-e5-8d-81-e4-ba-94-e7-ab-a0-e7-b3-bb-e7-bb-9f-e7-ae-a1-e7-90-86-e4-ba-8c-e6-80-bb-e5-a4-8d-e4-b9-a0/1539846626591619.png","hash":"e3631ccc30a733f473aac03ed8d130b4b9f01dcf","modified":1546882227335},{"_id":"public/2019/01/07/RH254-控制服务和守护进程/QQ截图20190103131704.png","hash":"5389efd2dd2b7e731fd6fc77e81f90888d156c30","modified":1546882227335},{"_id":"public/2019/01/07/RH254-控制服务和守护进程/QQ截图20190103143253.png","hash":"ee68453313d583eb7279063bbd804a1f7715819a","modified":1546882227335},{"_id":"public/2019/01/07/RH254-控制服务和守护进程/QQ截图20190103143415.png","hash":"b03baf12ea9a5c929fcbb675345de865bb2714e3","modified":1546882227335},{"_id":"public/2019/01/07/RH254-控制服务和守护进程/QQ截图20190103143559.png","hash":"b02e4ade17018fadc1e0c6703051da2c110cc83e","modified":1546882227335},{"_id":"public/2019/01/07/RH254-控制服务和守护进程/image-1.png","hash":"ab8c63bfc819b153e8c4445bb8cdfe6a63850538","modified":1546882227335},{"_id":"public/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526607016211181.png","hash":"0702d3e5f6e4bd8ca34b1358fac26f6065a5a0e5","modified":1546882227335},{"_id":"public/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526867174600183.png","hash":"a673ace31105b3d1beb6a2ebc4ea972fc85e7c45","modified":1546882227335},{"_id":"public/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526868454617069.png","hash":"8b67e22808ed20ef19be2757782f413562e47be6","modified":1546882227336},{"_id":"public/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526868484423514.png","hash":"8358faa05c785bb7116748b72a6683afe1b29378","modified":1546882227336},{"_id":"public/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526871627344712.png","hash":"d211332bafff7b0493c76800bd96d7b675e102f9","modified":1546882227336},{"_id":"public/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526872601651338.png","hash":"56aff5158ad65998a7b957d55aa5c9fc340af131","modified":1546882227336},{"_id":"public/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526892834926496.png","hash":"8e622688322784f97a039008620a64f0f481eac0","modified":1546882227336},{"_id":"public/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526892939342968.png","hash":"1489350c67acb3fa1d2d208bb0e514fa195966de","modified":1546882227336},{"_id":"public/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526285537683356.png","hash":"3c921ca5ab63f1f7cf16dd8cc4d427de13abcb14","modified":1546882227336},{"_id":"public/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526286552326310.png","hash":"655cd0260b62d3a69e08b1d215105f439eb10e9a","modified":1546882227336},{"_id":"public/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526286600143773.png","hash":"5eea634befefdf6062616ba62daa806744707011","modified":1546882227336},{"_id":"public/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526286628954630.png","hash":"17f6bc4db6b4898eefabf28ea88e4002db641238","modified":1546882227336},{"_id":"public/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526288457208748.png","hash":"ecdd88a86c4ba02358635983ffcc34b607ff2b92","modified":1546882227337},{"_id":"public/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526288467671948.png","hash":"a14c706cdb601d217ce7cf6c579f87a3bf99ade9","modified":1546882227337},{"_id":"public/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526288669879354.png","hash":"4e7522375f2e90fbee8f021b8f7d9faaa3b66790","modified":1546882227337},{"_id":"public/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526288787444516.png","hash":"b680e660a28a09e8b014750b09b6efc68e1ea970","modified":1546882227337},{"_id":"public/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526347461483244.png","hash":"1202bd7c0e9572195f9660156b6d0c29fb3069c9","modified":1546882227337},{"_id":"public/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526347563548361.png","hash":"b29d9093021a70ddb1044679aea60953184e7904","modified":1546882227337},{"_id":"public/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526347790707759.png","hash":"0b927936e167b29a820e09f3c5aca6ee63263f07","modified":1546882227337},{"_id":"public/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526347988908292.png","hash":"28bc8241cc05eda1b8c6a2ffa1616ec2b8cd28ec","modified":1546882227337},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276497330227.png","hash":"eb546289b3f12fef3582afaf9e31908ac21f9cc2","modified":1546882227337},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276592930306.png","hash":"46c65770fd0c514ea403f94140304cfc3c8d59f4","modified":1546882227337},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276722303229.png","hash":"2a74ea971905afb6189f3b87e72c273bc7b98063","modified":1546882227337},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276804698343.png","hash":"1cb32979096462378a78b996b2df40547e2b14d9","modified":1546882227337},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276896690206.png","hash":"e3361cae73f4dccb35a58898e0ac2562437f0424","modified":1546882227338},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276914317730.png","hash":"c5b87e26c3d31b4350c8a7e7ed460c36dc995f02","modified":1546882227338},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276934798991.png","hash":"7adb3fd01abb003fc06f0246741b0b193781b171","modified":1546882227338},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276954842354.png","hash":"e250314493c22d1c8f02592890441937fde56266","modified":1546882227338},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276971677806.png","hash":"3333c806aa1ed8c3431d7ee6066647db37cd0259","modified":1546882227338},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276989994678.png","hash":"2525f09274847f74a315441be3530aa4051d77dc","modified":1546882227338},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531277008909144.png","hash":"89811a134b4a5195e1d6d253020c05446313bb44","modified":1546882227338},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531296248918343.png","hash":"e28976a9f973d748dfd9131a0105a03dd65e048e","modified":1546882227338},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531296936475764.png","hash":"940f0ace945b293504124eef51ef4fa67dfc6d09","modified":1546882227338},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531297457952475.png","hash":"2576890b9e1d56c678aad3b35c26ec1f857621ae","modified":1546882227338},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531297827908462.png","hash":"80b33b100368d64808c88ccbb73f5d549697ea24","modified":1546882227338},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531359731927864.png","hash":"dd5c4fe5cf1198314373d98babdf28ee04df0ac0","modified":1546882227338},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531359756116868.png","hash":"30eec57f4766b085c0e127e34c118da626d1f1da","modified":1546882227339},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531359953672134.png","hash":"792b819dead4b66af3a1e4a6d1d8e9f21cf45152","modified":1546882227339},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531359975493820.png","hash":"50c7ae44998b7a31a20cc00923f4710c0d3cd5d0","modified":1546882227339},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531360582174595.png","hash":"42fc25b489a81f7d9eb76be6ac34e72a18befe0e","modified":1546882227339},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531360808313305.png","hash":"0a18189fd4b764dac9ef8fa85188f4339f60c79f","modified":1546882227339},{"_id":"public/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531365704503638.png","hash":"5a9ff65c6bbf681609cd71bccf4a51ae8621f36e","modified":1546882227339},{"_id":"public/2018/05/14/rh134-e7-ac-ac-e5-9b-9b-e7-ab-a0-e8-ae-a1-e5-88-92-e5-b0-86-e6-9d-a5-e7-9a-84linux-e4-bb-bb-e5-8a-a1/1525771056304457.png","hash":"4074806f0409ce0f3fe5f7a99791aae411eac17c","modified":1546882227339},{"_id":"public/2018/05/14/rh134-e7-ac-ac-e5-9b-9b-e7-ab-a0-e8-ae-a1-e5-88-92-e5-b0-86-e6-9d-a5-e7-9a-84linux-e4-bb-bb-e5-8a-a1/1526219726507971.png","hash":"09b7f85f42d7aeef1f1154aab47ea6904b759ce2","modified":1546882227339},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532915604992709.png","hash":"241d350dddfcfab371709f247a6804d801daa8c0","modified":1546882227339},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532915758521488.png","hash":"455bf1fd311996c854304c54b483f0feb24480db","modified":1546882227340},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532916156887043.png","hash":"8c2633a1d845c88c1229437120f0e682379fb30f","modified":1546882227340},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532916442904085.png","hash":"42506053cfd87bb179e8f95aeb82339c20270a23","modified":1546882227340},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532917059786660.png","hash":"577449d0ec126d99bae134260f27ea47dfb1b5d9","modified":1546882227340},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923101657518.png","hash":"a40d3f697ac71c4b38c11e5208646641ae71f41a","modified":1546882227340},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923218881106.png","hash":"61bcd4fecb827895442c7ff5b4459252e1405ce4","modified":1546882227340},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923227946554.png","hash":"c7239f1c7c3b7ae52efad0413d2312158ea6c536","modified":1546882227340},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923483491728.png","hash":"b11a17a80f6b1681678ce69d42f168dad96619d1","modified":1546882227340},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923530769371.png","hash":"8c85192d65fd4bc2bd816a74917cbce2f6cba2e6","modified":1546882227340},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923545926922.png","hash":"55e8b036eb6de39e2135a3ca8f55a00b0e3b94ba","modified":1546882227340},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923602504982.png","hash":"7bb62b7fe06c0ac155b78a31fc7b9aef3de82cf1","modified":1546882227341},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934683798263.png","hash":"63eace0e70efa0ed6958b61d8dc7cfcff4dd09ac","modified":1546882227341},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934694227911.png","hash":"fe9dbfc335d9273119197477955fbc6bcd98ae51","modified":1546882227341},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934705170371.png","hash":"d7399fe810bc737cb2e53afb0fb45ad53d933561","modified":1546882227341},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934716787931.png","hash":"e70086a7e8b91119e4dda8826140ba022f1678cf","modified":1546882227341},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934896111896.png","hash":"d1485ed678f8832aae3fbf69505e774ea0c2480f","modified":1546882227341},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532935348576038.png","hash":"061b983cb116911220c4e0323a877c0fe9e42fa8","modified":1546882227341},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532935692930444.png","hash":"8b4e662cb3b7207b9e6b58a63f19a6d4e9cf34c9","modified":1546882227341},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532935843642498.png","hash":"bf68ce868b5f7c54997445a7f5cd0be978940838","modified":1546882227342},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532936322407591.png","hash":"02bb8f00050aa628f39013584d547129c2cb45e0","modified":1546882227342},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1533021882431708.png","hash":"46d08481c5baae4c49fc15c24a4d5f4d3eaadfb9","modified":1546882227342},{"_id":"public/css/fonts/FontAwesome.otf","hash":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1546882227882},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1546882227883},{"_id":"public/2018/04/20/chapter-2-managing-files-from-the-command-line/1524194156616572.png","hash":"e94324d22f78e10d0ba693b6a9d1dbe3819c5cd3","modified":1546882227883},{"_id":"public/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524823338808284.png","hash":"32e43fdc488c081e1180e8cf2c9af914cac814a1","modified":1546882227883},{"_id":"public/2018/04/17/chatper-13-installing-and-updating-software-packages/1523863565421240.png","hash":"cf1ad22d2e47d3cd42888ff208d7f2c7d6ffc4b8","modified":1546882227883},{"_id":"public/2018/07/06/rh134-e7-ac-ac-e5-85-ab-e7-ab-a0-e8-bf-9e-e6-8e-a5-e5-88-b0-e7-bd-91-e7-bb-9c-e5-ae-9a-e4-b9-89-e7-9a-84-e7-94-a8-e6-88-b7-e5-92-8c-e7-bb-84/1530842356574303.png","hash":"42d5ec3b9523be358dea7a88e004fac38047b0d7","modified":1546882227883},{"_id":"public/2018/07/06/rh134-e7-ac-ac-e5-85-ab-e7-ab-a0-e8-bf-9e-e6-8e-a5-e5-88-b0-e7-bd-91-e7-bb-9c-e5-ae-9a-e4-b9-89-e7-9a-84-e7-94-a8-e6-88-b7-e5-92-8c-e7-bb-84/1530861460111883.png","hash":"9538571df80db005133793b04626c05bdb182bf3","modified":1546882227884},{"_id":"public/2018/04/30/chapter-5-managing-local-linux-users-and-groups/1525167668913001.png","hash":"09b2d153238a26af6f7456d75947440f8b9616d8","modified":1546882227884},{"_id":"public/2018/10/18/rh134-e7-ac-ac-e5-8d-81-e4-ba-94-e7-ab-a0-e7-b3-bb-e7-bb-9f-e7-ae-a1-e7-90-86-e4-ba-8c-e6-80-bb-e5-a4-8d-e4-b9-a0/1539847801848346.png","hash":"d5744b278e328e03ed6df4fe8c13c4620f23e112","modified":1546882227884},{"_id":"public/2018/10/18/rh134-e7-ac-ac-e5-8d-81-e4-ba-94-e7-ab-a0-e7-b3-bb-e7-bb-9f-e7-ae-a1-e7-90-86-e4-ba-8c-e6-80-bb-e5-a4-8d-e4-b9-a0/1539848579837356.png","hash":"7394663895b8ec451ced374873345baa0d4d2563","modified":1546882227884},{"_id":"public/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526892877639896.png","hash":"0a8b0e326390848c64cf7f063149dded2e73ed81","modified":1546882227884},{"_id":"public/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526892917350022.png","hash":"cf14492c2a28587b0ad68a5008677f6dbc0e88e0","modified":1546882227884},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532914548221728.png","hash":"58534ca337fe3bae8ea6297b1031ab3993ea940d","modified":1546882227884},{"_id":"public/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532915362809606.png","hash":"8e74c1d34ada60433d3ff336984be44286296711","modified":1546882227885},{"_id":"public/css/bdshare.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546882227895},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1546882227895},{"_id":"public/js/script.js","hash":"89f3a9ba53e1481a0609cbb62e9530ca339b052d","modified":1546882227895},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1546882227895},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1546882227896},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1546882227896},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1546882227896},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1546882227896},{"_id":"public/css/style.css","hash":"9934f2f78b179fa7f9bfc978e5ea70df8454a07d","modified":1546882227896},{"_id":"public/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526868364153324.png","hash":"71c7b83d28f7977c844a42d7d1b193976956778a","modified":1546882227896},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1546882227917},{"_id":"public/css/images/banner.jpg","hash":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1546882227917},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1546882227925},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1546882227946},{"_id":"public/2018/04/18/chapter-15-using-virtualized-system/1524011869875353.png","hash":"69a94a5b433d896b3713f7279a95e8773df40be6","modified":1546882227956}],"Category":[{"name":"RHEL124","_id":"cjqmlqhyj0002lxkj0cyofy4b"},{"name":"未分类","_id":"cjqmlqhyr0006lxkjxabqfawl"},{"name":"RHEL134","_id":"cjqmlqhzd000rlxkjy06tywhz"},{"name":"RHEL245","_id":"cjqmlqi1o001clxkj7zvpto88"}],"Data":[],"Page":[],"Post":[{"title":"Chapter 10.Analyzing and Storing Logs","url":"118.html","id":"118","date":"2018-04-11T06:59:33.000Z","_content":"\n![rhel-10-1.png](1523427823840955.png)\n\n|*.info;mail.none;authpriv.none;cron.none|常规日志|messages|\n| :-- | :-- |:--|\n|authpriv.*|认证日志|secure|\n|mail.*|邮件日志|maillog|\n|cron.*|任务计划|cron|\n|local7.*|启动信息|boot.log|\n|uucp,news.crit|新闻类错误|spooler|\n|kern.*|内核类|/dev/console|\n\n可以在/etc/rsyslog.conf里配置额外的日志文件，类型如下表，例如\n```bash\n*.debug   /var/log/messages.debug\n```\n![rhel-10-2.png](1523429897556805.png)\n\n  \n\n#### journalctl\n\n/run/log/journal   默认位置重启后会清除\n\n如果/var/log/journal 存在，则journalctl 会将日志存放过来，存储大小一般不超过当前文件系统的10%，所以要保留15%的空间\n\n/var/log/journal 文件的权限\n```bash\n\nchown root:systtemd-journal /var/log/journal\n\nchmod 2755 /var/log/journal\n\ndrwxr-sr-x. 2 root systemd-journal 6 4月   9 16:33 journal/\n\n```\n##### 重启journald服务：\n\n```bash\n\nkillall -USR1 systemd-journald\n\n#或\nreboot\n\n```\n ==========================================================\n```bash \n\njournalctl -n 5     #显示最后5条\njournalctl -p err     #指定日志的优先级类型\njournalctl -f     #等同于 tail -f\n\n```\n  \n\n###### 指定日志的日期：\n\n```bash\n\njournalctl --since today  \njournalctl --since 15:30:00  --until 15:35:00\njournalctl --since \"2018-04-09 15:30:00\" --until \"2018-04-09 16:00:00\"\n\n```  \n\n查看详情,可是加在其它参数后面或者前面\n\n```bash\n\njournalctl -o verbose\njournalctl   \\_SYSTEMD\\_UNIT=sshd.service   _PID=1182     #查看指定进程或服务的日志\njournalctl --since 15:00:00 \\_SYSTEMD\\_UNIT=sshd.service\n\n```  \n\n ==========================================================\n\n##### rsyslog\n\n```bash\n\n/etc/rsyslog.conf\n\n/etc/rysylog.d/*.conf\n\nman 5 rsyslog.conf\n\nhttp:// /usr/share/doc/rsyslog-*/manual.html\n\n```  \n\n ==========================================================\n\n##### logrotate 日志轮巡\n\n/etc/logrotate.conf\n\n/etc/logrotate.d/*.conf\n\n ==========================================================\n\n##### 标准rsyslog格式\n\nApr  9 14:59:44 client systemd: Starting Session 2 of user root.\n\n发生的日期  主机  产生日志的程序 ：日志内容\n\n ==========================================================\n\n##### logger 程序生成日志记录到文件\n\n```bash\n\nlogger -p local7.notice \"Log entry created on ServerX\" 生产notice 日志\nlogger -p user.debug \"debug message test\"  产生debug 日志\n\n```  \n\n ==========================================================\n\n##### 时间的维护：\n\n```bash\n\ntzselect     #交互式设备时区tz=timezone\ntimedatectl\ntimedatectl  list-timezones\ntimedatectl  set-timezone America/Phoenix\ntimedatectl  set-timezone Asia/Shanghai\ntimedatectl  set-time 9:00:00   #(YYYY-MM-DD hh:mm:ss)\ntimedatectl  set-ntp true/false\n\n```  \n\n ========================================================== \n\n#### Configuring chronyd\n\n/etc/chrony.conf\n\n修改文件中的服务器位置\n\nchronyc souces -v   验证NTP服务器，并显示详情\n\nntpd、ntpq 在Redhat7以前使用，用来管理NTP服务器\n","source":"_posts/Chapter-10-Analyzing-and-Storing-Logs.md","raw":"---\ntitle: Chapter 10.Analyzing and Storing Logs\nurl: 118.html\nid: 118\ncategories:\n  - RHEL124\ndate: 2018-04-11 14:59:33\ntags:\n---\n\n![rhel-10-1.png](1523427823840955.png)\n\n|*.info;mail.none;authpriv.none;cron.none|常规日志|messages|\n| :-- | :-- |:--|\n|authpriv.*|认证日志|secure|\n|mail.*|邮件日志|maillog|\n|cron.*|任务计划|cron|\n|local7.*|启动信息|boot.log|\n|uucp,news.crit|新闻类错误|spooler|\n|kern.*|内核类|/dev/console|\n\n可以在/etc/rsyslog.conf里配置额外的日志文件，类型如下表，例如\n```bash\n*.debug   /var/log/messages.debug\n```\n![rhel-10-2.png](1523429897556805.png)\n\n  \n\n#### journalctl\n\n/run/log/journal   默认位置重启后会清除\n\n如果/var/log/journal 存在，则journalctl 会将日志存放过来，存储大小一般不超过当前文件系统的10%，所以要保留15%的空间\n\n/var/log/journal 文件的权限\n```bash\n\nchown root:systtemd-journal /var/log/journal\n\nchmod 2755 /var/log/journal\n\ndrwxr-sr-x. 2 root systemd-journal 6 4月   9 16:33 journal/\n\n```\n##### 重启journald服务：\n\n```bash\n\nkillall -USR1 systemd-journald\n\n#或\nreboot\n\n```\n ==========================================================\n```bash \n\njournalctl -n 5     #显示最后5条\njournalctl -p err     #指定日志的优先级类型\njournalctl -f     #等同于 tail -f\n\n```\n  \n\n###### 指定日志的日期：\n\n```bash\n\njournalctl --since today  \njournalctl --since 15:30:00  --until 15:35:00\njournalctl --since \"2018-04-09 15:30:00\" --until \"2018-04-09 16:00:00\"\n\n```  \n\n查看详情,可是加在其它参数后面或者前面\n\n```bash\n\njournalctl -o verbose\njournalctl   \\_SYSTEMD\\_UNIT=sshd.service   _PID=1182     #查看指定进程或服务的日志\njournalctl --since 15:00:00 \\_SYSTEMD\\_UNIT=sshd.service\n\n```  \n\n ==========================================================\n\n##### rsyslog\n\n```bash\n\n/etc/rsyslog.conf\n\n/etc/rysylog.d/*.conf\n\nman 5 rsyslog.conf\n\nhttp:// /usr/share/doc/rsyslog-*/manual.html\n\n```  \n\n ==========================================================\n\n##### logrotate 日志轮巡\n\n/etc/logrotate.conf\n\n/etc/logrotate.d/*.conf\n\n ==========================================================\n\n##### 标准rsyslog格式\n\nApr  9 14:59:44 client systemd: Starting Session 2 of user root.\n\n发生的日期  主机  产生日志的程序 ：日志内容\n\n ==========================================================\n\n##### logger 程序生成日志记录到文件\n\n```bash\n\nlogger -p local7.notice \"Log entry created on ServerX\" 生产notice 日志\nlogger -p user.debug \"debug message test\"  产生debug 日志\n\n```  \n\n ==========================================================\n\n##### 时间的维护：\n\n```bash\n\ntzselect     #交互式设备时区tz=timezone\ntimedatectl\ntimedatectl  list-timezones\ntimedatectl  set-timezone America/Phoenix\ntimedatectl  set-timezone Asia/Shanghai\ntimedatectl  set-time 9:00:00   #(YYYY-MM-DD hh:mm:ss)\ntimedatectl  set-ntp true/false\n\n```  \n\n ========================================================== \n\n#### Configuring chronyd\n\n/etc/chrony.conf\n\n修改文件中的服务器位置\n\nchronyc souces -v   验证NTP服务器，并显示详情\n\nntpd、ntpq 在Redhat7以前使用，用来管理NTP服务器\n","slug":"Chapter-10-Analyzing-and-Storing-Logs","published":1,"updated":"2019-01-05T15:30:01.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqhy80000lxkjwomnby1k","content":"<p><img src=\"/2018/04/11/Chapter-10-Analyzing-and-Storing-Logs/1523427823840955.png\" alt=\"rhel-10-1.png\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">*.info;mail.none;authpriv.none;cron.none</th>\n<th style=\"text-align:left\">常规日志</th>\n<th style=\"text-align:left\">messages</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">authpriv.*</td>\n<td style=\"text-align:left\">认证日志</td>\n<td style=\"text-align:left\">secure</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mail.*</td>\n<td style=\"text-align:left\">邮件日志</td>\n<td style=\"text-align:left\">maillog</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cron.*</td>\n<td style=\"text-align:left\">任务计划</td>\n<td style=\"text-align:left\">cron</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">local7.*</td>\n<td style=\"text-align:left\">启动信息</td>\n<td style=\"text-align:left\">boot.log</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">uucp,news.crit</td>\n<td style=\"text-align:left\">新闻类错误</td>\n<td style=\"text-align:left\">spooler</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">kern.*</td>\n<td style=\"text-align:left\">内核类</td>\n<td style=\"text-align:left\">/dev/console</td>\n</tr>\n</tbody>\n</table>\n<p>可以在/etc/rsyslog.conf里配置额外的日志文件，类型如下表，例如<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.debug   /var/<span class=\"built_in\">log</span>/messages.debug</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/04/11/Chapter-10-Analyzing-and-Storing-Logs/1523429897556805.png\" alt=\"rhel-10-2.png\"></p>\n<h4 id=\"journalctl\"><a href=\"#journalctl\" class=\"headerlink\" title=\"journalctl\"></a>journalctl</h4><p>/run/log/journal   默认位置重启后会清除</p>\n<p>如果/var/log/journal 存在，则journalctl 会将日志存放过来，存储大小一般不超过当前文件系统的10%，所以要保留15%的空间</p>\n<p>/var/log/journal 文件的权限<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">chown root:systtemd-journal /var/<span class=\"built_in\">log</span>/journal</span><br><span class=\"line\"></span><br><span class=\"line\">chmod 2755 /var/<span class=\"built_in\">log</span>/journal</span><br><span class=\"line\"></span><br><span class=\"line\">drwxr-sr-x. 2 root systemd-journal 6 4月   9 16:33 journal/</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"重启journald服务：\"><a href=\"#重启journald服务：\" class=\"headerlink\" title=\"重启journald服务：\"></a>重启journald服务：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">killall -USR1 systemd-journald</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#或</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n<p> ==========================================================<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">journalctl -n 5     <span class=\"comment\">#显示最后5条</span></span><br><span class=\"line\">journalctl -p err     <span class=\"comment\">#指定日志的优先级类型</span></span><br><span class=\"line\">journalctl -f     <span class=\"comment\">#等同于 tail -f</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"指定日志的日期：\"><a href=\"#指定日志的日期：\" class=\"headerlink\" title=\"指定日志的日期：\"></a>指定日志的日期：</h6><pre><code class=\"bash\">\njournalctl --since today  \njournalctl --since 15:30:00  --until 15:35:00\njournalctl --since <span class=\"string\">\"2018-04-09 15:30:00\"</span> --until <span class=\"string\">\"2018-04-09 16:00:00\"</span>\n\n</code></pre>\n<p>查看详情,可是加在其它参数后面或者前面</p>\n<pre><code class=\"bash\">\njournalctl -o verbose\njournalctl   \\_SYSTEMD\\_UNIT=sshd.service   _PID=1182     <span class=\"comment\">#查看指定进程或服务的日志</span>\njournalctl --since 15:00:00 \\_SYSTEMD\\_UNIT=sshd.service\n\n</code></pre>\n<p> ==========================================================</p>\n<h5 id=\"rsyslog\"><a href=\"#rsyslog\" class=\"headerlink\" title=\"rsyslog\"></a>rsyslog</h5><pre><code class=\"bash\">\n/etc/rsyslog.conf\n\n/etc/rysylog.d/*.conf\n\nman 5 rsyslog.conf\n\nhttp:// /usr/share/doc/rsyslog-*/manual.html\n\n</code></pre>\n<p> ==========================================================</p>\n<h5 id=\"logrotate-日志轮巡\"><a href=\"#logrotate-日志轮巡\" class=\"headerlink\" title=\"logrotate 日志轮巡\"></a>logrotate 日志轮巡</h5><p>/etc/logrotate.conf</p>\n<p>/etc/logrotate.d/*.conf</p>\n<p> ==========================================================</p>\n<h5 id=\"标准rsyslog格式\"><a href=\"#标准rsyslog格式\" class=\"headerlink\" title=\"标准rsyslog格式\"></a>标准rsyslog格式</h5><p>Apr  9 14:59:44 client systemd: Starting Session 2 of user root.</p>\n<p>发生的日期  主机  产生日志的程序 ：日志内容</p>\n<p> ==========================================================</p>\n<h5 id=\"logger-程序生成日志记录到文件\"><a href=\"#logger-程序生成日志记录到文件\" class=\"headerlink\" title=\"logger 程序生成日志记录到文件\"></a>logger 程序生成日志记录到文件</h5><pre><code class=\"bash\">\nlogger -p local7.notice <span class=\"string\">\"Log entry created on ServerX\"</span> 生产notice 日志\nlogger -p user.debug <span class=\"string\">\"debug message test\"</span>  产生debug 日志\n\n</code></pre>\n<p> ==========================================================</p>\n<h5 id=\"时间的维护：\"><a href=\"#时间的维护：\" class=\"headerlink\" title=\"时间的维护：\"></a>时间的维护：</h5><pre><code class=\"bash\">\ntzselect     <span class=\"comment\">#交互式设备时区tz=timezone</span>\ntimedatectl\ntimedatectl  list-timezones\ntimedatectl  <span class=\"built_in\">set</span>-timezone America/Phoenix\ntimedatectl  <span class=\"built_in\">set</span>-timezone Asia/Shanghai\ntimedatectl  <span class=\"built_in\">set</span>-time 9:00:00   <span class=\"comment\">#(YYYY-MM-DD hh:mm:ss)</span>\ntimedatectl  <span class=\"built_in\">set</span>-ntp <span class=\"literal\">true</span>/<span class=\"literal\">false</span>\n\n</code></pre>\n<p> ========================================================== </p>\n<h4 id=\"Configuring-chronyd\"><a href=\"#Configuring-chronyd\" class=\"headerlink\" title=\"Configuring chronyd\"></a>Configuring chronyd</h4><p>/etc/chrony.conf</p>\n<p>修改文件中的服务器位置</p>\n<p>chronyc souces -v   验证NTP服务器，并显示详情</p>\n<p>ntpd、ntpq 在Redhat7以前使用，用来管理NTP服务器</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/2018/04/11/Chapter-10-Analyzing-and-Storing-Logs/1523427823840955.png\" alt=\"rhel-10-1.png\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">*.info;mail.none;authpriv.none;cron.none</th>\n<th style=\"text-align:left\">常规日志</th>\n<th style=\"text-align:left\">messages</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">authpriv.*</td>\n<td style=\"text-align:left\">认证日志</td>\n<td style=\"text-align:left\">secure</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mail.*</td>\n<td style=\"text-align:left\">邮件日志</td>\n<td style=\"text-align:left\">maillog</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cron.*</td>\n<td style=\"text-align:left\">任务计划</td>\n<td style=\"text-align:left\">cron</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">local7.*</td>\n<td style=\"text-align:left\">启动信息</td>\n<td style=\"text-align:left\">boot.log</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">uucp,news.crit</td>\n<td style=\"text-align:left\">新闻类错误</td>\n<td style=\"text-align:left\">spooler</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">kern.*</td>\n<td style=\"text-align:left\">内核类</td>\n<td style=\"text-align:left\">/dev/console</td>\n</tr>\n</tbody>\n</table>\n<p>可以在/etc/rsyslog.conf里配置额外的日志文件，类型如下表，例如<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.debug   /var/<span class=\"built_in\">log</span>/messages.debug</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/04/11/Chapter-10-Analyzing-and-Storing-Logs/1523429897556805.png\" alt=\"rhel-10-2.png\"></p>\n<h4 id=\"journalctl\"><a href=\"#journalctl\" class=\"headerlink\" title=\"journalctl\"></a>journalctl</h4><p>/run/log/journal   默认位置重启后会清除</p>\n<p>如果/var/log/journal 存在，则journalctl 会将日志存放过来，存储大小一般不超过当前文件系统的10%，所以要保留15%的空间</p>\n<p>/var/log/journal 文件的权限<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">chown root:systtemd-journal /var/<span class=\"built_in\">log</span>/journal</span><br><span class=\"line\"></span><br><span class=\"line\">chmod 2755 /var/<span class=\"built_in\">log</span>/journal</span><br><span class=\"line\"></span><br><span class=\"line\">drwxr-sr-x. 2 root systemd-journal 6 4月   9 16:33 journal/</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"重启journald服务：\"><a href=\"#重启journald服务：\" class=\"headerlink\" title=\"重启journald服务：\"></a>重启journald服务：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">killall -USR1 systemd-journald</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#或</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n<p> ==========================================================<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">journalctl -n 5     <span class=\"comment\">#显示最后5条</span></span><br><span class=\"line\">journalctl -p err     <span class=\"comment\">#指定日志的优先级类型</span></span><br><span class=\"line\">journalctl -f     <span class=\"comment\">#等同于 tail -f</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"指定日志的日期：\"><a href=\"#指定日志的日期：\" class=\"headerlink\" title=\"指定日志的日期：\"></a>指定日志的日期：</h6><pre><code class=\"bash\">\njournalctl --since today  \njournalctl --since 15:30:00  --until 15:35:00\njournalctl --since <span class=\"string\">\"2018-04-09 15:30:00\"</span> --until <span class=\"string\">\"2018-04-09 16:00:00\"</span>\n\n</code></pre>\n<p>查看详情,可是加在其它参数后面或者前面</p>\n<pre><code class=\"bash\">\njournalctl -o verbose\njournalctl   \\_SYSTEMD\\_UNIT=sshd.service   _PID=1182     <span class=\"comment\">#查看指定进程或服务的日志</span>\njournalctl --since 15:00:00 \\_SYSTEMD\\_UNIT=sshd.service\n\n</code></pre>\n<p> ==========================================================</p>\n<h5 id=\"rsyslog\"><a href=\"#rsyslog\" class=\"headerlink\" title=\"rsyslog\"></a>rsyslog</h5><pre><code class=\"bash\">\n/etc/rsyslog.conf\n\n/etc/rysylog.d/*.conf\n\nman 5 rsyslog.conf\n\nhttp:// /usr/share/doc/rsyslog-*/manual.html\n\n</code></pre>\n<p> ==========================================================</p>\n<h5 id=\"logrotate-日志轮巡\"><a href=\"#logrotate-日志轮巡\" class=\"headerlink\" title=\"logrotate 日志轮巡\"></a>logrotate 日志轮巡</h5><p>/etc/logrotate.conf</p>\n<p>/etc/logrotate.d/*.conf</p>\n<p> ==========================================================</p>\n<h5 id=\"标准rsyslog格式\"><a href=\"#标准rsyslog格式\" class=\"headerlink\" title=\"标准rsyslog格式\"></a>标准rsyslog格式</h5><p>Apr  9 14:59:44 client systemd: Starting Session 2 of user root.</p>\n<p>发生的日期  主机  产生日志的程序 ：日志内容</p>\n<p> ==========================================================</p>\n<h5 id=\"logger-程序生成日志记录到文件\"><a href=\"#logger-程序生成日志记录到文件\" class=\"headerlink\" title=\"logger 程序生成日志记录到文件\"></a>logger 程序生成日志记录到文件</h5><pre><code class=\"bash\">\nlogger -p local7.notice <span class=\"string\">\"Log entry created on ServerX\"</span> 生产notice 日志\nlogger -p user.debug <span class=\"string\">\"debug message test\"</span>  产生debug 日志\n\n</code></pre>\n<p> ==========================================================</p>\n<h5 id=\"时间的维护：\"><a href=\"#时间的维护：\" class=\"headerlink\" title=\"时间的维护：\"></a>时间的维护：</h5><pre><code class=\"bash\">\ntzselect     <span class=\"comment\">#交互式设备时区tz=timezone</span>\ntimedatectl\ntimedatectl  list-timezones\ntimedatectl  <span class=\"built_in\">set</span>-timezone America/Phoenix\ntimedatectl  <span class=\"built_in\">set</span>-timezone Asia/Shanghai\ntimedatectl  <span class=\"built_in\">set</span>-time 9:00:00   <span class=\"comment\">#(YYYY-MM-DD hh:mm:ss)</span>\ntimedatectl  <span class=\"built_in\">set</span>-ntp <span class=\"literal\">true</span>/<span class=\"literal\">false</span>\n\n</code></pre>\n<p> ========================================================== </p>\n<h4 id=\"Configuring-chronyd\"><a href=\"#Configuring-chronyd\" class=\"headerlink\" title=\"Configuring chronyd\"></a>Configuring chronyd</h4><p>/etc/chrony.conf</p>\n<p>修改文件中的服务器位置</p>\n<p>chronyc souces -v   验证NTP服务器，并显示详情</p>\n<p>ntpd、ntpq 在Redhat7以前使用，用来管理NTP服务器</p>\n"},{"title":"autofs 自动挂载","url":"497.html","id":"497","date":"2018-10-12T13:10:31.000Z","_content":"\nAutofs\n======\n\n#### 安装  \n```bash\nyum install autofs -y\n```\n#### 配置\n\n##### 配置文件默认目录  \n```bash\n/etc\n```\n##### 主配置模板auto.master \n```bash\n/etc/auto.master\n#/media /etc/auto.media\n#目录/media  配置文件/etc/auto.media\n/etc/auto.master \n/media/misc     /etc/auto.misc     --timeout=5\n/media/net      /etc/auto.net      --timeout=60\n#第一列是基础主目录，第二列是对接的配置文件，第三列是自动超时时间，timeout 为可选参数，单位为秒\n#最好保证模板文件末尾有一个空行。\n```\n如果您的系统上不存在基目录，则将创建该目录。将挂载基目录以加载动态加载的媒体，这意味着在启用autofs时将无法访问基目录中的任何内容。但是，此过程是非破坏性的，因此如果您不小心自动挂载到实时目录中，只需更改位置auto.master并重新启动AutoFS即可重新获得原始内容。\n\n如果您仍想自动挂载到目标非空目录并且希望即使在挂载动态加载目录后也可以使用原始文件，则可以使用autofs将它们挂载到另一个目录（例如/var/autofs/net）和创建软链接。\n```bash\n#ln -s /var/autofs/net/share\\_name /media/share\\_name\n```\n或者，您可以让autofs将媒体安装到特定文件夹，而不是在公共文件夹中。\n```bash\n/etc/auto.master\n/  -  /etc/auto.template\n#不指定基础目录\n/etc/auto.template\n/path/to/folder -options:/device/path\n/home/user/usbstick -fstype = auto，async，nodev，nosuid，umask = 000:/dev/sdb1\n```\n##### 可移动媒体\n\n打开/etc/auto.misc以添加，删除或编辑其他设备。例如：\n```bash\n/etc/auto.misc\n#kernel -ro \nftp.kernel.org:/pub/linux #boot -fstype = ext2:/dev/hda1 \nusbstick -fstype = auto，async，nodev，nosuid，umask = 000:/dev/sdb1 \ncdrom -fstype = iso9660 ，ro:/dev/cdrom \n#floppy -fstype = auto:/dev/fd0\n```\n如果您有CD / DVD组合驱动器，则可以更改该cdrom行以-fstype=auto自动检测介质类型。\n\n##### NFS 检查挂载  \n```bash\nshowmount <servername> -e\n```\n##### 手动NFS配置\n\n要将名为/srv/shared\\_dir的server\\_name上的NFS共享挂载到位于/mnt/foo的另一台名为client\\_pc的计算机，请编辑nfs.autofs并为该共享创建配置文件（auto.nfsserver\\_name）：\n```bash \n\n/etc/auto.master.d/auto.nfsserver_name\nfoo -rw,soft,intr,rsize=8192,wsize=8192 server\\_name/srv/shared\\_dir\n```\n##### samba 的配置方法\n\n###### samba 检查方法\n```bash\nsmbclient  -L  //servername \n\n/etc/auto.master.d/auto.smb\nsmb -fstype=cifs,\\[other\\_options\\]   :// \\[remote\\_server\\]/\\[remote\\_share\\_name\\]\n#\\[any\\_name\\] -fstype=cifs,username=\\[username\\],password=\\[password\\],\\[other\\_options\\] ://\\[remote\\_server\\]/\\[remote\\_share_name\\]\n```\n##### ftp\n\n安装 curlftpfs (未完待续)\n```bash\nyum install curlftpfs -y\nmodprobe fuse\n```\n","source":"_posts/autofs-e8-87-aa-e5-8a-a8-e6-8c-82-e8-bd-bd.md","raw":"---\ntitle: autofs 自动挂载\nurl: 497.html\nid: 497\ncategories:\n  - 未分类\ndate: 2018-10-12 21:10:31\ntags:\n---\n\nAutofs\n======\n\n#### 安装  \n```bash\nyum install autofs -y\n```\n#### 配置\n\n##### 配置文件默认目录  \n```bash\n/etc\n```\n##### 主配置模板auto.master \n```bash\n/etc/auto.master\n#/media /etc/auto.media\n#目录/media  配置文件/etc/auto.media\n/etc/auto.master \n/media/misc     /etc/auto.misc     --timeout=5\n/media/net      /etc/auto.net      --timeout=60\n#第一列是基础主目录，第二列是对接的配置文件，第三列是自动超时时间，timeout 为可选参数，单位为秒\n#最好保证模板文件末尾有一个空行。\n```\n如果您的系统上不存在基目录，则将创建该目录。将挂载基目录以加载动态加载的媒体，这意味着在启用autofs时将无法访问基目录中的任何内容。但是，此过程是非破坏性的，因此如果您不小心自动挂载到实时目录中，只需更改位置auto.master并重新启动AutoFS即可重新获得原始内容。\n\n如果您仍想自动挂载到目标非空目录并且希望即使在挂载动态加载目录后也可以使用原始文件，则可以使用autofs将它们挂载到另一个目录（例如/var/autofs/net）和创建软链接。\n```bash\n#ln -s /var/autofs/net/share\\_name /media/share\\_name\n```\n或者，您可以让autofs将媒体安装到特定文件夹，而不是在公共文件夹中。\n```bash\n/etc/auto.master\n/  -  /etc/auto.template\n#不指定基础目录\n/etc/auto.template\n/path/to/folder -options:/device/path\n/home/user/usbstick -fstype = auto，async，nodev，nosuid，umask = 000:/dev/sdb1\n```\n##### 可移动媒体\n\n打开/etc/auto.misc以添加，删除或编辑其他设备。例如：\n```bash\n/etc/auto.misc\n#kernel -ro \nftp.kernel.org:/pub/linux #boot -fstype = ext2:/dev/hda1 \nusbstick -fstype = auto，async，nodev，nosuid，umask = 000:/dev/sdb1 \ncdrom -fstype = iso9660 ，ro:/dev/cdrom \n#floppy -fstype = auto:/dev/fd0\n```\n如果您有CD / DVD组合驱动器，则可以更改该cdrom行以-fstype=auto自动检测介质类型。\n\n##### NFS 检查挂载  \n```bash\nshowmount <servername> -e\n```\n##### 手动NFS配置\n\n要将名为/srv/shared\\_dir的server\\_name上的NFS共享挂载到位于/mnt/foo的另一台名为client\\_pc的计算机，请编辑nfs.autofs并为该共享创建配置文件（auto.nfsserver\\_name）：\n```bash \n\n/etc/auto.master.d/auto.nfsserver_name\nfoo -rw,soft,intr,rsize=8192,wsize=8192 server\\_name/srv/shared\\_dir\n```\n##### samba 的配置方法\n\n###### samba 检查方法\n```bash\nsmbclient  -L  //servername \n\n/etc/auto.master.d/auto.smb\nsmb -fstype=cifs,\\[other\\_options\\]   :// \\[remote\\_server\\]/\\[remote\\_share\\_name\\]\n#\\[any\\_name\\] -fstype=cifs,username=\\[username\\],password=\\[password\\],\\[other\\_options\\] ://\\[remote\\_server\\]/\\[remote\\_share_name\\]\n```\n##### ftp\n\n安装 curlftpfs (未完待续)\n```bash\nyum install curlftpfs -y\nmodprobe fuse\n```\n","slug":"autofs-e8-87-aa-e5-8a-a8-e6-8c-82-e8-bd-bd","published":1,"updated":"2019-01-05T15:15:01.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqhyg0001lxkjw29jzzv9","content":"<h1 id=\"Autofs\"><a href=\"#Autofs\" class=\"headerlink\" title=\"Autofs\"></a>Autofs</h1><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install autofs -y</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><h5 id=\"配置文件默认目录\"><a href=\"#配置文件默认目录\" class=\"headerlink\" title=\"配置文件默认目录\"></a>配置文件默认目录</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc</span><br></pre></td></tr></table></figure>\n<h5 id=\"主配置模板auto-master\"><a href=\"#主配置模板auto-master\" class=\"headerlink\" title=\"主配置模板auto.master\"></a>主配置模板auto.master</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/auto.master</span><br><span class=\"line\"><span class=\"comment\">#/media /etc/auto.media</span></span><br><span class=\"line\"><span class=\"comment\">#目录/media  配置文件/etc/auto.media</span></span><br><span class=\"line\">/etc/auto.master </span><br><span class=\"line\">/media/misc     /etc/auto.misc     --timeout=5</span><br><span class=\"line\">/media/net      /etc/auto.net      --timeout=60</span><br><span class=\"line\"><span class=\"comment\">#第一列是基础主目录，第二列是对接的配置文件，第三列是自动超时时间，timeout 为可选参数，单位为秒</span></span><br><span class=\"line\"><span class=\"comment\">#最好保证模板文件末尾有一个空行。</span></span><br></pre></td></tr></table></figure>\n<p>如果您的系统上不存在基目录，则将创建该目录。将挂载基目录以加载动态加载的媒体，这意味着在启用autofs时将无法访问基目录中的任何内容。但是，此过程是非破坏性的，因此如果您不小心自动挂载到实时目录中，只需更改位置auto.master并重新启动AutoFS即可重新获得原始内容。</p>\n<p>如果您仍想自动挂载到目标非空目录并且希望即使在挂载动态加载目录后也可以使用原始文件，则可以使用autofs将它们挂载到另一个目录（例如/var/autofs/net）和创建软链接。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#ln -s /var/autofs/net/share\\_name /media/share\\_name</span></span><br></pre></td></tr></table></figure></p>\n<p>或者，您可以让autofs将媒体安装到特定文件夹，而不是在公共文件夹中。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/auto.master</span><br><span class=\"line\">/  -  /etc/auto.template</span><br><span class=\"line\"><span class=\"comment\">#不指定基础目录</span></span><br><span class=\"line\">/etc/auto.template</span><br><span class=\"line\">/path/to/folder -options:/device/path</span><br><span class=\"line\">/home/user/usbstick -fstype = auto，async，nodev，nosuid，<span class=\"built_in\">umask</span> = 000:/dev/sdb1</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"可移动媒体\"><a href=\"#可移动媒体\" class=\"headerlink\" title=\"可移动媒体\"></a>可移动媒体</h5><p>打开/etc/auto.misc以添加，删除或编辑其他设备。例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/auto.misc</span><br><span class=\"line\"><span class=\"comment\">#kernel -ro </span></span><br><span class=\"line\">ftp.kernel.org:/pub/linux <span class=\"comment\">#boot -fstype = ext2:/dev/hda1 </span></span><br><span class=\"line\">usbstick -fstype = auto，async，nodev，nosuid，<span class=\"built_in\">umask</span> = 000:/dev/sdb1 </span><br><span class=\"line\">cdrom -fstype = iso9660 ，ro:/dev/cdrom </span><br><span class=\"line\"><span class=\"comment\">#floppy -fstype = auto:/dev/fd0</span></span><br></pre></td></tr></table></figure></p>\n<p>如果您有CD / DVD组合驱动器，则可以更改该cdrom行以-fstype=auto自动检测介质类型。</p>\n<h5 id=\"NFS-检查挂载\"><a href=\"#NFS-检查挂载\" class=\"headerlink\" title=\"NFS 检查挂载\"></a>NFS 检查挂载</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">showmount &lt;servername&gt; -e</span><br></pre></td></tr></table></figure>\n<h5 id=\"手动NFS配置\"><a href=\"#手动NFS配置\" class=\"headerlink\" title=\"手动NFS配置\"></a>手动NFS配置</h5><p>要将名为/srv/shared_dir的server_name上的NFS共享挂载到位于/mnt/foo的另一台名为client_pc的计算机，请编辑nfs.autofs并为该共享创建配置文件（auto.nfsserver_name）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/etc/auto.master.d/auto.nfsserver_name</span><br><span class=\"line\">foo -rw,soft,intr,rsize=8192,wsize=8192 server\\_name/srv/shared\\_dir</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"samba-的配置方法\"><a href=\"#samba-的配置方法\" class=\"headerlink\" title=\"samba 的配置方法\"></a>samba 的配置方法</h5><h6 id=\"samba-检查方法\"><a href=\"#samba-检查方法\" class=\"headerlink\" title=\"samba 检查方法\"></a>samba 检查方法</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smbclient  -L  //servername </span><br><span class=\"line\"></span><br><span class=\"line\">/etc/auto.master.d/auto.smb</span><br><span class=\"line\">smb -fstype=cifs,\\[other\\_options\\]   :// \\[remote\\_server\\]/\\[remote\\_share\\_name\\]</span><br><span class=\"line\"><span class=\"comment\">#\\[any\\_name\\] -fstype=cifs,username=\\[username\\],password=\\[password\\],\\[other\\_options\\] ://\\[remote\\_server\\]/\\[remote\\_share_name\\]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"ftp\"><a href=\"#ftp\" class=\"headerlink\" title=\"ftp\"></a>ftp</h5><p>安装 curlftpfs (未完待续)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install curlftpfs -y</span><br><span class=\"line\">modprobe fuse</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Autofs\"><a href=\"#Autofs\" class=\"headerlink\" title=\"Autofs\"></a>Autofs</h1><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install autofs -y</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><h5 id=\"配置文件默认目录\"><a href=\"#配置文件默认目录\" class=\"headerlink\" title=\"配置文件默认目录\"></a>配置文件默认目录</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc</span><br></pre></td></tr></table></figure>\n<h5 id=\"主配置模板auto-master\"><a href=\"#主配置模板auto-master\" class=\"headerlink\" title=\"主配置模板auto.master\"></a>主配置模板auto.master</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/auto.master</span><br><span class=\"line\"><span class=\"comment\">#/media /etc/auto.media</span></span><br><span class=\"line\"><span class=\"comment\">#目录/media  配置文件/etc/auto.media</span></span><br><span class=\"line\">/etc/auto.master </span><br><span class=\"line\">/media/misc     /etc/auto.misc     --timeout=5</span><br><span class=\"line\">/media/net      /etc/auto.net      --timeout=60</span><br><span class=\"line\"><span class=\"comment\">#第一列是基础主目录，第二列是对接的配置文件，第三列是自动超时时间，timeout 为可选参数，单位为秒</span></span><br><span class=\"line\"><span class=\"comment\">#最好保证模板文件末尾有一个空行。</span></span><br></pre></td></tr></table></figure>\n<p>如果您的系统上不存在基目录，则将创建该目录。将挂载基目录以加载动态加载的媒体，这意味着在启用autofs时将无法访问基目录中的任何内容。但是，此过程是非破坏性的，因此如果您不小心自动挂载到实时目录中，只需更改位置auto.master并重新启动AutoFS即可重新获得原始内容。</p>\n<p>如果您仍想自动挂载到目标非空目录并且希望即使在挂载动态加载目录后也可以使用原始文件，则可以使用autofs将它们挂载到另一个目录（例如/var/autofs/net）和创建软链接。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#ln -s /var/autofs/net/share\\_name /media/share\\_name</span></span><br></pre></td></tr></table></figure></p>\n<p>或者，您可以让autofs将媒体安装到特定文件夹，而不是在公共文件夹中。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/auto.master</span><br><span class=\"line\">/  -  /etc/auto.template</span><br><span class=\"line\"><span class=\"comment\">#不指定基础目录</span></span><br><span class=\"line\">/etc/auto.template</span><br><span class=\"line\">/path/to/folder -options:/device/path</span><br><span class=\"line\">/home/user/usbstick -fstype = auto，async，nodev，nosuid，<span class=\"built_in\">umask</span> = 000:/dev/sdb1</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"可移动媒体\"><a href=\"#可移动媒体\" class=\"headerlink\" title=\"可移动媒体\"></a>可移动媒体</h5><p>打开/etc/auto.misc以添加，删除或编辑其他设备。例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/auto.misc</span><br><span class=\"line\"><span class=\"comment\">#kernel -ro </span></span><br><span class=\"line\">ftp.kernel.org:/pub/linux <span class=\"comment\">#boot -fstype = ext2:/dev/hda1 </span></span><br><span class=\"line\">usbstick -fstype = auto，async，nodev，nosuid，<span class=\"built_in\">umask</span> = 000:/dev/sdb1 </span><br><span class=\"line\">cdrom -fstype = iso9660 ，ro:/dev/cdrom </span><br><span class=\"line\"><span class=\"comment\">#floppy -fstype = auto:/dev/fd0</span></span><br></pre></td></tr></table></figure></p>\n<p>如果您有CD / DVD组合驱动器，则可以更改该cdrom行以-fstype=auto自动检测介质类型。</p>\n<h5 id=\"NFS-检查挂载\"><a href=\"#NFS-检查挂载\" class=\"headerlink\" title=\"NFS 检查挂载\"></a>NFS 检查挂载</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">showmount &lt;servername&gt; -e</span><br></pre></td></tr></table></figure>\n<h5 id=\"手动NFS配置\"><a href=\"#手动NFS配置\" class=\"headerlink\" title=\"手动NFS配置\"></a>手动NFS配置</h5><p>要将名为/srv/shared_dir的server_name上的NFS共享挂载到位于/mnt/foo的另一台名为client_pc的计算机，请编辑nfs.autofs并为该共享创建配置文件（auto.nfsserver_name）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/etc/auto.master.d/auto.nfsserver_name</span><br><span class=\"line\">foo -rw,soft,intr,rsize=8192,wsize=8192 server\\_name/srv/shared\\_dir</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"samba-的配置方法\"><a href=\"#samba-的配置方法\" class=\"headerlink\" title=\"samba 的配置方法\"></a>samba 的配置方法</h5><h6 id=\"samba-检查方法\"><a href=\"#samba-检查方法\" class=\"headerlink\" title=\"samba 检查方法\"></a>samba 检查方法</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smbclient  -L  //servername </span><br><span class=\"line\"></span><br><span class=\"line\">/etc/auto.master.d/auto.smb</span><br><span class=\"line\">smb -fstype=cifs,\\[other\\_options\\]   :// \\[remote\\_server\\]/\\[remote\\_share\\_name\\]</span><br><span class=\"line\"><span class=\"comment\">#\\[any\\_name\\] -fstype=cifs,username=\\[username\\],password=\\[password\\],\\[other\\_options\\] ://\\[remote\\_server\\]/\\[remote\\_share_name\\]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"ftp\"><a href=\"#ftp\" class=\"headerlink\" title=\"ftp\"></a>ftp</h5><p>安装 curlftpfs (未完待续)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install curlftpfs -y</span><br><span class=\"line\">modprobe fuse</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Chapter 11. Manager Network","url":"140.html","id":"140","date":"2018-04-11T08:05:34.000Z","_content":"\n常见服务端口查看文件：/etc/services  \nrhel 7开始网卡的命令开头规则为：  \n以太网：en；无线网：wl；WWAN：ww；  \n后面根网卡接口类型：  \nhotplug 热插拔：s; PCI接口 :p  \n主板集成：o；x:MAC地址使用  \n最后的数字是：索引、ID或端口。  \n如：eno1,ens33,enp2s0,eth0  \n无法确认的情况下，使用ethN 传统的形式。  \n\nbiosdevname 包用来定义udev设备的名称规则，PIC(S)网卡名pYpX ，Y代表slot number ,X 代表当前板卡的第几个口\n\n  \n\n  \n\n ==============================================================\n```bash\n\nip addr show ens33      #查看信息\nip -s link show eth0      #显示统计信息tatistics（统计）\nip route                 #查看路由\nping -c3 192.168.1.1  -cN     #指定ping的次数\ntracepath access.redhat.com      #跟踪路由，默认使用UDP路由，然后UDP经常被封\n\n```\ntraceroute 有 -I(ICMP) , -T (TCP) 选项  \nRTT  :Round trip timging; MTU:Maximum transmission unit  \nss  -ta 显示tcp  socket 统计信息 -t=tcp ,-a=all.   ss类似netstat 命令  \n-n 以数字形式显示端口或地址  \n-t  tcp  \n-u     udp  \n-l     显示处于Listening状态的服务  \n-a  显示所有  \n  \n\n-p   显示进程使用的socket\n\n  \n\n ==============================================================\n\n  \n配置文件位置/etc/sysconfig/network-scripts/  \n网络管理服务：NetworkManager,命令是nmcli  \n\n```bash\n\nnmcli con show                 #显示所有连接的网卡\nnmcli con show --active         #显示处于激活状态的网卡\nnmcli con show \"ens33\"            #显示网卡的详细信息,对应的详细说明查看man nm-settings \nnmcli dev status\nnmcli dev show ens33               #显示指定网卡\nnmcli dev show                    #显示网卡\nnmcli con show                    #显示连接\nnmcli con up  <\"ID\">              #启用网卡\nnmcli con down  <\"ID\">             #关闭网卡\nnmcli dev dis  <\"ID\">             #断开连接\nnmcli net off                     #停用网卡\nnmcli net on                      #启用网卡\nnmcli con add  ….               #添加连接\nnmcli con mod  <\"ID\">             #修改连接\nnmcli con del  <\"ID\">             #删除连接\nman nm-connection-editor            #查看详细说明\n\n```\n==============================================================\n\n```bash\n\nnmcli con add con-name \"default\" type ethernet ifname eth0\nnmcli con add con-name \"static\" ifname eth0 autoconnect no type ethernet ip4 172.25.1.10/24 gw4 172.25.1.254 \nnmcli con up \"static\"\nnmcli con up \"default\"\nnmcli con mod \"static\" connection.autoconnect yes\nnmcli con mod \"static\" ipv4.dns 172.24.1.254\nnmcli con mod \"static\" +ipv4.dns 8.8.8.8\nnmcli con mod \"static\" ipv4.address \"172.25.2.10/24 172.25.2.254\"\nnmcli con mod \"static\" +ipv4.address 192.168.1.1/24\n\n```\n ==============================================================\n\n  \n修改配置文件后使用  \n\n```bash\n\nnmcli con reload  重新加载配置文件  \nnmcli con down;nmcli con up  \n  \n```\n ==============================================================\n```bash\nhostname  查看主机名\n\nhostnamectl set-hostname deskop.example.com\n\nhostnamectl status   #查看主机信息，包括主机名、计算机类型、系统类型、版本、架构\ncat /etc/hostname  #主机名保存的文件，/etc/sysconfig/network (老版本)\n\n```\n\n/etc/hosts 文件配置静态域名解析，本地解析\n\ngetent hosts www.baidu.com  #getent 解析域名，同nslookup，对hosts文件有支持 \nhost classroom.example.com  #解析域名，同nslookup\n\n/etc/resolv.conf  配置 DNS 服务器地址,支持内容如下：\n\n    nameserver: DNS 的IP地址，最多可以设置3个\n\n    search : 一般用域名，\n\n    domain :一般用域名\n\nPEERDNS=no 时，不会影响/etc/resolv.conf ，如果网卡配置PEERDNS=yes ,重启网卡时会覆盖resolv.conf\n","source":"_posts/chapter-11-manager-network.md","raw":"---\ntitle: Chapter 11. Manager Network\nurl: 140.html\nid: 140\ncategories:\n  - RHEL124\ndate: 2018-04-11 16:05:34\ntags:\n---\n\n常见服务端口查看文件：/etc/services  \nrhel 7开始网卡的命令开头规则为：  \n以太网：en；无线网：wl；WWAN：ww；  \n后面根网卡接口类型：  \nhotplug 热插拔：s; PCI接口 :p  \n主板集成：o；x:MAC地址使用  \n最后的数字是：索引、ID或端口。  \n如：eno1,ens33,enp2s0,eth0  \n无法确认的情况下，使用ethN 传统的形式。  \n\nbiosdevname 包用来定义udev设备的名称规则，PIC(S)网卡名pYpX ，Y代表slot number ,X 代表当前板卡的第几个口\n\n  \n\n  \n\n ==============================================================\n```bash\n\nip addr show ens33      #查看信息\nip -s link show eth0      #显示统计信息tatistics（统计）\nip route                 #查看路由\nping -c3 192.168.1.1  -cN     #指定ping的次数\ntracepath access.redhat.com      #跟踪路由，默认使用UDP路由，然后UDP经常被封\n\n```\ntraceroute 有 -I(ICMP) , -T (TCP) 选项  \nRTT  :Round trip timging; MTU:Maximum transmission unit  \nss  -ta 显示tcp  socket 统计信息 -t=tcp ,-a=all.   ss类似netstat 命令  \n-n 以数字形式显示端口或地址  \n-t  tcp  \n-u     udp  \n-l     显示处于Listening状态的服务  \n-a  显示所有  \n  \n\n-p   显示进程使用的socket\n\n  \n\n ==============================================================\n\n  \n配置文件位置/etc/sysconfig/network-scripts/  \n网络管理服务：NetworkManager,命令是nmcli  \n\n```bash\n\nnmcli con show                 #显示所有连接的网卡\nnmcli con show --active         #显示处于激活状态的网卡\nnmcli con show \"ens33\"            #显示网卡的详细信息,对应的详细说明查看man nm-settings \nnmcli dev status\nnmcli dev show ens33               #显示指定网卡\nnmcli dev show                    #显示网卡\nnmcli con show                    #显示连接\nnmcli con up  <\"ID\">              #启用网卡\nnmcli con down  <\"ID\">             #关闭网卡\nnmcli dev dis  <\"ID\">             #断开连接\nnmcli net off                     #停用网卡\nnmcli net on                      #启用网卡\nnmcli con add  ….               #添加连接\nnmcli con mod  <\"ID\">             #修改连接\nnmcli con del  <\"ID\">             #删除连接\nman nm-connection-editor            #查看详细说明\n\n```\n==============================================================\n\n```bash\n\nnmcli con add con-name \"default\" type ethernet ifname eth0\nnmcli con add con-name \"static\" ifname eth0 autoconnect no type ethernet ip4 172.25.1.10/24 gw4 172.25.1.254 \nnmcli con up \"static\"\nnmcli con up \"default\"\nnmcli con mod \"static\" connection.autoconnect yes\nnmcli con mod \"static\" ipv4.dns 172.24.1.254\nnmcli con mod \"static\" +ipv4.dns 8.8.8.8\nnmcli con mod \"static\" ipv4.address \"172.25.2.10/24 172.25.2.254\"\nnmcli con mod \"static\" +ipv4.address 192.168.1.1/24\n\n```\n ==============================================================\n\n  \n修改配置文件后使用  \n\n```bash\n\nnmcli con reload  重新加载配置文件  \nnmcli con down;nmcli con up  \n  \n```\n ==============================================================\n```bash\nhostname  查看主机名\n\nhostnamectl set-hostname deskop.example.com\n\nhostnamectl status   #查看主机信息，包括主机名、计算机类型、系统类型、版本、架构\ncat /etc/hostname  #主机名保存的文件，/etc/sysconfig/network (老版本)\n\n```\n\n/etc/hosts 文件配置静态域名解析，本地解析\n\ngetent hosts www.baidu.com  #getent 解析域名，同nslookup，对hosts文件有支持 \nhost classroom.example.com  #解析域名，同nslookup\n\n/etc/resolv.conf  配置 DNS 服务器地址,支持内容如下：\n\n    nameserver: DNS 的IP地址，最多可以设置3个\n\n    search : 一般用域名，\n\n    domain :一般用域名\n\nPEERDNS=no 时，不会影响/etc/resolv.conf ，如果网卡配置PEERDNS=yes ,重启网卡时会覆盖resolv.conf\n","slug":"chapter-11-manager-network","published":1,"updated":"2019-01-05T15:32:48.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqhyl0003lxkjp6odous2","content":"<p>常见服务端口查看文件：/etc/services<br>rhel 7开始网卡的命令开头规则为：<br>以太网：en；无线网：wl；WWAN：ww；<br>后面根网卡接口类型：<br>hotplug 热插拔：s; PCI接口 :p<br>主板集成：o；x:MAC地址使用<br>最后的数字是：索引、ID或端口。<br>如：eno1,ens33,enp2s0,eth0<br>无法确认的情况下，使用ethN 传统的形式。  </p>\n<p>biosdevname 包用来定义udev设备的名称规则，PIC(S)网卡名pYpX ，Y代表slot number ,X 代表当前板卡的第几个口</p>\n<p> ==============================================================<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ip addr show ens33      <span class=\"comment\">#查看信息</span></span><br><span class=\"line\">ip -s link show eth0      <span class=\"comment\">#显示统计信息tatistics（统计）</span></span><br><span class=\"line\">ip route                 <span class=\"comment\">#查看路由</span></span><br><span class=\"line\">ping -c3 192.168.1.1  -cN     <span class=\"comment\">#指定ping的次数</span></span><br><span class=\"line\">tracepath access.redhat.com      <span class=\"comment\">#跟踪路由，默认使用UDP路由，然后UDP经常被封</span></span><br></pre></td></tr></table></figure></p>\n<p>traceroute 有 -I(ICMP) , -T (TCP) 选项<br>RTT  :Round trip timging; MTU:Maximum transmission unit<br>ss  -ta 显示tcp  socket 统计信息 -t=tcp ,-a=all.   ss类似netstat 命令<br>-n 以数字形式显示端口或地址<br>-t  tcp<br>-u     udp<br>-l     显示处于Listening状态的服务<br>-a  显示所有  </p>\n<p>-p   显示进程使用的socket</p>\n<p> ==============================================================</p>\n<p>配置文件位置/etc/sysconfig/network-scripts/<br>网络管理服务：NetworkManager,命令是nmcli  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">nmcli con show                 <span class=\"comment\">#显示所有连接的网卡</span></span><br><span class=\"line\">nmcli con show --active         <span class=\"comment\">#显示处于激活状态的网卡</span></span><br><span class=\"line\">nmcli con show <span class=\"string\">\"ens33\"</span>            <span class=\"comment\">#显示网卡的详细信息,对应的详细说明查看man nm-settings </span></span><br><span class=\"line\">nmcli dev status</span><br><span class=\"line\">nmcli dev show ens33               <span class=\"comment\">#显示指定网卡</span></span><br><span class=\"line\">nmcli dev show                    <span class=\"comment\">#显示网卡</span></span><br><span class=\"line\">nmcli con show                    <span class=\"comment\">#显示连接</span></span><br><span class=\"line\">nmcli con up  &lt;<span class=\"string\">\"ID\"</span>&gt;              <span class=\"comment\">#启用网卡</span></span><br><span class=\"line\">nmcli con down  &lt;<span class=\"string\">\"ID\"</span>&gt;             <span class=\"comment\">#关闭网卡</span></span><br><span class=\"line\">nmcli dev dis  &lt;<span class=\"string\">\"ID\"</span>&gt;             <span class=\"comment\">#断开连接</span></span><br><span class=\"line\">nmcli net off                     <span class=\"comment\">#停用网卡</span></span><br><span class=\"line\">nmcli net on                      <span class=\"comment\">#启用网卡</span></span><br><span class=\"line\">nmcli con add  ….               <span class=\"comment\">#添加连接</span></span><br><span class=\"line\">nmcli con mod  &lt;<span class=\"string\">\"ID\"</span>&gt;             <span class=\"comment\">#修改连接</span></span><br><span class=\"line\">nmcli con del  &lt;<span class=\"string\">\"ID\"</span>&gt;             <span class=\"comment\">#删除连接</span></span><br><span class=\"line\">man nm-connection-editor            <span class=\"comment\">#查看详细说明</span></span><br></pre></td></tr></table></figure>\n<p>==============================================================</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">nmcli con add con-name <span class=\"string\">\"default\"</span> <span class=\"built_in\">type</span> ethernet ifname eth0</span><br><span class=\"line\">nmcli con add con-name <span class=\"string\">\"static\"</span> ifname eth0 autoconnect no <span class=\"built_in\">type</span> ethernet ip4 172.25.1.10/24 gw4 172.25.1.254 </span><br><span class=\"line\">nmcli con up <span class=\"string\">\"static\"</span></span><br><span class=\"line\">nmcli con up <span class=\"string\">\"default\"</span></span><br><span class=\"line\">nmcli con mod <span class=\"string\">\"static\"</span> connection.autoconnect yes</span><br><span class=\"line\">nmcli con mod <span class=\"string\">\"static\"</span> ipv4.dns 172.24.1.254</span><br><span class=\"line\">nmcli con mod <span class=\"string\">\"static\"</span> +ipv4.dns 8.8.8.8</span><br><span class=\"line\">nmcli con mod <span class=\"string\">\"static\"</span> ipv4.address <span class=\"string\">\"172.25.2.10/24 172.25.2.254\"</span></span><br><span class=\"line\">nmcli con mod <span class=\"string\">\"static\"</span> +ipv4.address 192.168.1.1/24</span><br></pre></td></tr></table></figure>\n<p> ==============================================================</p>\n<p>修改配置文件后使用  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">nmcli con reload  重新加载配置文件  </span><br><span class=\"line\">nmcli con down;nmcli con up</span><br></pre></td></tr></table></figure>\n<p> ==============================================================<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostname  查看主机名</span><br><span class=\"line\"></span><br><span class=\"line\">hostnamectl <span class=\"built_in\">set</span>-hostname deskop.example.com</span><br><span class=\"line\"></span><br><span class=\"line\">hostnamectl status   <span class=\"comment\">#查看主机信息，包括主机名、计算机类型、系统类型、版本、架构</span></span><br><span class=\"line\">cat /etc/hostname  <span class=\"comment\">#主机名保存的文件，/etc/sysconfig/network (老版本)</span></span><br></pre></td></tr></table></figure></p>\n<p>/etc/hosts 文件配置静态域名解析，本地解析</p>\n<p>getent hosts <a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a>  #getent 解析域名，同nslookup，对hosts文件有支持<br>host classroom.example.com  #解析域名，同nslookup</p>\n<p>/etc/resolv.conf  配置 DNS 服务器地址,支持内容如下：</p>\n<pre><code>nameserver: DNS 的IP地址，最多可以设置3个\n\nsearch : 一般用域名，\n\ndomain :一般用域名\n</code></pre><p>PEERDNS=no 时，不会影响/etc/resolv.conf ，如果网卡配置PEERDNS=yes ,重启网卡时会覆盖resolv.conf</p>\n","site":{"data":{}},"excerpt":"","more":"<p>常见服务端口查看文件：/etc/services<br>rhel 7开始网卡的命令开头规则为：<br>以太网：en；无线网：wl；WWAN：ww；<br>后面根网卡接口类型：<br>hotplug 热插拔：s; PCI接口 :p<br>主板集成：o；x:MAC地址使用<br>最后的数字是：索引、ID或端口。<br>如：eno1,ens33,enp2s0,eth0<br>无法确认的情况下，使用ethN 传统的形式。  </p>\n<p>biosdevname 包用来定义udev设备的名称规则，PIC(S)网卡名pYpX ，Y代表slot number ,X 代表当前板卡的第几个口</p>\n<p> ==============================================================<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ip addr show ens33      <span class=\"comment\">#查看信息</span></span><br><span class=\"line\">ip -s link show eth0      <span class=\"comment\">#显示统计信息tatistics（统计）</span></span><br><span class=\"line\">ip route                 <span class=\"comment\">#查看路由</span></span><br><span class=\"line\">ping -c3 192.168.1.1  -cN     <span class=\"comment\">#指定ping的次数</span></span><br><span class=\"line\">tracepath access.redhat.com      <span class=\"comment\">#跟踪路由，默认使用UDP路由，然后UDP经常被封</span></span><br></pre></td></tr></table></figure></p>\n<p>traceroute 有 -I(ICMP) , -T (TCP) 选项<br>RTT  :Round trip timging; MTU:Maximum transmission unit<br>ss  -ta 显示tcp  socket 统计信息 -t=tcp ,-a=all.   ss类似netstat 命令<br>-n 以数字形式显示端口或地址<br>-t  tcp<br>-u     udp<br>-l     显示处于Listening状态的服务<br>-a  显示所有  </p>\n<p>-p   显示进程使用的socket</p>\n<p> ==============================================================</p>\n<p>配置文件位置/etc/sysconfig/network-scripts/<br>网络管理服务：NetworkManager,命令是nmcli  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">nmcli con show                 <span class=\"comment\">#显示所有连接的网卡</span></span><br><span class=\"line\">nmcli con show --active         <span class=\"comment\">#显示处于激活状态的网卡</span></span><br><span class=\"line\">nmcli con show <span class=\"string\">\"ens33\"</span>            <span class=\"comment\">#显示网卡的详细信息,对应的详细说明查看man nm-settings </span></span><br><span class=\"line\">nmcli dev status</span><br><span class=\"line\">nmcli dev show ens33               <span class=\"comment\">#显示指定网卡</span></span><br><span class=\"line\">nmcli dev show                    <span class=\"comment\">#显示网卡</span></span><br><span class=\"line\">nmcli con show                    <span class=\"comment\">#显示连接</span></span><br><span class=\"line\">nmcli con up  &lt;<span class=\"string\">\"ID\"</span>&gt;              <span class=\"comment\">#启用网卡</span></span><br><span class=\"line\">nmcli con down  &lt;<span class=\"string\">\"ID\"</span>&gt;             <span class=\"comment\">#关闭网卡</span></span><br><span class=\"line\">nmcli dev dis  &lt;<span class=\"string\">\"ID\"</span>&gt;             <span class=\"comment\">#断开连接</span></span><br><span class=\"line\">nmcli net off                     <span class=\"comment\">#停用网卡</span></span><br><span class=\"line\">nmcli net on                      <span class=\"comment\">#启用网卡</span></span><br><span class=\"line\">nmcli con add  ….               <span class=\"comment\">#添加连接</span></span><br><span class=\"line\">nmcli con mod  &lt;<span class=\"string\">\"ID\"</span>&gt;             <span class=\"comment\">#修改连接</span></span><br><span class=\"line\">nmcli con del  &lt;<span class=\"string\">\"ID\"</span>&gt;             <span class=\"comment\">#删除连接</span></span><br><span class=\"line\">man nm-connection-editor            <span class=\"comment\">#查看详细说明</span></span><br></pre></td></tr></table></figure>\n<p>==============================================================</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">nmcli con add con-name <span class=\"string\">\"default\"</span> <span class=\"built_in\">type</span> ethernet ifname eth0</span><br><span class=\"line\">nmcli con add con-name <span class=\"string\">\"static\"</span> ifname eth0 autoconnect no <span class=\"built_in\">type</span> ethernet ip4 172.25.1.10/24 gw4 172.25.1.254 </span><br><span class=\"line\">nmcli con up <span class=\"string\">\"static\"</span></span><br><span class=\"line\">nmcli con up <span class=\"string\">\"default\"</span></span><br><span class=\"line\">nmcli con mod <span class=\"string\">\"static\"</span> connection.autoconnect yes</span><br><span class=\"line\">nmcli con mod <span class=\"string\">\"static\"</span> ipv4.dns 172.24.1.254</span><br><span class=\"line\">nmcli con mod <span class=\"string\">\"static\"</span> +ipv4.dns 8.8.8.8</span><br><span class=\"line\">nmcli con mod <span class=\"string\">\"static\"</span> ipv4.address <span class=\"string\">\"172.25.2.10/24 172.25.2.254\"</span></span><br><span class=\"line\">nmcli con mod <span class=\"string\">\"static\"</span> +ipv4.address 192.168.1.1/24</span><br></pre></td></tr></table></figure>\n<p> ==============================================================</p>\n<p>修改配置文件后使用  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">nmcli con reload  重新加载配置文件  </span><br><span class=\"line\">nmcli con down;nmcli con up</span><br></pre></td></tr></table></figure>\n<p> ==============================================================<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostname  查看主机名</span><br><span class=\"line\"></span><br><span class=\"line\">hostnamectl <span class=\"built_in\">set</span>-hostname deskop.example.com</span><br><span class=\"line\"></span><br><span class=\"line\">hostnamectl status   <span class=\"comment\">#查看主机信息，包括主机名、计算机类型、系统类型、版本、架构</span></span><br><span class=\"line\">cat /etc/hostname  <span class=\"comment\">#主机名保存的文件，/etc/sysconfig/network (老版本)</span></span><br></pre></td></tr></table></figure></p>\n<p>/etc/hosts 文件配置静态域名解析，本地解析</p>\n<p>getent hosts <a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a>  #getent 解析域名，同nslookup，对hosts文件有支持<br>host classroom.example.com  #解析域名，同nslookup</p>\n<p>/etc/resolv.conf  配置 DNS 服务器地址,支持内容如下：</p>\n<pre><code>nameserver: DNS 的IP地址，最多可以设置3个\n\nsearch : 一般用域名，\n\ndomain :一般用域名\n</code></pre><p>PEERDNS=no 时，不会影响/etc/resolv.conf ，如果网卡配置PEERDNS=yes ,重启网卡时会覆盖resolv.conf</p>\n"},{"title":"Chapter 12. Archiving and copying Files","url":"152.html","id":"152","date":"2018-04-12T13:28:25.000Z","_content":"\n##### 压缩命令：tar , gzip ,bzip2, xz\n\ntar 命令参数：c(create) , t (list the contents) ,x (extract)  f (后面要跟filename），v (verbose 详细信息),\n\n使用tar 命令打包文件或者文件夹前检查是否有同名的压缩文件，tar会覆盖原文件不提示。\n\n```bash\n\ntar cf archive.tar file1 file2 file3  #压缩 file1,file2,file3 到archive.tar \ntar cf directory.tar directory1/    #压缩 directory1 目录到directory.tar\ntar tf archive.tar           #查看archive.tar 里的内容\ntar cf /root/etc.tar  /etc      # 指定压缩包的保存位置， 默认情况下，被压缩的路径前导符 “/”（/etc 在tar包里为etc） 在压缩时会被删除，为了以后解压时出现覆盖情况，\n\n```\n\n  \n\ntar 默认会保存文件的访问权限，如果需要同时保存selinux的上下文和acl权限，需要使用 --xattrs(需要root权限执行),--selinux，--acls 查看tar --help  \n\n```bash\n\ntar cf archive.tar --xattrs --selinux  filename   #创建\ntar xfp archive.tar --xattrs --selinux    #解压带权限\n\n```\n  \n\n默认情况下，使用root解压文件会保留文件所属权限，使用普通用户解压会修改文件所属为当前用户,在解压时一般会删除umask 权限，如果需要保留使用-p 选项\n\nz for gzip  (filename.tar.gz or filename.tgz)\n\nj for bzip2 (filename.tar.bz2)  \n\nJ for xz (filename.tar.xz)  \n\n![图片.png](1523583168668639.png)\n\n==========压缩\n```bash\ntar   czf    filename.tar.gz\ntar   czf    filename.tgz\ntar   cjf    filename.bz2\ntar   cJf    filename.xz\n\n```\n\n==========解压\n```bash\ntar   xzf    filename.tar.gz\ntar   xzf    filename.tgz\ntar   xjf    filename.bz2\ntar   xJf    filename.xz\n\n```\n\n  \n\n同时可以使用gzip,bzip2,xz 对tar包进行二次压缩\n\n\n\n### 2018-04-13\n\nscp  基于ssh 的安全传输\n\nscp  root@host:/path   \n```bash\nscp server0:/etc/hostname /home student/    #从远程下载\nscp /etc/yum.conf /etc/hosts server0:/home/student/        #上传到远程\nscp -r root@server0:/var/log /tmp            #递归复制，针对整个目录\n```\nsftp 互动型文件传输，同样基于ssh的FTP安全传输,\n```bash\nsftp server0    #连接后输入对应的用户密码，默认为当前同名用户\nsftp root@server0    #使用root用户登录\n```\n常用ftp 命令: ls ,cd ,mkdir ,rmdir ,pwd ,查看本地lcd ,lls ,lpwd 等，详细可以在ftp 模式下\"?\"查看，put 上传，get 下载，exit退出\n\n```bash\n\n[student@desktop0 ~]$ sftp server0\nstudent@server0's password: \nConnected to server0.\nsftp> pwd\nRemote working directory: /home/student\nsftp> mkdir hostbackup      \nsftp> cd hostbackup/\nsftp> put /etc/hosts        #上传\nUploading /etc/hosts to /home/student/hostbackup/hosts\n/etc/hosts                                    100%  231     0.2KB/s   00:00    \nsftp> get /etc/yum.conf     #下载\nFetching /etc/yum.conf to yum.conf\n/etc/yum.conf                                 100%  813     0.8KB/s   00:00    \nsftp> exit\n\n```\n\n#### rsync  远程同步\n\n-a    归档模式archive mode ，支持软连接,不支持高级权限如ACL,SELINUX 上下文\n\n-A  -a     启用支持高级权限如ACL\n\n-X  -a     启用Selinux  \n\n-n    测试模式，不做更改  \n\n-r    递归模式\n\n-l    同步符号连接，保存为连接\n\n-p    保留权限\n\n-H    保留硬连接\n\n##### 本地目录及文件同步：  \n```bash\n#命令    参数    源    目地\nrsync  -av  /var/log  /tmp #同步log文件夹及其内容\nrsync  -av /var/log/  /tmp    #仅同步文件夹下的内容\n\n#远程目录及文件同步,方式和scp 类似  \n\nrsync  -av /var/log   server0:/tmp\nrsync  -av server0:/var/log  /tmp\nrsync -av  root@server0:/var/log   /tmp\n\n```\n","source":"_posts/chapter-12-archiving-and-copying-files.md","raw":"---\ntitle: Chapter 12. Archiving and copying Files\nurl: 152.html\nid: 152\ncategories:\n  - RHEL124\ndate: 2018-04-12 21:28:25\ntags:\n---\n\n##### 压缩命令：tar , gzip ,bzip2, xz\n\ntar 命令参数：c(create) , t (list the contents) ,x (extract)  f (后面要跟filename），v (verbose 详细信息),\n\n使用tar 命令打包文件或者文件夹前检查是否有同名的压缩文件，tar会覆盖原文件不提示。\n\n```bash\n\ntar cf archive.tar file1 file2 file3  #压缩 file1,file2,file3 到archive.tar \ntar cf directory.tar directory1/    #压缩 directory1 目录到directory.tar\ntar tf archive.tar           #查看archive.tar 里的内容\ntar cf /root/etc.tar  /etc      # 指定压缩包的保存位置， 默认情况下，被压缩的路径前导符 “/”（/etc 在tar包里为etc） 在压缩时会被删除，为了以后解压时出现覆盖情况，\n\n```\n\n  \n\ntar 默认会保存文件的访问权限，如果需要同时保存selinux的上下文和acl权限，需要使用 --xattrs(需要root权限执行),--selinux，--acls 查看tar --help  \n\n```bash\n\ntar cf archive.tar --xattrs --selinux  filename   #创建\ntar xfp archive.tar --xattrs --selinux    #解压带权限\n\n```\n  \n\n默认情况下，使用root解压文件会保留文件所属权限，使用普通用户解压会修改文件所属为当前用户,在解压时一般会删除umask 权限，如果需要保留使用-p 选项\n\nz for gzip  (filename.tar.gz or filename.tgz)\n\nj for bzip2 (filename.tar.bz2)  \n\nJ for xz (filename.tar.xz)  \n\n![图片.png](1523583168668639.png)\n\n==========压缩\n```bash\ntar   czf    filename.tar.gz\ntar   czf    filename.tgz\ntar   cjf    filename.bz2\ntar   cJf    filename.xz\n\n```\n\n==========解压\n```bash\ntar   xzf    filename.tar.gz\ntar   xzf    filename.tgz\ntar   xjf    filename.bz2\ntar   xJf    filename.xz\n\n```\n\n  \n\n同时可以使用gzip,bzip2,xz 对tar包进行二次压缩\n\n\n\n### 2018-04-13\n\nscp  基于ssh 的安全传输\n\nscp  root@host:/path   \n```bash\nscp server0:/etc/hostname /home student/    #从远程下载\nscp /etc/yum.conf /etc/hosts server0:/home/student/        #上传到远程\nscp -r root@server0:/var/log /tmp            #递归复制，针对整个目录\n```\nsftp 互动型文件传输，同样基于ssh的FTP安全传输,\n```bash\nsftp server0    #连接后输入对应的用户密码，默认为当前同名用户\nsftp root@server0    #使用root用户登录\n```\n常用ftp 命令: ls ,cd ,mkdir ,rmdir ,pwd ,查看本地lcd ,lls ,lpwd 等，详细可以在ftp 模式下\"?\"查看，put 上传，get 下载，exit退出\n\n```bash\n\n[student@desktop0 ~]$ sftp server0\nstudent@server0's password: \nConnected to server0.\nsftp> pwd\nRemote working directory: /home/student\nsftp> mkdir hostbackup      \nsftp> cd hostbackup/\nsftp> put /etc/hosts        #上传\nUploading /etc/hosts to /home/student/hostbackup/hosts\n/etc/hosts                                    100%  231     0.2KB/s   00:00    \nsftp> get /etc/yum.conf     #下载\nFetching /etc/yum.conf to yum.conf\n/etc/yum.conf                                 100%  813     0.8KB/s   00:00    \nsftp> exit\n\n```\n\n#### rsync  远程同步\n\n-a    归档模式archive mode ，支持软连接,不支持高级权限如ACL,SELINUX 上下文\n\n-A  -a     启用支持高级权限如ACL\n\n-X  -a     启用Selinux  \n\n-n    测试模式，不做更改  \n\n-r    递归模式\n\n-l    同步符号连接，保存为连接\n\n-p    保留权限\n\n-H    保留硬连接\n\n##### 本地目录及文件同步：  \n```bash\n#命令    参数    源    目地\nrsync  -av  /var/log  /tmp #同步log文件夹及其内容\nrsync  -av /var/log/  /tmp    #仅同步文件夹下的内容\n\n#远程目录及文件同步,方式和scp 类似  \n\nrsync  -av /var/log   server0:/tmp\nrsync  -av server0:/var/log  /tmp\nrsync -av  root@server0:/var/log   /tmp\n\n```\n","slug":"chapter-12-archiving-and-copying-files","published":1,"updated":"2019-01-05T15:37:49.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqhyo0004lxkjla5svw9n","content":"<h5 id=\"压缩命令：tar-gzip-bzip2-xz\"><a href=\"#压缩命令：tar-gzip-bzip2-xz\" class=\"headerlink\" title=\"压缩命令：tar , gzip ,bzip2, xz\"></a>压缩命令：tar , gzip ,bzip2, xz</h5><p>tar 命令参数：c(create) , t (list the contents) ,x (extract)  f (后面要跟filename），v (verbose 详细信息),</p>\n<p>使用tar 命令打包文件或者文件夹前检查是否有同名的压缩文件，tar会覆盖原文件不提示。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">tar cf archive.tar file1 file2 file3  <span class=\"comment\">#压缩 file1,file2,file3 到archive.tar </span></span><br><span class=\"line\">tar cf directory.tar directory1/    <span class=\"comment\">#压缩 directory1 目录到directory.tar</span></span><br><span class=\"line\">tar tf archive.tar           <span class=\"comment\">#查看archive.tar 里的内容</span></span><br><span class=\"line\">tar cf /root/etc.tar  /etc      <span class=\"comment\"># 指定压缩包的保存位置， 默认情况下，被压缩的路径前导符 “/”（/etc 在tar包里为etc） 在压缩时会被删除，为了以后解压时出现覆盖情况，</span></span><br></pre></td></tr></table></figure>\n<p>tar 默认会保存文件的访问权限，如果需要同时保存selinux的上下文和acl权限，需要使用 –xattrs(需要root权限执行),–selinux，–acls 查看tar –help  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">tar cf archive.tar --xattrs --selinux  filename   <span class=\"comment\">#创建</span></span><br><span class=\"line\">tar xfp archive.tar --xattrs --selinux    <span class=\"comment\">#解压带权限</span></span><br></pre></td></tr></table></figure>\n<p>默认情况下，使用root解压文件会保留文件所属权限，使用普通用户解压会修改文件所属为当前用户,在解压时一般会删除umask 权限，如果需要保留使用-p 选项</p>\n<p>z for gzip  (filename.tar.gz or filename.tgz)</p>\n<p>j for bzip2 (filename.tar.bz2)  </p>\n<p>J for xz (filename.tar.xz)  </p>\n<p><img src=\"/2018/04/12/chapter-12-archiving-and-copying-files/1523583168668639.png\" alt=\"图片.png\"></p>\n<p>==========压缩<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar   czf    filename.tar.gz</span><br><span class=\"line\">tar   czf    filename.tgz</span><br><span class=\"line\">tar   cjf    filename.bz2</span><br><span class=\"line\">tar   cJf    filename.xz</span><br></pre></td></tr></table></figure></p>\n<p>==========解压<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar   xzf    filename.tar.gz</span><br><span class=\"line\">tar   xzf    filename.tgz</span><br><span class=\"line\">tar   xjf    filename.bz2</span><br><span class=\"line\">tar   xJf    filename.xz</span><br></pre></td></tr></table></figure></p>\n<p>同时可以使用gzip,bzip2,xz 对tar包进行二次压缩</p>\n<h3 id=\"2018-04-13\"><a href=\"#2018-04-13\" class=\"headerlink\" title=\"2018-04-13\"></a>2018-04-13</h3><p>scp  基于ssh 的安全传输</p>\n<p>scp  root@host:/path<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp server0:/etc/hostname /home student/    <span class=\"comment\">#从远程下载</span></span><br><span class=\"line\">scp /etc/yum.conf /etc/hosts server0:/home/student/        <span class=\"comment\">#上传到远程</span></span><br><span class=\"line\">scp -r root@server0:/var/<span class=\"built_in\">log</span> /tmp            <span class=\"comment\">#递归复制，针对整个目录</span></span><br></pre></td></tr></table></figure></p>\n<p>sftp 互动型文件传输，同样基于ssh的FTP安全传输,<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sftp server0    <span class=\"comment\">#连接后输入对应的用户密码，默认为当前同名用户</span></span><br><span class=\"line\">sftp root@server0    <span class=\"comment\">#使用root用户登录</span></span><br></pre></td></tr></table></figure></p>\n<p>常用ftp 命令: ls ,cd ,mkdir ,rmdir ,pwd ,查看本地lcd ,lls ,lpwd 等，详细可以在ftp 模式下”?”查看，put 上传，get 下载，exit退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[student@desktop0 ~]$ sftp server0</span><br><span class=\"line\">student@server0<span class=\"string\">'s password: </span></span><br><span class=\"line\"><span class=\"string\">Connected to server0.</span></span><br><span class=\"line\"><span class=\"string\">sftp&gt; pwd</span></span><br><span class=\"line\"><span class=\"string\">Remote working directory: /home/student</span></span><br><span class=\"line\"><span class=\"string\">sftp&gt; mkdir hostbackup      </span></span><br><span class=\"line\"><span class=\"string\">sftp&gt; cd hostbackup/</span></span><br><span class=\"line\"><span class=\"string\">sftp&gt; put /etc/hosts        #上传</span></span><br><span class=\"line\"><span class=\"string\">Uploading /etc/hosts to /home/student/hostbackup/hosts</span></span><br><span class=\"line\"><span class=\"string\">/etc/hosts                                    100%  231     0.2KB/s   00:00    </span></span><br><span class=\"line\"><span class=\"string\">sftp&gt; get /etc/yum.conf     #下载</span></span><br><span class=\"line\"><span class=\"string\">Fetching /etc/yum.conf to yum.conf</span></span><br><span class=\"line\"><span class=\"string\">/etc/yum.conf                                 100%  813     0.8KB/s   00:00    </span></span><br><span class=\"line\"><span class=\"string\">sftp&gt; exit</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"rsync-远程同步\"><a href=\"#rsync-远程同步\" class=\"headerlink\" title=\"rsync  远程同步\"></a>rsync  远程同步</h4><p>-a    归档模式archive mode ，支持软连接,不支持高级权限如ACL,SELINUX 上下文</p>\n<p>-A  -a     启用支持高级权限如ACL</p>\n<p>-X  -a     启用Selinux  </p>\n<p>-n    测试模式，不做更改  </p>\n<p>-r    递归模式</p>\n<p>-l    同步符号连接，保存为连接</p>\n<p>-p    保留权限</p>\n<p>-H    保留硬连接</p>\n<h5 id=\"本地目录及文件同步：\"><a href=\"#本地目录及文件同步：\" class=\"headerlink\" title=\"本地目录及文件同步：\"></a>本地目录及文件同步：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#命令    参数    源    目地</span></span><br><span class=\"line\">rsync  -av  /var/<span class=\"built_in\">log</span>  /tmp <span class=\"comment\">#同步log文件夹及其内容</span></span><br><span class=\"line\">rsync  -av /var/<span class=\"built_in\">log</span>/  /tmp    <span class=\"comment\">#仅同步文件夹下的内容</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#远程目录及文件同步,方式和scp 类似  </span></span><br><span class=\"line\"></span><br><span class=\"line\">rsync  -av /var/<span class=\"built_in\">log</span>   server0:/tmp</span><br><span class=\"line\">rsync  -av server0:/var/<span class=\"built_in\">log</span>  /tmp</span><br><span class=\"line\">rsync -av  root@server0:/var/<span class=\"built_in\">log</span>   /tmp</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"压缩命令：tar-gzip-bzip2-xz\"><a href=\"#压缩命令：tar-gzip-bzip2-xz\" class=\"headerlink\" title=\"压缩命令：tar , gzip ,bzip2, xz\"></a>压缩命令：tar , gzip ,bzip2, xz</h5><p>tar 命令参数：c(create) , t (list the contents) ,x (extract)  f (后面要跟filename），v (verbose 详细信息),</p>\n<p>使用tar 命令打包文件或者文件夹前检查是否有同名的压缩文件，tar会覆盖原文件不提示。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">tar cf archive.tar file1 file2 file3  <span class=\"comment\">#压缩 file1,file2,file3 到archive.tar </span></span><br><span class=\"line\">tar cf directory.tar directory1/    <span class=\"comment\">#压缩 directory1 目录到directory.tar</span></span><br><span class=\"line\">tar tf archive.tar           <span class=\"comment\">#查看archive.tar 里的内容</span></span><br><span class=\"line\">tar cf /root/etc.tar  /etc      <span class=\"comment\"># 指定压缩包的保存位置， 默认情况下，被压缩的路径前导符 “/”（/etc 在tar包里为etc） 在压缩时会被删除，为了以后解压时出现覆盖情况，</span></span><br></pre></td></tr></table></figure>\n<p>tar 默认会保存文件的访问权限，如果需要同时保存selinux的上下文和acl权限，需要使用 –xattrs(需要root权限执行),–selinux，–acls 查看tar –help  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">tar cf archive.tar --xattrs --selinux  filename   <span class=\"comment\">#创建</span></span><br><span class=\"line\">tar xfp archive.tar --xattrs --selinux    <span class=\"comment\">#解压带权限</span></span><br></pre></td></tr></table></figure>\n<p>默认情况下，使用root解压文件会保留文件所属权限，使用普通用户解压会修改文件所属为当前用户,在解压时一般会删除umask 权限，如果需要保留使用-p 选项</p>\n<p>z for gzip  (filename.tar.gz or filename.tgz)</p>\n<p>j for bzip2 (filename.tar.bz2)  </p>\n<p>J for xz (filename.tar.xz)  </p>\n<p><img src=\"/2018/04/12/chapter-12-archiving-and-copying-files/1523583168668639.png\" alt=\"图片.png\"></p>\n<p>==========压缩<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar   czf    filename.tar.gz</span><br><span class=\"line\">tar   czf    filename.tgz</span><br><span class=\"line\">tar   cjf    filename.bz2</span><br><span class=\"line\">tar   cJf    filename.xz</span><br></pre></td></tr></table></figure></p>\n<p>==========解压<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar   xzf    filename.tar.gz</span><br><span class=\"line\">tar   xzf    filename.tgz</span><br><span class=\"line\">tar   xjf    filename.bz2</span><br><span class=\"line\">tar   xJf    filename.xz</span><br></pre></td></tr></table></figure></p>\n<p>同时可以使用gzip,bzip2,xz 对tar包进行二次压缩</p>\n<h3 id=\"2018-04-13\"><a href=\"#2018-04-13\" class=\"headerlink\" title=\"2018-04-13\"></a>2018-04-13</h3><p>scp  基于ssh 的安全传输</p>\n<p>scp  root@host:/path<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp server0:/etc/hostname /home student/    <span class=\"comment\">#从远程下载</span></span><br><span class=\"line\">scp /etc/yum.conf /etc/hosts server0:/home/student/        <span class=\"comment\">#上传到远程</span></span><br><span class=\"line\">scp -r root@server0:/var/<span class=\"built_in\">log</span> /tmp            <span class=\"comment\">#递归复制，针对整个目录</span></span><br></pre></td></tr></table></figure></p>\n<p>sftp 互动型文件传输，同样基于ssh的FTP安全传输,<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sftp server0    <span class=\"comment\">#连接后输入对应的用户密码，默认为当前同名用户</span></span><br><span class=\"line\">sftp root@server0    <span class=\"comment\">#使用root用户登录</span></span><br></pre></td></tr></table></figure></p>\n<p>常用ftp 命令: ls ,cd ,mkdir ,rmdir ,pwd ,查看本地lcd ,lls ,lpwd 等，详细可以在ftp 模式下”?”查看，put 上传，get 下载，exit退出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[student@desktop0 ~]$ sftp server0</span><br><span class=\"line\">student@server0<span class=\"string\">'s password: </span></span><br><span class=\"line\"><span class=\"string\">Connected to server0.</span></span><br><span class=\"line\"><span class=\"string\">sftp&gt; pwd</span></span><br><span class=\"line\"><span class=\"string\">Remote working directory: /home/student</span></span><br><span class=\"line\"><span class=\"string\">sftp&gt; mkdir hostbackup      </span></span><br><span class=\"line\"><span class=\"string\">sftp&gt; cd hostbackup/</span></span><br><span class=\"line\"><span class=\"string\">sftp&gt; put /etc/hosts        #上传</span></span><br><span class=\"line\"><span class=\"string\">Uploading /etc/hosts to /home/student/hostbackup/hosts</span></span><br><span class=\"line\"><span class=\"string\">/etc/hosts                                    100%  231     0.2KB/s   00:00    </span></span><br><span class=\"line\"><span class=\"string\">sftp&gt; get /etc/yum.conf     #下载</span></span><br><span class=\"line\"><span class=\"string\">Fetching /etc/yum.conf to yum.conf</span></span><br><span class=\"line\"><span class=\"string\">/etc/yum.conf                                 100%  813     0.8KB/s   00:00    </span></span><br><span class=\"line\"><span class=\"string\">sftp&gt; exit</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"rsync-远程同步\"><a href=\"#rsync-远程同步\" class=\"headerlink\" title=\"rsync  远程同步\"></a>rsync  远程同步</h4><p>-a    归档模式archive mode ，支持软连接,不支持高级权限如ACL,SELINUX 上下文</p>\n<p>-A  -a     启用支持高级权限如ACL</p>\n<p>-X  -a     启用Selinux  </p>\n<p>-n    测试模式，不做更改  </p>\n<p>-r    递归模式</p>\n<p>-l    同步符号连接，保存为连接</p>\n<p>-p    保留权限</p>\n<p>-H    保留硬连接</p>\n<h5 id=\"本地目录及文件同步：\"><a href=\"#本地目录及文件同步：\" class=\"headerlink\" title=\"本地目录及文件同步：\"></a>本地目录及文件同步：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#命令    参数    源    目地</span></span><br><span class=\"line\">rsync  -av  /var/<span class=\"built_in\">log</span>  /tmp <span class=\"comment\">#同步log文件夹及其内容</span></span><br><span class=\"line\">rsync  -av /var/<span class=\"built_in\">log</span>/  /tmp    <span class=\"comment\">#仅同步文件夹下的内容</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#远程目录及文件同步,方式和scp 类似  </span></span><br><span class=\"line\"></span><br><span class=\"line\">rsync  -av /var/<span class=\"built_in\">log</span>   server0:/tmp</span><br><span class=\"line\">rsync  -av server0:/var/<span class=\"built_in\">log</span>  /tmp</span><br><span class=\"line\">rsync -av  root@server0:/var/<span class=\"built_in\">log</span>   /tmp</span><br></pre></td></tr></table></figure>\n"},{"title":"Chapter 15. Using virtualized system","url":"187.html","id":"187","date":"2018-04-18T02:57:03.000Z","_content":"\nKVM(基于内核的虚拟机)是标准Red Hat Enterprise Linux 内核中内置的完整虚拟化解决方案。它可以运行多款未经修改的Windows 和Linux 虚拟客户操作系统。Red Hat Enterprise Linux中的KVM系统管理程序通过libvirt API 和实用程序进行管理。如virt-manager 和virsh等。由于Red Hat Enterprise Linux 是红帽企业虚拟化和红帽OpenStack 平台的基础。因此KVM是红帽云基础架构多种产品的一致组件。\n\n![图片.png](1524011869875353.png)\n\n*   KVM提供横跨所有红帽产品的虚拟机（VM）技术，不仅包含Red Hat Enterprise Linux 的单机物理实例，更有OpenStack 云平台。从上图的左上角起：\n\n*   物理（传统）系统-Red Hat Enterprise Linux 安装在传统硬件上，提供KVM虚拟化，最高可达单一系统的物理极限，并且由virt-manager 等libvirt实用程序进程管理。Red Hat Enterprise Linux 实例也可通过红帽云访问。直接托管在红帽认证云提供商处。\n\n*   红帽企业Linux 通常配置为胖主机，即在支持VM的同时，也提供其他本地和网络服务、应用和管理功能。\n\n*   红帽企业虚拟化（RHEV）--支持跨越多个红帽企业虚拟化系统管理程序 （RHEV-H）系统的KVM实例。提供由RHEV管理（RHEV-H）管理的KVM迁移、冗余和高可用性。\n\n*   红帽企业虚拟化系统管理程序 是瘦主机，是专门精简和调优过的Red Hat Enterprise Linux 版本，专用于满足和支持虚拟客户机VM的唯一目的。\n\n*   RHEL OpenStack平台——在带有KVM的Red Hat Enterprise Linux 基础上使用集成和调优的OpenStack 的红帽私有云架构，通过红帽OpenStack 仪表板（Horizon 组件）或红帽 CloudForms 进程管理。\n\n*   公共云中的OpenStack——在红帽认证云提供商处实施的OpenStack 公共云架构，由OpenStack Horizon 组件或红帽 CloudForms进行管理。\n\n*   混合云——红帽CloudForms 云管理实用程序管理和迁移红帽RHEV和OpenStack 架构之间的KVM实例，以及通过第三方OpenStack和VMware平台转换KVM实例。\n\n*   KVM实例配置在红帽产品之间兼容。安装要求、参数和步骤在受支持的平台上相当的。\n\n\nKVM系统管理程序需要Intel 处理器（Intel VT-x 和基于X86 的系统的Intel 64扩展），或者AMD处理器（AMD-V 及AMD64扩展）。验证是否支持可能通过：\n```sh\ngrep --color -E \"vmx|svm\" /proc/cpuinfo\n```\n\n\n在Red Hat Enterprise Linux 上构建主机时并不需要No eXecute (NX)功能（Intel 称之为eXecute Disable(XD),AMD则称之为Enhanced Virus Protection）,但是红帽企业虚拟化系统管理程序（RHEV-H）需要此功能。  \n```sh\ngrep --color -E \"nx\" /proc/cpuinfo\n```\n\n\n构建RHEL虚拟化主机至少需要qemu-kvm和qemu-img软件包，以提供用户级KVM模拟器和磁盘映像管理器\n```sh\nyum install qemu-kvm qemu-img\n```\n\n\n建议安装的其它虚拟化管理软件包有：\n\n*   python-virtinst —— 提供virt-install命令，供创建虚拟机使用\n\n*   libvirt —— 提供主机和服务库，以便与系统管理程序和主机系统交互  \n\n*   libvirt-python —— 包含允许Python应用使用libvirt API的模块  \n\n*   virt-manager —— 为管理VM提供虚拟机管理器图形工具，将libvirt-client库用作管理  \n\n*   libvirt-client —— 为访问libvirt服务器提供客户端API和库，以及用于管理和控制VM的virsh命令行工具。  \n\n```sh\nyum install python-virtinst libvirt libvirt-python virt-manager libvirt-client\n```\nRHEL7 更新版anaconda图形安装程序 ，安装程序时不再提供选择个别RPM软件的功能，而只能选择基地环境和适合于所选基础的附加程。因而消除了猜测、使用配置更加精简。在安装完成后依然可能通过rmp 、yum或GNOME PackageKit 安装其他所需的RPM软件包。  \n\n\n\nRed Hat Enterprise Linux 使用基于libvirt的工具，作为虚拟化管理的默认方式。其支持RHEL 5 Xen 系统管理程序，以及RHEL 5、6和7上的KVM。下列管理工具使用libvirt:\n\n*   virsh —— virsh 命令行管理工具是图形版 virt-manager 应用程序的代替工具。无特权用户能以只读模式使用模式virsh，或者通过root 访问权限使用完整的管理功能。virsh命令是编写虚拟化管理脚本的理想选择。\n\n*   virt-manager —— virt-manager 是一款图形化桌面工具，可以访问虚拟客户机控制台，用于执行虚拟机创建、迁移、配置和管理任务。可以通过单一界面管理本地和远程系统。\n\n*   RHEV-M —— 红帽企业虚拟化管理器为物理和虚拟资源提供一个中央化管理平台，允许在主机之间启用、停止、构建和迁移虚拟机。RHEV-M 也可以管理数据中心的存储和网络组件，提供安全的远程图形化虚拟客户机控制台访问方式。\n\n\nvirsh 作为交互式shell使用:\n\nlist —— 查看，--all 可查看全部  \n\ndestroy —— 强制关闭，后面跟虚机名，与将其拔出相似  \n\nstop —— 暂时运行，后面跟虚机名\n\nstart —— 启动虚机，后面跟虚机名\n\nedit —— 编辑域的配置文件，这会在虚拟客户机下一次启动时产生作用\n\nconnect —— 使用qemu://host 语法连接本地或远程KVM主机。  \n\nnodeinfo —— 返回主机的基地信息，如CPU和内存等。  \n\nautostart —— 将KVM域配置为在主机系统启动时启动。  \n\nconsole —— 连接到虚拟客户机的虚拟串行控制台。  \n\ncreate —— 从XML 配置文件创建域，并将它启动。  \n\ndefine —— 从XML 配置谁的创建域，但不启动它。  \n\nundefine —— 取消定义域。如果域为不活动，则域配置将被删除。  \n\nreboot —— 重新启动域，就如从客户机内部运行reboot 命令一样  \n\nshutdown —— 正常地关闭域，就如从虚拟客户机内部运行shutdown 一样。  \n\nscreenshot —— 为当前域控制台抓取屏幕截图，并存储在文件中。  \n\n\n\n|配置说明|红帽产品|\n| :-- | :-- |\n|提供KVM支持的单系统硬件|红帽企业Linux  |\n|提供虚拟化冗余的多系统硬件  |红帽企业虚拟化  |\n|提供私有云的多系统硬件  |RHEL OpenStack平台  |\n|提供公共云的云提供商  |公共云中的OpenStack  |\n|用于独立KVM主机的管理实用程序  |virt-manager|\n|用于多主机虚拟化平台的管理实用程序 |RHEV-M  |\n|用于所有虚拟化和云平台组合的管理实用程序  |CloudForms|\n","source":"_posts/chapter-15-using-virtualized-system.md","raw":"---\ntitle: Chapter 15. Using virtualized system\nurl: 187.html\nid: 187\ncategories:\n  - RHEL124\ndate: 2018-04-18 10:57:03\ntags:\n---\n\nKVM(基于内核的虚拟机)是标准Red Hat Enterprise Linux 内核中内置的完整虚拟化解决方案。它可以运行多款未经修改的Windows 和Linux 虚拟客户操作系统。Red Hat Enterprise Linux中的KVM系统管理程序通过libvirt API 和实用程序进行管理。如virt-manager 和virsh等。由于Red Hat Enterprise Linux 是红帽企业虚拟化和红帽OpenStack 平台的基础。因此KVM是红帽云基础架构多种产品的一致组件。\n\n![图片.png](1524011869875353.png)\n\n*   KVM提供横跨所有红帽产品的虚拟机（VM）技术，不仅包含Red Hat Enterprise Linux 的单机物理实例，更有OpenStack 云平台。从上图的左上角起：\n\n*   物理（传统）系统-Red Hat Enterprise Linux 安装在传统硬件上，提供KVM虚拟化，最高可达单一系统的物理极限，并且由virt-manager 等libvirt实用程序进程管理。Red Hat Enterprise Linux 实例也可通过红帽云访问。直接托管在红帽认证云提供商处。\n\n*   红帽企业Linux 通常配置为胖主机，即在支持VM的同时，也提供其他本地和网络服务、应用和管理功能。\n\n*   红帽企业虚拟化（RHEV）--支持跨越多个红帽企业虚拟化系统管理程序 （RHEV-H）系统的KVM实例。提供由RHEV管理（RHEV-H）管理的KVM迁移、冗余和高可用性。\n\n*   红帽企业虚拟化系统管理程序 是瘦主机，是专门精简和调优过的Red Hat Enterprise Linux 版本，专用于满足和支持虚拟客户机VM的唯一目的。\n\n*   RHEL OpenStack平台——在带有KVM的Red Hat Enterprise Linux 基础上使用集成和调优的OpenStack 的红帽私有云架构，通过红帽OpenStack 仪表板（Horizon 组件）或红帽 CloudForms 进程管理。\n\n*   公共云中的OpenStack——在红帽认证云提供商处实施的OpenStack 公共云架构，由OpenStack Horizon 组件或红帽 CloudForms进行管理。\n\n*   混合云——红帽CloudForms 云管理实用程序管理和迁移红帽RHEV和OpenStack 架构之间的KVM实例，以及通过第三方OpenStack和VMware平台转换KVM实例。\n\n*   KVM实例配置在红帽产品之间兼容。安装要求、参数和步骤在受支持的平台上相当的。\n\n\nKVM系统管理程序需要Intel 处理器（Intel VT-x 和基于X86 的系统的Intel 64扩展），或者AMD处理器（AMD-V 及AMD64扩展）。验证是否支持可能通过：\n```sh\ngrep --color -E \"vmx|svm\" /proc/cpuinfo\n```\n\n\n在Red Hat Enterprise Linux 上构建主机时并不需要No eXecute (NX)功能（Intel 称之为eXecute Disable(XD),AMD则称之为Enhanced Virus Protection）,但是红帽企业虚拟化系统管理程序（RHEV-H）需要此功能。  \n```sh\ngrep --color -E \"nx\" /proc/cpuinfo\n```\n\n\n构建RHEL虚拟化主机至少需要qemu-kvm和qemu-img软件包，以提供用户级KVM模拟器和磁盘映像管理器\n```sh\nyum install qemu-kvm qemu-img\n```\n\n\n建议安装的其它虚拟化管理软件包有：\n\n*   python-virtinst —— 提供virt-install命令，供创建虚拟机使用\n\n*   libvirt —— 提供主机和服务库，以便与系统管理程序和主机系统交互  \n\n*   libvirt-python —— 包含允许Python应用使用libvirt API的模块  \n\n*   virt-manager —— 为管理VM提供虚拟机管理器图形工具，将libvirt-client库用作管理  \n\n*   libvirt-client —— 为访问libvirt服务器提供客户端API和库，以及用于管理和控制VM的virsh命令行工具。  \n\n```sh\nyum install python-virtinst libvirt libvirt-python virt-manager libvirt-client\n```\nRHEL7 更新版anaconda图形安装程序 ，安装程序时不再提供选择个别RPM软件的功能，而只能选择基地环境和适合于所选基础的附加程。因而消除了猜测、使用配置更加精简。在安装完成后依然可能通过rmp 、yum或GNOME PackageKit 安装其他所需的RPM软件包。  \n\n\n\nRed Hat Enterprise Linux 使用基于libvirt的工具，作为虚拟化管理的默认方式。其支持RHEL 5 Xen 系统管理程序，以及RHEL 5、6和7上的KVM。下列管理工具使用libvirt:\n\n*   virsh —— virsh 命令行管理工具是图形版 virt-manager 应用程序的代替工具。无特权用户能以只读模式使用模式virsh，或者通过root 访问权限使用完整的管理功能。virsh命令是编写虚拟化管理脚本的理想选择。\n\n*   virt-manager —— virt-manager 是一款图形化桌面工具，可以访问虚拟客户机控制台，用于执行虚拟机创建、迁移、配置和管理任务。可以通过单一界面管理本地和远程系统。\n\n*   RHEV-M —— 红帽企业虚拟化管理器为物理和虚拟资源提供一个中央化管理平台，允许在主机之间启用、停止、构建和迁移虚拟机。RHEV-M 也可以管理数据中心的存储和网络组件，提供安全的远程图形化虚拟客户机控制台访问方式。\n\n\nvirsh 作为交互式shell使用:\n\nlist —— 查看，--all 可查看全部  \n\ndestroy —— 强制关闭，后面跟虚机名，与将其拔出相似  \n\nstop —— 暂时运行，后面跟虚机名\n\nstart —— 启动虚机，后面跟虚机名\n\nedit —— 编辑域的配置文件，这会在虚拟客户机下一次启动时产生作用\n\nconnect —— 使用qemu://host 语法连接本地或远程KVM主机。  \n\nnodeinfo —— 返回主机的基地信息，如CPU和内存等。  \n\nautostart —— 将KVM域配置为在主机系统启动时启动。  \n\nconsole —— 连接到虚拟客户机的虚拟串行控制台。  \n\ncreate —— 从XML 配置文件创建域，并将它启动。  \n\ndefine —— 从XML 配置谁的创建域，但不启动它。  \n\nundefine —— 取消定义域。如果域为不活动，则域配置将被删除。  \n\nreboot —— 重新启动域，就如从客户机内部运行reboot 命令一样  \n\nshutdown —— 正常地关闭域，就如从虚拟客户机内部运行shutdown 一样。  \n\nscreenshot —— 为当前域控制台抓取屏幕截图，并存储在文件中。  \n\n\n\n|配置说明|红帽产品|\n| :-- | :-- |\n|提供KVM支持的单系统硬件|红帽企业Linux  |\n|提供虚拟化冗余的多系统硬件  |红帽企业虚拟化  |\n|提供私有云的多系统硬件  |RHEL OpenStack平台  |\n|提供公共云的云提供商  |公共云中的OpenStack  |\n|用于独立KVM主机的管理实用程序  |virt-manager|\n|用于多主机虚拟化平台的管理实用程序 |RHEV-M  |\n|用于所有虚拟化和云平台组合的管理实用程序  |CloudForms|\n","slug":"chapter-15-using-virtualized-system","published":1,"updated":"2019-01-06T15:40:28.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqhyq0005lxkj367vvw9u","content":"<p>KVM(基于内核的虚拟机)是标准Red Hat Enterprise Linux 内核中内置的完整虚拟化解决方案。它可以运行多款未经修改的Windows 和Linux 虚拟客户操作系统。Red Hat Enterprise Linux中的KVM系统管理程序通过libvirt API 和实用程序进行管理。如virt-manager 和virsh等。由于Red Hat Enterprise Linux 是红帽企业虚拟化和红帽OpenStack 平台的基础。因此KVM是红帽云基础架构多种产品的一致组件。</p>\n<p><img src=\"/2018/04/18/chapter-15-using-virtualized-system/1524011869875353.png\" alt=\"图片.png\"></p>\n<ul>\n<li><p>KVM提供横跨所有红帽产品的虚拟机（VM）技术，不仅包含Red Hat Enterprise Linux 的单机物理实例，更有OpenStack 云平台。从上图的左上角起：</p>\n</li>\n<li><p>物理（传统）系统-Red Hat Enterprise Linux 安装在传统硬件上，提供KVM虚拟化，最高可达单一系统的物理极限，并且由virt-manager 等libvirt实用程序进程管理。Red Hat Enterprise Linux 实例也可通过红帽云访问。直接托管在红帽认证云提供商处。</p>\n</li>\n<li><p>红帽企业Linux 通常配置为胖主机，即在支持VM的同时，也提供其他本地和网络服务、应用和管理功能。</p>\n</li>\n<li><p>红帽企业虚拟化（RHEV）–支持跨越多个红帽企业虚拟化系统管理程序 （RHEV-H）系统的KVM实例。提供由RHEV管理（RHEV-H）管理的KVM迁移、冗余和高可用性。</p>\n</li>\n<li><p>红帽企业虚拟化系统管理程序 是瘦主机，是专门精简和调优过的Red Hat Enterprise Linux 版本，专用于满足和支持虚拟客户机VM的唯一目的。</p>\n</li>\n<li><p>RHEL OpenStack平台——在带有KVM的Red Hat Enterprise Linux 基础上使用集成和调优的OpenStack 的红帽私有云架构，通过红帽OpenStack 仪表板（Horizon 组件）或红帽 CloudForms 进程管理。</p>\n</li>\n<li><p>公共云中的OpenStack——在红帽认证云提供商处实施的OpenStack 公共云架构，由OpenStack Horizon 组件或红帽 CloudForms进行管理。</p>\n</li>\n<li><p>混合云——红帽CloudForms 云管理实用程序管理和迁移红帽RHEV和OpenStack 架构之间的KVM实例，以及通过第三方OpenStack和VMware平台转换KVM实例。</p>\n</li>\n<li><p>KVM实例配置在红帽产品之间兼容。安装要求、参数和步骤在受支持的平台上相当的。</p>\n</li>\n</ul>\n<p>KVM系统管理程序需要Intel 处理器（Intel VT-x 和基于X86 的系统的Intel 64扩展），或者AMD处理器（AMD-V 及AMD64扩展）。验证是否支持可能通过：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep --color -E <span class=\"string\">\"vmx|svm\"</span> /proc/cpuinfo</span><br></pre></td></tr></table></figure></p>\n<p>在Red Hat Enterprise Linux 上构建主机时并不需要No eXecute (NX)功能（Intel 称之为eXecute Disable(XD),AMD则称之为Enhanced Virus Protection）,但是红帽企业虚拟化系统管理程序（RHEV-H）需要此功能。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep --color -E <span class=\"string\">\"nx\"</span> /proc/cpuinfo</span><br></pre></td></tr></table></figure></p>\n<p>构建RHEL虚拟化主机至少需要qemu-kvm和qemu-img软件包，以提供用户级KVM模拟器和磁盘映像管理器<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install qemu-kvm qemu-img</span><br></pre></td></tr></table></figure></p>\n<p>建议安装的其它虚拟化管理软件包有：</p>\n<ul>\n<li><p>python-virtinst —— 提供virt-install命令，供创建虚拟机使用</p>\n</li>\n<li><p>libvirt —— 提供主机和服务库，以便与系统管理程序和主机系统交互  </p>\n</li>\n<li><p>libvirt-python —— 包含允许Python应用使用libvirt API的模块  </p>\n</li>\n<li><p>virt-manager —— 为管理VM提供虚拟机管理器图形工具，将libvirt-client库用作管理  </p>\n</li>\n<li><p>libvirt-client —— 为访问libvirt服务器提供客户端API和库，以及用于管理和控制VM的virsh命令行工具。  </p>\n</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python-virtinst libvirt libvirt-python virt-manager libvirt-client</span><br></pre></td></tr></table></figure>\n<p>RHEL7 更新版anaconda图形安装程序 ，安装程序时不再提供选择个别RPM软件的功能，而只能选择基地环境和适合于所选基础的附加程。因而消除了猜测、使用配置更加精简。在安装完成后依然可能通过rmp 、yum或GNOME PackageKit 安装其他所需的RPM软件包。  </p>\n<p>Red Hat Enterprise Linux 使用基于libvirt的工具，作为虚拟化管理的默认方式。其支持RHEL 5 Xen 系统管理程序，以及RHEL 5、6和7上的KVM。下列管理工具使用libvirt:</p>\n<ul>\n<li><p>virsh —— virsh 命令行管理工具是图形版 virt-manager 应用程序的代替工具。无特权用户能以只读模式使用模式virsh，或者通过root 访问权限使用完整的管理功能。virsh命令是编写虚拟化管理脚本的理想选择。</p>\n</li>\n<li><p>virt-manager —— virt-manager 是一款图形化桌面工具，可以访问虚拟客户机控制台，用于执行虚拟机创建、迁移、配置和管理任务。可以通过单一界面管理本地和远程系统。</p>\n</li>\n<li><p>RHEV-M —— 红帽企业虚拟化管理器为物理和虚拟资源提供一个中央化管理平台，允许在主机之间启用、停止、构建和迁移虚拟机。RHEV-M 也可以管理数据中心的存储和网络组件，提供安全的远程图形化虚拟客户机控制台访问方式。</p>\n</li>\n</ul>\n<p>virsh 作为交互式shell使用:</p>\n<p>list —— 查看，–all 可查看全部  </p>\n<p>destroy —— 强制关闭，后面跟虚机名，与将其拔出相似  </p>\n<p>stop —— 暂时运行，后面跟虚机名</p>\n<p>start —— 启动虚机，后面跟虚机名</p>\n<p>edit —— 编辑域的配置文件，这会在虚拟客户机下一次启动时产生作用</p>\n<p>connect —— 使用qemu://host 语法连接本地或远程KVM主机。  </p>\n<p>nodeinfo —— 返回主机的基地信息，如CPU和内存等。  </p>\n<p>autostart —— 将KVM域配置为在主机系统启动时启动。  </p>\n<p>console —— 连接到虚拟客户机的虚拟串行控制台。  </p>\n<p>create —— 从XML 配置文件创建域，并将它启动。  </p>\n<p>define —— 从XML 配置谁的创建域，但不启动它。  </p>\n<p>undefine —— 取消定义域。如果域为不活动，则域配置将被删除。  </p>\n<p>reboot —— 重新启动域，就如从客户机内部运行reboot 命令一样  </p>\n<p>shutdown —— 正常地关闭域，就如从虚拟客户机内部运行shutdown 一样。  </p>\n<p>screenshot —— 为当前域控制台抓取屏幕截图，并存储在文件中。  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">配置说明</th>\n<th style=\"text-align:left\">红帽产品</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">提供KVM支持的单系统硬件</td>\n<td style=\"text-align:left\">红帽企业Linux</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">提供虚拟化冗余的多系统硬件</td>\n<td style=\"text-align:left\">红帽企业虚拟化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">提供私有云的多系统硬件</td>\n<td style=\"text-align:left\">RHEL OpenStack平台</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">提供公共云的云提供商</td>\n<td style=\"text-align:left\">公共云中的OpenStack</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用于独立KVM主机的管理实用程序</td>\n<td style=\"text-align:left\">virt-manager</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用于多主机虚拟化平台的管理实用程序</td>\n<td style=\"text-align:left\">RHEV-M</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用于所有虚拟化和云平台组合的管理实用程序</td>\n<td style=\"text-align:left\">CloudForms</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>KVM(基于内核的虚拟机)是标准Red Hat Enterprise Linux 内核中内置的完整虚拟化解决方案。它可以运行多款未经修改的Windows 和Linux 虚拟客户操作系统。Red Hat Enterprise Linux中的KVM系统管理程序通过libvirt API 和实用程序进行管理。如virt-manager 和virsh等。由于Red Hat Enterprise Linux 是红帽企业虚拟化和红帽OpenStack 平台的基础。因此KVM是红帽云基础架构多种产品的一致组件。</p>\n<p><img src=\"/2018/04/18/chapter-15-using-virtualized-system/1524011869875353.png\" alt=\"图片.png\"></p>\n<ul>\n<li><p>KVM提供横跨所有红帽产品的虚拟机（VM）技术，不仅包含Red Hat Enterprise Linux 的单机物理实例，更有OpenStack 云平台。从上图的左上角起：</p>\n</li>\n<li><p>物理（传统）系统-Red Hat Enterprise Linux 安装在传统硬件上，提供KVM虚拟化，最高可达单一系统的物理极限，并且由virt-manager 等libvirt实用程序进程管理。Red Hat Enterprise Linux 实例也可通过红帽云访问。直接托管在红帽认证云提供商处。</p>\n</li>\n<li><p>红帽企业Linux 通常配置为胖主机，即在支持VM的同时，也提供其他本地和网络服务、应用和管理功能。</p>\n</li>\n<li><p>红帽企业虚拟化（RHEV）–支持跨越多个红帽企业虚拟化系统管理程序 （RHEV-H）系统的KVM实例。提供由RHEV管理（RHEV-H）管理的KVM迁移、冗余和高可用性。</p>\n</li>\n<li><p>红帽企业虚拟化系统管理程序 是瘦主机，是专门精简和调优过的Red Hat Enterprise Linux 版本，专用于满足和支持虚拟客户机VM的唯一目的。</p>\n</li>\n<li><p>RHEL OpenStack平台——在带有KVM的Red Hat Enterprise Linux 基础上使用集成和调优的OpenStack 的红帽私有云架构，通过红帽OpenStack 仪表板（Horizon 组件）或红帽 CloudForms 进程管理。</p>\n</li>\n<li><p>公共云中的OpenStack——在红帽认证云提供商处实施的OpenStack 公共云架构，由OpenStack Horizon 组件或红帽 CloudForms进行管理。</p>\n</li>\n<li><p>混合云——红帽CloudForms 云管理实用程序管理和迁移红帽RHEV和OpenStack 架构之间的KVM实例，以及通过第三方OpenStack和VMware平台转换KVM实例。</p>\n</li>\n<li><p>KVM实例配置在红帽产品之间兼容。安装要求、参数和步骤在受支持的平台上相当的。</p>\n</li>\n</ul>\n<p>KVM系统管理程序需要Intel 处理器（Intel VT-x 和基于X86 的系统的Intel 64扩展），或者AMD处理器（AMD-V 及AMD64扩展）。验证是否支持可能通过：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep --color -E <span class=\"string\">\"vmx|svm\"</span> /proc/cpuinfo</span><br></pre></td></tr></table></figure></p>\n<p>在Red Hat Enterprise Linux 上构建主机时并不需要No eXecute (NX)功能（Intel 称之为eXecute Disable(XD),AMD则称之为Enhanced Virus Protection）,但是红帽企业虚拟化系统管理程序（RHEV-H）需要此功能。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep --color -E <span class=\"string\">\"nx\"</span> /proc/cpuinfo</span><br></pre></td></tr></table></figure></p>\n<p>构建RHEL虚拟化主机至少需要qemu-kvm和qemu-img软件包，以提供用户级KVM模拟器和磁盘映像管理器<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install qemu-kvm qemu-img</span><br></pre></td></tr></table></figure></p>\n<p>建议安装的其它虚拟化管理软件包有：</p>\n<ul>\n<li><p>python-virtinst —— 提供virt-install命令，供创建虚拟机使用</p>\n</li>\n<li><p>libvirt —— 提供主机和服务库，以便与系统管理程序和主机系统交互  </p>\n</li>\n<li><p>libvirt-python —— 包含允许Python应用使用libvirt API的模块  </p>\n</li>\n<li><p>virt-manager —— 为管理VM提供虚拟机管理器图形工具，将libvirt-client库用作管理  </p>\n</li>\n<li><p>libvirt-client —— 为访问libvirt服务器提供客户端API和库，以及用于管理和控制VM的virsh命令行工具。  </p>\n</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python-virtinst libvirt libvirt-python virt-manager libvirt-client</span><br></pre></td></tr></table></figure>\n<p>RHEL7 更新版anaconda图形安装程序 ，安装程序时不再提供选择个别RPM软件的功能，而只能选择基地环境和适合于所选基础的附加程。因而消除了猜测、使用配置更加精简。在安装完成后依然可能通过rmp 、yum或GNOME PackageKit 安装其他所需的RPM软件包。  </p>\n<p>Red Hat Enterprise Linux 使用基于libvirt的工具，作为虚拟化管理的默认方式。其支持RHEL 5 Xen 系统管理程序，以及RHEL 5、6和7上的KVM。下列管理工具使用libvirt:</p>\n<ul>\n<li><p>virsh —— virsh 命令行管理工具是图形版 virt-manager 应用程序的代替工具。无特权用户能以只读模式使用模式virsh，或者通过root 访问权限使用完整的管理功能。virsh命令是编写虚拟化管理脚本的理想选择。</p>\n</li>\n<li><p>virt-manager —— virt-manager 是一款图形化桌面工具，可以访问虚拟客户机控制台，用于执行虚拟机创建、迁移、配置和管理任务。可以通过单一界面管理本地和远程系统。</p>\n</li>\n<li><p>RHEV-M —— 红帽企业虚拟化管理器为物理和虚拟资源提供一个中央化管理平台，允许在主机之间启用、停止、构建和迁移虚拟机。RHEV-M 也可以管理数据中心的存储和网络组件，提供安全的远程图形化虚拟客户机控制台访问方式。</p>\n</li>\n</ul>\n<p>virsh 作为交互式shell使用:</p>\n<p>list —— 查看，–all 可查看全部  </p>\n<p>destroy —— 强制关闭，后面跟虚机名，与将其拔出相似  </p>\n<p>stop —— 暂时运行，后面跟虚机名</p>\n<p>start —— 启动虚机，后面跟虚机名</p>\n<p>edit —— 编辑域的配置文件，这会在虚拟客户机下一次启动时产生作用</p>\n<p>connect —— 使用qemu://host 语法连接本地或远程KVM主机。  </p>\n<p>nodeinfo —— 返回主机的基地信息，如CPU和内存等。  </p>\n<p>autostart —— 将KVM域配置为在主机系统启动时启动。  </p>\n<p>console —— 连接到虚拟客户机的虚拟串行控制台。  </p>\n<p>create —— 从XML 配置文件创建域，并将它启动。  </p>\n<p>define —— 从XML 配置谁的创建域，但不启动它。  </p>\n<p>undefine —— 取消定义域。如果域为不活动，则域配置将被删除。  </p>\n<p>reboot —— 重新启动域，就如从客户机内部运行reboot 命令一样  </p>\n<p>shutdown —— 正常地关闭域，就如从虚拟客户机内部运行shutdown 一样。  </p>\n<p>screenshot —— 为当前域控制台抓取屏幕截图，并存储在文件中。  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">配置说明</th>\n<th style=\"text-align:left\">红帽产品</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">提供KVM支持的单系统硬件</td>\n<td style=\"text-align:left\">红帽企业Linux</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">提供虚拟化冗余的多系统硬件</td>\n<td style=\"text-align:left\">红帽企业虚拟化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">提供私有云的多系统硬件</td>\n<td style=\"text-align:left\">RHEL OpenStack平台</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">提供公共云的云提供商</td>\n<td style=\"text-align:left\">公共云中的OpenStack</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用于独立KVM主机的管理实用程序</td>\n<td style=\"text-align:left\">virt-manager</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用于多主机虚拟化平台的管理实用程序</td>\n<td style=\"text-align:left\">RHEV-M</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用于所有虚拟化和云平台组合的管理实用程序</td>\n<td style=\"text-align:left\">CloudForms</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Chapter 2 . Managing Files From The Command Line","url":"254.html","id":"254","date":"2018-04-20T06:25:46.000Z","_content":"\n![图片.png](1524194156616572.png)\n\n\n\n|位置  |用途  |\n| :-- | :-- |\n|/usr  |安装的软件、共享的库，包括文件和静态只读程序数据。重要的子目录有：<br /> \\-/usr/bin:用户命令;<br /> \\-/usr/sbin:系统管理命令;<br /> \\-/usr/local:本地自定义软件  |\n|/etc  |特定于此系统的配置文件  |\n|/var  |特定于此系统的可变数据，在系统启动之间保持永久性。动态变化的文件（如数据库、缓存目录、日志文件、打印机后台处理文档和网站内容）可以在/var下找到  |\n|/run  | 自上次系统启动以来启动的进程的运行数据。这包括进程ID文件和锁定文件等等。此目录中的内容在重启时重新创建。（此目录整合了旧版RHEL中的/var/run 和/var/lock)  |\n|/home  |普通用户存储其个人数据和配置文件的主目录  |\n|/root  |管理员超级用户root的主目录。  |\n|/tmp  |供临时文件使用的全局可写空间。10天内未访问、未更改或未修改的文件将自动从该目录中删除。还有一个临时目录/var/tmp，该目录中的文件如果在30天内未曾访问、更改或修改过，将被自动删除  |\n|/boot  |开始启动过程所需的文件  |\n|/dev  |包含特殊的设备文件，供系统用于访问硬件。  |\n在RHEL7中，/ 目录下四个较旧的目录现在与它们在/usr 中对应的目录拥有完成相同的内容：|\n\n*   /bin 和 /usr/bin\n\n*   /sbin 和 /usr/sbin\n\n*   /lib 和/usr/lib\n\n*   /lib64 和/usr/lib64\n\n\n在RHEL 的较早版本中，这些是不同的目录，包含几组不同的文件。在RHEL7中 / 中的目录是/usr 中对应目录的符号连接。\n\n[http://www.pathname.com/fhs/](http://www.pathname.com/fhs/) Filesystem Hierarchy Standard\n\n创建文件夹时应尽量避免出现空格\n\n绝对路径是完全限定名称，自根目录（/）开始，指定到达且唯一代表单个文件所遍历的每个子目录。文件系统中的每个文件都有一个绝对路径。第一个字符是正斜杠（/）的路径名是绝对路径名。例/var/log/message\n\n相对路径与绝对路径一样，相对路径也标识唯一文件，仅指定从工作目录到达该文件所需的路径。第一人字符是正斜杠（/）之外的其它字符路径名的是相对路径。例在/var目录下访问log/message  \n\n对于标准的linux文件系统，文件名路径总长度（包括/）不可超过4095字节。路径中通过/隔开的第一部分不可超过255字节。文件名中不允许出现‘/’和'NUL字符'。\n\nLinux 文件系统，包含但不限于ext4,XFS,BIRFS,GFS2和GlusterFS都是区分大小写的。VFAT和NTFS及Apple的HFS+虽然不区分大小写，但它们具体大小写保留行为，他们使用创建时的大小写显示文件名。\n\npwd 命令显示当前位置的完成路径名。\n\nls 命令列出指定目录的目录内容，如未指定则显示当前目录的内容（.表示当前目录。 ..表示父目录）\n\n-l 长列表格式，-a 包含隐藏文件（.开头的文件）的所有文件，-R 递归方式，包含所有子目录。  \n\ncd 命令可更改目录，未指定目录则回到家目录。（~）表示家目录。  \n\n \\- 回到上次的目录，cd ..回到上级目录  \n\ntouch 命令通常将文件的时间戳更新为当前日期和时间，而不做其它修改，如果文件名不存在则创建一个空文件。  \n\n|活动  |单一来源 |多来源  |\n| :-- | :-- | :-- |\n|复制文件  |cp file1 file2  |cp file1 file2 file3 dir(4)  \n|移动文件  |mv file1 file2(1)  |mv file1 file2 file3 dir(4)  \n|删除文件  |rm file1  |rm -rf file1 file2 file3(5)  \n|创建目录  |mkdir dir  |mkdir -p par1/par2/dir(6)  \n|移动目录  |mv dir1 dir2(3) |mv dir1 dir2 dir3 dir4(4)  \n|删除目录  |rm -r dir1(2)  |rm -rf dir1 dir2 dir3(4)  \n|复制目录  |cp -r dir1 dir2(2) |cp -rf dir1 dir2 dir3(5)  \n|注  |(1)结果为重命名 <br />(2)需要使用“递归”选项处理来源目录<br />(3)如果dir2存在，则结果为移动。如果dir2不存在则为重命名<br />(4)最后一个参数必须是目录<br />(5)请谨慎使用“force”选项，系统将不会提示您操作<br />(6)使用“创建父级”选项时应小心，无法捕获键入错误。  \n\n\n\n模式匹配，通配符  \n\n|模式 |匹配项  |\n| :-- | :--|\n|*  |由0个或以上字符组成的任何字符串  |\n|?  |任何一个字符  |\n|~  |当前用户的主目录  |\n|~username  |username用户的主目录  |\n|~+  |当前工作目录  |\n|~-  |上一工作目录  |\n|\\[abc...\\]  |括起的类中的任何一个字符。  |\n|\\[!abc...\\]  |不在括起的类中的任何一个字符  |\n|\\[^abc...\\]  |不在括起的类中的任何一个字符|\n|\\[\\[:alpha:\\]\\]  |任何字母字符（1）|\n|\\[\\[:lower:\\]\\]  |任何小写字符（1）|\n|\\[\\[:upper:\\]\\]  |任何大写字符 （1）|\n|\\[\\[:alnum:\\]\\]  |任何字母字符或数字（1）|\n|\\[\\[:punct:\\]\\]  |除空格和字母数字以外的任何可打印的字符。（1）|\n|\\[\\[:digit:\\]\\]  |任何数字，即0-9（1）|\n|\\[\\[:space:\\]\\]  |任何一个空白字符；可能包括制表符、换行符或回车符，以及换页符和空格（1）|\n|注释  |（1）预设的POSIX字符类；针对当前区域而调整  |\n\n{}大括号扩展用于生成任意字符串。大括号包含字符串的逗号分隔列表或顺序表达式。\n```sh\n[root@client ~]# echo {sunday,Monday,Tuesday,Wednesday}.log\nsunday.log Monday.log Tuesday.log Wednesday.log\n[root@client ~]# echo {1..5}.log\n1.log 2.log 3.log 4.log 5.log\n[root@client ~]# echo file{a..d}.txt\nfilea.txt fileb.txt filec.txt filed.txt\n[root@client ~]# echo file{a,b}{1,2}.txt\nfilea1.txt filea2.txt fileb1.txt fileb2.txt\n[root@client ~]# echo file{a{1,2},b,c}.txt\nfilea1.txt filea2.txt fileb.txt filec.txt\n```\n命令替换\\`\\` 反引号或$()\n```sh\n[root@client ~]# echo Today is \\`date +%A\\`\nToday is 星期五\n[root@client ~]# echo The time is $(date +%M) minutes past $(date +%l%p)\nThe time is 16 minutes past 4下午\n```\n防止参数被扩展，为了忽略元字符的特殊含义，使用引用和转义来防止它们被shell 扩展。反斜杠（\\\\）是bash的一个转义字符，防止其后的一个字符被特殊解释。如果要保护较长的字符串需要使用单引号和双引号括起来。\n```sh\n[root@client ~]# echo Your username varialbe is \\\\$USER\nYour username varialbe is $USER\n[root@client ~]# echo Your username varialbe is $USER \nYour username varialbe is root\n[root@client ~]# host=desktop0\n[root@client ~]# echo \"Will variable $host evaluate to $(hostname)?\"\nWill variable desktop0 evaluate to client?\n[root@client ~]# echo 'Will variable $host evaluate to $(hostname)?' \nWill variable $host evaluate to $(hostname)?\n```\n","source":"_posts/chapter-2-managing-files-from-the-command-line.md","raw":"---\ntitle: Chapter 2 . Managing Files From The Command Line\nurl: 254.html\nid: 254\ncategories:\n  - RHEL124\ndate: 2018-04-20 14:25:46\ntags:\n---\n\n![图片.png](1524194156616572.png)\n\n\n\n|位置  |用途  |\n| :-- | :-- |\n|/usr  |安装的软件、共享的库，包括文件和静态只读程序数据。重要的子目录有：<br /> \\-/usr/bin:用户命令;<br /> \\-/usr/sbin:系统管理命令;<br /> \\-/usr/local:本地自定义软件  |\n|/etc  |特定于此系统的配置文件  |\n|/var  |特定于此系统的可变数据，在系统启动之间保持永久性。动态变化的文件（如数据库、缓存目录、日志文件、打印机后台处理文档和网站内容）可以在/var下找到  |\n|/run  | 自上次系统启动以来启动的进程的运行数据。这包括进程ID文件和锁定文件等等。此目录中的内容在重启时重新创建。（此目录整合了旧版RHEL中的/var/run 和/var/lock)  |\n|/home  |普通用户存储其个人数据和配置文件的主目录  |\n|/root  |管理员超级用户root的主目录。  |\n|/tmp  |供临时文件使用的全局可写空间。10天内未访问、未更改或未修改的文件将自动从该目录中删除。还有一个临时目录/var/tmp，该目录中的文件如果在30天内未曾访问、更改或修改过，将被自动删除  |\n|/boot  |开始启动过程所需的文件  |\n|/dev  |包含特殊的设备文件，供系统用于访问硬件。  |\n在RHEL7中，/ 目录下四个较旧的目录现在与它们在/usr 中对应的目录拥有完成相同的内容：|\n\n*   /bin 和 /usr/bin\n\n*   /sbin 和 /usr/sbin\n\n*   /lib 和/usr/lib\n\n*   /lib64 和/usr/lib64\n\n\n在RHEL 的较早版本中，这些是不同的目录，包含几组不同的文件。在RHEL7中 / 中的目录是/usr 中对应目录的符号连接。\n\n[http://www.pathname.com/fhs/](http://www.pathname.com/fhs/) Filesystem Hierarchy Standard\n\n创建文件夹时应尽量避免出现空格\n\n绝对路径是完全限定名称，自根目录（/）开始，指定到达且唯一代表单个文件所遍历的每个子目录。文件系统中的每个文件都有一个绝对路径。第一个字符是正斜杠（/）的路径名是绝对路径名。例/var/log/message\n\n相对路径与绝对路径一样，相对路径也标识唯一文件，仅指定从工作目录到达该文件所需的路径。第一人字符是正斜杠（/）之外的其它字符路径名的是相对路径。例在/var目录下访问log/message  \n\n对于标准的linux文件系统，文件名路径总长度（包括/）不可超过4095字节。路径中通过/隔开的第一部分不可超过255字节。文件名中不允许出现‘/’和'NUL字符'。\n\nLinux 文件系统，包含但不限于ext4,XFS,BIRFS,GFS2和GlusterFS都是区分大小写的。VFAT和NTFS及Apple的HFS+虽然不区分大小写，但它们具体大小写保留行为，他们使用创建时的大小写显示文件名。\n\npwd 命令显示当前位置的完成路径名。\n\nls 命令列出指定目录的目录内容，如未指定则显示当前目录的内容（.表示当前目录。 ..表示父目录）\n\n-l 长列表格式，-a 包含隐藏文件（.开头的文件）的所有文件，-R 递归方式，包含所有子目录。  \n\ncd 命令可更改目录，未指定目录则回到家目录。（~）表示家目录。  \n\n \\- 回到上次的目录，cd ..回到上级目录  \n\ntouch 命令通常将文件的时间戳更新为当前日期和时间，而不做其它修改，如果文件名不存在则创建一个空文件。  \n\n|活动  |单一来源 |多来源  |\n| :-- | :-- | :-- |\n|复制文件  |cp file1 file2  |cp file1 file2 file3 dir(4)  \n|移动文件  |mv file1 file2(1)  |mv file1 file2 file3 dir(4)  \n|删除文件  |rm file1  |rm -rf file1 file2 file3(5)  \n|创建目录  |mkdir dir  |mkdir -p par1/par2/dir(6)  \n|移动目录  |mv dir1 dir2(3) |mv dir1 dir2 dir3 dir4(4)  \n|删除目录  |rm -r dir1(2)  |rm -rf dir1 dir2 dir3(4)  \n|复制目录  |cp -r dir1 dir2(2) |cp -rf dir1 dir2 dir3(5)  \n|注  |(1)结果为重命名 <br />(2)需要使用“递归”选项处理来源目录<br />(3)如果dir2存在，则结果为移动。如果dir2不存在则为重命名<br />(4)最后一个参数必须是目录<br />(5)请谨慎使用“force”选项，系统将不会提示您操作<br />(6)使用“创建父级”选项时应小心，无法捕获键入错误。  \n\n\n\n模式匹配，通配符  \n\n|模式 |匹配项  |\n| :-- | :--|\n|*  |由0个或以上字符组成的任何字符串  |\n|?  |任何一个字符  |\n|~  |当前用户的主目录  |\n|~username  |username用户的主目录  |\n|~+  |当前工作目录  |\n|~-  |上一工作目录  |\n|\\[abc...\\]  |括起的类中的任何一个字符。  |\n|\\[!abc...\\]  |不在括起的类中的任何一个字符  |\n|\\[^abc...\\]  |不在括起的类中的任何一个字符|\n|\\[\\[:alpha:\\]\\]  |任何字母字符（1）|\n|\\[\\[:lower:\\]\\]  |任何小写字符（1）|\n|\\[\\[:upper:\\]\\]  |任何大写字符 （1）|\n|\\[\\[:alnum:\\]\\]  |任何字母字符或数字（1）|\n|\\[\\[:punct:\\]\\]  |除空格和字母数字以外的任何可打印的字符。（1）|\n|\\[\\[:digit:\\]\\]  |任何数字，即0-9（1）|\n|\\[\\[:space:\\]\\]  |任何一个空白字符；可能包括制表符、换行符或回车符，以及换页符和空格（1）|\n|注释  |（1）预设的POSIX字符类；针对当前区域而调整  |\n\n{}大括号扩展用于生成任意字符串。大括号包含字符串的逗号分隔列表或顺序表达式。\n```sh\n[root@client ~]# echo {sunday,Monday,Tuesday,Wednesday}.log\nsunday.log Monday.log Tuesday.log Wednesday.log\n[root@client ~]# echo {1..5}.log\n1.log 2.log 3.log 4.log 5.log\n[root@client ~]# echo file{a..d}.txt\nfilea.txt fileb.txt filec.txt filed.txt\n[root@client ~]# echo file{a,b}{1,2}.txt\nfilea1.txt filea2.txt fileb1.txt fileb2.txt\n[root@client ~]# echo file{a{1,2},b,c}.txt\nfilea1.txt filea2.txt fileb.txt filec.txt\n```\n命令替换\\`\\` 反引号或$()\n```sh\n[root@client ~]# echo Today is \\`date +%A\\`\nToday is 星期五\n[root@client ~]# echo The time is $(date +%M) minutes past $(date +%l%p)\nThe time is 16 minutes past 4下午\n```\n防止参数被扩展，为了忽略元字符的特殊含义，使用引用和转义来防止它们被shell 扩展。反斜杠（\\\\）是bash的一个转义字符，防止其后的一个字符被特殊解释。如果要保护较长的字符串需要使用单引号和双引号括起来。\n```sh\n[root@client ~]# echo Your username varialbe is \\\\$USER\nYour username varialbe is $USER\n[root@client ~]# echo Your username varialbe is $USER \nYour username varialbe is root\n[root@client ~]# host=desktop0\n[root@client ~]# echo \"Will variable $host evaluate to $(hostname)?\"\nWill variable desktop0 evaluate to client?\n[root@client ~]# echo 'Will variable $host evaluate to $(hostname)?' \nWill variable $host evaluate to $(hostname)?\n```\n","slug":"chapter-2-managing-files-from-the-command-line","published":1,"updated":"2019-01-05T22:56:26.559Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqhys0007lxkjhesune6b","content":"<p><img src=\"/2018/04/20/chapter-2-managing-files-from-the-command-line/1524194156616572.png\" alt=\"图片.png\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">位置</th>\n<th style=\"text-align:left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">/usr</td>\n<td style=\"text-align:left\">安装的软件、共享的库，包括文件和静态只读程序数据。重要的子目录有：<br> -/usr/bin:用户命令;<br> -/usr/sbin:系统管理命令;<br> -/usr/local:本地自定义软件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/etc</td>\n<td style=\"text-align:left\">特定于此系统的配置文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/var</td>\n<td style=\"text-align:left\">特定于此系统的可变数据，在系统启动之间保持永久性。动态变化的文件（如数据库、缓存目录、日志文件、打印机后台处理文档和网站内容）可以在/var下找到</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/run</td>\n<td style=\"text-align:left\">自上次系统启动以来启动的进程的运行数据。这包括进程ID文件和锁定文件等等。此目录中的内容在重启时重新创建。（此目录整合了旧版RHEL中的/var/run 和/var/lock)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/home</td>\n<td style=\"text-align:left\">普通用户存储其个人数据和配置文件的主目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/root</td>\n<td style=\"text-align:left\">管理员超级用户root的主目录。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/tmp</td>\n<td style=\"text-align:left\">供临时文件使用的全局可写空间。10天内未访问、未更改或未修改的文件将自动从该目录中删除。还有一个临时目录/var/tmp，该目录中的文件如果在30天内未曾访问、更改或修改过，将被自动删除</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/boot</td>\n<td style=\"text-align:left\">开始启动过程所需的文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/dev</td>\n<td style=\"text-align:left\">包含特殊的设备文件，供系统用于访问硬件。</td>\n</tr>\n</tbody>\n</table>\n<p>在RHEL7中，/ 目录下四个较旧的目录现在与它们在/usr 中对应的目录拥有完成相同的内容：|</p>\n<ul>\n<li><p>/bin 和 /usr/bin</p>\n</li>\n<li><p>/sbin 和 /usr/sbin</p>\n</li>\n<li><p>/lib 和/usr/lib</p>\n</li>\n<li><p>/lib64 和/usr/lib64</p>\n</li>\n</ul>\n<p>在RHEL 的较早版本中，这些是不同的目录，包含几组不同的文件。在RHEL7中 / 中的目录是/usr 中对应目录的符号连接。</p>\n<p><a href=\"http://www.pathname.com/fhs/\" target=\"_blank\" rel=\"noopener\">http://www.pathname.com/fhs/</a> Filesystem Hierarchy Standard</p>\n<p>创建文件夹时应尽量避免出现空格</p>\n<p>绝对路径是完全限定名称，自根目录（/）开始，指定到达且唯一代表单个文件所遍历的每个子目录。文件系统中的每个文件都有一个绝对路径。第一个字符是正斜杠（/）的路径名是绝对路径名。例/var/log/message</p>\n<p>相对路径与绝对路径一样，相对路径也标识唯一文件，仅指定从工作目录到达该文件所需的路径。第一人字符是正斜杠（/）之外的其它字符路径名的是相对路径。例在/var目录下访问log/message  </p>\n<p>对于标准的linux文件系统，文件名路径总长度（包括/）不可超过4095字节。路径中通过/隔开的第一部分不可超过255字节。文件名中不允许出现‘/’和’NUL字符’。</p>\n<p>Linux 文件系统，包含但不限于ext4,XFS,BIRFS,GFS2和GlusterFS都是区分大小写的。VFAT和NTFS及Apple的HFS+虽然不区分大小写，但它们具体大小写保留行为，他们使用创建时的大小写显示文件名。</p>\n<p>pwd 命令显示当前位置的完成路径名。</p>\n<p>ls 命令列出指定目录的目录内容，如未指定则显示当前目录的内容（.表示当前目录。 ..表示父目录）</p>\n<p>-l 长列表格式，-a 包含隐藏文件（.开头的文件）的所有文件，-R 递归方式，包含所有子目录。  </p>\n<p>cd 命令可更改目录，未指定目录则回到家目录。（~）表示家目录。  </p>\n<p> - 回到上次的目录，cd ..回到上级目录  </p>\n<p>touch 命令通常将文件的时间戳更新为当前日期和时间，而不做其它修改，如果文件名不存在则创建一个空文件。  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">活动</th>\n<th style=\"text-align:left\">单一来源</th>\n<th style=\"text-align:left\">多来源</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">复制文件</td>\n<td style=\"text-align:left\">cp file1 file2</td>\n<td style=\"text-align:left\">cp file1 file2 file3 dir(4)  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">移动文件</td>\n<td style=\"text-align:left\">mv file1 file2(1)</td>\n<td style=\"text-align:left\">mv file1 file2 file3 dir(4)  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">删除文件</td>\n<td style=\"text-align:left\">rm file1</td>\n<td style=\"text-align:left\">rm -rf file1 file2 file3(5)  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">创建目录</td>\n<td style=\"text-align:left\">mkdir dir</td>\n<td style=\"text-align:left\">mkdir -p par1/par2/dir(6)  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">移动目录</td>\n<td style=\"text-align:left\">mv dir1 dir2(3)</td>\n<td style=\"text-align:left\">mv dir1 dir2 dir3 dir4(4)  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">删除目录</td>\n<td style=\"text-align:left\">rm -r dir1(2)</td>\n<td style=\"text-align:left\">rm -rf dir1 dir2 dir3(4)  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">复制目录</td>\n<td style=\"text-align:left\">cp -r dir1 dir2(2)</td>\n<td style=\"text-align:left\">cp -rf dir1 dir2 dir3(5)  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">注</td>\n<td style=\"text-align:left\">(1)结果为重命名 <br>(2)需要使用“递归”选项处理来源目录<br>(3)如果dir2存在，则结果为移动。如果dir2不存在则为重命名<br>(4)最后一个参数必须是目录<br>(5)请谨慎使用“force”选项，系统将不会提示您操作<br>(6)使用“创建父级”选项时应小心，无法捕获键入错误。  </td>\n</tr>\n</tbody>\n</table>\n<p>模式匹配，通配符  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">模式</th>\n<th style=\"text-align:left\">匹配项</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:left\">由0个或以上字符组成的任何字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">任何一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">~</td>\n<td style=\"text-align:left\">当前用户的主目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">~username</td>\n<td style=\"text-align:left\">username用户的主目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">~+</td>\n<td style=\"text-align:left\">当前工作目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">~-</td>\n<td style=\"text-align:left\">上一工作目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[abc…]</td>\n<td style=\"text-align:left\">括起的类中的任何一个字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[!abc…]</td>\n<td style=\"text-align:left\">不在括起的类中的任何一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^abc…]</td>\n<td style=\"text-align:left\">不在括起的类中的任何一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[[:alpha:]]</td>\n<td style=\"text-align:left\">任何字母字符（1）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[[:lower:]]</td>\n<td style=\"text-align:left\">任何小写字符（1）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[[:upper:]]</td>\n<td style=\"text-align:left\">任何大写字符 （1）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[[:alnum:]]</td>\n<td style=\"text-align:left\">任何字母字符或数字（1）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[[:punct:]]</td>\n<td style=\"text-align:left\">除空格和字母数字以外的任何可打印的字符。（1）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[[:digit:]]</td>\n<td style=\"text-align:left\">任何数字，即0-9（1）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[[:space:]]</td>\n<td style=\"text-align:left\">任何一个空白字符；可能包括制表符、换行符或回车符，以及换页符和空格（1）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">注释</td>\n<td style=\"text-align:left\">（1）预设的POSIX字符类；针对当前区域而调整</td>\n</tr>\n</tbody>\n</table>\n<p>{}大括号扩展用于生成任意字符串。大括号包含字符串的逗号分隔列表或顺序表达式。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@client ~]<span class=\"comment\"># echo &#123;sunday,Monday,Tuesday,Wednesday&#125;.log</span></span><br><span class=\"line\">sunday.log Monday.log Tuesday.log Wednesday.log</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># echo &#123;1..5&#125;.log</span></span><br><span class=\"line\">1.log 2.log 3.log 4.log 5.log</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># echo file&#123;a..d&#125;.txt</span></span><br><span class=\"line\">filea.txt fileb.txt filec.txt filed.txt</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># echo file&#123;a,b&#125;&#123;1,2&#125;.txt</span></span><br><span class=\"line\">filea1.txt filea2.txt fileb1.txt fileb2.txt</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># echo file&#123;a&#123;1,2&#125;,b,c&#125;.txt</span></span><br><span class=\"line\">filea1.txt filea2.txt fileb.txt filec.txt</span><br></pre></td></tr></table></figure></p>\n<p>命令替换`` 反引号或$()<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@client ~]<span class=\"comment\"># echo Today is \\`date +%A\\`</span></span><br><span class=\"line\">Today is 星期五</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># echo The time is $(date +%M) minutes past $(date +%l%p)</span></span><br><span class=\"line\">The time is 16 minutes past 4下午</span><br></pre></td></tr></table></figure></p>\n<p>防止参数被扩展，为了忽略元字符的特殊含义，使用引用和转义来防止它们被shell 扩展。反斜杠（\\）是bash的一个转义字符，防止其后的一个字符被特殊解释。如果要保护较长的字符串需要使用单引号和双引号括起来。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@client ~]<span class=\"comment\"># echo Your username varialbe is \\\\$USER</span></span><br><span class=\"line\">Your username varialbe is <span class=\"variable\">$USER</span></span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># echo Your username varialbe is $USER </span></span><br><span class=\"line\">Your username varialbe is root</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># host=desktop0</span></span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># echo \"Will variable $host evaluate to $(hostname)?\"</span></span><br><span class=\"line\">Will variable desktop0 evaluate to client?</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># echo 'Will variable $host evaluate to $(hostname)?' </span></span><br><span class=\"line\">Will variable <span class=\"variable\">$host</span> evaluate to $(hostname)?</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/2018/04/20/chapter-2-managing-files-from-the-command-line/1524194156616572.png\" alt=\"图片.png\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">位置</th>\n<th style=\"text-align:left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">/usr</td>\n<td style=\"text-align:left\">安装的软件、共享的库，包括文件和静态只读程序数据。重要的子目录有：<br> -/usr/bin:用户命令;<br> -/usr/sbin:系统管理命令;<br> -/usr/local:本地自定义软件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/etc</td>\n<td style=\"text-align:left\">特定于此系统的配置文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/var</td>\n<td style=\"text-align:left\">特定于此系统的可变数据，在系统启动之间保持永久性。动态变化的文件（如数据库、缓存目录、日志文件、打印机后台处理文档和网站内容）可以在/var下找到</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/run</td>\n<td style=\"text-align:left\">自上次系统启动以来启动的进程的运行数据。这包括进程ID文件和锁定文件等等。此目录中的内容在重启时重新创建。（此目录整合了旧版RHEL中的/var/run 和/var/lock)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/home</td>\n<td style=\"text-align:left\">普通用户存储其个人数据和配置文件的主目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/root</td>\n<td style=\"text-align:left\">管理员超级用户root的主目录。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/tmp</td>\n<td style=\"text-align:left\">供临时文件使用的全局可写空间。10天内未访问、未更改或未修改的文件将自动从该目录中删除。还有一个临时目录/var/tmp，该目录中的文件如果在30天内未曾访问、更改或修改过，将被自动删除</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/boot</td>\n<td style=\"text-align:left\">开始启动过程所需的文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/dev</td>\n<td style=\"text-align:left\">包含特殊的设备文件，供系统用于访问硬件。</td>\n</tr>\n</tbody>\n</table>\n<p>在RHEL7中，/ 目录下四个较旧的目录现在与它们在/usr 中对应的目录拥有完成相同的内容：|</p>\n<ul>\n<li><p>/bin 和 /usr/bin</p>\n</li>\n<li><p>/sbin 和 /usr/sbin</p>\n</li>\n<li><p>/lib 和/usr/lib</p>\n</li>\n<li><p>/lib64 和/usr/lib64</p>\n</li>\n</ul>\n<p>在RHEL 的较早版本中，这些是不同的目录，包含几组不同的文件。在RHEL7中 / 中的目录是/usr 中对应目录的符号连接。</p>\n<p><a href=\"http://www.pathname.com/fhs/\" target=\"_blank\" rel=\"noopener\">http://www.pathname.com/fhs/</a> Filesystem Hierarchy Standard</p>\n<p>创建文件夹时应尽量避免出现空格</p>\n<p>绝对路径是完全限定名称，自根目录（/）开始，指定到达且唯一代表单个文件所遍历的每个子目录。文件系统中的每个文件都有一个绝对路径。第一个字符是正斜杠（/）的路径名是绝对路径名。例/var/log/message</p>\n<p>相对路径与绝对路径一样，相对路径也标识唯一文件，仅指定从工作目录到达该文件所需的路径。第一人字符是正斜杠（/）之外的其它字符路径名的是相对路径。例在/var目录下访问log/message  </p>\n<p>对于标准的linux文件系统，文件名路径总长度（包括/）不可超过4095字节。路径中通过/隔开的第一部分不可超过255字节。文件名中不允许出现‘/’和’NUL字符’。</p>\n<p>Linux 文件系统，包含但不限于ext4,XFS,BIRFS,GFS2和GlusterFS都是区分大小写的。VFAT和NTFS及Apple的HFS+虽然不区分大小写，但它们具体大小写保留行为，他们使用创建时的大小写显示文件名。</p>\n<p>pwd 命令显示当前位置的完成路径名。</p>\n<p>ls 命令列出指定目录的目录内容，如未指定则显示当前目录的内容（.表示当前目录。 ..表示父目录）</p>\n<p>-l 长列表格式，-a 包含隐藏文件（.开头的文件）的所有文件，-R 递归方式，包含所有子目录。  </p>\n<p>cd 命令可更改目录，未指定目录则回到家目录。（~）表示家目录。  </p>\n<p> - 回到上次的目录，cd ..回到上级目录  </p>\n<p>touch 命令通常将文件的时间戳更新为当前日期和时间，而不做其它修改，如果文件名不存在则创建一个空文件。  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">活动</th>\n<th style=\"text-align:left\">单一来源</th>\n<th style=\"text-align:left\">多来源</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">复制文件</td>\n<td style=\"text-align:left\">cp file1 file2</td>\n<td style=\"text-align:left\">cp file1 file2 file3 dir(4)  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">移动文件</td>\n<td style=\"text-align:left\">mv file1 file2(1)</td>\n<td style=\"text-align:left\">mv file1 file2 file3 dir(4)  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">删除文件</td>\n<td style=\"text-align:left\">rm file1</td>\n<td style=\"text-align:left\">rm -rf file1 file2 file3(5)  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">创建目录</td>\n<td style=\"text-align:left\">mkdir dir</td>\n<td style=\"text-align:left\">mkdir -p par1/par2/dir(6)  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">移动目录</td>\n<td style=\"text-align:left\">mv dir1 dir2(3)</td>\n<td style=\"text-align:left\">mv dir1 dir2 dir3 dir4(4)  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">删除目录</td>\n<td style=\"text-align:left\">rm -r dir1(2)</td>\n<td style=\"text-align:left\">rm -rf dir1 dir2 dir3(4)  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">复制目录</td>\n<td style=\"text-align:left\">cp -r dir1 dir2(2)</td>\n<td style=\"text-align:left\">cp -rf dir1 dir2 dir3(5)  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">注</td>\n<td style=\"text-align:left\">(1)结果为重命名 <br>(2)需要使用“递归”选项处理来源目录<br>(3)如果dir2存在，则结果为移动。如果dir2不存在则为重命名<br>(4)最后一个参数必须是目录<br>(5)请谨慎使用“force”选项，系统将不会提示您操作<br>(6)使用“创建父级”选项时应小心，无法捕获键入错误。  </td>\n</tr>\n</tbody>\n</table>\n<p>模式匹配，通配符  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">模式</th>\n<th style=\"text-align:left\">匹配项</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:left\">由0个或以上字符组成的任何字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">任何一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">~</td>\n<td style=\"text-align:left\">当前用户的主目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">~username</td>\n<td style=\"text-align:left\">username用户的主目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">~+</td>\n<td style=\"text-align:left\">当前工作目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">~-</td>\n<td style=\"text-align:left\">上一工作目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[abc…]</td>\n<td style=\"text-align:left\">括起的类中的任何一个字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[!abc…]</td>\n<td style=\"text-align:left\">不在括起的类中的任何一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^abc…]</td>\n<td style=\"text-align:left\">不在括起的类中的任何一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[[:alpha:]]</td>\n<td style=\"text-align:left\">任何字母字符（1）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[[:lower:]]</td>\n<td style=\"text-align:left\">任何小写字符（1）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[[:upper:]]</td>\n<td style=\"text-align:left\">任何大写字符 （1）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[[:alnum:]]</td>\n<td style=\"text-align:left\">任何字母字符或数字（1）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[[:punct:]]</td>\n<td style=\"text-align:left\">除空格和字母数字以外的任何可打印的字符。（1）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[[:digit:]]</td>\n<td style=\"text-align:left\">任何数字，即0-9（1）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[[:space:]]</td>\n<td style=\"text-align:left\">任何一个空白字符；可能包括制表符、换行符或回车符，以及换页符和空格（1）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">注释</td>\n<td style=\"text-align:left\">（1）预设的POSIX字符类；针对当前区域而调整</td>\n</tr>\n</tbody>\n</table>\n<p>{}大括号扩展用于生成任意字符串。大括号包含字符串的逗号分隔列表或顺序表达式。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@client ~]<span class=\"comment\"># echo &#123;sunday,Monday,Tuesday,Wednesday&#125;.log</span></span><br><span class=\"line\">sunday.log Monday.log Tuesday.log Wednesday.log</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># echo &#123;1..5&#125;.log</span></span><br><span class=\"line\">1.log 2.log 3.log 4.log 5.log</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># echo file&#123;a..d&#125;.txt</span></span><br><span class=\"line\">filea.txt fileb.txt filec.txt filed.txt</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># echo file&#123;a,b&#125;&#123;1,2&#125;.txt</span></span><br><span class=\"line\">filea1.txt filea2.txt fileb1.txt fileb2.txt</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># echo file&#123;a&#123;1,2&#125;,b,c&#125;.txt</span></span><br><span class=\"line\">filea1.txt filea2.txt fileb.txt filec.txt</span><br></pre></td></tr></table></figure></p>\n<p>命令替换`` 反引号或$()<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@client ~]<span class=\"comment\"># echo Today is \\`date +%A\\`</span></span><br><span class=\"line\">Today is 星期五</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># echo The time is $(date +%M) minutes past $(date +%l%p)</span></span><br><span class=\"line\">The time is 16 minutes past 4下午</span><br></pre></td></tr></table></figure></p>\n<p>防止参数被扩展，为了忽略元字符的特殊含义，使用引用和转义来防止它们被shell 扩展。反斜杠（\\）是bash的一个转义字符，防止其后的一个字符被特殊解释。如果要保护较长的字符串需要使用单引号和双引号括起来。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@client ~]<span class=\"comment\"># echo Your username varialbe is \\\\$USER</span></span><br><span class=\"line\">Your username varialbe is <span class=\"variable\">$USER</span></span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># echo Your username varialbe is $USER </span></span><br><span class=\"line\">Your username varialbe is root</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># host=desktop0</span></span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># echo \"Will variable $host evaluate to $(hostname)?\"</span></span><br><span class=\"line\">Will variable desktop0 evaluate to client?</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># echo 'Will variable $host evaluate to $(hostname)?' </span></span><br><span class=\"line\">Will variable <span class=\"variable\">$host</span> evaluate to $(hostname)?</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Chapter 3. Getting Help in Red Hat Enterprise Linux","url":"273.html","id":"273","date":"2018-04-26T03:01:18.000Z","_content":"\n|章节  |内容类型  |\n| :-- | :--|\n|1  |用户命令（可执行命令和shell程序）  |\n|2  |系统调用（从用户空间调用的内核例程）  |\n|3  |库函数（由程序提供）  |\n|4  |特殊文件（如设备文件）  |\n|5  |文件格式（用于许多配置文件和结构）  |\n|6  |游戏（过去的有趣程序章节）  |\n|7  |惯例，标准和其它（协议、文件系统）|\n|8 |系统管理和特权命令（维护任务） |\n|9  |Linux 内核API（内核调用）  |\n\n#### 导航 man page\n\n|命令  |结果  |\n|  :-- | :-- |\n|空格键  |向前（向下）滚动一个屏幕  |\n|PageDown  |向前（向下）滚动一个屏幕  |\n|PageUp  |向后（向上）滚动一个屏幕 |\n|向下箭头  |向前（向下）滚动一行  |\n|向上箭头  |向后（向上）滚动一行  |\n|d |向前（向下）滚动半个屏幕  |\n|u  |身后（向上）滚动半个屏幕  |\n|/String  |在man page 中向前（向下）搜索string  |\n|n  |在man page 中重复之前的向前（向下）搜索 |\n|N  |在man page中重复之前的向后（向上）搜索  |\n|g  |转到man page的开头  |\n|G  |转到man page的末尾  |\n|q |退出 man ,并返回到shell命令提示符  |\n```sh\nman passwd #默认显示章节1,passwd(1)\nman 5 passwd #查看passwd 第5章节passwd(5)\n```\n搜索string时允许正则表达试\n```sh\nman -k keyword  #执行标题和描述  \nman -K keyward #执行全文页面搜索  \n```\n#根据关键字搜索man page ,关键字搜索依赖mandb(8)生成的索引；必须以root身份运行，该命令每天通过cron.daily 运行。或者anacrontab 在启动一小时内运行（如果过期）\n\n#### pinfo  \n\nman page 的正式格式作用于命令参考时很有用，但作用于普通文档却用处不大。对于此类文档，GNU项目发了一种不同的在线文档系统，称为GNU info。\n\ninfo 文档结构超链接式的info 节点组成。此格式比man page 更灵活，允许对复杂命令和概念进行彻底的说明。\n\npinfo info 读取器比原始的info命令更加高级。它设计为与lynx文本web 浏览器击键操作相符，也添加了颜色。可以通过pinfo topic 浏览特定的主题的节点。\n\npinfo nano #查看nano  \n\npinfo 和 man page 按键对比\n\n|导航  |pinfo |man page  \n| :-- | :--\n|向前（向下）滚动一个屏幕  |PageDown 或空格键  |PageDown或空格键  \n|向后（向上）滚动一个屏幕  |PageUp 或 b  |PageUp 或b  \n|显示主题目录  |d  |-  \n|向前（向下）滚动半个屏幕  |-  |d  \n|显示主题的顶部（上部） |主页  |1G  \n|向后（向上）滚动半个屏幕  |-  |u  \n|向前（向下）滚动到下一超链接  |向下箭头  |-  \n|打开光标处的主题  |Enter  |-  \n|向前（向下）滚动一行  |-  |向下箭头键或Enter  \n|向后（向上）滚动到上一超链接  |向上箭头  |-  \n|向后（向上）滚动一行  |-  |向上箭头  \n|搜索某种模式  |/string  |/string  \n|显示主题中的下一个节点（章节） |n  |-  \n|重复之前的向前（向下）搜索  |/，再按Enter  |n  \n|显示主题中的上一节点（章节）  |p  |-  \n|重复之前的向后（向上）搜索  |-  |N  \n|退出程序  |q  |q  \n\n#### 读取/usr/share/doc 中的文档\n\n安装软件包时，识别为文档的文件将移到/usr/share/doc/packagename 目录中，一些软件包附带大量的示例、配置文件模板、脚本、教程或用户手册。\n\nfirefox [file:///usr/share/doc](http://file:///usr/share/doc)  \n\nyum list *-doc*  #查看所有文档做为一个单独提供的软件  \n\n\n\n#### 红帽官方的帮助\n\n\nman man #查看man的使用方法\n```sh\nman -t passwd > passwd.ps    #为passwd man page 创建格式化输出文件\n\nfile passwd.ps    #查看文件类型\n\nless   passwd.ps #查看文件内容\n\nman -k postscript viewer     #了解用于查看或打印postscript文件命令，-k 指定关键字\n\nman lp    #查看lp命令的用法  \n\nlp passwd.ps -P 2-3     #打印passwd.ps的2-3页\n```\n","source":"_posts/chapter-3-getting-help-in-red-hat-enterprise-linux.md","raw":"---\ntitle: Chapter 3. Getting Help in Red Hat Enterprise Linux\nurl: 273.html\nid: 273\ncategories:\n  - RHEL124\ndate: 2018-04-26 11:01:18\ntags:\n---\n\n|章节  |内容类型  |\n| :-- | :--|\n|1  |用户命令（可执行命令和shell程序）  |\n|2  |系统调用（从用户空间调用的内核例程）  |\n|3  |库函数（由程序提供）  |\n|4  |特殊文件（如设备文件）  |\n|5  |文件格式（用于许多配置文件和结构）  |\n|6  |游戏（过去的有趣程序章节）  |\n|7  |惯例，标准和其它（协议、文件系统）|\n|8 |系统管理和特权命令（维护任务） |\n|9  |Linux 内核API（内核调用）  |\n\n#### 导航 man page\n\n|命令  |结果  |\n|  :-- | :-- |\n|空格键  |向前（向下）滚动一个屏幕  |\n|PageDown  |向前（向下）滚动一个屏幕  |\n|PageUp  |向后（向上）滚动一个屏幕 |\n|向下箭头  |向前（向下）滚动一行  |\n|向上箭头  |向后（向上）滚动一行  |\n|d |向前（向下）滚动半个屏幕  |\n|u  |身后（向上）滚动半个屏幕  |\n|/String  |在man page 中向前（向下）搜索string  |\n|n  |在man page 中重复之前的向前（向下）搜索 |\n|N  |在man page中重复之前的向后（向上）搜索  |\n|g  |转到man page的开头  |\n|G  |转到man page的末尾  |\n|q |退出 man ,并返回到shell命令提示符  |\n```sh\nman passwd #默认显示章节1,passwd(1)\nman 5 passwd #查看passwd 第5章节passwd(5)\n```\n搜索string时允许正则表达试\n```sh\nman -k keyword  #执行标题和描述  \nman -K keyward #执行全文页面搜索  \n```\n#根据关键字搜索man page ,关键字搜索依赖mandb(8)生成的索引；必须以root身份运行，该命令每天通过cron.daily 运行。或者anacrontab 在启动一小时内运行（如果过期）\n\n#### pinfo  \n\nman page 的正式格式作用于命令参考时很有用，但作用于普通文档却用处不大。对于此类文档，GNU项目发了一种不同的在线文档系统，称为GNU info。\n\ninfo 文档结构超链接式的info 节点组成。此格式比man page 更灵活，允许对复杂命令和概念进行彻底的说明。\n\npinfo info 读取器比原始的info命令更加高级。它设计为与lynx文本web 浏览器击键操作相符，也添加了颜色。可以通过pinfo topic 浏览特定的主题的节点。\n\npinfo nano #查看nano  \n\npinfo 和 man page 按键对比\n\n|导航  |pinfo |man page  \n| :-- | :--\n|向前（向下）滚动一个屏幕  |PageDown 或空格键  |PageDown或空格键  \n|向后（向上）滚动一个屏幕  |PageUp 或 b  |PageUp 或b  \n|显示主题目录  |d  |-  \n|向前（向下）滚动半个屏幕  |-  |d  \n|显示主题的顶部（上部） |主页  |1G  \n|向后（向上）滚动半个屏幕  |-  |u  \n|向前（向下）滚动到下一超链接  |向下箭头  |-  \n|打开光标处的主题  |Enter  |-  \n|向前（向下）滚动一行  |-  |向下箭头键或Enter  \n|向后（向上）滚动到上一超链接  |向上箭头  |-  \n|向后（向上）滚动一行  |-  |向上箭头  \n|搜索某种模式  |/string  |/string  \n|显示主题中的下一个节点（章节） |n  |-  \n|重复之前的向前（向下）搜索  |/，再按Enter  |n  \n|显示主题中的上一节点（章节）  |p  |-  \n|重复之前的向后（向上）搜索  |-  |N  \n|退出程序  |q  |q  \n\n#### 读取/usr/share/doc 中的文档\n\n安装软件包时，识别为文档的文件将移到/usr/share/doc/packagename 目录中，一些软件包附带大量的示例、配置文件模板、脚本、教程或用户手册。\n\nfirefox [file:///usr/share/doc](http://file:///usr/share/doc)  \n\nyum list *-doc*  #查看所有文档做为一个单独提供的软件  \n\n\n\n#### 红帽官方的帮助\n\n\nman man #查看man的使用方法\n```sh\nman -t passwd > passwd.ps    #为passwd man page 创建格式化输出文件\n\nfile passwd.ps    #查看文件类型\n\nless   passwd.ps #查看文件内容\n\nman -k postscript viewer     #了解用于查看或打印postscript文件命令，-k 指定关键字\n\nman lp    #查看lp命令的用法  \n\nlp passwd.ps -P 2-3     #打印passwd.ps的2-3页\n```\n","slug":"chapter-3-getting-help-in-red-hat-enterprise-linux","published":1,"updated":"2019-01-05T23:08:31.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqhyt0008lxkjyma6bp5m","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">章节</th>\n<th style=\"text-align:left\">内容类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">用户命令（可执行命令和shell程序）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">系统调用（从用户空间调用的内核例程）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">库函数（由程序提供）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">特殊文件（如设备文件）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">文件格式（用于许多配置文件和结构）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">游戏（过去的有趣程序章节）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">惯例，标准和其它（协议、文件系统）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">系统管理和特权命令（维护任务）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">Linux 内核API（内核调用）</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"导航-man-page\"><a href=\"#导航-man-page\" class=\"headerlink\" title=\"导航 man page\"></a>导航 man page</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">空格键</td>\n<td style=\"text-align:left\">向前（向下）滚动一个屏幕</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PageDown</td>\n<td style=\"text-align:left\">向前（向下）滚动一个屏幕</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PageUp</td>\n<td style=\"text-align:left\">向后（向上）滚动一个屏幕</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">向下箭头</td>\n<td style=\"text-align:left\">向前（向下）滚动一行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">向上箭头</td>\n<td style=\"text-align:left\">向后（向上）滚动一行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">d</td>\n<td style=\"text-align:left\">向前（向下）滚动半个屏幕</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">u</td>\n<td style=\"text-align:left\">身后（向上）滚动半个屏幕</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/String</td>\n<td style=\"text-align:left\">在man page 中向前（向下）搜索string</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">n</td>\n<td style=\"text-align:left\">在man page 中重复之前的向前（向下）搜索</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">N</td>\n<td style=\"text-align:left\">在man page中重复之前的向后（向上）搜索</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">g</td>\n<td style=\"text-align:left\">转到man page的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">G</td>\n<td style=\"text-align:left\">转到man page的末尾</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">q</td>\n<td style=\"text-align:left\">退出 man ,并返回到shell命令提示符</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man passwd <span class=\"comment\">#默认显示章节1,passwd(1)</span></span><br><span class=\"line\">man 5 passwd <span class=\"comment\">#查看passwd 第5章节passwd(5)</span></span><br></pre></td></tr></table></figure>\n<p>搜索string时允许正则表达试<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man -k keyword  <span class=\"comment\">#执行标题和描述  </span></span><br><span class=\"line\">man -K keyward <span class=\"comment\">#执行全文页面搜索</span></span><br></pre></td></tr></table></figure></p>\n<p>#根据关键字搜索man page ,关键字搜索依赖mandb(8)生成的索引；必须以root身份运行，该命令每天通过cron.daily 运行。或者anacrontab 在启动一小时内运行（如果过期）</p>\n<h4 id=\"pinfo\"><a href=\"#pinfo\" class=\"headerlink\" title=\"pinfo\"></a>pinfo</h4><p>man page 的正式格式作用于命令参考时很有用，但作用于普通文档却用处不大。对于此类文档，GNU项目发了一种不同的在线文档系统，称为GNU info。</p>\n<p>info 文档结构超链接式的info 节点组成。此格式比man page 更灵活，允许对复杂命令和概念进行彻底的说明。</p>\n<p>pinfo info 读取器比原始的info命令更加高级。它设计为与lynx文本web 浏览器击键操作相符，也添加了颜色。可以通过pinfo topic 浏览特定的主题的节点。</p>\n<p>pinfo nano #查看nano  </p>\n<p>pinfo 和 man page 按键对比</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">导航</th>\n<th style=\"text-align:left\">pinfo</th>\n<th>man page  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">向前（向下）滚动一个屏幕</td>\n<td style=\"text-align:left\">PageDown 或空格键</td>\n<td>PageDown或空格键  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">向后（向上）滚动一个屏幕</td>\n<td style=\"text-align:left\">PageUp 或 b</td>\n<td>PageUp 或b  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">显示主题目录</td>\n<td style=\"text-align:left\">d</td>\n<td>-  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">向前（向下）滚动半个屏幕</td>\n<td style=\"text-align:left\">-</td>\n<td>d  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">显示主题的顶部（上部）</td>\n<td style=\"text-align:left\">主页</td>\n<td>1G  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">向后（向上）滚动半个屏幕</td>\n<td style=\"text-align:left\">-</td>\n<td>u  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">向前（向下）滚动到下一超链接</td>\n<td style=\"text-align:left\">向下箭头</td>\n<td>-  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">打开光标处的主题</td>\n<td style=\"text-align:left\">Enter</td>\n<td>-  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">向前（向下）滚动一行</td>\n<td style=\"text-align:left\">-</td>\n<td>向下箭头键或Enter  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">向后（向上）滚动到上一超链接</td>\n<td style=\"text-align:left\">向上箭头</td>\n<td>-  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">向后（向上）滚动一行</td>\n<td style=\"text-align:left\">-</td>\n<td>向上箭头  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">搜索某种模式</td>\n<td style=\"text-align:left\">/string</td>\n<td>/string  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">显示主题中的下一个节点（章节）</td>\n<td style=\"text-align:left\">n</td>\n<td>-  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">重复之前的向前（向下）搜索</td>\n<td style=\"text-align:left\">/，再按Enter</td>\n<td>n  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">显示主题中的上一节点（章节）</td>\n<td style=\"text-align:left\">p</td>\n<td>-  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">重复之前的向后（向上）搜索</td>\n<td style=\"text-align:left\">-</td>\n<td>N  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">退出程序</td>\n<td style=\"text-align:left\">q</td>\n<td>q  </td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"读取-usr-share-doc-中的文档\"><a href=\"#读取-usr-share-doc-中的文档\" class=\"headerlink\" title=\"读取/usr/share/doc 中的文档\"></a>读取/usr/share/doc 中的文档</h4><p>安装软件包时，识别为文档的文件将移到/usr/share/doc/packagename 目录中，一些软件包附带大量的示例、配置文件模板、脚本、教程或用户手册。</p>\n<p>firefox <a href=\"http://file:///usr/share/doc\" target=\"_blank\" rel=\"noopener\">file:///usr/share/doc</a>  </p>\n<p>yum list <em>-doc</em>  #查看所有文档做为一个单独提供的软件  </p>\n<h4 id=\"红帽官方的帮助\"><a href=\"#红帽官方的帮助\" class=\"headerlink\" title=\"红帽官方的帮助\"></a>红帽官方的帮助</h4><p>man man #查看man的使用方法<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man -t passwd &gt; passwd.ps    <span class=\"comment\">#为passwd man page 创建格式化输出文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">file passwd.ps    <span class=\"comment\">#查看文件类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">less   passwd.ps <span class=\"comment\">#查看文件内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">man -k postscript viewer     <span class=\"comment\">#了解用于查看或打印postscript文件命令，-k 指定关键字</span></span><br><span class=\"line\"></span><br><span class=\"line\">man lp    <span class=\"comment\">#查看lp命令的用法  </span></span><br><span class=\"line\"></span><br><span class=\"line\">lp passwd.ps -P 2-3     <span class=\"comment\">#打印passwd.ps的2-3页</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">章节</th>\n<th style=\"text-align:left\">内容类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">用户命令（可执行命令和shell程序）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">系统调用（从用户空间调用的内核例程）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">库函数（由程序提供）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">特殊文件（如设备文件）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">文件格式（用于许多配置文件和结构）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">游戏（过去的有趣程序章节）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">惯例，标准和其它（协议、文件系统）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">系统管理和特权命令（维护任务）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">Linux 内核API（内核调用）</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"导航-man-page\"><a href=\"#导航-man-page\" class=\"headerlink\" title=\"导航 man page\"></a>导航 man page</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">空格键</td>\n<td style=\"text-align:left\">向前（向下）滚动一个屏幕</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PageDown</td>\n<td style=\"text-align:left\">向前（向下）滚动一个屏幕</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PageUp</td>\n<td style=\"text-align:left\">向后（向上）滚动一个屏幕</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">向下箭头</td>\n<td style=\"text-align:left\">向前（向下）滚动一行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">向上箭头</td>\n<td style=\"text-align:left\">向后（向上）滚动一行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">d</td>\n<td style=\"text-align:left\">向前（向下）滚动半个屏幕</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">u</td>\n<td style=\"text-align:left\">身后（向上）滚动半个屏幕</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/String</td>\n<td style=\"text-align:left\">在man page 中向前（向下）搜索string</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">n</td>\n<td style=\"text-align:left\">在man page 中重复之前的向前（向下）搜索</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">N</td>\n<td style=\"text-align:left\">在man page中重复之前的向后（向上）搜索</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">g</td>\n<td style=\"text-align:left\">转到man page的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">G</td>\n<td style=\"text-align:left\">转到man page的末尾</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">q</td>\n<td style=\"text-align:left\">退出 man ,并返回到shell命令提示符</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man passwd <span class=\"comment\">#默认显示章节1,passwd(1)</span></span><br><span class=\"line\">man 5 passwd <span class=\"comment\">#查看passwd 第5章节passwd(5)</span></span><br></pre></td></tr></table></figure>\n<p>搜索string时允许正则表达试<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man -k keyword  <span class=\"comment\">#执行标题和描述  </span></span><br><span class=\"line\">man -K keyward <span class=\"comment\">#执行全文页面搜索</span></span><br></pre></td></tr></table></figure></p>\n<p>#根据关键字搜索man page ,关键字搜索依赖mandb(8)生成的索引；必须以root身份运行，该命令每天通过cron.daily 运行。或者anacrontab 在启动一小时内运行（如果过期）</p>\n<h4 id=\"pinfo\"><a href=\"#pinfo\" class=\"headerlink\" title=\"pinfo\"></a>pinfo</h4><p>man page 的正式格式作用于命令参考时很有用，但作用于普通文档却用处不大。对于此类文档，GNU项目发了一种不同的在线文档系统，称为GNU info。</p>\n<p>info 文档结构超链接式的info 节点组成。此格式比man page 更灵活，允许对复杂命令和概念进行彻底的说明。</p>\n<p>pinfo info 读取器比原始的info命令更加高级。它设计为与lynx文本web 浏览器击键操作相符，也添加了颜色。可以通过pinfo topic 浏览特定的主题的节点。</p>\n<p>pinfo nano #查看nano  </p>\n<p>pinfo 和 man page 按键对比</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">导航</th>\n<th style=\"text-align:left\">pinfo</th>\n<th>man page  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">向前（向下）滚动一个屏幕</td>\n<td style=\"text-align:left\">PageDown 或空格键</td>\n<td>PageDown或空格键  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">向后（向上）滚动一个屏幕</td>\n<td style=\"text-align:left\">PageUp 或 b</td>\n<td>PageUp 或b  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">显示主题目录</td>\n<td style=\"text-align:left\">d</td>\n<td>-  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">向前（向下）滚动半个屏幕</td>\n<td style=\"text-align:left\">-</td>\n<td>d  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">显示主题的顶部（上部）</td>\n<td style=\"text-align:left\">主页</td>\n<td>1G  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">向后（向上）滚动半个屏幕</td>\n<td style=\"text-align:left\">-</td>\n<td>u  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">向前（向下）滚动到下一超链接</td>\n<td style=\"text-align:left\">向下箭头</td>\n<td>-  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">打开光标处的主题</td>\n<td style=\"text-align:left\">Enter</td>\n<td>-  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">向前（向下）滚动一行</td>\n<td style=\"text-align:left\">-</td>\n<td>向下箭头键或Enter  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">向后（向上）滚动到上一超链接</td>\n<td style=\"text-align:left\">向上箭头</td>\n<td>-  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">向后（向上）滚动一行</td>\n<td style=\"text-align:left\">-</td>\n<td>向上箭头  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">搜索某种模式</td>\n<td style=\"text-align:left\">/string</td>\n<td>/string  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">显示主题中的下一个节点（章节）</td>\n<td style=\"text-align:left\">n</td>\n<td>-  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">重复之前的向前（向下）搜索</td>\n<td style=\"text-align:left\">/，再按Enter</td>\n<td>n  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">显示主题中的上一节点（章节）</td>\n<td style=\"text-align:left\">p</td>\n<td>-  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">重复之前的向后（向上）搜索</td>\n<td style=\"text-align:left\">-</td>\n<td>N  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">退出程序</td>\n<td style=\"text-align:left\">q</td>\n<td>q  </td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"读取-usr-share-doc-中的文档\"><a href=\"#读取-usr-share-doc-中的文档\" class=\"headerlink\" title=\"读取/usr/share/doc 中的文档\"></a>读取/usr/share/doc 中的文档</h4><p>安装软件包时，识别为文档的文件将移到/usr/share/doc/packagename 目录中，一些软件包附带大量的示例、配置文件模板、脚本、教程或用户手册。</p>\n<p>firefox <a href=\"http://file:///usr/share/doc\" target=\"_blank\" rel=\"noopener\">file:///usr/share/doc</a>  </p>\n<p>yum list <em>-doc</em>  #查看所有文档做为一个单独提供的软件  </p>\n<h4 id=\"红帽官方的帮助\"><a href=\"#红帽官方的帮助\" class=\"headerlink\" title=\"红帽官方的帮助\"></a>红帽官方的帮助</h4><p>man man #查看man的使用方法<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man -t passwd &gt; passwd.ps    <span class=\"comment\">#为passwd man page 创建格式化输出文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">file passwd.ps    <span class=\"comment\">#查看文件类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">less   passwd.ps <span class=\"comment\">#查看文件内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">man -k postscript viewer     <span class=\"comment\">#了解用于查看或打印postscript文件命令，-k 指定关键字</span></span><br><span class=\"line\"></span><br><span class=\"line\">man lp    <span class=\"comment\">#查看lp命令的用法  </span></span><br><span class=\"line\"></span><br><span class=\"line\">lp passwd.ps -P 2-3     <span class=\"comment\">#打印passwd.ps的2-3页</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"Chapter 4 Creating,Viewing,And Editing Text Files","url":"284.html","id":"284","date":"2018-04-27T08:49:36.000Z","_content":"\n|编号  |通道名称  |描述  |默认连接  |用法  \n| :--\n|0  |stdin  |标准输入  |键盘  |仅读取  \n|1  |stdout  |标准输出  |终端  |仅写入  \n|2  |stderr  |标准错误  |终端  |仅写入  \n|3+  |filename  |其它文件  |无  |读取/写入  \n\n重定向输出到文件\n\n|用法  |说明  |视觉效果  \n| :--\n|>file  |重定向stdout到文件（1）  |![图片.png](1524818205308304.png)\n|>>file  |重定向stdout到文件，附加到当前文件内容后面（2）  |![图片.png](1524818219547743.png)\n|2>file  |重定向stderr到文件（1）  |![图片.png](1524818191991552.png)\n|2>/dev/null  |将stderr错误信息重定向到/dev/null从而将它丢弃  |![图片.png](1524818180473442.png)\n|&>file  |将stdout和stderr合并到一个文件（1）  |![图片.png](1524818174855912.png)\n|>>file 2>&1  |合并stdout和stderr，并且附加到当前文件内容后面（2）（3）  |![图片.png](1524818166553035.png)\n|注  |（1）覆盖现在文件，如果为新文件则创建文件<br/>（2）附加到现有文件，如果为新文件则创建文件<br/>（3）重定向顺向很重要，可避免出现意外的命令行为。2>&1 将stderr发送到与stdout相同的位置。要使其生效，在向stdout中添加stderr之前，需要首先重定向stdout.尽管&>>是向文件中附加stdout和stderr的备选方法，但2>&1 是通过管道同时发送stdout和stderr所需要的方法。\n\n```sh\ndate > /tmp/saved-timestamp    #保存时间到文件\n\ntail -n 100 /var/log/dmesg > /tm/last-100-boot-messages    #复制文件日志的最后100行到另一个文件\n\ncat file1 file2 file3 file4 > /tmp/all-four-in-one    #将四个文件连接成一个\n\nls -a > /tmp/my-file-names    #将当前目录的隐藏文件名和常规文件名列出到文件中\n\necho \"new line of information\" >>/tmp/many-lines-of-information    #将输出附加到现有文件\n\ndiff previous-file current-file >> /tmp/tracking-changes-made    #将比较内容输出附加到现有文件\n\nfind /etc -name passwd 2> /tmp/errors    #将错误重定向到文件\n\nfind /etc -name passwd >/tmp/output 2> /tmperrors    #将进程输出和错误消息分别保存到单独文件\n\nfind /etc -name passwd >/tmp/output 2>/dev/null    #忽略并丢弃错误消息\n\nfind /etc -name passwd &> /tmp/save-both    #将输出和错误消息存储在一起\n\nfind /etc -name passwd  >> /tmp/save-toth 2>&1    #将输出和生成的错误消息附加到现有文件\n\n```\n#### 构建管道 “|”\n\n从一个进程标准输出到另一个进程的标准输入\n\n![image.png](1524823380758403.png)\n\n\n```sh\nls -l /usr/bin | less\nls | wc -l > /tmp/how-many-files    #计算输出列出中的行数并重定向到文件\nls -t | head -n 10 > /tmp/ten-last-changed-files    #抓取列表的前几行、或后几行，或选定的行并重定向到文件\n```\n![image.png](1524823368317604.png)\n\n使用 tee 命令传送，tee 命令显示或重定向通常因传送而被隐藏的中间结果。\n```sh\nls -l | tee /tmp/saved-output    #在终端上查看 ls 列表同时将该列表存储到文件中\n\n#确定当前窗口的终端设备。将结果作为邮件发送，并在此窗口中查看相同的结果。\ntty\nls -l | tee /dev/pts/0 | mail -s subject student@desktop1.example.com\n```\n\n* * *\n\nvi && vim\n\n![image.png](1524823338808284.png)\n\nvim 的四个模式：编辑模式，命令模式，可视模式，扩展命令模式。默认启动进行命令模式，可用于导航、剪切和粘贴，以及其他文件操作，通过单字符进行各个模式：\n\n\"i\" 进入插入模式，编辑模式，按Esc 退出到命令模式\n\n\"v\" 进入可视模式，在其中可以选择多个字符进行操作，使用\"V\"键选择多选，使用Ctrl+v 可选择文本块。v,V,Ctrl+v 同样可用于退出可视模式\n\n\":\" 冒号,启动扩展命令模式,可以执行写入、退出、保存等\n\n命令模式：u键撤销上次的编辑操作，x键删除光标所在的字符，:w 保存 :wq 保存退出  :q! 强制退出放弃修改。\n\n可视模式：y ：复制，p：粘贴 ，上下左右选择字符。\n\n安装vim-enhanced软件包提供vimtutor针对每一个操作的练习。可以安装学习一下\n\n图形编辑器gedit 、nano\n","source":"_posts/chapter-4-creatingviewingand-editing-text-files.md","raw":"---\ntitle: 'Chapter 4 Creating,Viewing,And Editing Text Files'\nurl: 284.html\nid: 284\ncategories:\n  - RHEL124\ndate: 2018-04-27 16:49:36\ntags:\n---\n\n|编号  |通道名称  |描述  |默认连接  |用法  \n| :--\n|0  |stdin  |标准输入  |键盘  |仅读取  \n|1  |stdout  |标准输出  |终端  |仅写入  \n|2  |stderr  |标准错误  |终端  |仅写入  \n|3+  |filename  |其它文件  |无  |读取/写入  \n\n重定向输出到文件\n\n|用法  |说明  |视觉效果  \n| :--\n|>file  |重定向stdout到文件（1）  |![图片.png](1524818205308304.png)\n|>>file  |重定向stdout到文件，附加到当前文件内容后面（2）  |![图片.png](1524818219547743.png)\n|2>file  |重定向stderr到文件（1）  |![图片.png](1524818191991552.png)\n|2>/dev/null  |将stderr错误信息重定向到/dev/null从而将它丢弃  |![图片.png](1524818180473442.png)\n|&>file  |将stdout和stderr合并到一个文件（1）  |![图片.png](1524818174855912.png)\n|>>file 2>&1  |合并stdout和stderr，并且附加到当前文件内容后面（2）（3）  |![图片.png](1524818166553035.png)\n|注  |（1）覆盖现在文件，如果为新文件则创建文件<br/>（2）附加到现有文件，如果为新文件则创建文件<br/>（3）重定向顺向很重要，可避免出现意外的命令行为。2>&1 将stderr发送到与stdout相同的位置。要使其生效，在向stdout中添加stderr之前，需要首先重定向stdout.尽管&>>是向文件中附加stdout和stderr的备选方法，但2>&1 是通过管道同时发送stdout和stderr所需要的方法。\n\n```sh\ndate > /tmp/saved-timestamp    #保存时间到文件\n\ntail -n 100 /var/log/dmesg > /tm/last-100-boot-messages    #复制文件日志的最后100行到另一个文件\n\ncat file1 file2 file3 file4 > /tmp/all-four-in-one    #将四个文件连接成一个\n\nls -a > /tmp/my-file-names    #将当前目录的隐藏文件名和常规文件名列出到文件中\n\necho \"new line of information\" >>/tmp/many-lines-of-information    #将输出附加到现有文件\n\ndiff previous-file current-file >> /tmp/tracking-changes-made    #将比较内容输出附加到现有文件\n\nfind /etc -name passwd 2> /tmp/errors    #将错误重定向到文件\n\nfind /etc -name passwd >/tmp/output 2> /tmperrors    #将进程输出和错误消息分别保存到单独文件\n\nfind /etc -name passwd >/tmp/output 2>/dev/null    #忽略并丢弃错误消息\n\nfind /etc -name passwd &> /tmp/save-both    #将输出和错误消息存储在一起\n\nfind /etc -name passwd  >> /tmp/save-toth 2>&1    #将输出和生成的错误消息附加到现有文件\n\n```\n#### 构建管道 “|”\n\n从一个进程标准输出到另一个进程的标准输入\n\n![image.png](1524823380758403.png)\n\n\n```sh\nls -l /usr/bin | less\nls | wc -l > /tmp/how-many-files    #计算输出列出中的行数并重定向到文件\nls -t | head -n 10 > /tmp/ten-last-changed-files    #抓取列表的前几行、或后几行，或选定的行并重定向到文件\n```\n![image.png](1524823368317604.png)\n\n使用 tee 命令传送，tee 命令显示或重定向通常因传送而被隐藏的中间结果。\n```sh\nls -l | tee /tmp/saved-output    #在终端上查看 ls 列表同时将该列表存储到文件中\n\n#确定当前窗口的终端设备。将结果作为邮件发送，并在此窗口中查看相同的结果。\ntty\nls -l | tee /dev/pts/0 | mail -s subject student@desktop1.example.com\n```\n\n* * *\n\nvi && vim\n\n![image.png](1524823338808284.png)\n\nvim 的四个模式：编辑模式，命令模式，可视模式，扩展命令模式。默认启动进行命令模式，可用于导航、剪切和粘贴，以及其他文件操作，通过单字符进行各个模式：\n\n\"i\" 进入插入模式，编辑模式，按Esc 退出到命令模式\n\n\"v\" 进入可视模式，在其中可以选择多个字符进行操作，使用\"V\"键选择多选，使用Ctrl+v 可选择文本块。v,V,Ctrl+v 同样可用于退出可视模式\n\n\":\" 冒号,启动扩展命令模式,可以执行写入、退出、保存等\n\n命令模式：u键撤销上次的编辑操作，x键删除光标所在的字符，:w 保存 :wq 保存退出  :q! 强制退出放弃修改。\n\n可视模式：y ：复制，p：粘贴 ，上下左右选择字符。\n\n安装vim-enhanced软件包提供vimtutor针对每一个操作的练习。可以安装学习一下\n\n图形编辑器gedit 、nano\n","slug":"chapter-4-creatingviewingand-editing-text-files","published":1,"updated":"2019-01-05T23:25:51.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqhz0000blxkjkbjlofk4","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">编号</th>\n<th>通道名称</th>\n<th>描述</th>\n<th>默认连接</th>\n<th>用法  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">0</td>\n<td>stdin</td>\n<td>标准输入</td>\n<td>键盘</td>\n<td>仅读取  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td>stdout</td>\n<td>标准输出</td>\n<td>终端</td>\n<td>仅写入  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td>stderr</td>\n<td>标准错误</td>\n<td>终端</td>\n<td>仅写入  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3+</td>\n<td>filename</td>\n<td>其它文件</td>\n<td>无</td>\n<td>读取/写入  </td>\n</tr>\n</tbody>\n</table>\n<p>重定向输出到文件</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">用法</th>\n<th>说明</th>\n<th>视觉效果  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">&gt;file</td>\n<td>重定向stdout到文件（1）</td>\n<td><img src=\"/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524818205308304.png\" alt=\"图片.png\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&gt;&gt;file</td>\n<td>重定向stdout到文件，附加到当前文件内容后面（2）</td>\n<td><img src=\"/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524818219547743.png\" alt=\"图片.png\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2&gt;file</td>\n<td>重定向stderr到文件（1）</td>\n<td><img src=\"/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524818191991552.png\" alt=\"图片.png\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2&gt;/dev/null</td>\n<td>将stderr错误信息重定向到/dev/null从而将它丢弃</td>\n<td><img src=\"/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524818180473442.png\" alt=\"图片.png\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&amp;&gt;file</td>\n<td>将stdout和stderr合并到一个文件（1）</td>\n<td><img src=\"/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524818174855912.png\" alt=\"图片.png\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&gt;&gt;file 2&gt;&amp;1</td>\n<td>合并stdout和stderr，并且附加到当前文件内容后面（2）（3）</td>\n<td><img src=\"/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524818166553035.png\" alt=\"图片.png\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">注</td>\n<td>（1）覆盖现在文件，如果为新文件则创建文件<br>（2）附加到现有文件，如果为新文件则创建文件<br>（3）重定向顺向很重要，可避免出现意外的命令行为。2&gt;&amp;1 将stderr发送到与stdout相同的位置。要使其生效，在向stdout中添加stderr之前，需要首先重定向stdout.尽管&amp;&gt;&gt;是向文件中附加stdout和stderr的备选方法，但2&gt;&amp;1 是通过管道同时发送stdout和stderr所需要的方法。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date &gt; /tmp/saved-timestamp    <span class=\"comment\">#保存时间到文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">tail -n 100 /var/<span class=\"built_in\">log</span>/dmesg &gt; /tm/last-100-boot-messages    <span class=\"comment\">#复制文件日志的最后100行到另一个文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">cat file1 file2 file3 file4 &gt; /tmp/all-four-in-one    <span class=\"comment\">#将四个文件连接成一个</span></span><br><span class=\"line\"></span><br><span class=\"line\">ls -a &gt; /tmp/my-file-names    <span class=\"comment\">#将当前目录的隐藏文件名和常规文件名列出到文件中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"new line of information\"</span> &gt;&gt;/tmp/many-lines-of-information    <span class=\"comment\">#将输出附加到现有文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">diff previous-file current-file &gt;&gt; /tmp/tracking-changes-made    <span class=\"comment\">#将比较内容输出附加到现有文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">find /etc -name passwd 2&gt; /tmp/errors    <span class=\"comment\">#将错误重定向到文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">find /etc -name passwd &gt;/tmp/output 2&gt; /tmperrors    <span class=\"comment\">#将进程输出和错误消息分别保存到单独文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">find /etc -name passwd &gt;/tmp/output 2&gt;/dev/null    <span class=\"comment\">#忽略并丢弃错误消息</span></span><br><span class=\"line\"></span><br><span class=\"line\">find /etc -name passwd &amp;&gt; /tmp/save-both    <span class=\"comment\">#将输出和错误消息存储在一起</span></span><br><span class=\"line\"></span><br><span class=\"line\">find /etc -name passwd  &gt;&gt; /tmp/save-toth 2&gt;&amp;1    <span class=\"comment\">#将输出和生成的错误消息附加到现有文件</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"构建管道-“-”\"><a href=\"#构建管道-“-”\" class=\"headerlink\" title=\"构建管道 “|”\"></a>构建管道 “|”</h4><p>从一个进程标准输出到另一个进程的标准输入</p>\n<p><img src=\"/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524823380758403.png\" alt=\"image.png\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l /usr/bin | less</span><br><span class=\"line\">ls | wc -l &gt; /tmp/how-many-files    <span class=\"comment\">#计算输出列出中的行数并重定向到文件</span></span><br><span class=\"line\">ls -t | head -n 10 &gt; /tmp/ten-last-changed-files    <span class=\"comment\">#抓取列表的前几行、或后几行，或选定的行并重定向到文件</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524823368317604.png\" alt=\"image.png\"></p>\n<p>使用 tee 命令传送，tee 命令显示或重定向通常因传送而被隐藏的中间结果。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l | tee /tmp/saved-output    <span class=\"comment\">#在终端上查看 ls 列表同时将该列表存储到文件中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#确定当前窗口的终端设备。将结果作为邮件发送，并在此窗口中查看相同的结果。</span></span><br><span class=\"line\">tty</span><br><span class=\"line\">ls -l | tee /dev/pts/0 | mail -s subject student@desktop1.example.com</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>vi &amp;&amp; vim</p>\n<p><img src=\"/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524823338808284.png\" alt=\"image.png\"></p>\n<p>vim 的四个模式：编辑模式，命令模式，可视模式，扩展命令模式。默认启动进行命令模式，可用于导航、剪切和粘贴，以及其他文件操作，通过单字符进行各个模式：</p>\n<p>“i” 进入插入模式，编辑模式，按Esc 退出到命令模式</p>\n<p>“v” 进入可视模式，在其中可以选择多个字符进行操作，使用”V”键选择多选，使用Ctrl+v 可选择文本块。v,V,Ctrl+v 同样可用于退出可视模式</p>\n<p>“:” 冒号,启动扩展命令模式,可以执行写入、退出、保存等</p>\n<p>命令模式：u键撤销上次的编辑操作，x键删除光标所在的字符，:w 保存 :wq 保存退出  :q! 强制退出放弃修改。</p>\n<p>可视模式：y ：复制，p：粘贴 ，上下左右选择字符。</p>\n<p>安装vim-enhanced软件包提供vimtutor针对每一个操作的练习。可以安装学习一下</p>\n<p>图形编辑器gedit 、nano</p>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">编号</th>\n<th>通道名称</th>\n<th>描述</th>\n<th>默认连接</th>\n<th>用法  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">0</td>\n<td>stdin</td>\n<td>标准输入</td>\n<td>键盘</td>\n<td>仅读取  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td>stdout</td>\n<td>标准输出</td>\n<td>终端</td>\n<td>仅写入  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td>stderr</td>\n<td>标准错误</td>\n<td>终端</td>\n<td>仅写入  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3+</td>\n<td>filename</td>\n<td>其它文件</td>\n<td>无</td>\n<td>读取/写入  </td>\n</tr>\n</tbody>\n</table>\n<p>重定向输出到文件</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">用法</th>\n<th>说明</th>\n<th>视觉效果  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">&gt;file</td>\n<td>重定向stdout到文件（1）</td>\n<td><img src=\"/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524818205308304.png\" alt=\"图片.png\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&gt;&gt;file</td>\n<td>重定向stdout到文件，附加到当前文件内容后面（2）</td>\n<td><img src=\"/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524818219547743.png\" alt=\"图片.png\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2&gt;file</td>\n<td>重定向stderr到文件（1）</td>\n<td><img src=\"/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524818191991552.png\" alt=\"图片.png\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2&gt;/dev/null</td>\n<td>将stderr错误信息重定向到/dev/null从而将它丢弃</td>\n<td><img src=\"/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524818180473442.png\" alt=\"图片.png\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&amp;&gt;file</td>\n<td>将stdout和stderr合并到一个文件（1）</td>\n<td><img src=\"/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524818174855912.png\" alt=\"图片.png\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&gt;&gt;file 2&gt;&amp;1</td>\n<td>合并stdout和stderr，并且附加到当前文件内容后面（2）（3）</td>\n<td><img src=\"/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524818166553035.png\" alt=\"图片.png\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">注</td>\n<td>（1）覆盖现在文件，如果为新文件则创建文件<br>（2）附加到现有文件，如果为新文件则创建文件<br>（3）重定向顺向很重要，可避免出现意外的命令行为。2&gt;&amp;1 将stderr发送到与stdout相同的位置。要使其生效，在向stdout中添加stderr之前，需要首先重定向stdout.尽管&amp;&gt;&gt;是向文件中附加stdout和stderr的备选方法，但2&gt;&amp;1 是通过管道同时发送stdout和stderr所需要的方法。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date &gt; /tmp/saved-timestamp    <span class=\"comment\">#保存时间到文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">tail -n 100 /var/<span class=\"built_in\">log</span>/dmesg &gt; /tm/last-100-boot-messages    <span class=\"comment\">#复制文件日志的最后100行到另一个文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">cat file1 file2 file3 file4 &gt; /tmp/all-four-in-one    <span class=\"comment\">#将四个文件连接成一个</span></span><br><span class=\"line\"></span><br><span class=\"line\">ls -a &gt; /tmp/my-file-names    <span class=\"comment\">#将当前目录的隐藏文件名和常规文件名列出到文件中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"new line of information\"</span> &gt;&gt;/tmp/many-lines-of-information    <span class=\"comment\">#将输出附加到现有文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">diff previous-file current-file &gt;&gt; /tmp/tracking-changes-made    <span class=\"comment\">#将比较内容输出附加到现有文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">find /etc -name passwd 2&gt; /tmp/errors    <span class=\"comment\">#将错误重定向到文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">find /etc -name passwd &gt;/tmp/output 2&gt; /tmperrors    <span class=\"comment\">#将进程输出和错误消息分别保存到单独文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">find /etc -name passwd &gt;/tmp/output 2&gt;/dev/null    <span class=\"comment\">#忽略并丢弃错误消息</span></span><br><span class=\"line\"></span><br><span class=\"line\">find /etc -name passwd &amp;&gt; /tmp/save-both    <span class=\"comment\">#将输出和错误消息存储在一起</span></span><br><span class=\"line\"></span><br><span class=\"line\">find /etc -name passwd  &gt;&gt; /tmp/save-toth 2&gt;&amp;1    <span class=\"comment\">#将输出和生成的错误消息附加到现有文件</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"构建管道-“-”\"><a href=\"#构建管道-“-”\" class=\"headerlink\" title=\"构建管道 “|”\"></a>构建管道 “|”</h4><p>从一个进程标准输出到另一个进程的标准输入</p>\n<p><img src=\"/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524823380758403.png\" alt=\"image.png\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l /usr/bin | less</span><br><span class=\"line\">ls | wc -l &gt; /tmp/how-many-files    <span class=\"comment\">#计算输出列出中的行数并重定向到文件</span></span><br><span class=\"line\">ls -t | head -n 10 &gt; /tmp/ten-last-changed-files    <span class=\"comment\">#抓取列表的前几行、或后几行，或选定的行并重定向到文件</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524823368317604.png\" alt=\"image.png\"></p>\n<p>使用 tee 命令传送，tee 命令显示或重定向通常因传送而被隐藏的中间结果。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l | tee /tmp/saved-output    <span class=\"comment\">#在终端上查看 ls 列表同时将该列表存储到文件中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#确定当前窗口的终端设备。将结果作为邮件发送，并在此窗口中查看相同的结果。</span></span><br><span class=\"line\">tty</span><br><span class=\"line\">ls -l | tee /dev/pts/0 | mail -s subject student@desktop1.example.com</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>vi &amp;&amp; vim</p>\n<p><img src=\"/2018/04/27/chapter-4-creatingviewingand-editing-text-files/1524823338808284.png\" alt=\"image.png\"></p>\n<p>vim 的四个模式：编辑模式，命令模式，可视模式，扩展命令模式。默认启动进行命令模式，可用于导航、剪切和粘贴，以及其他文件操作，通过单字符进行各个模式：</p>\n<p>“i” 进入插入模式，编辑模式，按Esc 退出到命令模式</p>\n<p>“v” 进入可视模式，在其中可以选择多个字符进行操作，使用”V”键选择多选，使用Ctrl+v 可选择文本块。v,V,Ctrl+v 同样可用于退出可视模式</p>\n<p>“:” 冒号,启动扩展命令模式,可以执行写入、退出、保存等</p>\n<p>命令模式：u键撤销上次的编辑操作，x键删除光标所在的字符，:w 保存 :wq 保存退出  :q! 强制退出放弃修改。</p>\n<p>可视模式：y ：复制，p：粘贴 ，上下左右选择字符。</p>\n<p>安装vim-enhanced软件包提供vimtutor针对每一个操作的练习。可以安装学习一下</p>\n<p>图形编辑器gedit 、nano</p>\n"},{"title":"Chapter 6 . Controlling Access to Files with Linux File system Permissions","url":"303.html","id":"303","date":"2018-05-03T09:15:19.000Z","_content":"\n### Linux 文件系统权限  \n\n文件具体三个应用权限 的用户类别。文件归用户所有，通常是创建文件的用户。文件归单个组所有，通常是创建文件的用户的主要组，但是可以进行更改。可以为所属用户、所属组和系统上的非用户和非所属组的其它用户设置不同的权限。三种应用权限 ：r,w,x（读、写、执行）  \n\n|权限  |对文件的影响  |对目录的影响  \n| :--\n|r  |可以读取文件的内容  |可以列出目录的内容（文件名）  \n|w  |可以更改文件内容  |可以创建或删除目录中的文件  \n|x  |可以作为命令执行文件  |可以访问目录的内容（取决于目录中文件的权限）  \n\n用户通常对目录具有r,x 权限，因此他们可以列出目录并访问其内容。如果用户只有 r 权限那只能列出文件名，其它信息都不可用。如果用户对目录只有 x 权限。则不能列出目录中的文件名，但是可以对已知文件名并有读取权限的文件通过明确指定文件名来访问文件的内容。对文件具有 w 权限的用户可以删除目录的文件，不论文件所属是谁（特殊权限除外）。\n```sh\nls -l file1    #查看文件的所有权\nls -ld dir     #查看目录的所有权\n```\n\n\n与NTFS权限不同，linux 权限设置适用于设置了linux 权限的目录和文件，目录中的子目录和文件不会继承目录的权限。（但是目录的权限可以会阻止用户访问文件）\n\n更改文件/目录的权限\n\n##### 符号法  \n\nchmod WhoWhatWhich file|dir\n\nWho 是指 u , g , o , a  (代表用户、组、其它、全部)  \n\nWhat 是指 + , - , = (代表添加、删除、精确设置)  \n\nWhich 是指 r , w , x (代表读取、写入、可执行)\n\n##### 数值法\n\nchmod ### file | dir  \n\n每个数字代表一个访问级别：用户、组、其它\n\n\\# 是 r = 4 , w = 2 , x = 1 的和\n\n使用数值法，权限由3位（或者设置高级权限时4位）八进制数来表示。单一数值范围0-7\n```sh\nchmod go-rw file1    #删除组和其它的 r,w 权限\nchmod a+x file2    #为每个人添加x 权限\nchmod 750 sampledir    #设置用户 rwx ,组 rx  ,其它 - 无权限\n#目录树递归设置权限使用 -R 选项。当使用此选项是，务必使用 X 权限，而不是 x 权限 。表示应对目录而不是普通文件设置执行权限。\nchmod -R g+rwX demodir     #对demodir 目录及其子目录设置rwx 权限 ，对目录中的文件设置rw 权限\n```\n\n\n##### 更改文件/目录的用户或组所有权\n```sh\nchown  student foofile     #修改文件foofile 的所有都为student\nchown -R student foodir     #修改目录及其子文件、目录的所有都为student\nchown :admins foodri     #修改目录的所属组为admins\nchown visitor:guests foodir     #修改目录的所属者visitor,所属组guests \n#只能root用户可以更改文件所有权。但是，root 或文件的所有者可以设置组所有权。root 用户可将所有权授予任何组，非root用户可将所有权授予他们所属的组。\n```\n\n\n##### 默认权限和文件访问\n\n###### 特殊权限\n\n对可执行文件的setuid (或setgid)权限表示将以文件所属用户（或组）身份执行，而不是运行命令的用户身份。\n\n目录的粘滞位可以为文件的删除设置特殊权限：仅文件所属者或root用户可以删除。\n\n对于目录的setgid 权限表示 在该目录中创建的文件将继承目录组所属关系，而不是继承自用户。这通常用于组协作目录，将文件从默认的专有组自动更改成共享组。\n\n|权限  |对文件的影响  |对目录的影响  \n| :--\n|u+s (suid)  |以文件所属者身份运行，而非运行命令的用户身份  |无  \n|g+s (sgid)  |对文件所属组身份执行文件  |在目录中最新创建的文件将其所属组设置为和目录所属组相匹配  \n|o+t (sticky)  |无  |对目录有写入权限的用户仅可删除自己创建的文件，无法删除或强制保存到其它用户拥有的文件  \n\n###### 设置特殊权限\n\n符号法：setuid = u+s ,setgid = g+s ，sticky = o+t  \n\n数值法：(4位第1位) setuid = 4, setgid = 3 ,sticky =1\n\nchmod g+s dir     #在dir目录添加setgid位\nchmod 2770 dir     #在dir目录设置setgid，并对目录的用户和组设置 rwx 权限\n\n\n\n###### 默认文件权限\n\nbash shell 用户的默认umask 在/etc/profile 和 /etc/bashrc 文件中定义。用户可以修改家目录下的.profile 和  .bashrc 文件来覆盖系统值。设置umask 少于3位时，默认前导为0。\n\n0002 清除其它用户的写入权限，077 删除用户所属组和其它的所有权限。\n","source":"_posts/chapter-6-controlling-access-to-files-with-linux-file-system-permissions.md","raw":"---\ntitle: Chapter 6 . Controlling Access to Files with Linux File system Permissions\nurl: 303.html\nid: 303\ncategories:\n  - RHEL124\ndate: 2018-05-03 17:15:19\ntags:\n---\n\n### Linux 文件系统权限  \n\n文件具体三个应用权限 的用户类别。文件归用户所有，通常是创建文件的用户。文件归单个组所有，通常是创建文件的用户的主要组，但是可以进行更改。可以为所属用户、所属组和系统上的非用户和非所属组的其它用户设置不同的权限。三种应用权限 ：r,w,x（读、写、执行）  \n\n|权限  |对文件的影响  |对目录的影响  \n| :--\n|r  |可以读取文件的内容  |可以列出目录的内容（文件名）  \n|w  |可以更改文件内容  |可以创建或删除目录中的文件  \n|x  |可以作为命令执行文件  |可以访问目录的内容（取决于目录中文件的权限）  \n\n用户通常对目录具有r,x 权限，因此他们可以列出目录并访问其内容。如果用户只有 r 权限那只能列出文件名，其它信息都不可用。如果用户对目录只有 x 权限。则不能列出目录中的文件名，但是可以对已知文件名并有读取权限的文件通过明确指定文件名来访问文件的内容。对文件具有 w 权限的用户可以删除目录的文件，不论文件所属是谁（特殊权限除外）。\n```sh\nls -l file1    #查看文件的所有权\nls -ld dir     #查看目录的所有权\n```\n\n\n与NTFS权限不同，linux 权限设置适用于设置了linux 权限的目录和文件，目录中的子目录和文件不会继承目录的权限。（但是目录的权限可以会阻止用户访问文件）\n\n更改文件/目录的权限\n\n##### 符号法  \n\nchmod WhoWhatWhich file|dir\n\nWho 是指 u , g , o , a  (代表用户、组、其它、全部)  \n\nWhat 是指 + , - , = (代表添加、删除、精确设置)  \n\nWhich 是指 r , w , x (代表读取、写入、可执行)\n\n##### 数值法\n\nchmod ### file | dir  \n\n每个数字代表一个访问级别：用户、组、其它\n\n\\# 是 r = 4 , w = 2 , x = 1 的和\n\n使用数值法，权限由3位（或者设置高级权限时4位）八进制数来表示。单一数值范围0-7\n```sh\nchmod go-rw file1    #删除组和其它的 r,w 权限\nchmod a+x file2    #为每个人添加x 权限\nchmod 750 sampledir    #设置用户 rwx ,组 rx  ,其它 - 无权限\n#目录树递归设置权限使用 -R 选项。当使用此选项是，务必使用 X 权限，而不是 x 权限 。表示应对目录而不是普通文件设置执行权限。\nchmod -R g+rwX demodir     #对demodir 目录及其子目录设置rwx 权限 ，对目录中的文件设置rw 权限\n```\n\n\n##### 更改文件/目录的用户或组所有权\n```sh\nchown  student foofile     #修改文件foofile 的所有都为student\nchown -R student foodir     #修改目录及其子文件、目录的所有都为student\nchown :admins foodri     #修改目录的所属组为admins\nchown visitor:guests foodir     #修改目录的所属者visitor,所属组guests \n#只能root用户可以更改文件所有权。但是，root 或文件的所有者可以设置组所有权。root 用户可将所有权授予任何组，非root用户可将所有权授予他们所属的组。\n```\n\n\n##### 默认权限和文件访问\n\n###### 特殊权限\n\n对可执行文件的setuid (或setgid)权限表示将以文件所属用户（或组）身份执行，而不是运行命令的用户身份。\n\n目录的粘滞位可以为文件的删除设置特殊权限：仅文件所属者或root用户可以删除。\n\n对于目录的setgid 权限表示 在该目录中创建的文件将继承目录组所属关系，而不是继承自用户。这通常用于组协作目录，将文件从默认的专有组自动更改成共享组。\n\n|权限  |对文件的影响  |对目录的影响  \n| :--\n|u+s (suid)  |以文件所属者身份运行，而非运行命令的用户身份  |无  \n|g+s (sgid)  |对文件所属组身份执行文件  |在目录中最新创建的文件将其所属组设置为和目录所属组相匹配  \n|o+t (sticky)  |无  |对目录有写入权限的用户仅可删除自己创建的文件，无法删除或强制保存到其它用户拥有的文件  \n\n###### 设置特殊权限\n\n符号法：setuid = u+s ,setgid = g+s ，sticky = o+t  \n\n数值法：(4位第1位) setuid = 4, setgid = 3 ,sticky =1\n\nchmod g+s dir     #在dir目录添加setgid位\nchmod 2770 dir     #在dir目录设置setgid，并对目录的用户和组设置 rwx 权限\n\n\n\n###### 默认文件权限\n\nbash shell 用户的默认umask 在/etc/profile 和 /etc/bashrc 文件中定义。用户可以修改家目录下的.profile 和  .bashrc 文件来覆盖系统值。设置umask 少于3位时，默认前导为0。\n\n0002 清除其它用户的写入权限，077 删除用户所属组和其它的所有权限。\n","slug":"chapter-6-controlling-access-to-files-with-linux-file-system-permissions","published":1,"updated":"2019-01-05T23:42:08.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqhz3000dlxkjob331f7u","content":"<h3 id=\"Linux-文件系统权限\"><a href=\"#Linux-文件系统权限\" class=\"headerlink\" title=\"Linux 文件系统权限\"></a>Linux 文件系统权限</h3><p>文件具体三个应用权限 的用户类别。文件归用户所有，通常是创建文件的用户。文件归单个组所有，通常是创建文件的用户的主要组，但是可以进行更改。可以为所属用户、所属组和系统上的非用户和非所属组的其它用户设置不同的权限。三种应用权限 ：r,w,x（读、写、执行）  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">权限</th>\n<th>对文件的影响</th>\n<th>对目录的影响  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">r</td>\n<td>可以读取文件的内容</td>\n<td>可以列出目录的内容（文件名）  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">w</td>\n<td>可以更改文件内容</td>\n<td>可以创建或删除目录中的文件  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x</td>\n<td>可以作为命令执行文件</td>\n<td>可以访问目录的内容（取决于目录中文件的权限）  </td>\n</tr>\n</tbody>\n</table>\n<p>用户通常对目录具有r,x 权限，因此他们可以列出目录并访问其内容。如果用户只有 r 权限那只能列出文件名，其它信息都不可用。如果用户对目录只有 x 权限。则不能列出目录中的文件名，但是可以对已知文件名并有读取权限的文件通过明确指定文件名来访问文件的内容。对文件具有 w 权限的用户可以删除目录的文件，不论文件所属是谁（特殊权限除外）。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l file1    <span class=\"comment\">#查看文件的所有权</span></span><br><span class=\"line\">ls -ld dir     <span class=\"comment\">#查看目录的所有权</span></span><br></pre></td></tr></table></figure></p>\n<p>与NTFS权限不同，linux 权限设置适用于设置了linux 权限的目录和文件，目录中的子目录和文件不会继承目录的权限。（但是目录的权限可以会阻止用户访问文件）</p>\n<p>更改文件/目录的权限</p>\n<h5 id=\"符号法\"><a href=\"#符号法\" class=\"headerlink\" title=\"符号法\"></a>符号法</h5><p>chmod WhoWhatWhich file|dir</p>\n<p>Who 是指 u , g , o , a  (代表用户、组、其它、全部)  </p>\n<p>What 是指 + , - , = (代表添加、删除、精确设置)  </p>\n<p>Which 是指 r , w , x (代表读取、写入、可执行)</p>\n<h5 id=\"数值法\"><a href=\"#数值法\" class=\"headerlink\" title=\"数值法\"></a>数值法</h5><p>chmod ### file | dir  </p>\n<p>每个数字代表一个访问级别：用户、组、其它</p>\n<p># 是 r = 4 , w = 2 , x = 1 的和</p>\n<p>使用数值法，权限由3位（或者设置高级权限时4位）八进制数来表示。单一数值范围0-7<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod go-rw file1    <span class=\"comment\">#删除组和其它的 r,w 权限</span></span><br><span class=\"line\">chmod a+x file2    <span class=\"comment\">#为每个人添加x 权限</span></span><br><span class=\"line\">chmod 750 sampledir    <span class=\"comment\">#设置用户 rwx ,组 rx  ,其它 - 无权限</span></span><br><span class=\"line\"><span class=\"comment\">#目录树递归设置权限使用 -R 选项。当使用此选项是，务必使用 X 权限，而不是 x 权限 。表示应对目录而不是普通文件设置执行权限。</span></span><br><span class=\"line\">chmod -R g+rwX demodir     <span class=\"comment\">#对demodir 目录及其子目录设置rwx 权限 ，对目录中的文件设置rw 权限</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"更改文件-目录的用户或组所有权\"><a href=\"#更改文件-目录的用户或组所有权\" class=\"headerlink\" title=\"更改文件/目录的用户或组所有权\"></a>更改文件/目录的用户或组所有权</h5><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown  student foofile     <span class=\"comment\">#修改文件foofile 的所有都为student</span></span><br><span class=\"line\">chown -R student foodir     <span class=\"comment\">#修改目录及其子文件、目录的所有都为student</span></span><br><span class=\"line\">chown :admins foodri     <span class=\"comment\">#修改目录的所属组为admins</span></span><br><span class=\"line\">chown visitor:guests foodir     <span class=\"comment\">#修改目录的所属者visitor,所属组guests </span></span><br><span class=\"line\"><span class=\"comment\">#只能root用户可以更改文件所有权。但是，root 或文件的所有者可以设置组所有权。root 用户可将所有权授予任何组，非root用户可将所有权授予他们所属的组。</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"默认权限和文件访问\"><a href=\"#默认权限和文件访问\" class=\"headerlink\" title=\"默认权限和文件访问\"></a>默认权限和文件访问</h5><h6 id=\"特殊权限\"><a href=\"#特殊权限\" class=\"headerlink\" title=\"特殊权限\"></a>特殊权限</h6><p>对可执行文件的setuid (或setgid)权限表示将以文件所属用户（或组）身份执行，而不是运行命令的用户身份。</p>\n<p>目录的粘滞位可以为文件的删除设置特殊权限：仅文件所属者或root用户可以删除。</p>\n<p>对于目录的setgid 权限表示 在该目录中创建的文件将继承目录组所属关系，而不是继承自用户。这通常用于组协作目录，将文件从默认的专有组自动更改成共享组。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">权限</th>\n<th>对文件的影响</th>\n<th>对目录的影响  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">u+s (suid)</td>\n<td>以文件所属者身份运行，而非运行命令的用户身份</td>\n<td>无  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">g+s (sgid)</td>\n<td>对文件所属组身份执行文件</td>\n<td>在目录中最新创建的文件将其所属组设置为和目录所属组相匹配  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">o+t (sticky)</td>\n<td>无</td>\n<td>对目录有写入权限的用户仅可删除自己创建的文件，无法删除或强制保存到其它用户拥有的文件  </td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"设置特殊权限\"><a href=\"#设置特殊权限\" class=\"headerlink\" title=\"设置特殊权限\"></a>设置特殊权限</h6><p>符号法：setuid = u+s ,setgid = g+s ，sticky = o+t  </p>\n<p>数值法：(4位第1位) setuid = 4, setgid = 3 ,sticky =1</p>\n<p>chmod g+s dir     #在dir目录添加setgid位<br>chmod 2770 dir     #在dir目录设置setgid，并对目录的用户和组设置 rwx 权限</p>\n<h6 id=\"默认文件权限\"><a href=\"#默认文件权限\" class=\"headerlink\" title=\"默认文件权限\"></a>默认文件权限</h6><p>bash shell 用户的默认umask 在/etc/profile 和 /etc/bashrc 文件中定义。用户可以修改家目录下的.profile 和  .bashrc 文件来覆盖系统值。设置umask 少于3位时，默认前导为0。</p>\n<p>0002 清除其它用户的写入权限，077 删除用户所属组和其它的所有权限。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Linux-文件系统权限\"><a href=\"#Linux-文件系统权限\" class=\"headerlink\" title=\"Linux 文件系统权限\"></a>Linux 文件系统权限</h3><p>文件具体三个应用权限 的用户类别。文件归用户所有，通常是创建文件的用户。文件归单个组所有，通常是创建文件的用户的主要组，但是可以进行更改。可以为所属用户、所属组和系统上的非用户和非所属组的其它用户设置不同的权限。三种应用权限 ：r,w,x（读、写、执行）  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">权限</th>\n<th>对文件的影响</th>\n<th>对目录的影响  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">r</td>\n<td>可以读取文件的内容</td>\n<td>可以列出目录的内容（文件名）  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">w</td>\n<td>可以更改文件内容</td>\n<td>可以创建或删除目录中的文件  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">x</td>\n<td>可以作为命令执行文件</td>\n<td>可以访问目录的内容（取决于目录中文件的权限）  </td>\n</tr>\n</tbody>\n</table>\n<p>用户通常对目录具有r,x 权限，因此他们可以列出目录并访问其内容。如果用户只有 r 权限那只能列出文件名，其它信息都不可用。如果用户对目录只有 x 权限。则不能列出目录中的文件名，但是可以对已知文件名并有读取权限的文件通过明确指定文件名来访问文件的内容。对文件具有 w 权限的用户可以删除目录的文件，不论文件所属是谁（特殊权限除外）。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l file1    <span class=\"comment\">#查看文件的所有权</span></span><br><span class=\"line\">ls -ld dir     <span class=\"comment\">#查看目录的所有权</span></span><br></pre></td></tr></table></figure></p>\n<p>与NTFS权限不同，linux 权限设置适用于设置了linux 权限的目录和文件，目录中的子目录和文件不会继承目录的权限。（但是目录的权限可以会阻止用户访问文件）</p>\n<p>更改文件/目录的权限</p>\n<h5 id=\"符号法\"><a href=\"#符号法\" class=\"headerlink\" title=\"符号法\"></a>符号法</h5><p>chmod WhoWhatWhich file|dir</p>\n<p>Who 是指 u , g , o , a  (代表用户、组、其它、全部)  </p>\n<p>What 是指 + , - , = (代表添加、删除、精确设置)  </p>\n<p>Which 是指 r , w , x (代表读取、写入、可执行)</p>\n<h5 id=\"数值法\"><a href=\"#数值法\" class=\"headerlink\" title=\"数值法\"></a>数值法</h5><p>chmod ### file | dir  </p>\n<p>每个数字代表一个访问级别：用户、组、其它</p>\n<p># 是 r = 4 , w = 2 , x = 1 的和</p>\n<p>使用数值法，权限由3位（或者设置高级权限时4位）八进制数来表示。单一数值范围0-7<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod go-rw file1    <span class=\"comment\">#删除组和其它的 r,w 权限</span></span><br><span class=\"line\">chmod a+x file2    <span class=\"comment\">#为每个人添加x 权限</span></span><br><span class=\"line\">chmod 750 sampledir    <span class=\"comment\">#设置用户 rwx ,组 rx  ,其它 - 无权限</span></span><br><span class=\"line\"><span class=\"comment\">#目录树递归设置权限使用 -R 选项。当使用此选项是，务必使用 X 权限，而不是 x 权限 。表示应对目录而不是普通文件设置执行权限。</span></span><br><span class=\"line\">chmod -R g+rwX demodir     <span class=\"comment\">#对demodir 目录及其子目录设置rwx 权限 ，对目录中的文件设置rw 权限</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"更改文件-目录的用户或组所有权\"><a href=\"#更改文件-目录的用户或组所有权\" class=\"headerlink\" title=\"更改文件/目录的用户或组所有权\"></a>更改文件/目录的用户或组所有权</h5><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown  student foofile     <span class=\"comment\">#修改文件foofile 的所有都为student</span></span><br><span class=\"line\">chown -R student foodir     <span class=\"comment\">#修改目录及其子文件、目录的所有都为student</span></span><br><span class=\"line\">chown :admins foodri     <span class=\"comment\">#修改目录的所属组为admins</span></span><br><span class=\"line\">chown visitor:guests foodir     <span class=\"comment\">#修改目录的所属者visitor,所属组guests </span></span><br><span class=\"line\"><span class=\"comment\">#只能root用户可以更改文件所有权。但是，root 或文件的所有者可以设置组所有权。root 用户可将所有权授予任何组，非root用户可将所有权授予他们所属的组。</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"默认权限和文件访问\"><a href=\"#默认权限和文件访问\" class=\"headerlink\" title=\"默认权限和文件访问\"></a>默认权限和文件访问</h5><h6 id=\"特殊权限\"><a href=\"#特殊权限\" class=\"headerlink\" title=\"特殊权限\"></a>特殊权限</h6><p>对可执行文件的setuid (或setgid)权限表示将以文件所属用户（或组）身份执行，而不是运行命令的用户身份。</p>\n<p>目录的粘滞位可以为文件的删除设置特殊权限：仅文件所属者或root用户可以删除。</p>\n<p>对于目录的setgid 权限表示 在该目录中创建的文件将继承目录组所属关系，而不是继承自用户。这通常用于组协作目录，将文件从默认的专有组自动更改成共享组。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">权限</th>\n<th>对文件的影响</th>\n<th>对目录的影响  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">u+s (suid)</td>\n<td>以文件所属者身份运行，而非运行命令的用户身份</td>\n<td>无  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">g+s (sgid)</td>\n<td>对文件所属组身份执行文件</td>\n<td>在目录中最新创建的文件将其所属组设置为和目录所属组相匹配  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">o+t (sticky)</td>\n<td>无</td>\n<td>对目录有写入权限的用户仅可删除自己创建的文件，无法删除或强制保存到其它用户拥有的文件  </td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"设置特殊权限\"><a href=\"#设置特殊权限\" class=\"headerlink\" title=\"设置特殊权限\"></a>设置特殊权限</h6><p>符号法：setuid = u+s ,setgid = g+s ，sticky = o+t  </p>\n<p>数值法：(4位第1位) setuid = 4, setgid = 3 ,sticky =1</p>\n<p>chmod g+s dir     #在dir目录添加setgid位<br>chmod 2770 dir     #在dir目录设置setgid，并对目录的用户和组设置 rwx 权限</p>\n<h6 id=\"默认文件权限\"><a href=\"#默认文件权限\" class=\"headerlink\" title=\"默认文件权限\"></a>默认文件权限</h6><p>bash shell 用户的默认umask 在/etc/profile 和 /etc/bashrc 文件中定义。用户可以修改家目录下的.profile 和  .bashrc 文件来覆盖系统值。设置umask 少于3位时，默认前导为0。</p>\n<p>0002 清除其它用户的写入权限，077 删除用户所属组和其它的所有权限。</p>\n"},{"title":"Chapter 7. Monitoring and Managing Linux Processes","url":"195.html","id":"195","date":"2018-04-19T03:24:41.000Z","_content":"\nLinux 版本的ps命令支持三种选项格式，包括：\n\n*   UNIX（POSIX）选项，可以分组但必须以连字符（-）开头；\n\n*   BSD 选项，可以分组但不可与连字符同用；\n\n*   GNU长选项，以双连字符开关。\n\n\n例如：ps -aux 不同于 ps aux  \n```sh\nps   aux    #显示所有进程，包含用户感兴趣的列，以及没有控制终端的进程。\nps   lax    #长列表，提供更多详细信息，可以避免查询用户名来加快显示。\nps -ef  #显示所有进程。\nps #默认不排序，除非指定-O 或者 --sort \nps j #显示后台作业信息\n```\n```sh\n #&符号放在尾部，放到后台执行的效果，但是如果一行有多个命令，仅将最后一个放后台，除非使用$()括起来。\njobs #显示后台运行的进程，同ps j 类似\nCtrl + z #把当前执行的命令放到后台，状态为stopped\nbg  %id    #启动后台指定进程(stopped-->running)\nfg   %id    #指定后台进来显示在前台\n```\n```sh\nvmstat 2 10    #2秒刷新显示10次\n```\n```sh\ntop\n    M  #按内存排序\n    K    #结束进程\n```\n```sh\nfree -m\ncat /proc/cpuinfo\nuptime\ngrep \"model name\" /proc/cpuinfo\ngnome-system-monitor\n```\n#### top 各列含义：\n\n*   用户名称(user)，是进程所有者  \n\n*   虚拟内存(virt)，是进程正在使用的所有内存，包括常驻集合、共享库，以及任何映射或交换的内存页。（PS命令中为VSZ）  \n\n*   常驻内存(res)，是进程所用的物理内存，包括任何驻留的共享对象。（PS命令中为rss）\n\n*   进程状态(s)\n\n\n    D=不间断的睡眠uninterruptable sleeping\n\n                R=运行或可运行running or runnable\n\n                S=睡眠sleeping\n\n                T=停止或追踪stopped or traced\n\n                Z=僵尸zombie\n\n\n\n\nCtrl-z(暂停，转后台)，Ctrl-c（中断），Ctrl-d (终止)  \n```sh\nkill    PID\nkill    -signal PID\nkill    -l\nkillall   command_pattern\nkillall  -signal command_pattern\nkillall   -signal -u username command_pattern\npkill    command_pattern\npkill    -signal command_pattern\npkill   -G GID command_pattern\npkill    -P PPID command_pattern\npkill -t terminal\\_name -U UID command\\_patern\npkill -SIGKILL -u bob #向bob用户发送sigkill 指令\n\nw -f  #显示当前登录的用户，-f显示远程登录系统名称\nw  -h -u username\npgrep -l -u username\npstree -p username\n```\n\n|名称          |标 志  |内核定义的状态名称和描述  \n| :--\n|运行中  |R  |TASK_RUNING:进程正在CPU上执行，或者正在等待运行。处于运行中（或可运行）状态时，进程可能正在执行用户作业或内核作业（系统调用），或者已排队并就绪。  \n|睡眠  |S  |TASK_INTERRUPTIBLE:进程正在等待某一条件：硬件请求、系统资源访问或信号。当事件或信号满足条件时，该进程将返回到运行中。  \n||D  |TASK_INTERRUPTIBLE：此进程也在睡眠，但与S状态不同，不会响应传递的信号。仅在特定的条件下使用，其中进程中断可能会导致意外的设备状态。  \n||K  |TASK_KILLABLE:与不可中断的D状态相同，但有所修改，允许等待中的任务通过响应信号而被中断（彻底退出 ）。实用程序通常将可中断的进程显示为D状态。。  \n|已停止  |T  |TASK_STOPPED：进程已被停止（暂停），通常是通过用户或其他进程发出的信号。进程可以通过另一信号返回到运行中状态，继续执行（恢复）  \n||T  |TASK_TRACED:正在被调试的进程也会临时停止，并且共享同一个T状态标志。  \n|僵停  |Z  |EXIT_ZOMBIE：子进程在退出时向父进程发出信号。除进程身份（PID）之外的所有资源都已释放。  \n||X  |EXIT_DEAD:当父进程清理（获取）剩余的子进程结构时，进程现在已经彻底释放。此状态从不会在进程列出实用程序中看到。  \n\n使用时可以通过短名称(HUP)或正确的名称（SIGHUP）指代信号  \n\n|信号编号  |短名称  |定义  |用途  \n| :--\n|1  |HUP  |挂起  |用于报告终端控制进程的终止。也用于请求进程重新初始化（重新加载配置）而不终止  \n|2  |INT  |键盘中断  |导致程序终止可以被拦截或处理。通过键盘INTR字符（Ctrl-c）发送  \n|3  |QUIT  |键盘退出  |与SIGINT相似，但也在终止时生成进程转储。通过键入QUIT字符（Ctrl-\\\\）发送。  \n|9  |KILL  |中断，无法拦截  |导致立即终止程序，无法被拦截、忽略或处理；总是致命的。  \n|15（默认）  |TERM  |终止  |导致程序终止。和SIGKILL不同，可以被拦截、忽略或处理。要求程序终止的友好方式；允许自我清理。  \n|18  |CONT  |继续  |发送到进程使其恢复（若已停止）。无法被拦截。即使被处理，也始终恢复进程  \n|19  |STOP  |停止，无法拦截  |暂停进程。无法被拦截或处理  \n|20  |TSTP  |键盘终止  |和SIGSTOP不同，可以被拦截、忽略或处理。通过键入SUSP字符（Ctrl-z）发送。  \n\n\n\n#### top中的基本击键操作\n|键  |用途  \n| :--\n|?或h  |交互式击键操作的帮助  \n|l、t、m  |切换到负载、线程、内存标题行  \n|1  |标题中切换显示单独CPU信息或所有CPU的汇总。  \n|s(1)  |更改刷新（屏幕）率，以带小数的秒数表示（如0.5、1、5）。  \n|b  |切换反射突出显示运行中的进程；默认为粗体  \n|B  |在显示中使用粗体，用于标题以运行中的进程。  \n|H  |切换线程；显示进程摘要或单独线程。  \n|u,U  |过滤任何用户名称（有效、真实）  \n|M  |按内存使用率以降序方式对进程列表排序  \n|P  |按处理器使用率，以降序方式对进程列表排序  \n|k(1)|中断进程。若有提示，输入PID，再输入signal  \n|r(1)|调整进程的nice值。若有提示，输入PID，再输入nice_value  \n|W  |写入（保存）当前的显示配置，以便在下一次重新启动top时使用  \n|q  |退出  \n|注：  |安全模式中不可用\n","source":"_posts/chapter-7-monitoring-and-managing-linux-processes.md","raw":"---\ntitle: Chapter 7. Monitoring and Managing Linux Processes\nurl: 195.html\nid: 195\ncategories:\n  - RHEL124\ndate: 2018-04-19 11:24:41\ntags:\n---\n\nLinux 版本的ps命令支持三种选项格式，包括：\n\n*   UNIX（POSIX）选项，可以分组但必须以连字符（-）开头；\n\n*   BSD 选项，可以分组但不可与连字符同用；\n\n*   GNU长选项，以双连字符开关。\n\n\n例如：ps -aux 不同于 ps aux  \n```sh\nps   aux    #显示所有进程，包含用户感兴趣的列，以及没有控制终端的进程。\nps   lax    #长列表，提供更多详细信息，可以避免查询用户名来加快显示。\nps -ef  #显示所有进程。\nps #默认不排序，除非指定-O 或者 --sort \nps j #显示后台作业信息\n```\n```sh\n #&符号放在尾部，放到后台执行的效果，但是如果一行有多个命令，仅将最后一个放后台，除非使用$()括起来。\njobs #显示后台运行的进程，同ps j 类似\nCtrl + z #把当前执行的命令放到后台，状态为stopped\nbg  %id    #启动后台指定进程(stopped-->running)\nfg   %id    #指定后台进来显示在前台\n```\n```sh\nvmstat 2 10    #2秒刷新显示10次\n```\n```sh\ntop\n    M  #按内存排序\n    K    #结束进程\n```\n```sh\nfree -m\ncat /proc/cpuinfo\nuptime\ngrep \"model name\" /proc/cpuinfo\ngnome-system-monitor\n```\n#### top 各列含义：\n\n*   用户名称(user)，是进程所有者  \n\n*   虚拟内存(virt)，是进程正在使用的所有内存，包括常驻集合、共享库，以及任何映射或交换的内存页。（PS命令中为VSZ）  \n\n*   常驻内存(res)，是进程所用的物理内存，包括任何驻留的共享对象。（PS命令中为rss）\n\n*   进程状态(s)\n\n\n    D=不间断的睡眠uninterruptable sleeping\n\n                R=运行或可运行running or runnable\n\n                S=睡眠sleeping\n\n                T=停止或追踪stopped or traced\n\n                Z=僵尸zombie\n\n\n\n\nCtrl-z(暂停，转后台)，Ctrl-c（中断），Ctrl-d (终止)  \n```sh\nkill    PID\nkill    -signal PID\nkill    -l\nkillall   command_pattern\nkillall  -signal command_pattern\nkillall   -signal -u username command_pattern\npkill    command_pattern\npkill    -signal command_pattern\npkill   -G GID command_pattern\npkill    -P PPID command_pattern\npkill -t terminal\\_name -U UID command\\_patern\npkill -SIGKILL -u bob #向bob用户发送sigkill 指令\n\nw -f  #显示当前登录的用户，-f显示远程登录系统名称\nw  -h -u username\npgrep -l -u username\npstree -p username\n```\n\n|名称          |标 志  |内核定义的状态名称和描述  \n| :--\n|运行中  |R  |TASK_RUNING:进程正在CPU上执行，或者正在等待运行。处于运行中（或可运行）状态时，进程可能正在执行用户作业或内核作业（系统调用），或者已排队并就绪。  \n|睡眠  |S  |TASK_INTERRUPTIBLE:进程正在等待某一条件：硬件请求、系统资源访问或信号。当事件或信号满足条件时，该进程将返回到运行中。  \n||D  |TASK_INTERRUPTIBLE：此进程也在睡眠，但与S状态不同，不会响应传递的信号。仅在特定的条件下使用，其中进程中断可能会导致意外的设备状态。  \n||K  |TASK_KILLABLE:与不可中断的D状态相同，但有所修改，允许等待中的任务通过响应信号而被中断（彻底退出 ）。实用程序通常将可中断的进程显示为D状态。。  \n|已停止  |T  |TASK_STOPPED：进程已被停止（暂停），通常是通过用户或其他进程发出的信号。进程可以通过另一信号返回到运行中状态，继续执行（恢复）  \n||T  |TASK_TRACED:正在被调试的进程也会临时停止，并且共享同一个T状态标志。  \n|僵停  |Z  |EXIT_ZOMBIE：子进程在退出时向父进程发出信号。除进程身份（PID）之外的所有资源都已释放。  \n||X  |EXIT_DEAD:当父进程清理（获取）剩余的子进程结构时，进程现在已经彻底释放。此状态从不会在进程列出实用程序中看到。  \n\n使用时可以通过短名称(HUP)或正确的名称（SIGHUP）指代信号  \n\n|信号编号  |短名称  |定义  |用途  \n| :--\n|1  |HUP  |挂起  |用于报告终端控制进程的终止。也用于请求进程重新初始化（重新加载配置）而不终止  \n|2  |INT  |键盘中断  |导致程序终止可以被拦截或处理。通过键盘INTR字符（Ctrl-c）发送  \n|3  |QUIT  |键盘退出  |与SIGINT相似，但也在终止时生成进程转储。通过键入QUIT字符（Ctrl-\\\\）发送。  \n|9  |KILL  |中断，无法拦截  |导致立即终止程序，无法被拦截、忽略或处理；总是致命的。  \n|15（默认）  |TERM  |终止  |导致程序终止。和SIGKILL不同，可以被拦截、忽略或处理。要求程序终止的友好方式；允许自我清理。  \n|18  |CONT  |继续  |发送到进程使其恢复（若已停止）。无法被拦截。即使被处理，也始终恢复进程  \n|19  |STOP  |停止，无法拦截  |暂停进程。无法被拦截或处理  \n|20  |TSTP  |键盘终止  |和SIGSTOP不同，可以被拦截、忽略或处理。通过键入SUSP字符（Ctrl-z）发送。  \n\n\n\n#### top中的基本击键操作\n|键  |用途  \n| :--\n|?或h  |交互式击键操作的帮助  \n|l、t、m  |切换到负载、线程、内存标题行  \n|1  |标题中切换显示单独CPU信息或所有CPU的汇总。  \n|s(1)  |更改刷新（屏幕）率，以带小数的秒数表示（如0.5、1、5）。  \n|b  |切换反射突出显示运行中的进程；默认为粗体  \n|B  |在显示中使用粗体，用于标题以运行中的进程。  \n|H  |切换线程；显示进程摘要或单独线程。  \n|u,U  |过滤任何用户名称（有效、真实）  \n|M  |按内存使用率以降序方式对进程列表排序  \n|P  |按处理器使用率，以降序方式对进程列表排序  \n|k(1)|中断进程。若有提示，输入PID，再输入signal  \n|r(1)|调整进程的nice值。若有提示，输入PID，再输入nice_value  \n|W  |写入（保存）当前的显示配置，以便在下一次重新启动top时使用  \n|q  |退出  \n|注：  |安全模式中不可用\n","slug":"chapter-7-monitoring-and-managing-linux-processes","published":1,"updated":"2019-01-05T23:52:13.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqhz5000flxkjo4ovmwt7","content":"<p>Linux 版本的ps命令支持三种选项格式，包括：</p>\n<ul>\n<li><p>UNIX（POSIX）选项，可以分组但必须以连字符（-）开头；</p>\n</li>\n<li><p>BSD 选项，可以分组但不可与连字符同用；</p>\n</li>\n<li><p>GNU长选项，以双连字符开关。</p>\n</li>\n</ul>\n<p>例如：ps -aux 不同于 ps aux<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps   aux    <span class=\"comment\">#显示所有进程，包含用户感兴趣的列，以及没有控制终端的进程。</span></span><br><span class=\"line\">ps   lax    <span class=\"comment\">#长列表，提供更多详细信息，可以避免查询用户名来加快显示。</span></span><br><span class=\"line\">ps -ef  <span class=\"comment\">#显示所有进程。</span></span><br><span class=\"line\">ps <span class=\"comment\">#默认不排序，除非指定-O 或者 --sort </span></span><br><span class=\"line\">ps j <span class=\"comment\">#显示后台作业信息</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">#&amp;符号放在尾部，放到后台执行的效果，但是如果一行有多个命令，仅将最后一个放后台，除非使用$()括起来。</span></span><br><span class=\"line\"><span class=\"built_in\">jobs</span> <span class=\"comment\">#显示后台运行的进程，同ps j 类似</span></span><br><span class=\"line\">Ctrl + z <span class=\"comment\">#把当前执行的命令放到后台，状态为stopped</span></span><br><span class=\"line\"><span class=\"built_in\">bg</span>  %id    <span class=\"comment\">#启动后台指定进程(stopped--&gt;running)</span></span><br><span class=\"line\"><span class=\"built_in\">fg</span>   %id    <span class=\"comment\">#指定后台进来显示在前台</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vmstat 2 10    <span class=\"comment\">#2秒刷新显示10次</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top</span><br><span class=\"line\">    M  <span class=\"comment\">#按内存排序</span></span><br><span class=\"line\">    K    <span class=\"comment\">#结束进程</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -m</span><br><span class=\"line\">cat /proc/cpuinfo</span><br><span class=\"line\">uptime</span><br><span class=\"line\">grep <span class=\"string\">\"model name\"</span> /proc/cpuinfo</span><br><span class=\"line\">gnome-system-monitor</span><br></pre></td></tr></table></figure>\n<h4 id=\"top-各列含义：\"><a href=\"#top-各列含义：\" class=\"headerlink\" title=\"top 各列含义：\"></a>top 各列含义：</h4><ul>\n<li><p>用户名称(user)，是进程所有者  </p>\n</li>\n<li><p>虚拟内存(virt)，是进程正在使用的所有内存，包括常驻集合、共享库，以及任何映射或交换的内存页。（PS命令中为VSZ）  </p>\n</li>\n<li><p>常驻内存(res)，是进程所用的物理内存，包括任何驻留的共享对象。（PS命令中为rss）</p>\n</li>\n<li><p>进程状态(s)</p>\n</li>\n</ul>\n<pre><code>D=不间断的睡眠uninterruptable sleeping\n\n            R=运行或可运行running or runnable\n\n            S=睡眠sleeping\n\n            T=停止或追踪stopped or traced\n\n            Z=僵尸zombie\n</code></pre><p>Ctrl-z(暂停，转后台)，Ctrl-c（中断），Ctrl-d (终止)<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span>    PID</span><br><span class=\"line\"><span class=\"built_in\">kill</span>    -signal PID</span><br><span class=\"line\"><span class=\"built_in\">kill</span>    -l</span><br><span class=\"line\">killall   command_pattern</span><br><span class=\"line\">killall  -signal command_pattern</span><br><span class=\"line\">killall   -signal -u username command_pattern</span><br><span class=\"line\">pkill    command_pattern</span><br><span class=\"line\">pkill    -signal command_pattern</span><br><span class=\"line\">pkill   -G GID command_pattern</span><br><span class=\"line\">pkill    -P PPID command_pattern</span><br><span class=\"line\">pkill -t terminal\\_name -U UID <span class=\"built_in\">command</span>\\_patern</span><br><span class=\"line\">pkill -SIGKILL -u bob <span class=\"comment\">#向bob用户发送sigkill 指令</span></span><br><span class=\"line\"></span><br><span class=\"line\">w -f  <span class=\"comment\">#显示当前登录的用户，-f显示远程登录系统名称</span></span><br><span class=\"line\">w  -h -u username</span><br><span class=\"line\">pgrep -l -u username</span><br><span class=\"line\">pstree -p username</span><br></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th>标 志</th>\n<th>内核定义的状态名称和描述  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">运行中</td>\n<td>R</td>\n<td>TASK_RUNING:进程正在CPU上执行，或者正在等待运行。处于运行中（或可运行）状态时，进程可能正在执行用户作业或内核作业（系统调用），或者已排队并就绪。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">睡眠</td>\n<td>S</td>\n<td>TASK_INTERRUPTIBLE:进程正在等待某一条件：硬件请求、系统资源访问或信号。当事件或信号满足条件时，该进程将返回到运行中。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td>D</td>\n<td>TASK_INTERRUPTIBLE：此进程也在睡眠，但与S状态不同，不会响应传递的信号。仅在特定的条件下使用，其中进程中断可能会导致意外的设备状态。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td>K</td>\n<td>TASK_KILLABLE:与不可中断的D状态相同，但有所修改，允许等待中的任务通过响应信号而被中断（彻底退出 ）。实用程序通常将可中断的进程显示为D状态。。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">已停止</td>\n<td>T</td>\n<td>TASK_STOPPED：进程已被停止（暂停），通常是通过用户或其他进程发出的信号。进程可以通过另一信号返回到运行中状态，继续执行（恢复）  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td>T</td>\n<td>TASK_TRACED:正在被调试的进程也会临时停止，并且共享同一个T状态标志。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">僵停</td>\n<td>Z</td>\n<td>EXIT_ZOMBIE：子进程在退出时向父进程发出信号。除进程身份（PID）之外的所有资源都已释放。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td>X</td>\n<td>EXIT_DEAD:当父进程清理（获取）剩余的子进程结构时，进程现在已经彻底释放。此状态从不会在进程列出实用程序中看到。  </td>\n</tr>\n</tbody>\n</table>\n<p>使用时可以通过短名称(HUP)或正确的名称（SIGHUP）指代信号  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">信号编号</th>\n<th>短名称</th>\n<th>定义</th>\n<th>用途  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td>HUP</td>\n<td>挂起</td>\n<td>用于报告终端控制进程的终止。也用于请求进程重新初始化（重新加载配置）而不终止  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td>INT</td>\n<td>键盘中断</td>\n<td>导致程序终止可以被拦截或处理。通过键盘INTR字符（Ctrl-c）发送  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td>QUIT</td>\n<td>键盘退出</td>\n<td>与SIGINT相似，但也在终止时生成进程转储。通过键入QUIT字符（Ctrl-\\）发送。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td>KILL</td>\n<td>中断，无法拦截</td>\n<td>导致立即终止程序，无法被拦截、忽略或处理；总是致命的。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">15（默认）</td>\n<td>TERM</td>\n<td>终止</td>\n<td>导致程序终止。和SIGKILL不同，可以被拦截、忽略或处理。要求程序终止的友好方式；允许自我清理。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">18</td>\n<td>CONT</td>\n<td>继续</td>\n<td>发送到进程使其恢复（若已停止）。无法被拦截。即使被处理，也始终恢复进程  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">19</td>\n<td>STOP</td>\n<td>停止，无法拦截</td>\n<td>暂停进程。无法被拦截或处理  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">20</td>\n<td>TSTP</td>\n<td>键盘终止</td>\n<td>和SIGSTOP不同，可以被拦截、忽略或处理。通过键入SUSP字符（Ctrl-z）发送。  </td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"top中的基本击键操作\"><a href=\"#top中的基本击键操作\" class=\"headerlink\" title=\"top中的基本击键操作\"></a>top中的基本击键操作</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">键</th>\n<th>用途  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">?或h</td>\n<td>交互式击键操作的帮助  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">l、t、m</td>\n<td>切换到负载、线程、内存标题行  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td>标题中切换显示单独CPU信息或所有CPU的汇总。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s(1)</td>\n<td>更改刷新（屏幕）率，以带小数的秒数表示（如0.5、1、5）。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">b</td>\n<td>切换反射突出显示运行中的进程；默认为粗体  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">B</td>\n<td>在显示中使用粗体，用于标题以运行中的进程。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">H</td>\n<td>切换线程；显示进程摘要或单独线程。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">u,U</td>\n<td>过滤任何用户名称（有效、真实）  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">M</td>\n<td>按内存使用率以降序方式对进程列表排序  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">P</td>\n<td>按处理器使用率，以降序方式对进程列表排序  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">k(1)</td>\n<td>中断进程。若有提示，输入PID，再输入signal  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r(1)</td>\n<td>调整进程的nice值。若有提示，输入PID，再输入nice_value  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">W</td>\n<td>写入（保存）当前的显示配置，以便在下一次重新启动top时使用  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">q</td>\n<td>退出  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">注：</td>\n<td>安全模式中不可用</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>Linux 版本的ps命令支持三种选项格式，包括：</p>\n<ul>\n<li><p>UNIX（POSIX）选项，可以分组但必须以连字符（-）开头；</p>\n</li>\n<li><p>BSD 选项，可以分组但不可与连字符同用；</p>\n</li>\n<li><p>GNU长选项，以双连字符开关。</p>\n</li>\n</ul>\n<p>例如：ps -aux 不同于 ps aux<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps   aux    <span class=\"comment\">#显示所有进程，包含用户感兴趣的列，以及没有控制终端的进程。</span></span><br><span class=\"line\">ps   lax    <span class=\"comment\">#长列表，提供更多详细信息，可以避免查询用户名来加快显示。</span></span><br><span class=\"line\">ps -ef  <span class=\"comment\">#显示所有进程。</span></span><br><span class=\"line\">ps <span class=\"comment\">#默认不排序，除非指定-O 或者 --sort </span></span><br><span class=\"line\">ps j <span class=\"comment\">#显示后台作业信息</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">#&amp;符号放在尾部，放到后台执行的效果，但是如果一行有多个命令，仅将最后一个放后台，除非使用$()括起来。</span></span><br><span class=\"line\"><span class=\"built_in\">jobs</span> <span class=\"comment\">#显示后台运行的进程，同ps j 类似</span></span><br><span class=\"line\">Ctrl + z <span class=\"comment\">#把当前执行的命令放到后台，状态为stopped</span></span><br><span class=\"line\"><span class=\"built_in\">bg</span>  %id    <span class=\"comment\">#启动后台指定进程(stopped--&gt;running)</span></span><br><span class=\"line\"><span class=\"built_in\">fg</span>   %id    <span class=\"comment\">#指定后台进来显示在前台</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vmstat 2 10    <span class=\"comment\">#2秒刷新显示10次</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top</span><br><span class=\"line\">    M  <span class=\"comment\">#按内存排序</span></span><br><span class=\"line\">    K    <span class=\"comment\">#结束进程</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -m</span><br><span class=\"line\">cat /proc/cpuinfo</span><br><span class=\"line\">uptime</span><br><span class=\"line\">grep <span class=\"string\">\"model name\"</span> /proc/cpuinfo</span><br><span class=\"line\">gnome-system-monitor</span><br></pre></td></tr></table></figure>\n<h4 id=\"top-各列含义：\"><a href=\"#top-各列含义：\" class=\"headerlink\" title=\"top 各列含义：\"></a>top 各列含义：</h4><ul>\n<li><p>用户名称(user)，是进程所有者  </p>\n</li>\n<li><p>虚拟内存(virt)，是进程正在使用的所有内存，包括常驻集合、共享库，以及任何映射或交换的内存页。（PS命令中为VSZ）  </p>\n</li>\n<li><p>常驻内存(res)，是进程所用的物理内存，包括任何驻留的共享对象。（PS命令中为rss）</p>\n</li>\n<li><p>进程状态(s)</p>\n</li>\n</ul>\n<pre><code>D=不间断的睡眠uninterruptable sleeping\n\n            R=运行或可运行running or runnable\n\n            S=睡眠sleeping\n\n            T=停止或追踪stopped or traced\n\n            Z=僵尸zombie\n</code></pre><p>Ctrl-z(暂停，转后台)，Ctrl-c（中断），Ctrl-d (终止)<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span>    PID</span><br><span class=\"line\"><span class=\"built_in\">kill</span>    -signal PID</span><br><span class=\"line\"><span class=\"built_in\">kill</span>    -l</span><br><span class=\"line\">killall   command_pattern</span><br><span class=\"line\">killall  -signal command_pattern</span><br><span class=\"line\">killall   -signal -u username command_pattern</span><br><span class=\"line\">pkill    command_pattern</span><br><span class=\"line\">pkill    -signal command_pattern</span><br><span class=\"line\">pkill   -G GID command_pattern</span><br><span class=\"line\">pkill    -P PPID command_pattern</span><br><span class=\"line\">pkill -t terminal\\_name -U UID <span class=\"built_in\">command</span>\\_patern</span><br><span class=\"line\">pkill -SIGKILL -u bob <span class=\"comment\">#向bob用户发送sigkill 指令</span></span><br><span class=\"line\"></span><br><span class=\"line\">w -f  <span class=\"comment\">#显示当前登录的用户，-f显示远程登录系统名称</span></span><br><span class=\"line\">w  -h -u username</span><br><span class=\"line\">pgrep -l -u username</span><br><span class=\"line\">pstree -p username</span><br></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th>标 志</th>\n<th>内核定义的状态名称和描述  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">运行中</td>\n<td>R</td>\n<td>TASK_RUNING:进程正在CPU上执行，或者正在等待运行。处于运行中（或可运行）状态时，进程可能正在执行用户作业或内核作业（系统调用），或者已排队并就绪。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">睡眠</td>\n<td>S</td>\n<td>TASK_INTERRUPTIBLE:进程正在等待某一条件：硬件请求、系统资源访问或信号。当事件或信号满足条件时，该进程将返回到运行中。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td>D</td>\n<td>TASK_INTERRUPTIBLE：此进程也在睡眠，但与S状态不同，不会响应传递的信号。仅在特定的条件下使用，其中进程中断可能会导致意外的设备状态。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td>K</td>\n<td>TASK_KILLABLE:与不可中断的D状态相同，但有所修改，允许等待中的任务通过响应信号而被中断（彻底退出 ）。实用程序通常将可中断的进程显示为D状态。。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">已停止</td>\n<td>T</td>\n<td>TASK_STOPPED：进程已被停止（暂停），通常是通过用户或其他进程发出的信号。进程可以通过另一信号返回到运行中状态，继续执行（恢复）  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td>T</td>\n<td>TASK_TRACED:正在被调试的进程也会临时停止，并且共享同一个T状态标志。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">僵停</td>\n<td>Z</td>\n<td>EXIT_ZOMBIE：子进程在退出时向父进程发出信号。除进程身份（PID）之外的所有资源都已释放。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td>X</td>\n<td>EXIT_DEAD:当父进程清理（获取）剩余的子进程结构时，进程现在已经彻底释放。此状态从不会在进程列出实用程序中看到。  </td>\n</tr>\n</tbody>\n</table>\n<p>使用时可以通过短名称(HUP)或正确的名称（SIGHUP）指代信号  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">信号编号</th>\n<th>短名称</th>\n<th>定义</th>\n<th>用途  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td>HUP</td>\n<td>挂起</td>\n<td>用于报告终端控制进程的终止。也用于请求进程重新初始化（重新加载配置）而不终止  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td>INT</td>\n<td>键盘中断</td>\n<td>导致程序终止可以被拦截或处理。通过键盘INTR字符（Ctrl-c）发送  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td>QUIT</td>\n<td>键盘退出</td>\n<td>与SIGINT相似，但也在终止时生成进程转储。通过键入QUIT字符（Ctrl-\\）发送。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td>KILL</td>\n<td>中断，无法拦截</td>\n<td>导致立即终止程序，无法被拦截、忽略或处理；总是致命的。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">15（默认）</td>\n<td>TERM</td>\n<td>终止</td>\n<td>导致程序终止。和SIGKILL不同，可以被拦截、忽略或处理。要求程序终止的友好方式；允许自我清理。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">18</td>\n<td>CONT</td>\n<td>继续</td>\n<td>发送到进程使其恢复（若已停止）。无法被拦截。即使被处理，也始终恢复进程  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">19</td>\n<td>STOP</td>\n<td>停止，无法拦截</td>\n<td>暂停进程。无法被拦截或处理  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">20</td>\n<td>TSTP</td>\n<td>键盘终止</td>\n<td>和SIGSTOP不同，可以被拦截、忽略或处理。通过键入SUSP字符（Ctrl-z）发送。  </td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"top中的基本击键操作\"><a href=\"#top中的基本击键操作\" class=\"headerlink\" title=\"top中的基本击键操作\"></a>top中的基本击键操作</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">键</th>\n<th>用途  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">?或h</td>\n<td>交互式击键操作的帮助  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">l、t、m</td>\n<td>切换到负载、线程、内存标题行  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td>标题中切换显示单独CPU信息或所有CPU的汇总。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s(1)</td>\n<td>更改刷新（屏幕）率，以带小数的秒数表示（如0.5、1、5）。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">b</td>\n<td>切换反射突出显示运行中的进程；默认为粗体  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">B</td>\n<td>在显示中使用粗体，用于标题以运行中的进程。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">H</td>\n<td>切换线程；显示进程摘要或单独线程。  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">u,U</td>\n<td>过滤任何用户名称（有效、真实）  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">M</td>\n<td>按内存使用率以降序方式对进程列表排序  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">P</td>\n<td>按处理器使用率，以降序方式对进程列表排序  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">k(1)</td>\n<td>中断进程。若有提示，输入PID，再输入signal  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r(1)</td>\n<td>调整进程的nice值。若有提示，输入PID，再输入nice_value  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">W</td>\n<td>写入（保存）当前的显示配置，以便在下一次重新启动top时使用  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">q</td>\n<td>退出  </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">注：</td>\n<td>安全模式中不可用</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Chapter 8.systemctl","url":"134.html","id":"134","date":"2018-04-11T07:56:50.000Z","_content":"\n\n```sh\nsystemctl is-active firewalld\nsystemctl is-enabled firewalld\nsystemctl status firewalld\nsystemctl stop firewalld\nsystemctl start firewalld\nsystemctl restart firewalld\nsystemctl reload firewalld\nsystemctl enable firewalld\nsystemctl disable firewalld\nsystemctl --type=service    == systemctl -t service\nsystemctl --type=service --faild\nsystemctl list-units --type=service --all  #显示所有服务，包括未激活的\nsystemctl list-unit-files --type=service  #显示服务文件\nsystemctl list-dependencies UNIT     #查看进程依赖关系\nsystemctl list-dependencies cups.socket --reverse   #查看需要启动的依赖\nsystemctl mask firewalld     #停用/屏蔽firewalld服务\nsystemctl unmask firewalld    #开启/显示firewalld服务\n\n```  \n\n\n![8-1.png](1523433401385622.png)  \n ==============================================================================  \n\n###### systemctl type 类型  \n```sh\n[root@client ~]# systemctl -t help  \nAvailable unit types:  \nservice  \nsocket  \nbusname  \ntarget  \nsnapshot  \ndevice  \nmount  \nautomount  \nswap  \ntimer  \npath  \nslice  \nscope\n```\n","source":"_posts/chapter-8-systemctl.md","raw":"---\ntitle: Chapter 8.systemctl\nurl: 134.html\nid: 134\ncategories:\n  - RHEL124\ndate: 2018-04-11 15:56:50\ntags:\n---\n\n\n```sh\nsystemctl is-active firewalld\nsystemctl is-enabled firewalld\nsystemctl status firewalld\nsystemctl stop firewalld\nsystemctl start firewalld\nsystemctl restart firewalld\nsystemctl reload firewalld\nsystemctl enable firewalld\nsystemctl disable firewalld\nsystemctl --type=service    == systemctl -t service\nsystemctl --type=service --faild\nsystemctl list-units --type=service --all  #显示所有服务，包括未激活的\nsystemctl list-unit-files --type=service  #显示服务文件\nsystemctl list-dependencies UNIT     #查看进程依赖关系\nsystemctl list-dependencies cups.socket --reverse   #查看需要启动的依赖\nsystemctl mask firewalld     #停用/屏蔽firewalld服务\nsystemctl unmask firewalld    #开启/显示firewalld服务\n\n```  \n\n\n![8-1.png](1523433401385622.png)  \n ==============================================================================  \n\n###### systemctl type 类型  \n```sh\n[root@client ~]# systemctl -t help  \nAvailable unit types:  \nservice  \nsocket  \nbusname  \ntarget  \nsnapshot  \ndevice  \nmount  \nautomount  \nswap  \ntimer  \npath  \nslice  \nscope\n```\n","slug":"chapter-8-systemctl","published":1,"updated":"2019-01-06T15:33:30.344Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqhz6000hlxkjvzbnqhl7","content":"<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl is-active firewalld</span><br><span class=\"line\">systemctl is-enabled firewalld</span><br><span class=\"line\">systemctl status firewalld</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl start firewalld</span><br><span class=\"line\">systemctl restart firewalld</span><br><span class=\"line\">systemctl reload firewalld</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> firewalld</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\">systemctl --<span class=\"built_in\">type</span>=service    == systemctl -t service</span><br><span class=\"line\">systemctl --<span class=\"built_in\">type</span>=service --faild</span><br><span class=\"line\">systemctl list-units --<span class=\"built_in\">type</span>=service --all  <span class=\"comment\">#显示所有服务，包括未激活的</span></span><br><span class=\"line\">systemctl list-unit-files --<span class=\"built_in\">type</span>=service  <span class=\"comment\">#显示服务文件</span></span><br><span class=\"line\">systemctl list-dependencies UNIT     <span class=\"comment\">#查看进程依赖关系</span></span><br><span class=\"line\">systemctl list-dependencies cups.socket --reverse   <span class=\"comment\">#查看需要启动的依赖</span></span><br><span class=\"line\">systemctl mask firewalld     <span class=\"comment\">#停用/屏蔽firewalld服务</span></span><br><span class=\"line\">systemctl unmask firewalld    <span class=\"comment\">#开启/显示firewalld服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">![8-1.png](1523433401385622.png)  </span><br><span class=\"line\"> ==============================================================================  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###### systemctl type 类型  </span></span><br><span class=\"line\">```sh</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># systemctl -t help  </span></span><br><span class=\"line\">Available unit types:  </span><br><span class=\"line\">service  </span><br><span class=\"line\">socket  </span><br><span class=\"line\">busname  </span><br><span class=\"line\">target  </span><br><span class=\"line\">snapshot  </span><br><span class=\"line\">device  </span><br><span class=\"line\">mount  </span><br><span class=\"line\">automount  </span><br><span class=\"line\">swap  </span><br><span class=\"line\">timer  </span><br><span class=\"line\">path  </span><br><span class=\"line\">slice  </span><br><span class=\"line\">scope</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl is-active firewalld</span><br><span class=\"line\">systemctl is-enabled firewalld</span><br><span class=\"line\">systemctl status firewalld</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl start firewalld</span><br><span class=\"line\">systemctl restart firewalld</span><br><span class=\"line\">systemctl reload firewalld</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> firewalld</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\">systemctl --<span class=\"built_in\">type</span>=service    == systemctl -t service</span><br><span class=\"line\">systemctl --<span class=\"built_in\">type</span>=service --faild</span><br><span class=\"line\">systemctl list-units --<span class=\"built_in\">type</span>=service --all  <span class=\"comment\">#显示所有服务，包括未激活的</span></span><br><span class=\"line\">systemctl list-unit-files --<span class=\"built_in\">type</span>=service  <span class=\"comment\">#显示服务文件</span></span><br><span class=\"line\">systemctl list-dependencies UNIT     <span class=\"comment\">#查看进程依赖关系</span></span><br><span class=\"line\">systemctl list-dependencies cups.socket --reverse   <span class=\"comment\">#查看需要启动的依赖</span></span><br><span class=\"line\">systemctl mask firewalld     <span class=\"comment\">#停用/屏蔽firewalld服务</span></span><br><span class=\"line\">systemctl unmask firewalld    <span class=\"comment\">#开启/显示firewalld服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">![8-1.png](1523433401385622.png)  </span><br><span class=\"line\"> ==============================================================================  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###### systemctl type 类型  </span></span><br><span class=\"line\">```sh</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># systemctl -t help  </span></span><br><span class=\"line\">Available unit types:  </span><br><span class=\"line\">service  </span><br><span class=\"line\">socket  </span><br><span class=\"line\">busname  </span><br><span class=\"line\">target  </span><br><span class=\"line\">snapshot  </span><br><span class=\"line\">device  </span><br><span class=\"line\">mount  </span><br><span class=\"line\">automount  </span><br><span class=\"line\">swap  </span><br><span class=\"line\">timer  </span><br><span class=\"line\">path  </span><br><span class=\"line\">slice  </span><br><span class=\"line\">scope</span><br></pre></td></tr></table></figure>\n"},{"title":"Chapter 9. Openssh","url":"128.html","id":"128","date":"2018-04-11T07:53:20.000Z","_content":"\n\n\n##### ssh host keys  \n\n~/.ssh/known_hosts 保存服务器公钥  \n\n/etc/ssh 下查看本机产生的密钥  \n\n   \n\n##### 基于用户名和密码  \n\n PasswordAuthentication yes  \n\n##### 基于key密钥  \n\nclient:  \n\nssh-keygen 产生密钥(公钥和私钥)（~/.ssh/id\\_rsa,id\\_rsa.pub 默认）  \n\nssh-copy-id    root@server0  传输公钥到服务器  \n\nserver:  \n\nssh-copy-id 命令结束后，本端会产生认证文件  \n\n =========================================  \n\n #### 配置ssh  \n\n###### 禁用root ssh登录  \n\n/etc/ssh/sshd_config  \n\n将#PermitRootLogin yes 改成PermitRootLogin no .去掉#，改yes为no,重启服务  \n\nPermitRootLogin  without-password   设置root只能使用key方式  \n\n###### 阻止密码认证方式  \n\nPasswordAuthentication yes 改 no  \n\n=========================================  \n\n###### 高级功能ssh-agent  \n  \nssh-add  \n\n\nAdministration Guide Chapter 8.2.4.2:Configuring ssh-agent  \n\nhttps://access.redhat.com/documentation/en-us/red\\_hat\\_enterprise\\_linux/7/html/system\\_administrators_guide/s1-ssh-configuration  \n\nssh servername -X 调用远程服务的桌面环境到本地使用\n","source":"_posts/chapter-9-openssh.md","raw":"---\ntitle: Chapter 9. Openssh\nurl: 128.html\nid: 128\ncategories:\n  - RHEL124\ndate: 2018-04-11 15:53:20\ntags:\n---\n\n\n\n##### ssh host keys  \n\n~/.ssh/known_hosts 保存服务器公钥  \n\n/etc/ssh 下查看本机产生的密钥  \n\n   \n\n##### 基于用户名和密码  \n\n PasswordAuthentication yes  \n\n##### 基于key密钥  \n\nclient:  \n\nssh-keygen 产生密钥(公钥和私钥)（~/.ssh/id\\_rsa,id\\_rsa.pub 默认）  \n\nssh-copy-id    root@server0  传输公钥到服务器  \n\nserver:  \n\nssh-copy-id 命令结束后，本端会产生认证文件  \n\n =========================================  \n\n #### 配置ssh  \n\n###### 禁用root ssh登录  \n\n/etc/ssh/sshd_config  \n\n将#PermitRootLogin yes 改成PermitRootLogin no .去掉#，改yes为no,重启服务  \n\nPermitRootLogin  without-password   设置root只能使用key方式  \n\n###### 阻止密码认证方式  \n\nPasswordAuthentication yes 改 no  \n\n=========================================  \n\n###### 高级功能ssh-agent  \n  \nssh-add  \n\n\nAdministration Guide Chapter 8.2.4.2:Configuring ssh-agent  \n\nhttps://access.redhat.com/documentation/en-us/red\\_hat\\_enterprise\\_linux/7/html/system\\_administrators_guide/s1-ssh-configuration  \n\nssh servername -X 调用远程服务的桌面环境到本地使用\n","slug":"chapter-9-openssh","published":1,"updated":"2019-01-06T15:36:17.420Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqhz7000jlxkjw6c4fw6g","content":"<h5 id=\"ssh-host-keys\"><a href=\"#ssh-host-keys\" class=\"headerlink\" title=\"ssh host keys\"></a>ssh host keys</h5><p>~/.ssh/known_hosts 保存服务器公钥  </p>\n<p>/etc/ssh 下查看本机产生的密钥  </p>\n<h5 id=\"基于用户名和密码\"><a href=\"#基于用户名和密码\" class=\"headerlink\" title=\"基于用户名和密码\"></a>基于用户名和密码</h5><p> PasswordAuthentication yes  </p>\n<h5 id=\"基于key密钥\"><a href=\"#基于key密钥\" class=\"headerlink\" title=\"基于key密钥\"></a>基于key密钥</h5><p>client:  </p>\n<p>ssh-keygen 产生密钥(公钥和私钥)（~/.ssh/id_rsa,id_rsa.pub 默认）  </p>\n<p>ssh-copy-id    root@server0  传输公钥到服务器  </p>\n<p>server:  </p>\n<p>ssh-copy-id 命令结束后，本端会产生认证文件  </p>\n<p> =========================================  </p>\n<h4 id=\"配置ssh\"><a href=\"#配置ssh\" class=\"headerlink\" title=\"配置ssh\"></a>配置ssh</h4><h6 id=\"禁用root-ssh登录\"><a href=\"#禁用root-ssh登录\" class=\"headerlink\" title=\"禁用root ssh登录\"></a>禁用root ssh登录</h6><p>/etc/ssh/sshd_config  </p>\n<p>将#PermitRootLogin yes 改成PermitRootLogin no .去掉#，改yes为no,重启服务  </p>\n<p>PermitRootLogin  without-password   设置root只能使用key方式  </p>\n<h6 id=\"阻止密码认证方式\"><a href=\"#阻止密码认证方式\" class=\"headerlink\" title=\"阻止密码认证方式\"></a>阻止密码认证方式</h6><p>PasswordAuthentication yes 改 no  </p>\n<p>=========================================  </p>\n<h6 id=\"高级功能ssh-agent\"><a href=\"#高级功能ssh-agent\" class=\"headerlink\" title=\"高级功能ssh-agent\"></a>高级功能ssh-agent</h6><p>ssh-add  </p>\n<p>Administration Guide Chapter 8.2.4.2:Configuring ssh-agent  </p>\n<p><a href=\"https://access.redhat.com/documentation/en-us/red\\_hat\\_enterprise\\_linux/7/html/system\\_administrators_guide/s1-ssh-configuration\" target=\"_blank\" rel=\"noopener\">https://access.redhat.com/documentation/en-us/red\\_hat\\_enterprise\\_linux/7/html/system\\_administrators_guide/s1-ssh-configuration</a>  </p>\n<p>ssh servername -X 调用远程服务的桌面环境到本地使用</p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"ssh-host-keys\"><a href=\"#ssh-host-keys\" class=\"headerlink\" title=\"ssh host keys\"></a>ssh host keys</h5><p>~/.ssh/known_hosts 保存服务器公钥  </p>\n<p>/etc/ssh 下查看本机产生的密钥  </p>\n<h5 id=\"基于用户名和密码\"><a href=\"#基于用户名和密码\" class=\"headerlink\" title=\"基于用户名和密码\"></a>基于用户名和密码</h5><p> PasswordAuthentication yes  </p>\n<h5 id=\"基于key密钥\"><a href=\"#基于key密钥\" class=\"headerlink\" title=\"基于key密钥\"></a>基于key密钥</h5><p>client:  </p>\n<p>ssh-keygen 产生密钥(公钥和私钥)（~/.ssh/id_rsa,id_rsa.pub 默认）  </p>\n<p>ssh-copy-id    root@server0  传输公钥到服务器  </p>\n<p>server:  </p>\n<p>ssh-copy-id 命令结束后，本端会产生认证文件  </p>\n<p> =========================================  </p>\n<h4 id=\"配置ssh\"><a href=\"#配置ssh\" class=\"headerlink\" title=\"配置ssh\"></a>配置ssh</h4><h6 id=\"禁用root-ssh登录\"><a href=\"#禁用root-ssh登录\" class=\"headerlink\" title=\"禁用root ssh登录\"></a>禁用root ssh登录</h6><p>/etc/ssh/sshd_config  </p>\n<p>将#PermitRootLogin yes 改成PermitRootLogin no .去掉#，改yes为no,重启服务  </p>\n<p>PermitRootLogin  without-password   设置root只能使用key方式  </p>\n<h6 id=\"阻止密码认证方式\"><a href=\"#阻止密码认证方式\" class=\"headerlink\" title=\"阻止密码认证方式\"></a>阻止密码认证方式</h6><p>PasswordAuthentication yes 改 no  </p>\n<p>=========================================  </p>\n<h6 id=\"高级功能ssh-agent\"><a href=\"#高级功能ssh-agent\" class=\"headerlink\" title=\"高级功能ssh-agent\"></a>高级功能ssh-agent</h6><p>ssh-add  </p>\n<p>Administration Guide Chapter 8.2.4.2:Configuring ssh-agent  </p>\n<p><a href=\"https://access.redhat.com/documentation/en-us/red\\_hat\\_enterprise\\_linux/7/html/system\\_administrators_guide/s1-ssh-configuration\" target=\"_blank\" rel=\"noopener\">https://access.redhat.com/documentation/en-us/red\\_hat\\_enterprise\\_linux/7/html/system\\_administrators_guide/s1-ssh-configuration</a>  </p>\n<p>ssh servername -X 调用远程服务的桌面环境到本地使用</p>\n"},{"title":"Chapter 1 . Accessing The Command line","url":"250.html","id":"250","date":"2018-04-20T02:10:20.000Z","_content":"```sh\n[root@client ~]#     #root管理员提示符  \n[client@client ~]$     #普通用户提示符\n```\n    如果提供图形环境，它将在Red Hat Enterprise Linux 7 的第一个虚拟控制台中运行。而另外五个文件登录提示符在控制台（tty）二到六（如果图形环境关闭，则为控制台一到五）中可用。在图形环境运行时，通过按住Ctrl+Alt 并按功能键（F2到F6）,来访问虚拟控制台上的文本登录提示符。按Ctrl+Alt+F1返回第一个虚拟控制台和图形桌面。（RHEL5 及之前版本图形运行在第七个虚拟控制台Ctrl+Alt+F7 切换）\n\n参数提示符用法：\n\n*   \\[\\]    方括号\\[\\]括起来的是可选项目\n\n*   ...    前面的任何内容均表示该类型项目的任意长度列表。\n\n*   |    以竖线分隔的多个项目表示只能指定其中一个项目  \n\n*   <>    尖括号中的文本表示变量的数据 。如<finename>表示 “此处需要插入您要使用的文件名”有时会简单的写成大写字母，如FILENAME.\n\n\n\n```sh\ndate 命令用于显示时间  \n\n[root@client ~]# date\n2018年 04月 20日 星期五 09:23:02 CST\n[root@client ~]# date +%R\n09:23\n[root@client ~]# date +%x\n2018年04月20日\n[root@client ~]#\n```\n\npasswd 命令用于更改用户密码：不指定用户名即修改当前用户密码，使用root 修改密码无需知道原密码。默认情况下密码策略是有要求的，需要包含小写字母、大写字母、数字和符号，并且不以字典中的单词为基础。  \n```sh\n[root@client ~]# passwd client\n更改用户 client 的密码 。\n新的 密码：\n无效的密码： 密码少于 8 个字符\n重新输入新的 密码：\npasswd：所有的身份验证令牌已经成功更新。\n[root@client ~]# \n[root@client ~]# passwd\n更改用户 root 的密码 。\n新的 密码：\n[client@client ~]$ passwd\n更改用户 client 的密码 。\n为 client 更改 STRESS 密码。\n（当前）UNIX 密码：\n新的 密码：\n重新输入新的 密码：\npasswd：所有的身份验证令牌已经成功更新。\n[client@client ~]$\n\n```\n\nLinux 不需要文件扩展名做为依据分类文件，file 命令可以扫描文件内容的开头，显示 文件的类型。\n\n```sh  \n\n[client@client ~]$ file /etc/passwd\n/etc/passwd: ASCII text\n[client@client ~]$ file /bin/passwd\n/bin/passwd: setuid ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.32, BuildID[sha1]=1e5735bf7b317e60bcb907f1989951f6abd50e8d, stripped\n[client@client ~]$ file /home\n/home: directory\n\n```  \n\nhead 和tail 命令分别显示文件的开头和结尾部分。默认情况下都是显示10行数据 。使用-n 选项可以指定需要显示的行数。\n```sh\n[client@client ~]$ head /etc/passwd\n[client@client ~]$ tail /etc/passwd\n[client@client ~]$ tail -n 6 /etc/passwd\n```\nwc 命令可以计算文件中行、字和字符的数量。它可以授受 -l、 -w 或 -c选项，分别用户显示行数（lines）、字数（words）和字符数（characters）\n```sh\n[client@client ~]$ wc /etc/passwd\n  22   42 1051 /etc/passwd        #行、字、字符\n[client@client ~]$ wc -l /etc/passwd\n22 /etc/passwd\n[client@client ~]$ wc -c /etc/passwd\n1051 /etc/passwd\n[client@client ~]$ wc -w /etc/passwd\n42 /etc/passwd\n[client@client ~]$ wc -c /etc/group /etc/hosts    #指定多个文件\n567 /etc/group\n181 /etc/hosts\n748 总用量\n```\n#### Tab 补全\n\ntab 补全可用于命令补全和文件名补全部分命令还可以补全参数选项  \n```sh\n[client@client ~]$ pas<tab>    #自动列出以pas开头的不唯一命令\npasswd  paste   \n[client@client ~]$ pass<tab>    #自动补全pass开头的唯一命令\n[client@client ~]$ passwd\n```\nhistory 命令显示之前执行的命令的列表，带有命令编号作为前缀。感叹号 ! 是元字符，用于扩展之前的命令而不必重新键入它们。!number 扩展至与指定编号匹配的命令。 !string 扩展至最近一个以指定字符串开头的命令。方向上下键可以向上或向下查找最近使用过的命令。左右键则开始进行命令行修改。  \n```sh\nhistort\n!48\n!ls\n```\nEsc + .  组合键可使shell 将上一条命令的最后一个单词（参数）复制到当前命令行中的光标所处的位置。如果重复使用，它将继续转到更早的命令。  \n\n|快捷方式  |描述  |\n| :-- | :-- |\n|Ctrl + a  | 跳到命令行的开头  |\n|Ctrl + e  | 跳到命令行的末尾  |\n|Ctrl + u  | 将光标位置到命令行开头的内容清除  |\n|Ctrl + k  | 将光标位置到命令行末尾的内容清除|\n|Ctrl + -> 方向  | 跳到命令行中后一字的开头  |\n|Ctrl + <-  | 跳到命令行中前一字的开头  |\n|Ctrl + l  | 清除当前屏幕显示 |\n|Ctrl + r  | 在历史记录列表中搜索某一命令\n","source":"_posts/chapter1-accessing-the-command-line.md","raw":"---\ntitle: Chapter 1 . Accessing The Command line\nurl: 250.html\nid: 250\ncategories:\n  - RHEL124\ndate: 2018-04-20 10:10:20\ntags:\n---\n```sh\n[root@client ~]#     #root管理员提示符  \n[client@client ~]$     #普通用户提示符\n```\n    如果提供图形环境，它将在Red Hat Enterprise Linux 7 的第一个虚拟控制台中运行。而另外五个文件登录提示符在控制台（tty）二到六（如果图形环境关闭，则为控制台一到五）中可用。在图形环境运行时，通过按住Ctrl+Alt 并按功能键（F2到F6）,来访问虚拟控制台上的文本登录提示符。按Ctrl+Alt+F1返回第一个虚拟控制台和图形桌面。（RHEL5 及之前版本图形运行在第七个虚拟控制台Ctrl+Alt+F7 切换）\n\n参数提示符用法：\n\n*   \\[\\]    方括号\\[\\]括起来的是可选项目\n\n*   ...    前面的任何内容均表示该类型项目的任意长度列表。\n\n*   |    以竖线分隔的多个项目表示只能指定其中一个项目  \n\n*   <>    尖括号中的文本表示变量的数据 。如<finename>表示 “此处需要插入您要使用的文件名”有时会简单的写成大写字母，如FILENAME.\n\n\n\n```sh\ndate 命令用于显示时间  \n\n[root@client ~]# date\n2018年 04月 20日 星期五 09:23:02 CST\n[root@client ~]# date +%R\n09:23\n[root@client ~]# date +%x\n2018年04月20日\n[root@client ~]#\n```\n\npasswd 命令用于更改用户密码：不指定用户名即修改当前用户密码，使用root 修改密码无需知道原密码。默认情况下密码策略是有要求的，需要包含小写字母、大写字母、数字和符号，并且不以字典中的单词为基础。  \n```sh\n[root@client ~]# passwd client\n更改用户 client 的密码 。\n新的 密码：\n无效的密码： 密码少于 8 个字符\n重新输入新的 密码：\npasswd：所有的身份验证令牌已经成功更新。\n[root@client ~]# \n[root@client ~]# passwd\n更改用户 root 的密码 。\n新的 密码：\n[client@client ~]$ passwd\n更改用户 client 的密码 。\n为 client 更改 STRESS 密码。\n（当前）UNIX 密码：\n新的 密码：\n重新输入新的 密码：\npasswd：所有的身份验证令牌已经成功更新。\n[client@client ~]$\n\n```\n\nLinux 不需要文件扩展名做为依据分类文件，file 命令可以扫描文件内容的开头，显示 文件的类型。\n\n```sh  \n\n[client@client ~]$ file /etc/passwd\n/etc/passwd: ASCII text\n[client@client ~]$ file /bin/passwd\n/bin/passwd: setuid ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.32, BuildID[sha1]=1e5735bf7b317e60bcb907f1989951f6abd50e8d, stripped\n[client@client ~]$ file /home\n/home: directory\n\n```  \n\nhead 和tail 命令分别显示文件的开头和结尾部分。默认情况下都是显示10行数据 。使用-n 选项可以指定需要显示的行数。\n```sh\n[client@client ~]$ head /etc/passwd\n[client@client ~]$ tail /etc/passwd\n[client@client ~]$ tail -n 6 /etc/passwd\n```\nwc 命令可以计算文件中行、字和字符的数量。它可以授受 -l、 -w 或 -c选项，分别用户显示行数（lines）、字数（words）和字符数（characters）\n```sh\n[client@client ~]$ wc /etc/passwd\n  22   42 1051 /etc/passwd        #行、字、字符\n[client@client ~]$ wc -l /etc/passwd\n22 /etc/passwd\n[client@client ~]$ wc -c /etc/passwd\n1051 /etc/passwd\n[client@client ~]$ wc -w /etc/passwd\n42 /etc/passwd\n[client@client ~]$ wc -c /etc/group /etc/hosts    #指定多个文件\n567 /etc/group\n181 /etc/hosts\n748 总用量\n```\n#### Tab 补全\n\ntab 补全可用于命令补全和文件名补全部分命令还可以补全参数选项  \n```sh\n[client@client ~]$ pas<tab>    #自动列出以pas开头的不唯一命令\npasswd  paste   \n[client@client ~]$ pass<tab>    #自动补全pass开头的唯一命令\n[client@client ~]$ passwd\n```\nhistory 命令显示之前执行的命令的列表，带有命令编号作为前缀。感叹号 ! 是元字符，用于扩展之前的命令而不必重新键入它们。!number 扩展至与指定编号匹配的命令。 !string 扩展至最近一个以指定字符串开头的命令。方向上下键可以向上或向下查找最近使用过的命令。左右键则开始进行命令行修改。  \n```sh\nhistort\n!48\n!ls\n```\nEsc + .  组合键可使shell 将上一条命令的最后一个单词（参数）复制到当前命令行中的光标所处的位置。如果重复使用，它将继续转到更早的命令。  \n\n|快捷方式  |描述  |\n| :-- | :-- |\n|Ctrl + a  | 跳到命令行的开头  |\n|Ctrl + e  | 跳到命令行的末尾  |\n|Ctrl + u  | 将光标位置到命令行开头的内容清除  |\n|Ctrl + k  | 将光标位置到命令行末尾的内容清除|\n|Ctrl + -> 方向  | 跳到命令行中后一字的开头  |\n|Ctrl + <-  | 跳到命令行中前一字的开头  |\n|Ctrl + l  | 清除当前屏幕显示 |\n|Ctrl + r  | 在历史记录列表中搜索某一命令\n","slug":"chapter1-accessing-the-command-line","published":1,"updated":"2019-01-06T15:41:58.920Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqhz8000llxkjuuchxvoi","content":"<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@client ~]<span class=\"comment\">#     #root管理员提示符  </span></span><br><span class=\"line\">[client@client ~]$     <span class=\"comment\">#普通用户提示符</span></span><br></pre></td></tr></table></figure>\n<pre><code>如果提供图形环境，它将在Red Hat Enterprise Linux 7 的第一个虚拟控制台中运行。而另外五个文件登录提示符在控制台（tty）二到六（如果图形环境关闭，则为控制台一到五）中可用。在图形环境运行时，通过按住Ctrl+Alt 并按功能键（F2到F6）,来访问虚拟控制台上的文本登录提示符。按Ctrl+Alt+F1返回第一个虚拟控制台和图形桌面。（RHEL5 及之前版本图形运行在第七个虚拟控制台Ctrl+Alt+F7 切换）\n</code></pre><p>参数提示符用法：</p>\n<ul>\n<li><p>[]    方括号[]括起来的是可选项目</p>\n</li>\n<li><p>…    前面的任何内容均表示该类型项目的任意长度列表。</p>\n</li>\n<li><p>|    以竖线分隔的多个项目表示只能指定其中一个项目  </p>\n</li>\n<li><p>&lt;&gt;    尖括号中的文本表示变量的数据 。如<finename>表示 “此处需要插入您要使用的文件名”有时会简单的写成大写字母，如FILENAME.</finename></p>\n</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date 命令用于显示时间  </span><br><span class=\"line\"></span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># date</span></span><br><span class=\"line\">2018年 04月 20日 星期五 09:23:02 CST</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># date +%R</span></span><br><span class=\"line\">09:23</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># date +%x</span></span><br><span class=\"line\">2018年04月20日</span><br><span class=\"line\">[root@client ~]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>passwd 命令用于更改用户密码：不指定用户名即修改当前用户密码，使用root 修改密码无需知道原密码。默认情况下密码策略是有要求的，需要包含小写字母、大写字母、数字和符号，并且不以字典中的单词为基础。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@client ~]<span class=\"comment\"># passwd client</span></span><br><span class=\"line\">更改用户 client 的密码 。</span><br><span class=\"line\">新的 密码：</span><br><span class=\"line\">无效的密码： 密码少于 8 个字符</span><br><span class=\"line\">重新输入新的 密码：</span><br><span class=\"line\">passwd：所有的身份验证令牌已经成功更新。</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># </span></span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># passwd</span></span><br><span class=\"line\">更改用户 root 的密码 。</span><br><span class=\"line\">新的 密码：</span><br><span class=\"line\">[client@client ~]$ passwd</span><br><span class=\"line\">更改用户 client 的密码 。</span><br><span class=\"line\">为 client 更改 STRESS 密码。</span><br><span class=\"line\">（当前）UNIX 密码：</span><br><span class=\"line\">新的 密码：</span><br><span class=\"line\">重新输入新的 密码：</span><br><span class=\"line\">passwd：所有的身份验证令牌已经成功更新。</span><br><span class=\"line\">[client@client ~]$</span><br></pre></td></tr></table></figure></p>\n<p>Linux 不需要文件扩展名做为依据分类文件，file 命令可以扫描文件内容的开头，显示 文件的类型。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[client@client ~]$ file /etc/passwd</span><br><span class=\"line\">/etc/passwd: ASCII text</span><br><span class=\"line\">[client@client ~]$ file /bin/passwd</span><br><span class=\"line\">/bin/passwd: setuid ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), <span class=\"keyword\">for</span> GNU/Linux 2.6.32, BuildID[sha1]=1e5735bf7b317e60bcb907f1989951f6abd50e8d, stripped</span><br><span class=\"line\">[client@client ~]$ file /home</span><br><span class=\"line\">/home: directory</span><br><span class=\"line\"></span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">head 和tail 命令分别显示文件的开头和结尾部分。默认情况下都是显示10行数据 。使用-n 选项可以指定需要显示的行数。</span><br><span class=\"line\">```sh</span><br><span class=\"line\">[client@client ~]$ head /etc/passwd</span><br><span class=\"line\">[client@client ~]$ tail /etc/passwd</span><br><span class=\"line\">[client@client ~]$ tail -n 6 /etc/passwd</span><br></pre></td></tr></table></figure>\n<p>wc 命令可以计算文件中行、字和字符的数量。它可以授受 -l、 -w 或 -c选项，分别用户显示行数（lines）、字数（words）和字符数（characters）<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client@client ~]$ wc /etc/passwd</span><br><span class=\"line\">  22   42 1051 /etc/passwd        <span class=\"comment\">#行、字、字符</span></span><br><span class=\"line\">[client@client ~]$ wc -l /etc/passwd</span><br><span class=\"line\">22 /etc/passwd</span><br><span class=\"line\">[client@client ~]$ wc -c /etc/passwd</span><br><span class=\"line\">1051 /etc/passwd</span><br><span class=\"line\">[client@client ~]$ wc -w /etc/passwd</span><br><span class=\"line\">42 /etc/passwd</span><br><span class=\"line\">[client@client ~]$ wc -c /etc/group /etc/hosts    <span class=\"comment\">#指定多个文件</span></span><br><span class=\"line\">567 /etc/group</span><br><span class=\"line\">181 /etc/hosts</span><br><span class=\"line\">748 总用量</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Tab-补全\"><a href=\"#Tab-补全\" class=\"headerlink\" title=\"Tab 补全\"></a>Tab 补全</h4><p>tab 补全可用于命令补全和文件名补全部分命令还可以补全参数选项<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client@client ~]$ pas&lt;tab&gt;    <span class=\"comment\">#自动列出以pas开头的不唯一命令</span></span><br><span class=\"line\">passwd  paste   </span><br><span class=\"line\">[client@client ~]$ pass&lt;tab&gt;    <span class=\"comment\">#自动补全pass开头的唯一命令</span></span><br><span class=\"line\">[client@client ~]$ passwd</span><br></pre></td></tr></table></figure></p>\n<p>history 命令显示之前执行的命令的列表，带有命令编号作为前缀。感叹号 ! 是元字符，用于扩展之前的命令而不必重新键入它们。!number 扩展至与指定编号匹配的命令。 !string 扩展至最近一个以指定字符串开头的命令。方向上下键可以向上或向下查找最近使用过的命令。左右键则开始进行命令行修改。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">histort</span><br><span class=\"line\">!48</span><br><span class=\"line\">!ls</span><br></pre></td></tr></table></figure></p>\n<p>Esc + .  组合键可使shell 将上一条命令的最后一个单词（参数）复制到当前命令行中的光标所处的位置。如果重复使用，它将继续转到更早的命令。  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">快捷方式</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Ctrl + a</td>\n<td style=\"text-align:left\">跳到命令行的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl + e</td>\n<td style=\"text-align:left\">跳到命令行的末尾</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl + u</td>\n<td style=\"text-align:left\">将光标位置到命令行开头的内容清除</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl + k</td>\n<td style=\"text-align:left\">将光标位置到命令行末尾的内容清除</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl + -&gt; 方向</td>\n<td style=\"text-align:left\">跳到命令行中后一字的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl + &lt;-</td>\n<td style=\"text-align:left\">跳到命令行中前一字的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl + l</td>\n<td style=\"text-align:left\">清除当前屏幕显示</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl + r</td>\n<td style=\"text-align:left\">在历史记录列表中搜索某一命令</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@client ~]<span class=\"comment\">#     #root管理员提示符  </span></span><br><span class=\"line\">[client@client ~]$     <span class=\"comment\">#普通用户提示符</span></span><br></pre></td></tr></table></figure>\n<pre><code>如果提供图形环境，它将在Red Hat Enterprise Linux 7 的第一个虚拟控制台中运行。而另外五个文件登录提示符在控制台（tty）二到六（如果图形环境关闭，则为控制台一到五）中可用。在图形环境运行时，通过按住Ctrl+Alt 并按功能键（F2到F6）,来访问虚拟控制台上的文本登录提示符。按Ctrl+Alt+F1返回第一个虚拟控制台和图形桌面。（RHEL5 及之前版本图形运行在第七个虚拟控制台Ctrl+Alt+F7 切换）\n</code></pre><p>参数提示符用法：</p>\n<ul>\n<li><p>[]    方括号[]括起来的是可选项目</p>\n</li>\n<li><p>…    前面的任何内容均表示该类型项目的任意长度列表。</p>\n</li>\n<li><p>|    以竖线分隔的多个项目表示只能指定其中一个项目  </p>\n</li>\n<li><p>&lt;&gt;    尖括号中的文本表示变量的数据 。如<finename>表示 “此处需要插入您要使用的文件名”有时会简单的写成大写字母，如FILENAME.</finename></p>\n</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date 命令用于显示时间  </span><br><span class=\"line\"></span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># date</span></span><br><span class=\"line\">2018年 04月 20日 星期五 09:23:02 CST</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># date +%R</span></span><br><span class=\"line\">09:23</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># date +%x</span></span><br><span class=\"line\">2018年04月20日</span><br><span class=\"line\">[root@client ~]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>passwd 命令用于更改用户密码：不指定用户名即修改当前用户密码，使用root 修改密码无需知道原密码。默认情况下密码策略是有要求的，需要包含小写字母、大写字母、数字和符号，并且不以字典中的单词为基础。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@client ~]<span class=\"comment\"># passwd client</span></span><br><span class=\"line\">更改用户 client 的密码 。</span><br><span class=\"line\">新的 密码：</span><br><span class=\"line\">无效的密码： 密码少于 8 个字符</span><br><span class=\"line\">重新输入新的 密码：</span><br><span class=\"line\">passwd：所有的身份验证令牌已经成功更新。</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># </span></span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># passwd</span></span><br><span class=\"line\">更改用户 root 的密码 。</span><br><span class=\"line\">新的 密码：</span><br><span class=\"line\">[client@client ~]$ passwd</span><br><span class=\"line\">更改用户 client 的密码 。</span><br><span class=\"line\">为 client 更改 STRESS 密码。</span><br><span class=\"line\">（当前）UNIX 密码：</span><br><span class=\"line\">新的 密码：</span><br><span class=\"line\">重新输入新的 密码：</span><br><span class=\"line\">passwd：所有的身份验证令牌已经成功更新。</span><br><span class=\"line\">[client@client ~]$</span><br></pre></td></tr></table></figure></p>\n<p>Linux 不需要文件扩展名做为依据分类文件，file 命令可以扫描文件内容的开头，显示 文件的类型。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[client@client ~]$ file /etc/passwd</span><br><span class=\"line\">/etc/passwd: ASCII text</span><br><span class=\"line\">[client@client ~]$ file /bin/passwd</span><br><span class=\"line\">/bin/passwd: setuid ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), <span class=\"keyword\">for</span> GNU/Linux 2.6.32, BuildID[sha1]=1e5735bf7b317e60bcb907f1989951f6abd50e8d, stripped</span><br><span class=\"line\">[client@client ~]$ file /home</span><br><span class=\"line\">/home: directory</span><br><span class=\"line\"></span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">head 和tail 命令分别显示文件的开头和结尾部分。默认情况下都是显示10行数据 。使用-n 选项可以指定需要显示的行数。</span><br><span class=\"line\">```sh</span><br><span class=\"line\">[client@client ~]$ head /etc/passwd</span><br><span class=\"line\">[client@client ~]$ tail /etc/passwd</span><br><span class=\"line\">[client@client ~]$ tail -n 6 /etc/passwd</span><br></pre></td></tr></table></figure>\n<p>wc 命令可以计算文件中行、字和字符的数量。它可以授受 -l、 -w 或 -c选项，分别用户显示行数（lines）、字数（words）和字符数（characters）<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client@client ~]$ wc /etc/passwd</span><br><span class=\"line\">  22   42 1051 /etc/passwd        <span class=\"comment\">#行、字、字符</span></span><br><span class=\"line\">[client@client ~]$ wc -l /etc/passwd</span><br><span class=\"line\">22 /etc/passwd</span><br><span class=\"line\">[client@client ~]$ wc -c /etc/passwd</span><br><span class=\"line\">1051 /etc/passwd</span><br><span class=\"line\">[client@client ~]$ wc -w /etc/passwd</span><br><span class=\"line\">42 /etc/passwd</span><br><span class=\"line\">[client@client ~]$ wc -c /etc/group /etc/hosts    <span class=\"comment\">#指定多个文件</span></span><br><span class=\"line\">567 /etc/group</span><br><span class=\"line\">181 /etc/hosts</span><br><span class=\"line\">748 总用量</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Tab-补全\"><a href=\"#Tab-补全\" class=\"headerlink\" title=\"Tab 补全\"></a>Tab 补全</h4><p>tab 补全可用于命令补全和文件名补全部分命令还可以补全参数选项<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client@client ~]$ pas&lt;tab&gt;    <span class=\"comment\">#自动列出以pas开头的不唯一命令</span></span><br><span class=\"line\">passwd  paste   </span><br><span class=\"line\">[client@client ~]$ pass&lt;tab&gt;    <span class=\"comment\">#自动补全pass开头的唯一命令</span></span><br><span class=\"line\">[client@client ~]$ passwd</span><br></pre></td></tr></table></figure></p>\n<p>history 命令显示之前执行的命令的列表，带有命令编号作为前缀。感叹号 ! 是元字符，用于扩展之前的命令而不必重新键入它们。!number 扩展至与指定编号匹配的命令。 !string 扩展至最近一个以指定字符串开头的命令。方向上下键可以向上或向下查找最近使用过的命令。左右键则开始进行命令行修改。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">histort</span><br><span class=\"line\">!48</span><br><span class=\"line\">!ls</span><br></pre></td></tr></table></figure></p>\n<p>Esc + .  组合键可使shell 将上一条命令的最后一个单词（参数）复制到当前命令行中的光标所处的位置。如果重复使用，它将继续转到更早的命令。  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">快捷方式</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Ctrl + a</td>\n<td style=\"text-align:left\">跳到命令行的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl + e</td>\n<td style=\"text-align:left\">跳到命令行的末尾</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl + u</td>\n<td style=\"text-align:left\">将光标位置到命令行开头的内容清除</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl + k</td>\n<td style=\"text-align:left\">将光标位置到命令行末尾的内容清除</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl + -&gt; 方向</td>\n<td style=\"text-align:left\">跳到命令行中后一字的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl + &lt;-</td>\n<td style=\"text-align:left\">跳到命令行中前一字的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl + l</td>\n<td style=\"text-align:left\">清除当前屏幕显示</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ctrl + r</td>\n<td style=\"text-align:left\">在历史记录列表中搜索某一命令</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"RH134 第二章 通过GREP使用正则表达式","url":"323.html","id":"323","date":"2018-05-06T06:15:16.000Z","_content":"\n###### 行定位符：行首 ^ 行尾 $  \n\n^cat 匹配cat 开头的行\n\ndog$ 匹配dog 结尾的行\n\n^cat$    匹配只有cat的行\n\n另一种定位符是字边界。\\\\<和\\\\\\> 可分别用于匹配一个字词的开头和结尾\n\n###### 通配符和倍数  \n\n正则表达式使用 “.”作为无限制通配符。 正则表达式 c.t 将会依次查找包含 c、任一字符和 t 的数据。比如：cat ,cot ,c5t ,cQt 等等。\n\n有限制通配\\[ \\] ,如c\\[aou\\]t ，匹配出来的的结果只能包括cat ,cot ,cut 。\n\n倍数与通配符一起使用可以匹配多个字符。“\\*”在证据表达式中修饰它前一位字符，从表示该字符的数量可为0至无限大。如果使用正则表达式c.\\*t 将会匹配 cat ,cot,coat,culvert 等以c开头t结尾的，中间包含任意多个字符的数据。\n\n另一种倍数将会指示模式中前面字符的期望个数。c.\\\\{2\\\\}t是使用显式倍数的一个示例。此正则表达式将会匹配以 c 开头，以 t 结尾且中间包含两个任意两个字符的数据。\n\n在不同的脚本语言中，正则表达式的语法会存在些许差异。\n\n###### 使用grep\n\ngrep是用作部分分发的一个命令，其使用正则表达式来隔离匹配的数据。\n\ngrep 'cat$' /usr/share/dict/words\n\n注意：由于正则表达式常含有shell 元字符（如$、* 等），建议练习的时候使用单引号（‘’）来括起命令行上的正则表达式。\n\nps aux | grep '^student'    #通过使用 | ，grep 可以与其它命令一起使用。\n\n|选项  |功能\n| :--\n|-i|使用所提供的正则表达式；但是不会强制区分大小写（运行不区分大小写的操作）。\n|-v|仅显示不包含正则表达式匹配项的行。\n|-r|将递归匹配正则表达式的数据搜素应用到一组文件或目录中。\n|-A <NUMBER>|显示正则表达式匹配项之后的行数\n|-B <NUMBER>|显示正则表达式匹配项之后的行数\n|-e|如果使用多个-e选项，则提供多个正则表达式，并将与逻辑or一起使用\n```sh\ngrep -i 'cat' file    #不区分大小写\ngrep -i -v 'cat' file    #不显示带有cat（大小写）的内容\ngrep -v '^\\[#;\\]' file    #不显示以#或者；开头的行\ngrep -e 'cat' -e 'dog' file     #显示包含cat 或者dog的行\ngrep '^Aug *8 1\\[345\\]' door.log     #查找8月8日，13点-15点分发生的事\ngrep '^Aug \\*8 14.\\*OPEN' door.log     #找8月8日14点的包含OPEN的信息\ngrep '^Aug *8 14:\\[345\\]' wall.log 27  #查找8月8日，14点30-50分发生的事\ngrep '^Aug \\*8 14.\\*ALERT' wall.log 28  #查找8月8日14点的包含ALERT的信息\ngrep '^Aug *8 14:40' proxy.log     #查找8月8日 14:40分发生的事\ngrep -A 24 '14:40' proxy.log    #查找匹配之后的24行\n```\n","source":"_posts/e7-ac-ac-e4-ba-8c-e7-ab-a0-e9-80-9a-e8-bf-87grep-e4-bd-bf-e7-94-a8-e6-ad-a3-e5-88-99-e8-a1-a8-e8-be-be-e5-bc-8f.md","raw":"---\ntitle: RH134 第二章 通过GREP使用正则表达式\nurl: 323.html\nid: 323\ncategories:\n  - RHEL134\ndate: 2018-05-06 14:15:16\ntags:\n---\n\n###### 行定位符：行首 ^ 行尾 $  \n\n^cat 匹配cat 开头的行\n\ndog$ 匹配dog 结尾的行\n\n^cat$    匹配只有cat的行\n\n另一种定位符是字边界。\\\\<和\\\\\\> 可分别用于匹配一个字词的开头和结尾\n\n###### 通配符和倍数  \n\n正则表达式使用 “.”作为无限制通配符。 正则表达式 c.t 将会依次查找包含 c、任一字符和 t 的数据。比如：cat ,cot ,c5t ,cQt 等等。\n\n有限制通配\\[ \\] ,如c\\[aou\\]t ，匹配出来的的结果只能包括cat ,cot ,cut 。\n\n倍数与通配符一起使用可以匹配多个字符。“\\*”在证据表达式中修饰它前一位字符，从表示该字符的数量可为0至无限大。如果使用正则表达式c.\\*t 将会匹配 cat ,cot,coat,culvert 等以c开头t结尾的，中间包含任意多个字符的数据。\n\n另一种倍数将会指示模式中前面字符的期望个数。c.\\\\{2\\\\}t是使用显式倍数的一个示例。此正则表达式将会匹配以 c 开头，以 t 结尾且中间包含两个任意两个字符的数据。\n\n在不同的脚本语言中，正则表达式的语法会存在些许差异。\n\n###### 使用grep\n\ngrep是用作部分分发的一个命令，其使用正则表达式来隔离匹配的数据。\n\ngrep 'cat$' /usr/share/dict/words\n\n注意：由于正则表达式常含有shell 元字符（如$、* 等），建议练习的时候使用单引号（‘’）来括起命令行上的正则表达式。\n\nps aux | grep '^student'    #通过使用 | ，grep 可以与其它命令一起使用。\n\n|选项  |功能\n| :--\n|-i|使用所提供的正则表达式；但是不会强制区分大小写（运行不区分大小写的操作）。\n|-v|仅显示不包含正则表达式匹配项的行。\n|-r|将递归匹配正则表达式的数据搜素应用到一组文件或目录中。\n|-A <NUMBER>|显示正则表达式匹配项之后的行数\n|-B <NUMBER>|显示正则表达式匹配项之后的行数\n|-e|如果使用多个-e选项，则提供多个正则表达式，并将与逻辑or一起使用\n```sh\ngrep -i 'cat' file    #不区分大小写\ngrep -i -v 'cat' file    #不显示带有cat（大小写）的内容\ngrep -v '^\\[#;\\]' file    #不显示以#或者；开头的行\ngrep -e 'cat' -e 'dog' file     #显示包含cat 或者dog的行\ngrep '^Aug *8 1\\[345\\]' door.log     #查找8月8日，13点-15点分发生的事\ngrep '^Aug \\*8 14.\\*OPEN' door.log     #找8月8日14点的包含OPEN的信息\ngrep '^Aug *8 14:\\[345\\]' wall.log 27  #查找8月8日，14点30-50分发生的事\ngrep '^Aug \\*8 14.\\*ALERT' wall.log 28  #查找8月8日14点的包含ALERT的信息\ngrep '^Aug *8 14:40' proxy.log     #查找8月8日 14:40分发生的事\ngrep -A 24 '14:40' proxy.log    #查找匹配之后的24行\n```\n","slug":"e7-ac-ac-e4-ba-8c-e7-ab-a0-e9-80-9a-e8-bf-87grep-e4-bd-bf-e7-94-a8-e6-ad-a3-e5-88-99-e8-a1-a8-e8-be-be-e5-bc-8f","published":1,"updated":"2019-01-06T15:52:27.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqhza000nlxkjd38i1qvq","content":"<h6 id=\"行定位符：行首-行尾\"><a href=\"#行定位符：行首-行尾\" class=\"headerlink\" title=\"行定位符：行首 ^ 行尾 $\"></a>行定位符：行首 ^ 行尾 $</h6><p>^cat 匹配cat 开头的行</p>\n<p>dog$ 匹配dog 结尾的行</p>\n<p>^cat$    匹配只有cat的行</p>\n<p>另一种定位符是字边界。\\&lt;和\\> 可分别用于匹配一个字词的开头和结尾</p>\n<h6 id=\"通配符和倍数\"><a href=\"#通配符和倍数\" class=\"headerlink\" title=\"通配符和倍数\"></a>通配符和倍数</h6><p>正则表达式使用 “.”作为无限制通配符。 正则表达式 c.t 将会依次查找包含 c、任一字符和 t 的数据。比如：cat ,cot ,c5t ,cQt 等等。</p>\n<p>有限制通配[ ] ,如c[aou]t ，匹配出来的的结果只能包括cat ,cot ,cut 。</p>\n<p>倍数与通配符一起使用可以匹配多个字符。“*”在证据表达式中修饰它前一位字符，从表示该字符的数量可为0至无限大。如果使用正则表达式c.*t 将会匹配 cat ,cot,coat,culvert 等以c开头t结尾的，中间包含任意多个字符的数据。</p>\n<p>另一种倍数将会指示模式中前面字符的期望个数。c.\\{2\\}t是使用显式倍数的一个示例。此正则表达式将会匹配以 c 开头，以 t 结尾且中间包含两个任意两个字符的数据。</p>\n<p>在不同的脚本语言中，正则表达式的语法会存在些许差异。</p>\n<h6 id=\"使用grep\"><a href=\"#使用grep\" class=\"headerlink\" title=\"使用grep\"></a>使用grep</h6><p>grep是用作部分分发的一个命令，其使用正则表达式来隔离匹配的数据。</p>\n<p>grep ‘cat$’ /usr/share/dict/words</p>\n<p>注意：由于正则表达式常含有shell 元字符（如$、* 等），建议练习的时候使用单引号（‘’）来括起命令行上的正则表达式。</p>\n<p>ps aux | grep ‘^student’    #通过使用 | ，grep 可以与其它命令一起使用。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-i</td>\n<td>使用所提供的正则表达式；但是不会强制区分大小写（运行不区分大小写的操作）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-v</td>\n<td>仅显示不包含正则表达式匹配项的行。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-r</td>\n<td>将递归匹配正则表达式的数据搜素应用到一组文件或目录中。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-A <number></number></td>\n<td>显示正则表达式匹配项之后的行数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-B <number></number></td>\n<td>显示正则表达式匹配项之后的行数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-e</td>\n<td>如果使用多个-e选项，则提供多个正则表达式，并将与逻辑or一起使用</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -i <span class=\"string\">'cat'</span> file    <span class=\"comment\">#不区分大小写</span></span><br><span class=\"line\">grep -i -v <span class=\"string\">'cat'</span> file    <span class=\"comment\">#不显示带有cat（大小写）的内容</span></span><br><span class=\"line\">grep -v <span class=\"string\">'^\\[#;\\]'</span> file    <span class=\"comment\">#不显示以#或者；开头的行</span></span><br><span class=\"line\">grep -e <span class=\"string\">'cat'</span> -e <span class=\"string\">'dog'</span> file     <span class=\"comment\">#显示包含cat 或者dog的行</span></span><br><span class=\"line\">grep <span class=\"string\">'^Aug *8 1\\[345\\]'</span> door.log     <span class=\"comment\">#查找8月8日，13点-15点分发生的事</span></span><br><span class=\"line\">grep <span class=\"string\">'^Aug \\*8 14.\\*OPEN'</span> door.log     <span class=\"comment\">#找8月8日14点的包含OPEN的信息</span></span><br><span class=\"line\">grep <span class=\"string\">'^Aug *8 14:\\[345\\]'</span> wall.log 27  <span class=\"comment\">#查找8月8日，14点30-50分发生的事</span></span><br><span class=\"line\">grep <span class=\"string\">'^Aug \\*8 14.\\*ALERT'</span> wall.log 28  <span class=\"comment\">#查找8月8日14点的包含ALERT的信息</span></span><br><span class=\"line\">grep <span class=\"string\">'^Aug *8 14:40'</span> proxy.log     <span class=\"comment\">#查找8月8日 14:40分发生的事</span></span><br><span class=\"line\">grep -A 24 <span class=\"string\">'14:40'</span> proxy.log    <span class=\"comment\">#查找匹配之后的24行</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"行定位符：行首-行尾\"><a href=\"#行定位符：行首-行尾\" class=\"headerlink\" title=\"行定位符：行首 ^ 行尾 $\"></a>行定位符：行首 ^ 行尾 $</h6><p>^cat 匹配cat 开头的行</p>\n<p>dog$ 匹配dog 结尾的行</p>\n<p>^cat$    匹配只有cat的行</p>\n<p>另一种定位符是字边界。\\&lt;和\\> 可分别用于匹配一个字词的开头和结尾</p>\n<h6 id=\"通配符和倍数\"><a href=\"#通配符和倍数\" class=\"headerlink\" title=\"通配符和倍数\"></a>通配符和倍数</h6><p>正则表达式使用 “.”作为无限制通配符。 正则表达式 c.t 将会依次查找包含 c、任一字符和 t 的数据。比如：cat ,cot ,c5t ,cQt 等等。</p>\n<p>有限制通配[ ] ,如c[aou]t ，匹配出来的的结果只能包括cat ,cot ,cut 。</p>\n<p>倍数与通配符一起使用可以匹配多个字符。“*”在证据表达式中修饰它前一位字符，从表示该字符的数量可为0至无限大。如果使用正则表达式c.*t 将会匹配 cat ,cot,coat,culvert 等以c开头t结尾的，中间包含任意多个字符的数据。</p>\n<p>另一种倍数将会指示模式中前面字符的期望个数。c.\\{2\\}t是使用显式倍数的一个示例。此正则表达式将会匹配以 c 开头，以 t 结尾且中间包含两个任意两个字符的数据。</p>\n<p>在不同的脚本语言中，正则表达式的语法会存在些许差异。</p>\n<h6 id=\"使用grep\"><a href=\"#使用grep\" class=\"headerlink\" title=\"使用grep\"></a>使用grep</h6><p>grep是用作部分分发的一个命令，其使用正则表达式来隔离匹配的数据。</p>\n<p>grep ‘cat$’ /usr/share/dict/words</p>\n<p>注意：由于正则表达式常含有shell 元字符（如$、* 等），建议练习的时候使用单引号（‘’）来括起命令行上的正则表达式。</p>\n<p>ps aux | grep ‘^student’    #通过使用 | ，grep 可以与其它命令一起使用。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-i</td>\n<td>使用所提供的正则表达式；但是不会强制区分大小写（运行不区分大小写的操作）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-v</td>\n<td>仅显示不包含正则表达式匹配项的行。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-r</td>\n<td>将递归匹配正则表达式的数据搜素应用到一组文件或目录中。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-A <number></number></td>\n<td>显示正则表达式匹配项之后的行数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-B <number></number></td>\n<td>显示正则表达式匹配项之后的行数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-e</td>\n<td>如果使用多个-e选项，则提供多个正则表达式，并将与逻辑or一起使用</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -i <span class=\"string\">'cat'</span> file    <span class=\"comment\">#不区分大小写</span></span><br><span class=\"line\">grep -i -v <span class=\"string\">'cat'</span> file    <span class=\"comment\">#不显示带有cat（大小写）的内容</span></span><br><span class=\"line\">grep -v <span class=\"string\">'^\\[#;\\]'</span> file    <span class=\"comment\">#不显示以#或者；开头的行</span></span><br><span class=\"line\">grep -e <span class=\"string\">'cat'</span> -e <span class=\"string\">'dog'</span> file     <span class=\"comment\">#显示包含cat 或者dog的行</span></span><br><span class=\"line\">grep <span class=\"string\">'^Aug *8 1\\[345\\]'</span> door.log     <span class=\"comment\">#查找8月8日，13点-15点分发生的事</span></span><br><span class=\"line\">grep <span class=\"string\">'^Aug \\*8 14.\\*OPEN'</span> door.log     <span class=\"comment\">#找8月8日14点的包含OPEN的信息</span></span><br><span class=\"line\">grep <span class=\"string\">'^Aug *8 14:\\[345\\]'</span> wall.log 27  <span class=\"comment\">#查找8月8日，14点30-50分发生的事</span></span><br><span class=\"line\">grep <span class=\"string\">'^Aug \\*8 14.\\*ALERT'</span> wall.log 28  <span class=\"comment\">#查找8月8日14点的包含ALERT的信息</span></span><br><span class=\"line\">grep <span class=\"string\">'^Aug *8 14:40'</span> proxy.log     <span class=\"comment\">#查找8月8日 14:40分发生的事</span></span><br><span class=\"line\">grep -A 24 <span class=\"string\">'14:40'</span> proxy.log    <span class=\"comment\">#查找匹配之后的24行</span></span><br></pre></td></tr></table></figure>\n"},{"title":"iptables 端口转发","url":"269.html","id":"269","date":"2018-04-24T03:26:46.000Z","_content":"\n##### 将firewalld切换到 iptables  \n1\\. 停止并禁用 firewalld  \n```sh\nsudo systemctl stop firewald.service && sudo systemctl disable firewald.service  \n```\n2.安装iptables-services、iptables-devel  \n```sh\nsudo yum install iptables-services iptables-devel  \n```\n3.启用并启动iptables  \n```sh\nsudo systemctl enable iptables.service && sudo systemctl start iptables.service\n```\n* * *\n\n\n\n**a.同一端口转发**(192.168.0.132上开通1521端口访问 \n  ```sh\niptables -A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 1521 -j ACCEPT)\niptables -t nat -I PREROUTING -p tcp --dport 1521 -j DNAT --to 192.168.0.211  \niptables -t nat -I POSTROUTING -p tcp --dport 1521 -j MASQUERADE  \n```  \n**b.不同端口转发**(192.168.0.132上开通21521端口访问 \n  ```sh\niptables -A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 21521 -j ACCEPT)\n\niptables -t nat -A PREROUTING -p tcp -m tcp --dport**21521** -j DNAT --to-destination**192.168.0.211:1521**  \niptables -t nat -A POSTROUTING -s 192.168.0.0/16 -d 192.168.0.211 -p tcp -m tcp --dport 1521 -j SNAT --to-source 192.168.0.132  \n```  \n\n**以上两条等价配置(更简单\\[指定网卡\\]):**  \n```sh\niptables -t nat -A PREROUTING -p tcp -i eth0 --dport 31521 -j DNAT --to 192.168.0.211:1521  \niptables -t nat -A POSTROUTING -j MASQUERADE  \n```\n\n###### 保存iptables  \n```sh\nservice iptables save  \n\nservice iptables restart\n```\n##### 二、 用iptables做本机端口转发  \n\n  代码如下：  \n```sh\niptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080  \n```\n  估计适当增加其它的参数也可以做不同IP的端口转发。  \n  如果需要本机也可以访问，则需要配置OUTPUT链(********特别注意:本机访问外网的端口会转发到本地,导致访不到外网,如访问yown.com,实际上是访问到本地,建议不做80端口的转发或者指定目的 -d localhost)：  \n```sh\n  iptables -t nat -A OUTPUT -d localhost -p tcp --dport 80 -j REDIRECT --to-ports 8080  \n```\n原因：  \n外网访问需要经过PREROUTING链，但是localhost不经过该链，因此需要用OUTPUT。  \n\n#######################################################################################  \n\n概述：公司有一些核心MySQL服务器位于核心机房的内网段，作为运维人员，经常需要去连接这些服务器，因无法直接通过外网访问，给管理造成了不便。  \n\n思路：虽然解决此问题的方法及思路有很多，但当下想使用IPTABLES的端口重定向功能解决此问题，比较简单易用，而且扩展性也比较好，依次类推，可以运用到其他的端口转发方面的应用。  \n##### 网络环境：  \n公网服务器      ：eth0:公网IP    eth1:内网IP - 192.168.1.1  \nmysql服务器：eth1:内网IP - 192.168.1.2  \n实现方法：通过访问公网IP的63306端口来实现到内网MYSQL服务器的3306端口的访问  \n##### 在公网服务器上：  \n###### 配置脚本：  \n```sh\niptables -t nat -A PREROUTING -p tcp --dport 63306 -j DNAT --to-destination 192.168.1.2:3306  \niptables -t nat -A POSTROUTING -d 192.168.1.2 -p tcp --dport 3306 -j SNAT --to 192.168.1.1  \n```\n###### 允许服务器的IP转发功能：\n```sh  \necho 1 > /proc/sys/net/ipv4/ip_forward  \n```\n###### 使用方法：\n```sh  \nmysql -h 公网IP -p 63306 -uroot -p  \n```\n ###############################################################################################  \n\n由于业务需要，服务器越来越多，内网服务器无外网环境管理甚是不便，所以折腾了一下外网到内网的端口转发以达到轻松管理的目的，贴一下心得。  \n\n###### S1:  \neth0 10.0.0.1  \neth1 x.x.x.x  \n\n###### S2:  \neth0 10.0.0.2  \n\nS1 8082端口转发到内网机器22端口  \niptables规则配置如下：  \n```sh\niptables -t nat -A PREROUTING -d x.x.x.x -p tcp --dport 8082 -j DNAT --to-destination 10.0.0.2:22  \niptables -t nat -A POSTROUTING -d 10.0.0.2 -p tcp --dport 22 -j SNAT --to-source x.x.x.x  \n````\n说明：  \n```sh\niptables -t nat -A PREROUTING -d \"对外公网ip\" -p tcp --dport \"对外端口\" -j DNAT --to \"内部实际提供服务的ip\":\"实际提供服务的端口\"  \niptables -t nat -A POSTROUTING -d \"内部实际提供服务的ip\"-p tcp --dport \"实际提供服务的端口\" -j SNAT --to-source \"运行iptables机器的内网ip\"\n```\n* * *\n","source":"_posts/iptables-e7-ab-af-e5-8f-a3-e8-bd-ac-e5-8f-91.md","raw":"---\ntitle: iptables 端口转发\nurl: 269.html\nid: 269\ncategories:\n  - 未分类\ndate: 2018-04-24 11:26:46\ntags:\n---\n\n##### 将firewalld切换到 iptables  \n1\\. 停止并禁用 firewalld  \n```sh\nsudo systemctl stop firewald.service && sudo systemctl disable firewald.service  \n```\n2.安装iptables-services、iptables-devel  \n```sh\nsudo yum install iptables-services iptables-devel  \n```\n3.启用并启动iptables  \n```sh\nsudo systemctl enable iptables.service && sudo systemctl start iptables.service\n```\n* * *\n\n\n\n**a.同一端口转发**(192.168.0.132上开通1521端口访问 \n  ```sh\niptables -A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 1521 -j ACCEPT)\niptables -t nat -I PREROUTING -p tcp --dport 1521 -j DNAT --to 192.168.0.211  \niptables -t nat -I POSTROUTING -p tcp --dport 1521 -j MASQUERADE  \n```  \n**b.不同端口转发**(192.168.0.132上开通21521端口访问 \n  ```sh\niptables -A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 21521 -j ACCEPT)\n\niptables -t nat -A PREROUTING -p tcp -m tcp --dport**21521** -j DNAT --to-destination**192.168.0.211:1521**  \niptables -t nat -A POSTROUTING -s 192.168.0.0/16 -d 192.168.0.211 -p tcp -m tcp --dport 1521 -j SNAT --to-source 192.168.0.132  \n```  \n\n**以上两条等价配置(更简单\\[指定网卡\\]):**  \n```sh\niptables -t nat -A PREROUTING -p tcp -i eth0 --dport 31521 -j DNAT --to 192.168.0.211:1521  \niptables -t nat -A POSTROUTING -j MASQUERADE  \n```\n\n###### 保存iptables  \n```sh\nservice iptables save  \n\nservice iptables restart\n```\n##### 二、 用iptables做本机端口转发  \n\n  代码如下：  \n```sh\niptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080  \n```\n  估计适当增加其它的参数也可以做不同IP的端口转发。  \n  如果需要本机也可以访问，则需要配置OUTPUT链(********特别注意:本机访问外网的端口会转发到本地,导致访不到外网,如访问yown.com,实际上是访问到本地,建议不做80端口的转发或者指定目的 -d localhost)：  \n```sh\n  iptables -t nat -A OUTPUT -d localhost -p tcp --dport 80 -j REDIRECT --to-ports 8080  \n```\n原因：  \n外网访问需要经过PREROUTING链，但是localhost不经过该链，因此需要用OUTPUT。  \n\n#######################################################################################  \n\n概述：公司有一些核心MySQL服务器位于核心机房的内网段，作为运维人员，经常需要去连接这些服务器，因无法直接通过外网访问，给管理造成了不便。  \n\n思路：虽然解决此问题的方法及思路有很多，但当下想使用IPTABLES的端口重定向功能解决此问题，比较简单易用，而且扩展性也比较好，依次类推，可以运用到其他的端口转发方面的应用。  \n##### 网络环境：  \n公网服务器      ：eth0:公网IP    eth1:内网IP - 192.168.1.1  \nmysql服务器：eth1:内网IP - 192.168.1.2  \n实现方法：通过访问公网IP的63306端口来实现到内网MYSQL服务器的3306端口的访问  \n##### 在公网服务器上：  \n###### 配置脚本：  \n```sh\niptables -t nat -A PREROUTING -p tcp --dport 63306 -j DNAT --to-destination 192.168.1.2:3306  \niptables -t nat -A POSTROUTING -d 192.168.1.2 -p tcp --dport 3306 -j SNAT --to 192.168.1.1  \n```\n###### 允许服务器的IP转发功能：\n```sh  \necho 1 > /proc/sys/net/ipv4/ip_forward  \n```\n###### 使用方法：\n```sh  \nmysql -h 公网IP -p 63306 -uroot -p  \n```\n ###############################################################################################  \n\n由于业务需要，服务器越来越多，内网服务器无外网环境管理甚是不便，所以折腾了一下外网到内网的端口转发以达到轻松管理的目的，贴一下心得。  \n\n###### S1:  \neth0 10.0.0.1  \neth1 x.x.x.x  \n\n###### S2:  \neth0 10.0.0.2  \n\nS1 8082端口转发到内网机器22端口  \niptables规则配置如下：  \n```sh\niptables -t nat -A PREROUTING -d x.x.x.x -p tcp --dport 8082 -j DNAT --to-destination 10.0.0.2:22  \niptables -t nat -A POSTROUTING -d 10.0.0.2 -p tcp --dport 22 -j SNAT --to-source x.x.x.x  \n````\n说明：  \n```sh\niptables -t nat -A PREROUTING -d \"对外公网ip\" -p tcp --dport \"对外端口\" -j DNAT --to \"内部实际提供服务的ip\":\"实际提供服务的端口\"  \niptables -t nat -A POSTROUTING -d \"内部实际提供服务的ip\"-p tcp --dport \"实际提供服务的端口\" -j SNAT --to-source \"运行iptables机器的内网ip\"\n```\n* * *\n","slug":"iptables-e7-ab-af-e5-8f-a3-e8-bd-ac-e5-8f-91","published":1,"updated":"2019-01-06T16:02:01.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqhzc000plxkj40vcxdu3","content":"<h5 id=\"将firewalld切换到-iptables\"><a href=\"#将firewalld切换到-iptables\" class=\"headerlink\" title=\"将firewalld切换到 iptables\"></a>将firewalld切换到 iptables</h5><p>1. 停止并禁用 firewalld<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl stop firewald.service &amp;&amp; sudo systemctl <span class=\"built_in\">disable</span> firewald.service</span><br></pre></td></tr></table></figure></p>\n<p>2.安装iptables-services、iptables-devel<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install iptables-services iptables-devel</span><br></pre></td></tr></table></figure></p>\n<p>3.启用并启动iptables<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> iptables.service &amp;&amp; sudo systemctl start iptables.service</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong>a.同一端口转发</strong>(192.168.0.132上开通1521端口访问<br>  <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 1521 -j ACCEPT)</span><br><span class=\"line\">iptables -t nat -I PREROUTING -p tcp --dport 1521 -j DNAT --to 192.168.0.211  </span><br><span class=\"line\">iptables -t nat -I POSTROUTING -p tcp --dport 1521 -j MASQUERADE  </span><br><span class=\"line\">```  </span><br><span class=\"line\">**b.不同端口转发**(192.168.0.132上开通21521端口访问 </span><br><span class=\"line\">  ```sh</span><br><span class=\"line\">iptables -A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 21521 -j ACCEPT)</span><br><span class=\"line\"></span><br><span class=\"line\">iptables -t nat -A PREROUTING -p tcp -m tcp --dport**21521** -j DNAT --to-destination**192.168.0.211:1521**  </span><br><span class=\"line\">iptables -t nat -A POSTROUTING -s 192.168.0.0/16 -d 192.168.0.211 -p tcp -m tcp --dport 1521 -j SNAT --to-source 192.168.0.132  </span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">**以上两条等价配置(更简单\\[指定网卡\\]):**  </span><br><span class=\"line\">```sh</span><br><span class=\"line\">iptables -t nat -A PREROUTING -p tcp -i eth0 --dport 31521 -j DNAT --to 192.168.0.211:1521  </span><br><span class=\"line\">iptables -t nat -A POSTROUTING -j MASQUERADE</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"保存iptables\"><a href=\"#保存iptables\" class=\"headerlink\" title=\"保存iptables\"></a>保存iptables</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables save  </span><br><span class=\"line\"></span><br><span class=\"line\">service iptables restart</span><br></pre></td></tr></table></figure>\n<h5 id=\"二、-用iptables做本机端口转发\"><a href=\"#二、-用iptables做本机端口转发\" class=\"headerlink\" title=\"二、 用iptables做本机端口转发\"></a>二、 用iptables做本机端口转发</h5><p>  代码如下：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080</span><br></pre></td></tr></table></figure></p>\n<p>  估计适当增加其它的参数也可以做不同IP的端口转发。<br>  如果需要本机也可以访问，则需要配置OUTPUT链(<strong><em>**</em></strong>特别注意:本机访问外网的端口会转发到本地,导致访不到外网,如访问yown.com,实际上是访问到本地,建议不做80端口的转发或者指定目的 -d localhost)：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  iptables -t nat -A OUTPUT -d localhost -p tcp --dport 80 -j REDIRECT --to-ports 8080</span><br></pre></td></tr></table></figure></p>\n<p>原因：<br>外网访问需要经过PREROUTING链，但是localhost不经过该链，因此需要用OUTPUT。  </p>\n<p>#######################################################################################  </p>\n<p>概述：公司有一些核心MySQL服务器位于核心机房的内网段，作为运维人员，经常需要去连接这些服务器，因无法直接通过外网访问，给管理造成了不便。  </p>\n<p>思路：虽然解决此问题的方法及思路有很多，但当下想使用IPTABLES的端口重定向功能解决此问题，比较简单易用，而且扩展性也比较好，依次类推，可以运用到其他的端口转发方面的应用。  </p>\n<h5 id=\"网络环境：\"><a href=\"#网络环境：\" class=\"headerlink\" title=\"网络环境：\"></a>网络环境：</h5><p>公网服务器      ：eth0:公网IP    eth1:内网IP - 192.168.1.1<br>mysql服务器：eth1:内网IP - 192.168.1.2<br>实现方法：通过访问公网IP的63306端口来实现到内网MYSQL服务器的3306端口的访问  </p>\n<h5 id=\"在公网服务器上：\"><a href=\"#在公网服务器上：\" class=\"headerlink\" title=\"在公网服务器上：\"></a>在公网服务器上：</h5><h6 id=\"配置脚本：\"><a href=\"#配置脚本：\" class=\"headerlink\" title=\"配置脚本：\"></a>配置脚本：</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A PREROUTING -p tcp --dport 63306 -j DNAT --to-destination 192.168.1.2:3306  </span><br><span class=\"line\">iptables -t nat -A POSTROUTING -d 192.168.1.2 -p tcp --dport 3306 -j SNAT --to 192.168.1.1</span><br></pre></td></tr></table></figure>\n<h6 id=\"允许服务器的IP转发功能：\"><a href=\"#允许服务器的IP转发功能：\" class=\"headerlink\" title=\"允许服务器的IP转发功能：\"></a>允许服务器的IP转发功能：</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure>\n<h6 id=\"使用方法：\"><a href=\"#使用方法：\" class=\"headerlink\" title=\"使用方法：\"></a>使用方法：</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h 公网IP -p 63306 -uroot -p</span><br></pre></td></tr></table></figure>\n<p> ###############################################################################################  </p>\n<p>由于业务需要，服务器越来越多，内网服务器无外网环境管理甚是不便，所以折腾了一下外网到内网的端口转发以达到轻松管理的目的，贴一下心得。  </p>\n<h6 id=\"S1\"><a href=\"#S1\" class=\"headerlink\" title=\"S1:\"></a>S1:</h6><p>eth0 10.0.0.1<br>eth1 x.x.x.x  </p>\n<h6 id=\"S2\"><a href=\"#S2\" class=\"headerlink\" title=\"S2:\"></a>S2:</h6><p>eth0 10.0.0.2  </p>\n<p>S1 8082端口转发到内网机器22端口<br>iptables规则配置如下：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A PREROUTING -d x.x.x.x -p tcp --dport 8082 -j DNAT --to-destination 10.0.0.2:22  </span><br><span class=\"line\">iptables -t nat -A POSTROUTING -d 10.0.0.2 -p tcp --dport 22 -j SNAT --to-source x.x.x.x  </span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure></p>\n<p>说明：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A PREROUTING -d <span class=\"string\">\"对外公网ip\"</span> -p tcp --dport <span class=\"string\">\"对外端口\"</span> -j DNAT --to <span class=\"string\">\"内部实际提供服务的ip\"</span>:<span class=\"string\">\"实际提供服务的端口\"</span>  </span><br><span class=\"line\">iptables -t nat -A POSTROUTING -d <span class=\"string\">\"内部实际提供服务的ip\"</span>-p tcp --dport <span class=\"string\">\"实际提供服务的端口\"</span> -j SNAT --to-source <span class=\"string\">\"运行iptables机器的内网ip\"</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"将firewalld切换到-iptables\"><a href=\"#将firewalld切换到-iptables\" class=\"headerlink\" title=\"将firewalld切换到 iptables\"></a>将firewalld切换到 iptables</h5><p>1. 停止并禁用 firewalld<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl stop firewald.service &amp;&amp; sudo systemctl <span class=\"built_in\">disable</span> firewald.service</span><br></pre></td></tr></table></figure></p>\n<p>2.安装iptables-services、iptables-devel<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install iptables-services iptables-devel</span><br></pre></td></tr></table></figure></p>\n<p>3.启用并启动iptables<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> iptables.service &amp;&amp; sudo systemctl start iptables.service</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong>a.同一端口转发</strong>(192.168.0.132上开通1521端口访问<br>  <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 1521 -j ACCEPT)</span><br><span class=\"line\">iptables -t nat -I PREROUTING -p tcp --dport 1521 -j DNAT --to 192.168.0.211  </span><br><span class=\"line\">iptables -t nat -I POSTROUTING -p tcp --dport 1521 -j MASQUERADE  </span><br><span class=\"line\">```  </span><br><span class=\"line\">**b.不同端口转发**(192.168.0.132上开通21521端口访问 </span><br><span class=\"line\">  ```sh</span><br><span class=\"line\">iptables -A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 21521 -j ACCEPT)</span><br><span class=\"line\"></span><br><span class=\"line\">iptables -t nat -A PREROUTING -p tcp -m tcp --dport**21521** -j DNAT --to-destination**192.168.0.211:1521**  </span><br><span class=\"line\">iptables -t nat -A POSTROUTING -s 192.168.0.0/16 -d 192.168.0.211 -p tcp -m tcp --dport 1521 -j SNAT --to-source 192.168.0.132  </span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">**以上两条等价配置(更简单\\[指定网卡\\]):**  </span><br><span class=\"line\">```sh</span><br><span class=\"line\">iptables -t nat -A PREROUTING -p tcp -i eth0 --dport 31521 -j DNAT --to 192.168.0.211:1521  </span><br><span class=\"line\">iptables -t nat -A POSTROUTING -j MASQUERADE</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"保存iptables\"><a href=\"#保存iptables\" class=\"headerlink\" title=\"保存iptables\"></a>保存iptables</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables save  </span><br><span class=\"line\"></span><br><span class=\"line\">service iptables restart</span><br></pre></td></tr></table></figure>\n<h5 id=\"二、-用iptables做本机端口转发\"><a href=\"#二、-用iptables做本机端口转发\" class=\"headerlink\" title=\"二、 用iptables做本机端口转发\"></a>二、 用iptables做本机端口转发</h5><p>  代码如下：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080</span><br></pre></td></tr></table></figure></p>\n<p>  估计适当增加其它的参数也可以做不同IP的端口转发。<br>  如果需要本机也可以访问，则需要配置OUTPUT链(<strong><em>**</em></strong>特别注意:本机访问外网的端口会转发到本地,导致访不到外网,如访问yown.com,实际上是访问到本地,建议不做80端口的转发或者指定目的 -d localhost)：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  iptables -t nat -A OUTPUT -d localhost -p tcp --dport 80 -j REDIRECT --to-ports 8080</span><br></pre></td></tr></table></figure></p>\n<p>原因：<br>外网访问需要经过PREROUTING链，但是localhost不经过该链，因此需要用OUTPUT。  </p>\n<p>#######################################################################################  </p>\n<p>概述：公司有一些核心MySQL服务器位于核心机房的内网段，作为运维人员，经常需要去连接这些服务器，因无法直接通过外网访问，给管理造成了不便。  </p>\n<p>思路：虽然解决此问题的方法及思路有很多，但当下想使用IPTABLES的端口重定向功能解决此问题，比较简单易用，而且扩展性也比较好，依次类推，可以运用到其他的端口转发方面的应用。  </p>\n<h5 id=\"网络环境：\"><a href=\"#网络环境：\" class=\"headerlink\" title=\"网络环境：\"></a>网络环境：</h5><p>公网服务器      ：eth0:公网IP    eth1:内网IP - 192.168.1.1<br>mysql服务器：eth1:内网IP - 192.168.1.2<br>实现方法：通过访问公网IP的63306端口来实现到内网MYSQL服务器的3306端口的访问  </p>\n<h5 id=\"在公网服务器上：\"><a href=\"#在公网服务器上：\" class=\"headerlink\" title=\"在公网服务器上：\"></a>在公网服务器上：</h5><h6 id=\"配置脚本：\"><a href=\"#配置脚本：\" class=\"headerlink\" title=\"配置脚本：\"></a>配置脚本：</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A PREROUTING -p tcp --dport 63306 -j DNAT --to-destination 192.168.1.2:3306  </span><br><span class=\"line\">iptables -t nat -A POSTROUTING -d 192.168.1.2 -p tcp --dport 3306 -j SNAT --to 192.168.1.1</span><br></pre></td></tr></table></figure>\n<h6 id=\"允许服务器的IP转发功能：\"><a href=\"#允许服务器的IP转发功能：\" class=\"headerlink\" title=\"允许服务器的IP转发功能：\"></a>允许服务器的IP转发功能：</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure>\n<h6 id=\"使用方法：\"><a href=\"#使用方法：\" class=\"headerlink\" title=\"使用方法：\"></a>使用方法：</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h 公网IP -p 63306 -uroot -p</span><br></pre></td></tr></table></figure>\n<p> ###############################################################################################  </p>\n<p>由于业务需要，服务器越来越多，内网服务器无外网环境管理甚是不便，所以折腾了一下外网到内网的端口转发以达到轻松管理的目的，贴一下心得。  </p>\n<h6 id=\"S1\"><a href=\"#S1\" class=\"headerlink\" title=\"S1:\"></a>S1:</h6><p>eth0 10.0.0.1<br>eth1 x.x.x.x  </p>\n<h6 id=\"S2\"><a href=\"#S2\" class=\"headerlink\" title=\"S2:\"></a>S2:</h6><p>eth0 10.0.0.2  </p>\n<p>S1 8082端口转发到内网机器22端口<br>iptables规则配置如下：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A PREROUTING -d x.x.x.x -p tcp --dport 8082 -j DNAT --to-destination 10.0.0.2:22  </span><br><span class=\"line\">iptables -t nat -A POSTROUTING -d 10.0.0.2 -p tcp --dport 22 -j SNAT --to-source x.x.x.x  </span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure></p>\n<p>说明：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A PREROUTING -d <span class=\"string\">\"对外公网ip\"</span> -p tcp --dport <span class=\"string\">\"对外端口\"</span> -j DNAT --to <span class=\"string\">\"内部实际提供服务的ip\"</span>:<span class=\"string\">\"实际提供服务的端口\"</span>  </span><br><span class=\"line\">iptables -t nat -A POSTROUTING -d <span class=\"string\">\"内部实际提供服务的ip\"</span>-p tcp --dport <span class=\"string\">\"实际提供服务的端口\"</span> -j SNAT --to-source <span class=\"string\">\"运行iptables机器的内网ip\"</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n"},{"title":"Recored  零散记忆","url":"247.html","id":"247","date":"2018-04-20T02:11:27.000Z","_content":"```sh\nLANG=zh_CN.utf8    #设置语言，临时\n\nlocale    #检查语言\n\nlocalectl set-locale LANG=zh_CN.utf8    #设备系统默认语言\n\nvi /etc/locale.conf    #语言的配置文件  \n```\ntty2等本地文件控制台可显示的字体比gnome-terminal和ssh会话受到的局限多。例如，本地文件控制台中的日语、韩语和中文字符显示可能会不正常。因此最好将英语或其它包含拉丁语字符的语言用于系统的文本控制台。类似的，受到的输入法也受到限制比较多。\n```sh\nyum install yum-langpacks #先安装才能使用。  \n\nyum langavaliable     #查看系统可用语言包  \n\nyum langlist\n\nyum langinstall code  \n```\n[http://fedoraproject.org/wiki/QA:Langpack\\_Yum\\_Application](http://fedoraproject.org/wiki/QA:Langpack_Yum_Application)  \n\n```sh  \n\nNCORE=$( grep -c '^processor' /proc/cpuinfo)    #查看CPU核数\nfor I in $(  seq $((NCORE\\*2-1)))    #设置for 循环，seq 生成序列来自NCORE\\*2-1的值，$((NCORE\\*2-1)) 计算 NCORE\\*2-1\ndo\necho $I\ndone\n\ngrep -c '^processor' /proc/cpuinfo      #统计匹配到以/proc/cpuinfo中processor 开头的数量\n```\n","source":"_posts/rh124-recored.md","raw":"---\ntitle: Recored  零散记忆\nurl: 247.html\nid: 247\ncategories:\n  - RHEL124\ndate: 2018-04-20 10:11:27\ntags:\n---\n```sh\nLANG=zh_CN.utf8    #设置语言，临时\n\nlocale    #检查语言\n\nlocalectl set-locale LANG=zh_CN.utf8    #设备系统默认语言\n\nvi /etc/locale.conf    #语言的配置文件  \n```\ntty2等本地文件控制台可显示的字体比gnome-terminal和ssh会话受到的局限多。例如，本地文件控制台中的日语、韩语和中文字符显示可能会不正常。因此最好将英语或其它包含拉丁语字符的语言用于系统的文本控制台。类似的，受到的输入法也受到限制比较多。\n```sh\nyum install yum-langpacks #先安装才能使用。  \n\nyum langavaliable     #查看系统可用语言包  \n\nyum langlist\n\nyum langinstall code  \n```\n[http://fedoraproject.org/wiki/QA:Langpack\\_Yum\\_Application](http://fedoraproject.org/wiki/QA:Langpack_Yum_Application)  \n\n```sh  \n\nNCORE=$( grep -c '^processor' /proc/cpuinfo)    #查看CPU核数\nfor I in $(  seq $((NCORE\\*2-1)))    #设置for 循环，seq 生成序列来自NCORE\\*2-1的值，$((NCORE\\*2-1)) 计算 NCORE\\*2-1\ndo\necho $I\ndone\n\ngrep -c '^processor' /proc/cpuinfo      #统计匹配到以/proc/cpuinfo中processor 开头的数量\n```\n","slug":"rh124-recored","published":1,"updated":"2019-01-06T16:32:52.971Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqhze000slxkjou3kiqnj","content":"<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LANG=zh_CN.utf8    <span class=\"comment\">#设置语言，临时</span></span><br><span class=\"line\"></span><br><span class=\"line\">locale    <span class=\"comment\">#检查语言</span></span><br><span class=\"line\"></span><br><span class=\"line\">localectl <span class=\"built_in\">set</span>-locale LANG=zh_CN.utf8    <span class=\"comment\">#设备系统默认语言</span></span><br><span class=\"line\"></span><br><span class=\"line\">vi /etc/locale.conf    <span class=\"comment\">#语言的配置文件</span></span><br></pre></td></tr></table></figure>\n<p>tty2等本地文件控制台可显示的字体比gnome-terminal和ssh会话受到的局限多。例如，本地文件控制台中的日语、韩语和中文字符显示可能会不正常。因此最好将英语或其它包含拉丁语字符的语言用于系统的文本控制台。类似的，受到的输入法也受到限制比较多。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install yum-langpacks <span class=\"comment\">#先安装才能使用。  </span></span><br><span class=\"line\"></span><br><span class=\"line\">yum langavaliable     <span class=\"comment\">#查看系统可用语言包  </span></span><br><span class=\"line\"></span><br><span class=\"line\">yum langlist</span><br><span class=\"line\"></span><br><span class=\"line\">yum langinstall code</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://fedoraproject.org/wiki/QA:Langpack_Yum_Application\" target=\"_blank\" rel=\"noopener\">http://fedoraproject.org/wiki/QA:Langpack_Yum_Application</a>  </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">NCORE=$( grep -c <span class=\"string\">'^processor'</span> /proc/cpuinfo)    <span class=\"comment\">#查看CPU核数</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> I <span class=\"keyword\">in</span> $(  seq $((NCORE\\*2-1)))    <span class=\"comment\">#设置for 循环，seq 生成序列来自NCORE\\*2-1的值，$((NCORE\\*2-1)) 计算 NCORE\\*2-1</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$I</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">grep -c <span class=\"string\">'^processor'</span> /proc/cpuinfo      <span class=\"comment\">#统计匹配到以/proc/cpuinfo中processor 开头的数量</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LANG=zh_CN.utf8    <span class=\"comment\">#设置语言，临时</span></span><br><span class=\"line\"></span><br><span class=\"line\">locale    <span class=\"comment\">#检查语言</span></span><br><span class=\"line\"></span><br><span class=\"line\">localectl <span class=\"built_in\">set</span>-locale LANG=zh_CN.utf8    <span class=\"comment\">#设备系统默认语言</span></span><br><span class=\"line\"></span><br><span class=\"line\">vi /etc/locale.conf    <span class=\"comment\">#语言的配置文件</span></span><br></pre></td></tr></table></figure>\n<p>tty2等本地文件控制台可显示的字体比gnome-terminal和ssh会话受到的局限多。例如，本地文件控制台中的日语、韩语和中文字符显示可能会不正常。因此最好将英语或其它包含拉丁语字符的语言用于系统的文本控制台。类似的，受到的输入法也受到限制比较多。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install yum-langpacks <span class=\"comment\">#先安装才能使用。  </span></span><br><span class=\"line\"></span><br><span class=\"line\">yum langavaliable     <span class=\"comment\">#查看系统可用语言包  </span></span><br><span class=\"line\"></span><br><span class=\"line\">yum langlist</span><br><span class=\"line\"></span><br><span class=\"line\">yum langinstall code</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://fedoraproject.org/wiki/QA:Langpack_Yum_Application\" target=\"_blank\" rel=\"noopener\">http://fedoraproject.org/wiki/QA:Langpack_Yum_Application</a>  </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">NCORE=$( grep -c <span class=\"string\">'^processor'</span> /proc/cpuinfo)    <span class=\"comment\">#查看CPU核数</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> I <span class=\"keyword\">in</span> $(  seq $((NCORE\\*2-1)))    <span class=\"comment\">#设置for 循环，seq 生成序列来自NCORE\\*2-1的值，$((NCORE\\*2-1)) 计算 NCORE\\*2-1</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$I</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">grep -c <span class=\"string\">'^processor'</span> /proc/cpuinfo      <span class=\"comment\">#统计匹配到以/proc/cpuinfo中processor 开头的数量</span></span><br></pre></td></tr></table></figure>\n"},{"title":"RH134 第一章 使用kickstart自动安装","url":"312.html","id":"312","date":"2018-05-05T05:24:56.000Z","_content":"\nKickstart 配置文件以一个命令列表开关，这些命令定义将如何安装目录计算机。以#字符开关的行是安装程序将会忽略的注释。其它部分开头是以%字符打头的行，结尾是包含%end指令的行。\n\n%packages 部分指定要在目标系统上安装的软件，单个软件包可以根据名称（不带版本）指定。\n\n软件包组可以根据名称或ID指定。并以@字符开关。\n\n环境组（软件包组的组）可使用@^ 指定，后面紧跟环境组名或ID。组具有必需、默认和可选组件。通常kickstart 将安装必需组件和默认组件。\n\n以 \\- 字符开头的软件包或组名将补排除在安装以外，除非它们为必需，或因其它软件包的RPM依赖关系而安装。\n\n还有两个部分是%pre 和%post 脚本。%post 更为常见。它在所有软件都已安装后对系统进程配置。%pre 脚本在进行任何磁盘分区之前执行。\n\n必需先指定配置命令。%pre 、 %post 和%packages 可以在配置命令之后以任何顺序出现。  \n\n#### kickstart 配置文件命令\n\n##### 安装命令\n\n###### url:指定安装介质位置\n\nurl --url=\"ftp://install server.example.com/pub/RHEL7/dvd\"\n\nrepo : 此选项告知Anaconda 在何处查找安装软件包。此选项必须指向有效的yum 存储库。\n\nrepo --name=\"Custom Packages\" --baseurl=\"ftp://repo.example.com/custom\"\n\n[](http://ftp://repo.example.com/custom\")  \n\ntext: 强制进行文本模式安装\n\nvnc:允许通过VNC远程查看图形安装。\n\nvnc --password=redhat\n\naskmethod:当CD-ROM 驱动器中检测到安装介质时，不自动使用CD-ROM作为软件包来源。\n\n###### 分区命令：\n\nclearpart:在安装之前清除指定分区\n\nclearpart --all --drives=sda,sdb --initlabel\n\npart: 指定分区大小、格式、名称\n\npart /home --fstype=ext4 --label=homes --size=4096 --maxsize=8192 --grow\n\nignoredisk: 安装的时候忽略指定盘\n\nignoredsk --drives=sdc\n\nbootloader :定义安装引导分区\n\nbootloader --location=mbr --boot-drive=sda\n\nvolgroup,logvol: 创建LVM卷组和逻辑卷\n\npart pv.01 --size=8192\nvolgroup myvg pv.01\nlogvol / --vgname=myvg --fstype=xfs --size=2048 --name=rootvol --grow\nlogvol /var --vgname=myvg --fstype=xfs --size=4096 --name=varvol\n\n\n\nzerombr: 格式未被识别的磁盘将被初始化。\n\n###### 网络命令\n\nnetwork:配置目标系统的网络信息，并激活安装程序环境中的网络设备。\n\nnetwork --device=eth0 --bootproto=dhcp\n\nfirewall : 此选项定义在目标系统上如何配置防火墙\n\nfirewall --enabled --service=ssh,cups\n\n\n##### 配置命令：\n\nlang : 此必需命令设置安装时需要使用的语言和已经安装系统的默认语言\n\nlang en_US.UTF-8\n\nkeyboard: 此必需命令，设置系统键盘类型。\n\nkeyboard --vckeymap=us --xlayouts='us','us'\n\ntimezone :定义时区、NTP server及硬件时钟是否使用UTC\n\ntimezone --utc --ntpservers=time.example.com Europe/amsterdam\n\nauth: 此必需选项设置系统身份认证选项\n\nauth --useshadow --enablemd5 --passalgo=sha512\n\nrootpw: 定义root初始密码\n\nrootpw --plaintext redhat    #明文\nrootpw --iscrypted $6$KUnFfrTzOBjv.PiH$YlBbOtXBkWzoMuRfb0.SpbQ....XDR1UuchoMG1    #加密\n\nselinux : 设置安装系统后selinux状态\n\nselinux --enforcing\n\nservices : 修改默认运行级别下将运行的默认服务集合。\n\nservices --disabled=network,iptables,ip6tables --enabled=NetworkManager,firewalld\n\ngroup,user :在系统上创建本地用户和组\n\ngroup --name=admins --gid=1001\nuser --name=jode --gecos=\"john doe\" --groups=admins --password=changeme --plaintext\n\n##### 杂项命令：\n\nlogging :此命令定义安装期间Anaconda 将如何进行日志记录。\n\nlogging --host=loghost.example.com --level=info\n\nfirstboot: 确定系统首次启动时firestboot 是否启动\n\nfirstboot --disabled\n\nreboot、poweroff 、halt ： 指定安装结束后就发生什么情况。  \n\npykickstart软件包中的ksverdiff 程序可以识别两个版本间kickstart文件语法中的区别，如ksverdiff -f RHEL6 -t RHEL7 ,将识别RHEL6到RHEL7 的语法更改。可用版本在/usr/lib/python2.7/sit-packages/pykickstart/version.py。yum install pykickstart 。  \n\n\n\n* * *\n\n命令部分参考：\n\n![图片.png](1525422261580488.png)\n\n安装软件部分\n\n![图片.png](1525422300234129.png)\n\n配置脚本部分\n\n![图片.png](1525422328135998.png)\n\n![图片.png](1525422388734744.png)\n\n使用system-config-kickstart 创建kickstart文件。或者使用编辑器创建kickstart文件（参考anaconda-ks.cfg 默认在root的家目录下），使用编辑的几种情况：\n\n1、GUI或system-config-kickstart 不可用\n\n2、需要高级磁盘分区配置说明。system-config-kickstart 不支持LVM和RAID\n\n3、需要包含或者忽略单个包（而不仅仅是组）\n\n4、%prc 和%post 需要更高级的脚本。  \n\nksvalidator 检查配置语法，它将确保关键字和选项的正确使用，无法验证url路径、单个数据包或组，也无法验证%post 和%pre 脚本的任何部分\n\n##### 通过修改系统启动项，指定配置文件。  \n\n##### 启动方式  \n\n###### 指定配置文件方式  \n\n网络服务器,FTP,HTTP,NFS  \n\nks=[http://server/dir/file](http://server/dir/file)  \n\nks=[ftp://server/dir/file](http://ftp://server/dir/file)  \n\nks=nfs:server:/dir/file\n\n\n\n###### USB磁盘或CD-ROM  \n\nks=hd:device:/dir/file\n\nks=cdrom:/dir/file  \n\n[完整参数介绍](https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/installation_guide/sect-kickstart-syntax)\n","source":"_posts/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85.md","raw":"---\ntitle: RH134 第一章 使用kickstart自动安装\nurl: 312.html\nid: 312\ncategories:\n  - RHEL134\ndate: 2018-05-05 13:24:56\ntags:\n  - pxe\n---\n\nKickstart 配置文件以一个命令列表开关，这些命令定义将如何安装目录计算机。以#字符开关的行是安装程序将会忽略的注释。其它部分开头是以%字符打头的行，结尾是包含%end指令的行。\n\n%packages 部分指定要在目标系统上安装的软件，单个软件包可以根据名称（不带版本）指定。\n\n软件包组可以根据名称或ID指定。并以@字符开关。\n\n环境组（软件包组的组）可使用@^ 指定，后面紧跟环境组名或ID。组具有必需、默认和可选组件。通常kickstart 将安装必需组件和默认组件。\n\n以 \\- 字符开头的软件包或组名将补排除在安装以外，除非它们为必需，或因其它软件包的RPM依赖关系而安装。\n\n还有两个部分是%pre 和%post 脚本。%post 更为常见。它在所有软件都已安装后对系统进程配置。%pre 脚本在进行任何磁盘分区之前执行。\n\n必需先指定配置命令。%pre 、 %post 和%packages 可以在配置命令之后以任何顺序出现。  \n\n#### kickstart 配置文件命令\n\n##### 安装命令\n\n###### url:指定安装介质位置\n\nurl --url=\"ftp://install server.example.com/pub/RHEL7/dvd\"\n\nrepo : 此选项告知Anaconda 在何处查找安装软件包。此选项必须指向有效的yum 存储库。\n\nrepo --name=\"Custom Packages\" --baseurl=\"ftp://repo.example.com/custom\"\n\n[](http://ftp://repo.example.com/custom\")  \n\ntext: 强制进行文本模式安装\n\nvnc:允许通过VNC远程查看图形安装。\n\nvnc --password=redhat\n\naskmethod:当CD-ROM 驱动器中检测到安装介质时，不自动使用CD-ROM作为软件包来源。\n\n###### 分区命令：\n\nclearpart:在安装之前清除指定分区\n\nclearpart --all --drives=sda,sdb --initlabel\n\npart: 指定分区大小、格式、名称\n\npart /home --fstype=ext4 --label=homes --size=4096 --maxsize=8192 --grow\n\nignoredisk: 安装的时候忽略指定盘\n\nignoredsk --drives=sdc\n\nbootloader :定义安装引导分区\n\nbootloader --location=mbr --boot-drive=sda\n\nvolgroup,logvol: 创建LVM卷组和逻辑卷\n\npart pv.01 --size=8192\nvolgroup myvg pv.01\nlogvol / --vgname=myvg --fstype=xfs --size=2048 --name=rootvol --grow\nlogvol /var --vgname=myvg --fstype=xfs --size=4096 --name=varvol\n\n\n\nzerombr: 格式未被识别的磁盘将被初始化。\n\n###### 网络命令\n\nnetwork:配置目标系统的网络信息，并激活安装程序环境中的网络设备。\n\nnetwork --device=eth0 --bootproto=dhcp\n\nfirewall : 此选项定义在目标系统上如何配置防火墙\n\nfirewall --enabled --service=ssh,cups\n\n\n##### 配置命令：\n\nlang : 此必需命令设置安装时需要使用的语言和已经安装系统的默认语言\n\nlang en_US.UTF-8\n\nkeyboard: 此必需命令，设置系统键盘类型。\n\nkeyboard --vckeymap=us --xlayouts='us','us'\n\ntimezone :定义时区、NTP server及硬件时钟是否使用UTC\n\ntimezone --utc --ntpservers=time.example.com Europe/amsterdam\n\nauth: 此必需选项设置系统身份认证选项\n\nauth --useshadow --enablemd5 --passalgo=sha512\n\nrootpw: 定义root初始密码\n\nrootpw --plaintext redhat    #明文\nrootpw --iscrypted $6$KUnFfrTzOBjv.PiH$YlBbOtXBkWzoMuRfb0.SpbQ....XDR1UuchoMG1    #加密\n\nselinux : 设置安装系统后selinux状态\n\nselinux --enforcing\n\nservices : 修改默认运行级别下将运行的默认服务集合。\n\nservices --disabled=network,iptables,ip6tables --enabled=NetworkManager,firewalld\n\ngroup,user :在系统上创建本地用户和组\n\ngroup --name=admins --gid=1001\nuser --name=jode --gecos=\"john doe\" --groups=admins --password=changeme --plaintext\n\n##### 杂项命令：\n\nlogging :此命令定义安装期间Anaconda 将如何进行日志记录。\n\nlogging --host=loghost.example.com --level=info\n\nfirstboot: 确定系统首次启动时firestboot 是否启动\n\nfirstboot --disabled\n\nreboot、poweroff 、halt ： 指定安装结束后就发生什么情况。  \n\npykickstart软件包中的ksverdiff 程序可以识别两个版本间kickstart文件语法中的区别，如ksverdiff -f RHEL6 -t RHEL7 ,将识别RHEL6到RHEL7 的语法更改。可用版本在/usr/lib/python2.7/sit-packages/pykickstart/version.py。yum install pykickstart 。  \n\n\n\n* * *\n\n命令部分参考：\n\n![图片.png](1525422261580488.png)\n\n安装软件部分\n\n![图片.png](1525422300234129.png)\n\n配置脚本部分\n\n![图片.png](1525422328135998.png)\n\n![图片.png](1525422388734744.png)\n\n使用system-config-kickstart 创建kickstart文件。或者使用编辑器创建kickstart文件（参考anaconda-ks.cfg 默认在root的家目录下），使用编辑的几种情况：\n\n1、GUI或system-config-kickstart 不可用\n\n2、需要高级磁盘分区配置说明。system-config-kickstart 不支持LVM和RAID\n\n3、需要包含或者忽略单个包（而不仅仅是组）\n\n4、%prc 和%post 需要更高级的脚本。  \n\nksvalidator 检查配置语法，它将确保关键字和选项的正确使用，无法验证url路径、单个数据包或组，也无法验证%post 和%pre 脚本的任何部分\n\n##### 通过修改系统启动项，指定配置文件。  \n\n##### 启动方式  \n\n###### 指定配置文件方式  \n\n网络服务器,FTP,HTTP,NFS  \n\nks=[http://server/dir/file](http://server/dir/file)  \n\nks=[ftp://server/dir/file](http://ftp://server/dir/file)  \n\nks=nfs:server:/dir/file\n\n\n\n###### USB磁盘或CD-ROM  \n\nks=hd:device:/dir/file\n\nks=cdrom:/dir/file  \n\n[完整参数介绍](https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/installation_guide/sect-kickstart-syntax)\n","slug":"rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85","published":1,"updated":"2019-01-06T16:43:41.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqhzf000ulxkjcd2n49ns","content":"<p>Kickstart 配置文件以一个命令列表开关，这些命令定义将如何安装目录计算机。以#字符开关的行是安装程序将会忽略的注释。其它部分开头是以%字符打头的行，结尾是包含%end指令的行。</p>\n<p>%packages 部分指定要在目标系统上安装的软件，单个软件包可以根据名称（不带版本）指定。</p>\n<p>软件包组可以根据名称或ID指定。并以@字符开关。</p>\n<p>环境组（软件包组的组）可使用@^ 指定，后面紧跟环境组名或ID。组具有必需、默认和可选组件。通常kickstart 将安装必需组件和默认组件。</p>\n<p>以 - 字符开头的软件包或组名将补排除在安装以外，除非它们为必需，或因其它软件包的RPM依赖关系而安装。</p>\n<p>还有两个部分是%pre 和%post 脚本。%post 更为常见。它在所有软件都已安装后对系统进程配置。%pre 脚本在进行任何磁盘分区之前执行。</p>\n<p>必需先指定配置命令。%pre 、 %post 和%packages 可以在配置命令之后以任何顺序出现。  </p>\n<h4 id=\"kickstart-配置文件命令\"><a href=\"#kickstart-配置文件命令\" class=\"headerlink\" title=\"kickstart 配置文件命令\"></a>kickstart 配置文件命令</h4><h5 id=\"安装命令\"><a href=\"#安装命令\" class=\"headerlink\" title=\"安装命令\"></a>安装命令</h5><h6 id=\"url-指定安装介质位置\"><a href=\"#url-指定安装介质位置\" class=\"headerlink\" title=\"url:指定安装介质位置\"></a>url:指定安装介质位置</h6><p>url –url=”<a href=\"ftp://install\" target=\"_blank\" rel=\"noopener\">ftp://install</a> server.example.com/pub/RHEL7/dvd”</p>\n<p>repo : 此选项告知Anaconda 在何处查找安装软件包。此选项必须指向有效的yum 存储库。</p>\n<p>repo –name=”Custom Packages” –baseurl=”<a href=\"ftp://repo.example.com/custom&quot;\" target=\"_blank\" rel=\"noopener\">ftp://repo.example.com/custom&quot;</a></p>\n<p><a href=\"http://ftp://repo.example.com/custom&quot;\" target=\"_blank\" rel=\"noopener\"></a>  </p>\n<p>text: 强制进行文本模式安装</p>\n<p>vnc:允许通过VNC远程查看图形安装。</p>\n<p>vnc –password=redhat</p>\n<p>askmethod:当CD-ROM 驱动器中检测到安装介质时，不自动使用CD-ROM作为软件包来源。</p>\n<h6 id=\"分区命令：\"><a href=\"#分区命令：\" class=\"headerlink\" title=\"分区命令：\"></a>分区命令：</h6><p>clearpart:在安装之前清除指定分区</p>\n<p>clearpart –all –drives=sda,sdb –initlabel</p>\n<p>part: 指定分区大小、格式、名称</p>\n<p>part /home –fstype=ext4 –label=homes –size=4096 –maxsize=8192 –grow</p>\n<p>ignoredisk: 安装的时候忽略指定盘</p>\n<p>ignoredsk –drives=sdc</p>\n<p>bootloader :定义安装引导分区</p>\n<p>bootloader –location=mbr –boot-drive=sda</p>\n<p>volgroup,logvol: 创建LVM卷组和逻辑卷</p>\n<p>part pv.01 –size=8192<br>volgroup myvg pv.01<br>logvol / –vgname=myvg –fstype=xfs –size=2048 –name=rootvol –grow<br>logvol /var –vgname=myvg –fstype=xfs –size=4096 –name=varvol</p>\n<p>zerombr: 格式未被识别的磁盘将被初始化。</p>\n<h6 id=\"网络命令\"><a href=\"#网络命令\" class=\"headerlink\" title=\"网络命令\"></a>网络命令</h6><p>network:配置目标系统的网络信息，并激活安装程序环境中的网络设备。</p>\n<p>network –device=eth0 –bootproto=dhcp</p>\n<p>firewall : 此选项定义在目标系统上如何配置防火墙</p>\n<p>firewall –enabled –service=ssh,cups</p>\n<h5 id=\"配置命令：\"><a href=\"#配置命令：\" class=\"headerlink\" title=\"配置命令：\"></a>配置命令：</h5><p>lang : 此必需命令设置安装时需要使用的语言和已经安装系统的默认语言</p>\n<p>lang en_US.UTF-8</p>\n<p>keyboard: 此必需命令，设置系统键盘类型。</p>\n<p>keyboard –vckeymap=us –xlayouts=’us’,’us’</p>\n<p>timezone :定义时区、NTP server及硬件时钟是否使用UTC</p>\n<p>timezone –utc –ntpservers=time.example.com Europe/amsterdam</p>\n<p>auth: 此必需选项设置系统身份认证选项</p>\n<p>auth –useshadow –enablemd5 –passalgo=sha512</p>\n<p>rootpw: 定义root初始密码</p>\n<p>rootpw –plaintext redhat    #明文<br>rootpw –iscrypted $6$KUnFfrTzOBjv.PiH$YlBbOtXBkWzoMuRfb0.SpbQ….XDR1UuchoMG1    #加密</p>\n<p>selinux : 设置安装系统后selinux状态</p>\n<p>selinux –enforcing</p>\n<p>services : 修改默认运行级别下将运行的默认服务集合。</p>\n<p>services –disabled=network,iptables,ip6tables –enabled=NetworkManager,firewalld</p>\n<p>group,user :在系统上创建本地用户和组</p>\n<p>group –name=admins –gid=1001<br>user –name=jode –gecos=”john doe” –groups=admins –password=changeme –plaintext</p>\n<h5 id=\"杂项命令：\"><a href=\"#杂项命令：\" class=\"headerlink\" title=\"杂项命令：\"></a>杂项命令：</h5><p>logging :此命令定义安装期间Anaconda 将如何进行日志记录。</p>\n<p>logging –host=loghost.example.com –level=info</p>\n<p>firstboot: 确定系统首次启动时firestboot 是否启动</p>\n<p>firstboot –disabled</p>\n<p>reboot、poweroff 、halt ： 指定安装结束后就发生什么情况。  </p>\n<p>pykickstart软件包中的ksverdiff 程序可以识别两个版本间kickstart文件语法中的区别，如ksverdiff -f RHEL6 -t RHEL7 ,将识别RHEL6到RHEL7 的语法更改。可用版本在/usr/lib/python2.7/sit-packages/pykickstart/version.py。yum install pykickstart 。  </p>\n<hr>\n<p>命令部分参考：</p>\n<p><img src=\"/2018/05/05/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85/1525422261580488.png\" alt=\"图片.png\"></p>\n<p>安装软件部分</p>\n<p><img src=\"/2018/05/05/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85/1525422300234129.png\" alt=\"图片.png\"></p>\n<p>配置脚本部分</p>\n<p><img src=\"/2018/05/05/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85/1525422328135998.png\" alt=\"图片.png\"></p>\n<p><img src=\"/2018/05/05/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85/1525422388734744.png\" alt=\"图片.png\"></p>\n<p>使用system-config-kickstart 创建kickstart文件。或者使用编辑器创建kickstart文件（参考anaconda-ks.cfg 默认在root的家目录下），使用编辑的几种情况：</p>\n<p>1、GUI或system-config-kickstart 不可用</p>\n<p>2、需要高级磁盘分区配置说明。system-config-kickstart 不支持LVM和RAID</p>\n<p>3、需要包含或者忽略单个包（而不仅仅是组）</p>\n<p>4、%prc 和%post 需要更高级的脚本。  </p>\n<p>ksvalidator 检查配置语法，它将确保关键字和选项的正确使用，无法验证url路径、单个数据包或组，也无法验证%post 和%pre 脚本的任何部分</p>\n<h5 id=\"通过修改系统启动项，指定配置文件。\"><a href=\"#通过修改系统启动项，指定配置文件。\" class=\"headerlink\" title=\"通过修改系统启动项，指定配置文件。\"></a>通过修改系统启动项，指定配置文件。</h5><h5 id=\"启动方式\"><a href=\"#启动方式\" class=\"headerlink\" title=\"启动方式\"></a>启动方式</h5><h6 id=\"指定配置文件方式\"><a href=\"#指定配置文件方式\" class=\"headerlink\" title=\"指定配置文件方式\"></a>指定配置文件方式</h6><p>网络服务器,FTP,HTTP,NFS  </p>\n<p>ks=<a href=\"http://server/dir/file\" target=\"_blank\" rel=\"noopener\">http://server/dir/file</a>  </p>\n<p>ks=<a href=\"http://ftp://server/dir/file\" target=\"_blank\" rel=\"noopener\">ftp://server/dir/file</a>  </p>\n<p>ks=nfs:server:/dir/file</p>\n<h6 id=\"USB磁盘或CD-ROM\"><a href=\"#USB磁盘或CD-ROM\" class=\"headerlink\" title=\"USB磁盘或CD-ROM\"></a>USB磁盘或CD-ROM</h6><p>ks=hd:device:/dir/file</p>\n<p>ks=cdrom:/dir/file  </p>\n<p><a href=\"https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/installation_guide/sect-kickstart-syntax\" target=\"_blank\" rel=\"noopener\">完整参数介绍</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Kickstart 配置文件以一个命令列表开关，这些命令定义将如何安装目录计算机。以#字符开关的行是安装程序将会忽略的注释。其它部分开头是以%字符打头的行，结尾是包含%end指令的行。</p>\n<p>%packages 部分指定要在目标系统上安装的软件，单个软件包可以根据名称（不带版本）指定。</p>\n<p>软件包组可以根据名称或ID指定。并以@字符开关。</p>\n<p>环境组（软件包组的组）可使用@^ 指定，后面紧跟环境组名或ID。组具有必需、默认和可选组件。通常kickstart 将安装必需组件和默认组件。</p>\n<p>以 - 字符开头的软件包或组名将补排除在安装以外，除非它们为必需，或因其它软件包的RPM依赖关系而安装。</p>\n<p>还有两个部分是%pre 和%post 脚本。%post 更为常见。它在所有软件都已安装后对系统进程配置。%pre 脚本在进行任何磁盘分区之前执行。</p>\n<p>必需先指定配置命令。%pre 、 %post 和%packages 可以在配置命令之后以任何顺序出现。  </p>\n<h4 id=\"kickstart-配置文件命令\"><a href=\"#kickstart-配置文件命令\" class=\"headerlink\" title=\"kickstart 配置文件命令\"></a>kickstart 配置文件命令</h4><h5 id=\"安装命令\"><a href=\"#安装命令\" class=\"headerlink\" title=\"安装命令\"></a>安装命令</h5><h6 id=\"url-指定安装介质位置\"><a href=\"#url-指定安装介质位置\" class=\"headerlink\" title=\"url:指定安装介质位置\"></a>url:指定安装介质位置</h6><p>url –url=”<a href=\"ftp://install\" target=\"_blank\" rel=\"noopener\">ftp://install</a> server.example.com/pub/RHEL7/dvd”</p>\n<p>repo : 此选项告知Anaconda 在何处查找安装软件包。此选项必须指向有效的yum 存储库。</p>\n<p>repo –name=”Custom Packages” –baseurl=”<a href=\"ftp://repo.example.com/custom&quot;\" target=\"_blank\" rel=\"noopener\">ftp://repo.example.com/custom&quot;</a></p>\n<p><a href=\"http://ftp://repo.example.com/custom&quot;\" target=\"_blank\" rel=\"noopener\"></a>  </p>\n<p>text: 强制进行文本模式安装</p>\n<p>vnc:允许通过VNC远程查看图形安装。</p>\n<p>vnc –password=redhat</p>\n<p>askmethod:当CD-ROM 驱动器中检测到安装介质时，不自动使用CD-ROM作为软件包来源。</p>\n<h6 id=\"分区命令：\"><a href=\"#分区命令：\" class=\"headerlink\" title=\"分区命令：\"></a>分区命令：</h6><p>clearpart:在安装之前清除指定分区</p>\n<p>clearpart –all –drives=sda,sdb –initlabel</p>\n<p>part: 指定分区大小、格式、名称</p>\n<p>part /home –fstype=ext4 –label=homes –size=4096 –maxsize=8192 –grow</p>\n<p>ignoredisk: 安装的时候忽略指定盘</p>\n<p>ignoredsk –drives=sdc</p>\n<p>bootloader :定义安装引导分区</p>\n<p>bootloader –location=mbr –boot-drive=sda</p>\n<p>volgroup,logvol: 创建LVM卷组和逻辑卷</p>\n<p>part pv.01 –size=8192<br>volgroup myvg pv.01<br>logvol / –vgname=myvg –fstype=xfs –size=2048 –name=rootvol –grow<br>logvol /var –vgname=myvg –fstype=xfs –size=4096 –name=varvol</p>\n<p>zerombr: 格式未被识别的磁盘将被初始化。</p>\n<h6 id=\"网络命令\"><a href=\"#网络命令\" class=\"headerlink\" title=\"网络命令\"></a>网络命令</h6><p>network:配置目标系统的网络信息，并激活安装程序环境中的网络设备。</p>\n<p>network –device=eth0 –bootproto=dhcp</p>\n<p>firewall : 此选项定义在目标系统上如何配置防火墙</p>\n<p>firewall –enabled –service=ssh,cups</p>\n<h5 id=\"配置命令：\"><a href=\"#配置命令：\" class=\"headerlink\" title=\"配置命令：\"></a>配置命令：</h5><p>lang : 此必需命令设置安装时需要使用的语言和已经安装系统的默认语言</p>\n<p>lang en_US.UTF-8</p>\n<p>keyboard: 此必需命令，设置系统键盘类型。</p>\n<p>keyboard –vckeymap=us –xlayouts=’us’,’us’</p>\n<p>timezone :定义时区、NTP server及硬件时钟是否使用UTC</p>\n<p>timezone –utc –ntpservers=time.example.com Europe/amsterdam</p>\n<p>auth: 此必需选项设置系统身份认证选项</p>\n<p>auth –useshadow –enablemd5 –passalgo=sha512</p>\n<p>rootpw: 定义root初始密码</p>\n<p>rootpw –plaintext redhat    #明文<br>rootpw –iscrypted $6$KUnFfrTzOBjv.PiH$YlBbOtXBkWzoMuRfb0.SpbQ….XDR1UuchoMG1    #加密</p>\n<p>selinux : 设置安装系统后selinux状态</p>\n<p>selinux –enforcing</p>\n<p>services : 修改默认运行级别下将运行的默认服务集合。</p>\n<p>services –disabled=network,iptables,ip6tables –enabled=NetworkManager,firewalld</p>\n<p>group,user :在系统上创建本地用户和组</p>\n<p>group –name=admins –gid=1001<br>user –name=jode –gecos=”john doe” –groups=admins –password=changeme –plaintext</p>\n<h5 id=\"杂项命令：\"><a href=\"#杂项命令：\" class=\"headerlink\" title=\"杂项命令：\"></a>杂项命令：</h5><p>logging :此命令定义安装期间Anaconda 将如何进行日志记录。</p>\n<p>logging –host=loghost.example.com –level=info</p>\n<p>firstboot: 确定系统首次启动时firestboot 是否启动</p>\n<p>firstboot –disabled</p>\n<p>reboot、poweroff 、halt ： 指定安装结束后就发生什么情况。  </p>\n<p>pykickstart软件包中的ksverdiff 程序可以识别两个版本间kickstart文件语法中的区别，如ksverdiff -f RHEL6 -t RHEL7 ,将识别RHEL6到RHEL7 的语法更改。可用版本在/usr/lib/python2.7/sit-packages/pykickstart/version.py。yum install pykickstart 。  </p>\n<hr>\n<p>命令部分参考：</p>\n<p><img src=\"/2018/05/05/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85/1525422261580488.png\" alt=\"图片.png\"></p>\n<p>安装软件部分</p>\n<p><img src=\"/2018/05/05/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85/1525422300234129.png\" alt=\"图片.png\"></p>\n<p>配置脚本部分</p>\n<p><img src=\"/2018/05/05/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85/1525422328135998.png\" alt=\"图片.png\"></p>\n<p><img src=\"/2018/05/05/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85/1525422388734744.png\" alt=\"图片.png\"></p>\n<p>使用system-config-kickstart 创建kickstart文件。或者使用编辑器创建kickstart文件（参考anaconda-ks.cfg 默认在root的家目录下），使用编辑的几种情况：</p>\n<p>1、GUI或system-config-kickstart 不可用</p>\n<p>2、需要高级磁盘分区配置说明。system-config-kickstart 不支持LVM和RAID</p>\n<p>3、需要包含或者忽略单个包（而不仅仅是组）</p>\n<p>4、%prc 和%post 需要更高级的脚本。  </p>\n<p>ksvalidator 检查配置语法，它将确保关键字和选项的正确使用，无法验证url路径、单个数据包或组，也无法验证%post 和%pre 脚本的任何部分</p>\n<h5 id=\"通过修改系统启动项，指定配置文件。\"><a href=\"#通过修改系统启动项，指定配置文件。\" class=\"headerlink\" title=\"通过修改系统启动项，指定配置文件。\"></a>通过修改系统启动项，指定配置文件。</h5><h5 id=\"启动方式\"><a href=\"#启动方式\" class=\"headerlink\" title=\"启动方式\"></a>启动方式</h5><h6 id=\"指定配置文件方式\"><a href=\"#指定配置文件方式\" class=\"headerlink\" title=\"指定配置文件方式\"></a>指定配置文件方式</h6><p>网络服务器,FTP,HTTP,NFS  </p>\n<p>ks=<a href=\"http://server/dir/file\" target=\"_blank\" rel=\"noopener\">http://server/dir/file</a>  </p>\n<p>ks=<a href=\"http://ftp://server/dir/file\" target=\"_blank\" rel=\"noopener\">ftp://server/dir/file</a>  </p>\n<p>ks=nfs:server:/dir/file</p>\n<h6 id=\"USB磁盘或CD-ROM\"><a href=\"#USB磁盘或CD-ROM\" class=\"headerlink\" title=\"USB磁盘或CD-ROM\"></a>USB磁盘或CD-ROM</h6><p>ks=hd:device:/dir/file</p>\n<p>ks=cdrom:/dir/file  </p>\n<p><a href=\"https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/installation_guide/sect-kickstart-syntax\" target=\"_blank\" rel=\"noopener\">完整参数介绍</a></p>\n"},{"title":"RH134 第五章 管理Linux 进程优先级","url":"362.html","id":"362","date":"2018-05-14T03:30:58.000Z","_content":"\n###### Linux 进程调度和多任务   \n\n   通过使用称为时间片的技术，Linux（和其它操作系统）实际能够运行的进程数（和线程数）可以超出可用的实际处理单元数。操作系统进程调度程序将在单个核心上的进程之间快速切换，从而给用户一种有多个进程在同时运行的印象。  \n\n相对优先级\n\n   由于不是每种进程都与其它进程同样重要，可告知高度程序为不同的进程使用不同的调度策略。常规系统上运行的大多数进程所使用的调度策略称为SCHED\\_OTHER(也称为SCHED\\_NORMAL),但还有一些其他策略可用于不同的目的。  \n\n   由于并非所有进程都以同样的方式创建，可为采用SCHED_NORMAL 策略运行的进程指定相对优先级。此优先级称为进程的 nice 值，一个进程可以有正好 40 种不同的 nice 值。这些 nice 值正好从 -20 到 19。默认情况下，进程将继承其父进程的 nice 级别，通常为 0 ， nice 值 级别越高，表示优先级越低（该进程容易将其 CPU 使用量让给其他进程）； nice 级别越低，表示优先级越高（该进程更加不倾向于让出CPU）。  \n\n![image.png](1526262567734231.png)\n\n###### nice 级别和权限\n\n   为很占CPU资源的进程设置较低的 nice 级别可能对同一系统上运行的其它进程的性能造成负面影响，所以仅允许 root 用户（更具体的说，具有 CAP\\_SYS\\_NICE 功能的用户）设置负 nice 级别以及降低现有进程的 nice 级别。  \n\n   普通非特权用户仅允许设置正的nice 级别。此外，他们只能对现有进程提升 nice 级别。而不能降低 nice 级别  \n\n###### TIP：\n\n   除 nice 级别以外，还有更多方法可以影响进程优先级和资源使用情况。有备用的高度程序策略和设置、控制组（cgroups）等等，但是 ,nice 级别是最容易的，并且系统管理员和普通用户都可以使用。  \n\n使用 nice 和 renice  影响进程优先级\n\n###### 查看 nice 级别\n\n   可以通过多种不同的方式查看现有进程的 nice 级别。大多数进程管理工具（如 gnome-system-monitor）默认情况下已显示 nice 级别，或可以配置为显示 nice 级别。  \n\n###### 使用top 显示 nice 级别\n\n   top 命令可用于通过交互方式查看（和管理）进程。在默认配置中，top 将显示与 nice 级别有关的两列：N1 表示实际 nice 级别，而PR将 nice 级别显示为映射到更大优先级队列： nice 级别 -20 映射到优先级 0 ，而 nice 级别 +19 映射到优先级39。  \n\n###### 使用ps 显示 nice 级别\n\n   ps 命令也可以显示进程的 nice 级别，但它在大多数默认输出格式中并不显示，然后，用户可以通过 ps 准备请求所需的列，而 nice 字段的名称为 nice   \n\n#ps 请求包括 pid 、名称和nice 级别，按 nice 级别降序排列：\n```sh\n[root@server0 ~]# ps axo pid,comm,nice --sort=-nice\n   PID COMMAND          NI\n   286 khugepaged       19\n   884 alsactl          19\n  2639 tracker-miner-f  19\n   285 ksmd              5\n   927 rtkit-daemon      1\n     1 systemd           0\n     2 kthreadd          0\n     3 ksoftirqd/0       0\n     7 migration/0       -\n     8 rcu_bh            0\n```\n某些进程的nice 级别可能报告为 - 。这些进程使用不同的高度策略运行，并且调度程序几乎将他们视为具有较高优先级。通过从ps 请求 cls 字段，可以显示调度程序策略。此字段中的 TS 表示该进程在 SCHED_NORMAL 下运行并且可以使用 nice 级别；任何其它内容都表示正在使用不同的调度程序策略。  \n\n###### 启动具有不同 nice 级别的进程\n\n启动进程时，它通常将继承父进程的 nice 级别。这表示从命令行启动一个进程时，它将与从其启动的shell进程具有相同的nice 级别。在大多数情况下，这将导致新进程运行的 nice 级别为 0 。\n\n要启动具有不同 nice 级别的进程，用户和系统管理员可以使用 nice 工具运行其命令。不带任何其它选项的情况下，运行 nice <COMMAND> 将启动 nice 级别为 10 的 <COMMAND>.通过 nice 命令使用 -n <NICELEVEL> 选项，可以选择其他 nice 级别。如：启动 nice 级别为 15 的命令 dogecoinminer 并将其立即发送到后台:\n```sh\nnice -n 15 dogecoinminer &\n```\n###### TIP:\n\n非特权用户允许设置正的 nice级别 （0 - 19 ）。只有 root 可以设置负的 nice级别 （- 20 到 -1）。\n\n###### 更改现有进程的 nice 级别\n\n可以在命令行中使用 renice 命令来更改现有进程的 nice 级别。 renice 命令的语法如下：\n\nrenice -n <NICELEVEL> <PID> ... （可以一次指定多个进程）\n\nrenice -n -7 $(pgrep origami@home)    #将所有origami@home进程的 nice 级别更改为 -7 \n\n###### TIP: \n\n普通用户仅允许提升 nice 级别，只有 root 才能使用 renice 降低 nice 级别。\n\n也可以使用 top 命令（以交互方式）更改进程的 nice 级别，在top 中，按 r ，然后跟要更改的 PID 和 新的 nice 级别  \n\n![image.png](1526266653786433.png)\n\n![image.png](1526266685205928.png)\n\n![image.png](1526266750818667.png)\n\n![image.png](1526266722562134.png)\n","source":"_posts/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7.md","raw":"---\ntitle: RH134 第五章 管理Linux 进程优先级\nurl: 362.html\nid: 362\ncategories:\n  - RHEL134\ndate: 2018-05-14 11:30:58\ntags:\n---\n\n###### Linux 进程调度和多任务   \n\n   通过使用称为时间片的技术，Linux（和其它操作系统）实际能够运行的进程数（和线程数）可以超出可用的实际处理单元数。操作系统进程调度程序将在单个核心上的进程之间快速切换，从而给用户一种有多个进程在同时运行的印象。  \n\n相对优先级\n\n   由于不是每种进程都与其它进程同样重要，可告知高度程序为不同的进程使用不同的调度策略。常规系统上运行的大多数进程所使用的调度策略称为SCHED\\_OTHER(也称为SCHED\\_NORMAL),但还有一些其他策略可用于不同的目的。  \n\n   由于并非所有进程都以同样的方式创建，可为采用SCHED_NORMAL 策略运行的进程指定相对优先级。此优先级称为进程的 nice 值，一个进程可以有正好 40 种不同的 nice 值。这些 nice 值正好从 -20 到 19。默认情况下，进程将继承其父进程的 nice 级别，通常为 0 ， nice 值 级别越高，表示优先级越低（该进程容易将其 CPU 使用量让给其他进程）； nice 级别越低，表示优先级越高（该进程更加不倾向于让出CPU）。  \n\n![image.png](1526262567734231.png)\n\n###### nice 级别和权限\n\n   为很占CPU资源的进程设置较低的 nice 级别可能对同一系统上运行的其它进程的性能造成负面影响，所以仅允许 root 用户（更具体的说，具有 CAP\\_SYS\\_NICE 功能的用户）设置负 nice 级别以及降低现有进程的 nice 级别。  \n\n   普通非特权用户仅允许设置正的nice 级别。此外，他们只能对现有进程提升 nice 级别。而不能降低 nice 级别  \n\n###### TIP：\n\n   除 nice 级别以外，还有更多方法可以影响进程优先级和资源使用情况。有备用的高度程序策略和设置、控制组（cgroups）等等，但是 ,nice 级别是最容易的，并且系统管理员和普通用户都可以使用。  \n\n使用 nice 和 renice  影响进程优先级\n\n###### 查看 nice 级别\n\n   可以通过多种不同的方式查看现有进程的 nice 级别。大多数进程管理工具（如 gnome-system-monitor）默认情况下已显示 nice 级别，或可以配置为显示 nice 级别。  \n\n###### 使用top 显示 nice 级别\n\n   top 命令可用于通过交互方式查看（和管理）进程。在默认配置中，top 将显示与 nice 级别有关的两列：N1 表示实际 nice 级别，而PR将 nice 级别显示为映射到更大优先级队列： nice 级别 -20 映射到优先级 0 ，而 nice 级别 +19 映射到优先级39。  \n\n###### 使用ps 显示 nice 级别\n\n   ps 命令也可以显示进程的 nice 级别，但它在大多数默认输出格式中并不显示，然后，用户可以通过 ps 准备请求所需的列，而 nice 字段的名称为 nice   \n\n#ps 请求包括 pid 、名称和nice 级别，按 nice 级别降序排列：\n```sh\n[root@server0 ~]# ps axo pid,comm,nice --sort=-nice\n   PID COMMAND          NI\n   286 khugepaged       19\n   884 alsactl          19\n  2639 tracker-miner-f  19\n   285 ksmd              5\n   927 rtkit-daemon      1\n     1 systemd           0\n     2 kthreadd          0\n     3 ksoftirqd/0       0\n     7 migration/0       -\n     8 rcu_bh            0\n```\n某些进程的nice 级别可能报告为 - 。这些进程使用不同的高度策略运行，并且调度程序几乎将他们视为具有较高优先级。通过从ps 请求 cls 字段，可以显示调度程序策略。此字段中的 TS 表示该进程在 SCHED_NORMAL 下运行并且可以使用 nice 级别；任何其它内容都表示正在使用不同的调度程序策略。  \n\n###### 启动具有不同 nice 级别的进程\n\n启动进程时，它通常将继承父进程的 nice 级别。这表示从命令行启动一个进程时，它将与从其启动的shell进程具有相同的nice 级别。在大多数情况下，这将导致新进程运行的 nice 级别为 0 。\n\n要启动具有不同 nice 级别的进程，用户和系统管理员可以使用 nice 工具运行其命令。不带任何其它选项的情况下，运行 nice <COMMAND> 将启动 nice 级别为 10 的 <COMMAND>.通过 nice 命令使用 -n <NICELEVEL> 选项，可以选择其他 nice 级别。如：启动 nice 级别为 15 的命令 dogecoinminer 并将其立即发送到后台:\n```sh\nnice -n 15 dogecoinminer &\n```\n###### TIP:\n\n非特权用户允许设置正的 nice级别 （0 - 19 ）。只有 root 可以设置负的 nice级别 （- 20 到 -1）。\n\n###### 更改现有进程的 nice 级别\n\n可以在命令行中使用 renice 命令来更改现有进程的 nice 级别。 renice 命令的语法如下：\n\nrenice -n <NICELEVEL> <PID> ... （可以一次指定多个进程）\n\nrenice -n -7 $(pgrep origami@home)    #将所有origami@home进程的 nice 级别更改为 -7 \n\n###### TIP: \n\n普通用户仅允许提升 nice 级别，只有 root 才能使用 renice 降低 nice 级别。\n\n也可以使用 top 命令（以交互方式）更改进程的 nice 级别，在top 中，按 r ，然后跟要更改的 PID 和 新的 nice 级别  \n\n![image.png](1526266653786433.png)\n\n![image.png](1526266685205928.png)\n\n![image.png](1526266750818667.png)\n\n![image.png](1526266722562134.png)\n","slug":"rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7","published":1,"updated":"2019-01-06T17:02:50.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqhzg000wlxkj06i4f3g7","content":"<h6 id=\"Linux-进程调度和多任务\"><a href=\"#Linux-进程调度和多任务\" class=\"headerlink\" title=\"Linux 进程调度和多任务\"></a>Linux 进程调度和多任务</h6><p>   通过使用称为时间片的技术，Linux（和其它操作系统）实际能够运行的进程数（和线程数）可以超出可用的实际处理单元数。操作系统进程调度程序将在单个核心上的进程之间快速切换，从而给用户一种有多个进程在同时运行的印象。  </p>\n<p>相对优先级</p>\n<p>   由于不是每种进程都与其它进程同样重要，可告知高度程序为不同的进程使用不同的调度策略。常规系统上运行的大多数进程所使用的调度策略称为SCHED_OTHER(也称为SCHED_NORMAL),但还有一些其他策略可用于不同的目的。  </p>\n<p>   由于并非所有进程都以同样的方式创建，可为采用SCHED_NORMAL 策略运行的进程指定相对优先级。此优先级称为进程的 nice 值，一个进程可以有正好 40 种不同的 nice 值。这些 nice 值正好从 -20 到 19。默认情况下，进程将继承其父进程的 nice 级别，通常为 0 ， nice 值 级别越高，表示优先级越低（该进程容易将其 CPU 使用量让给其他进程）； nice 级别越低，表示优先级越高（该进程更加不倾向于让出CPU）。  </p>\n<p><img src=\"/2018/05/14/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526262567734231.png\" alt=\"image.png\"></p>\n<h6 id=\"nice-级别和权限\"><a href=\"#nice-级别和权限\" class=\"headerlink\" title=\"nice 级别和权限\"></a>nice 级别和权限</h6><p>   为很占CPU资源的进程设置较低的 nice 级别可能对同一系统上运行的其它进程的性能造成负面影响，所以仅允许 root 用户（更具体的说，具有 CAP_SYS_NICE 功能的用户）设置负 nice 级别以及降低现有进程的 nice 级别。  </p>\n<p>   普通非特权用户仅允许设置正的nice 级别。此外，他们只能对现有进程提升 nice 级别。而不能降低 nice 级别  </p>\n<h6 id=\"TIP：\"><a href=\"#TIP：\" class=\"headerlink\" title=\"TIP：\"></a>TIP：</h6><p>   除 nice 级别以外，还有更多方法可以影响进程优先级和资源使用情况。有备用的高度程序策略和设置、控制组（cgroups）等等，但是 ,nice 级别是最容易的，并且系统管理员和普通用户都可以使用。  </p>\n<p>使用 nice 和 renice  影响进程优先级</p>\n<h6 id=\"查看-nice-级别\"><a href=\"#查看-nice-级别\" class=\"headerlink\" title=\"查看 nice 级别\"></a>查看 nice 级别</h6><p>   可以通过多种不同的方式查看现有进程的 nice 级别。大多数进程管理工具（如 gnome-system-monitor）默认情况下已显示 nice 级别，或可以配置为显示 nice 级别。  </p>\n<h6 id=\"使用top-显示-nice-级别\"><a href=\"#使用top-显示-nice-级别\" class=\"headerlink\" title=\"使用top 显示 nice 级别\"></a>使用top 显示 nice 级别</h6><p>   top 命令可用于通过交互方式查看（和管理）进程。在默认配置中，top 将显示与 nice 级别有关的两列：N1 表示实际 nice 级别，而PR将 nice 级别显示为映射到更大优先级队列： nice 级别 -20 映射到优先级 0 ，而 nice 级别 +19 映射到优先级39。  </p>\n<h6 id=\"使用ps-显示-nice-级别\"><a href=\"#使用ps-显示-nice-级别\" class=\"headerlink\" title=\"使用ps 显示 nice 级别\"></a>使用ps 显示 nice 级别</h6><p>   ps 命令也可以显示进程的 nice 级别，但它在大多数默认输出格式中并不显示，然后，用户可以通过 ps 准备请求所需的列，而 nice 字段的名称为 nice   </p>\n<p>#ps 请求包括 pid 、名称和nice 级别，按 nice 级别降序排列：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ps axo pid,comm,nice --sort=-nice</span></span><br><span class=\"line\">   PID COMMAND          NI</span><br><span class=\"line\">   286 khugepaged       19</span><br><span class=\"line\">   884 alsactl          19</span><br><span class=\"line\">  2639 tracker-miner<span class=\"_\">-f</span>  19</span><br><span class=\"line\">   285 ksmd              5</span><br><span class=\"line\">   927 rtkit-daemon      1</span><br><span class=\"line\">     1 systemd           0</span><br><span class=\"line\">     2 kthreadd          0</span><br><span class=\"line\">     3 ksoftirqd/0       0</span><br><span class=\"line\">     7 migration/0       -</span><br><span class=\"line\">     8 rcu_bh            0</span><br></pre></td></tr></table></figure></p>\n<p>某些进程的nice 级别可能报告为 - 。这些进程使用不同的高度策略运行，并且调度程序几乎将他们视为具有较高优先级。通过从ps 请求 cls 字段，可以显示调度程序策略。此字段中的 TS 表示该进程在 SCHED_NORMAL 下运行并且可以使用 nice 级别；任何其它内容都表示正在使用不同的调度程序策略。  </p>\n<h6 id=\"启动具有不同-nice-级别的进程\"><a href=\"#启动具有不同-nice-级别的进程\" class=\"headerlink\" title=\"启动具有不同 nice 级别的进程\"></a>启动具有不同 nice 级别的进程</h6><p>启动进程时，它通常将继承父进程的 nice 级别。这表示从命令行启动一个进程时，它将与从其启动的shell进程具有相同的nice 级别。在大多数情况下，这将导致新进程运行的 nice 级别为 0 。</p>\n<p>要启动具有不同 nice 级别的进程，用户和系统管理员可以使用 nice 工具运行其命令。不带任何其它选项的情况下，运行 nice <command> 将启动 nice 级别为 10 的 <command>.通过 nice 命令使用 -n <nicelevel> 选项，可以选择其他 nice 级别。如：启动 nice 级别为 15 的命令 dogecoinminer 并将其立即发送到后台:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nice -n 15 dogecoinminer &amp;</span><br></pre></td></tr></table></figure></nicelevel></p>\n<h6 id=\"TIP\"><a href=\"#TIP\" class=\"headerlink\" title=\"TIP:\"></a>TIP:</h6><p>非特权用户允许设置正的 nice级别 （0 - 19 ）。只有 root 可以设置负的 nice级别 （- 20 到 -1）。</p>\n<h6 id=\"更改现有进程的-nice-级别\"><a href=\"#更改现有进程的-nice-级别\" class=\"headerlink\" title=\"更改现有进程的 nice 级别\"></a>更改现有进程的 nice 级别</h6><p>可以在命令行中使用 renice 命令来更改现有进程的 nice 级别。 renice 命令的语法如下：</p>\n<p>renice -n <nicelevel> <pid> … （可以一次指定多个进程）</pid></nicelevel></p>\n<p>renice -n -7 $(pgrep origami@home)    #将所有origami@home进程的 nice 级别更改为 -7 </p>\n<h6 id=\"TIP-1\"><a href=\"#TIP-1\" class=\"headerlink\" title=\"TIP:\"></a>TIP:</h6><p>普通用户仅允许提升 nice 级别，只有 root 才能使用 renice 降低 nice 级别。</p>\n<p>也可以使用 top 命令（以交互方式）更改进程的 nice 级别，在top 中，按 r ，然后跟要更改的 PID 和 新的 nice 级别  </p>\n<p><img src=\"/2018/05/14/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526266653786433.png\" alt=\"image.png\"></p>\n<p><img src=\"/2018/05/14/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526266685205928.png\" alt=\"image.png\"></p>\n<p><img src=\"/2018/05/14/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526266750818667.png\" alt=\"image.png\"></p>\n<p><img src=\"/2018/05/14/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526266722562134.png\" alt=\"image.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"Linux-进程调度和多任务\"><a href=\"#Linux-进程调度和多任务\" class=\"headerlink\" title=\"Linux 进程调度和多任务\"></a>Linux 进程调度和多任务</h6><p>   通过使用称为时间片的技术，Linux（和其它操作系统）实际能够运行的进程数（和线程数）可以超出可用的实际处理单元数。操作系统进程调度程序将在单个核心上的进程之间快速切换，从而给用户一种有多个进程在同时运行的印象。  </p>\n<p>相对优先级</p>\n<p>   由于不是每种进程都与其它进程同样重要，可告知高度程序为不同的进程使用不同的调度策略。常规系统上运行的大多数进程所使用的调度策略称为SCHED_OTHER(也称为SCHED_NORMAL),但还有一些其他策略可用于不同的目的。  </p>\n<p>   由于并非所有进程都以同样的方式创建，可为采用SCHED_NORMAL 策略运行的进程指定相对优先级。此优先级称为进程的 nice 值，一个进程可以有正好 40 种不同的 nice 值。这些 nice 值正好从 -20 到 19。默认情况下，进程将继承其父进程的 nice 级别，通常为 0 ， nice 值 级别越高，表示优先级越低（该进程容易将其 CPU 使用量让给其他进程）； nice 级别越低，表示优先级越高（该进程更加不倾向于让出CPU）。  </p>\n<p><img src=\"/2018/05/14/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526262567734231.png\" alt=\"image.png\"></p>\n<h6 id=\"nice-级别和权限\"><a href=\"#nice-级别和权限\" class=\"headerlink\" title=\"nice 级别和权限\"></a>nice 级别和权限</h6><p>   为很占CPU资源的进程设置较低的 nice 级别可能对同一系统上运行的其它进程的性能造成负面影响，所以仅允许 root 用户（更具体的说，具有 CAP_SYS_NICE 功能的用户）设置负 nice 级别以及降低现有进程的 nice 级别。  </p>\n<p>   普通非特权用户仅允许设置正的nice 级别。此外，他们只能对现有进程提升 nice 级别。而不能降低 nice 级别  </p>\n<h6 id=\"TIP：\"><a href=\"#TIP：\" class=\"headerlink\" title=\"TIP：\"></a>TIP：</h6><p>   除 nice 级别以外，还有更多方法可以影响进程优先级和资源使用情况。有备用的高度程序策略和设置、控制组（cgroups）等等，但是 ,nice 级别是最容易的，并且系统管理员和普通用户都可以使用。  </p>\n<p>使用 nice 和 renice  影响进程优先级</p>\n<h6 id=\"查看-nice-级别\"><a href=\"#查看-nice-级别\" class=\"headerlink\" title=\"查看 nice 级别\"></a>查看 nice 级别</h6><p>   可以通过多种不同的方式查看现有进程的 nice 级别。大多数进程管理工具（如 gnome-system-monitor）默认情况下已显示 nice 级别，或可以配置为显示 nice 级别。  </p>\n<h6 id=\"使用top-显示-nice-级别\"><a href=\"#使用top-显示-nice-级别\" class=\"headerlink\" title=\"使用top 显示 nice 级别\"></a>使用top 显示 nice 级别</h6><p>   top 命令可用于通过交互方式查看（和管理）进程。在默认配置中，top 将显示与 nice 级别有关的两列：N1 表示实际 nice 级别，而PR将 nice 级别显示为映射到更大优先级队列： nice 级别 -20 映射到优先级 0 ，而 nice 级别 +19 映射到优先级39。  </p>\n<h6 id=\"使用ps-显示-nice-级别\"><a href=\"#使用ps-显示-nice-级别\" class=\"headerlink\" title=\"使用ps 显示 nice 级别\"></a>使用ps 显示 nice 级别</h6><p>   ps 命令也可以显示进程的 nice 级别，但它在大多数默认输出格式中并不显示，然后，用户可以通过 ps 准备请求所需的列，而 nice 字段的名称为 nice   </p>\n<p>#ps 请求包括 pid 、名称和nice 级别，按 nice 级别降序排列：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ps axo pid,comm,nice --sort=-nice</span></span><br><span class=\"line\">   PID COMMAND          NI</span><br><span class=\"line\">   286 khugepaged       19</span><br><span class=\"line\">   884 alsactl          19</span><br><span class=\"line\">  2639 tracker-miner<span class=\"_\">-f</span>  19</span><br><span class=\"line\">   285 ksmd              5</span><br><span class=\"line\">   927 rtkit-daemon      1</span><br><span class=\"line\">     1 systemd           0</span><br><span class=\"line\">     2 kthreadd          0</span><br><span class=\"line\">     3 ksoftirqd/0       0</span><br><span class=\"line\">     7 migration/0       -</span><br><span class=\"line\">     8 rcu_bh            0</span><br></pre></td></tr></table></figure></p>\n<p>某些进程的nice 级别可能报告为 - 。这些进程使用不同的高度策略运行，并且调度程序几乎将他们视为具有较高优先级。通过从ps 请求 cls 字段，可以显示调度程序策略。此字段中的 TS 表示该进程在 SCHED_NORMAL 下运行并且可以使用 nice 级别；任何其它内容都表示正在使用不同的调度程序策略。  </p>\n<h6 id=\"启动具有不同-nice-级别的进程\"><a href=\"#启动具有不同-nice-级别的进程\" class=\"headerlink\" title=\"启动具有不同 nice 级别的进程\"></a>启动具有不同 nice 级别的进程</h6><p>启动进程时，它通常将继承父进程的 nice 级别。这表示从命令行启动一个进程时，它将与从其启动的shell进程具有相同的nice 级别。在大多数情况下，这将导致新进程运行的 nice 级别为 0 。</p>\n<p>要启动具有不同 nice 级别的进程，用户和系统管理员可以使用 nice 工具运行其命令。不带任何其它选项的情况下，运行 nice <command> 将启动 nice 级别为 10 的 <command>.通过 nice 命令使用 -n <nicelevel> 选项，可以选择其他 nice 级别。如：启动 nice 级别为 15 的命令 dogecoinminer 并将其立即发送到后台:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nice -n 15 dogecoinminer &amp;</span><br></pre></td></tr></table></figure></nicelevel></p>\n<h6 id=\"TIP\"><a href=\"#TIP\" class=\"headerlink\" title=\"TIP:\"></a>TIP:</h6><p>非特权用户允许设置正的 nice级别 （0 - 19 ）。只有 root 可以设置负的 nice级别 （- 20 到 -1）。</p>\n<h6 id=\"更改现有进程的-nice-级别\"><a href=\"#更改现有进程的-nice-级别\" class=\"headerlink\" title=\"更改现有进程的 nice 级别\"></a>更改现有进程的 nice 级别</h6><p>可以在命令行中使用 renice 命令来更改现有进程的 nice 级别。 renice 命令的语法如下：</p>\n<p>renice -n <nicelevel> <pid> … （可以一次指定多个进程）</pid></nicelevel></p>\n<p>renice -n -7 $(pgrep origami@home)    #将所有origami@home进程的 nice 级别更改为 -7 </p>\n<h6 id=\"TIP-1\"><a href=\"#TIP-1\" class=\"headerlink\" title=\"TIP:\"></a>TIP:</h6><p>普通用户仅允许提升 nice 级别，只有 root 才能使用 renice 降低 nice 级别。</p>\n<p>也可以使用 top 命令（以交互方式）更改进程的 nice 级别，在top 中，按 r ，然后跟要更改的 PID 和 新的 nice 级别  </p>\n<p><img src=\"/2018/05/14/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526266653786433.png\" alt=\"image.png\"></p>\n<p><img src=\"/2018/05/14/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526266685205928.png\" alt=\"image.png\"></p>\n<p><img src=\"/2018/05/14/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526266750818667.png\" alt=\"image.png\"></p>\n<p><img src=\"/2018/05/14/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526266722562134.png\" alt=\"image.png\"></p>\n"},{"title":"RH134 第十二章 访问具有SMB的网络存储","url":"443.html","id":"443","date":"2018-10-11T07:12:19.000Z","_content":"\nRHEL 使用 samba 服务提供 windows 客户端可以使用的服务。samba 实施“服务器消息块（SMB）协议”，而 “常用Internet 文件系统”（CIFS）是SMB的一种方言，这两个名称经常互换使用。  \n\n###### 连接至SMB/CIFS共享\n\n红帽桌面和服务器均可连接到由使得SMB协议的任何服务器所提供的共享\n\n###### 访问SMB 共享的三个基本步骤：\n\n1、识别要访问的远程共享\n\n2、确定挂载点（应该将共享挂载到的位置），并创建挂载点的空目录。\n\n3、挂载网络文件系统（通过适当的命令或配置更改）。\n\n开始之前，必须先安装一上软件包才能挂载 SMB共享：cifs-utils. mount 命令和autofs 自动挂载程序 均依赖此软件包来挂载 CIFS文件系统。第二个软件包 samba-client 具有一些有用的命令行实用程序（如smbclient），因此也经常值得安装\n\n###### 挂载 SMB共享\n\n1、识别： SMB服务器主机管理员可提供共享的详细信息，如用户名和密码、共享名称等。另一种方式是使用可浏览共享的客户端，如smbclient \n```sh\nsmbclient -L /serverX\n```\n-L 选项要求 smbclient 列出 serverX 上可用的共享\n\n2、挂载点：使用mkdir 在合适位置中创建挂载点。\n```sh\nmkdir -p /mountpoint\n```\n3、挂载： 手动挂载，或并入 /etc/fstab 文件中，为任一操作切换到root 或使用sudo \n\n###### 手动：使用mount 命令\n```sh\nsudo mount -t cifs -o guest //serverX/share /mountpoint\n```\n-t cifs 选项是 SMB共享的文件系统类型； -o guest 选项指示 mount 以guest 账户身份（无需输入密码）尝试并进行身份验证。\n\n/etc/fstab ：使用vim 来编辑 /etc/fstab 文件并将挂载条目添加到文件的底部。将在每次启动时挂载 SMB 共享\n```sh\nsudo vim /etc/fstab \n……\n//serverX/share /mountpoint  cifs  guest  0 0\n```\n使用umount 和root 特权，手动卸载共享\n```sh\nsudo umount /mountpoint\n```\n对SMB 共享执行身份验证。 SMB 共享可以标记为“no-browsable (不可浏览)”，这意味着 smbclient 等客户端将不会显示它们。但是，如果在挂载操作期间明确指定SMB 共享名称，则仍可以访问这些 SMB 共享。 SMB 服务器通常限制 对特定用户或用户组的访问，如果访问受保护的共享，需向 SMB服务器提供合适的凭证。\n\n身份验证的一个常用予以反击用户名和密码对。这些对既可添加至mount 命令（或/etc/fstab 条目），也可存储在挂载操作期间被引用的凭据文件中。如果未提供密码，mount 命令将会提示输入密码，但是使用 /etc/fstab 时必须提供密码。可通过 guest 选项来请求来宾访问权限 。\n\n###### 示例：\n```sh\nsudo mount -t cifs -o guest //serverX/docs /public/docs\n```\n在 /public/docs 中挂载 SMB共享 //serverX/docs 并尝试以 guest 执行身份验证\n```sh\nsudo mount -t cifs -o username=watson //serverX/cases /bakerst/cases\n```\n在 /bakerst/cases 中挂载 SMB 共享 //serverX/cases 并尝试以 watson 执行身份验证。在此示例中，mount 命令将提示输入密码。\n\n凭据谁的能提供更高的安全性，这是因为密码存储在更为安全的文件中，而/etc/fstab 文件则比较易于检查。\n```sh\nsudo mount -t cifs -o credentials=/secure/sherlock  //serverX/sherlook /home/sherlock/work\n```\n在/home/sherlock/work中挂载 SMB共享 //serverX/sherlock 并尝试使用存储于/secure/sherlock 中的凭据执行身份验证。\n\n凭据文件格式为：\n```\nusername=username\npassword=password\ndomain=domian\n```\n应将其放置在仅具有 root 访问权限的某个安全位置（如 chmod 600 ）\n\n在文件操作期间， SMB服务器将根据用于挂载共享的凭据，检查文件的访问权限。客户端将根据从服务器发送来的文件 UID/GID，检查文件的访问权限。这意味着，客户端需要具有与 SMB服务器的文件相同的UID/GID 以及补充组成员资格（如有必要）\n\n处理本地访问检查和备用身份验证方法的挂载选项有很多，例如多用户（和cifscreds）以及基于Kerberos的选项。\n\n###### 使用自动挂载程序挂载 SMB 文件系统  \n\n要使用 mount 命令，需要具有root 特权以连接到 SMB 共享。或者可将条目添加至/etc/fstab,但是此后与SMB服务器的连接需一直保持活动状态。\n\n当某一进程试图访问SMB共享上的文件时，可以将自动挂载程序 （或autofs）服务配置为“按需”挂载 SMB 共享。当共享不再使用并处于不活动状态达一段时间以后，自动挂载程序将会挂载该共享。\n\n使用autofs 在 SMB 共享上设置自动挂载的进程实质与其它自动挂载相同。\n\n添加一个可识别共享基础目录和关联映射文件的auto.master.d 配置文件\n\n创建或编辑映射文件。包括 SMB共享的挂载详细信息\n\n启用并启动 autofs 服务\n\n###### tips :\n\n如果尚未安装此服务，则安装 autofs 软件包，与 mount一样，自动挂载也依赖 cifs-utils软件包来挂载 SMB 共享。\n\n映射文件\n\n指定文件系统类型需要先使用 -fstype=cifs 选项，然后使用一列以逗号分隔的挂载选项（与mount 相同）服务器 URI 地址以冒号“：”为前缀。\n\n###### 示例：\n\n以下示例在路径 /bakerst/cases 为 SMB 共享 //serverX/cases 创建一个自动挂载，并根据凭据文件 /secure/sherlock 进行身份验证。\n```\n/etc/auto.master.d/bakerst.autofs\n\n/bakerst /etc/auto.bakerst\n\n/etc/auto.bakerst\n\ncases -fstype=cifs,credentials=/secure/sherlock ://serverX/cases\n\n/secure/sherlock 内容（属于root,权限 0600）:\n\nusername=sherlock\npassword=violin2018\ndomain=BAKERST\n\nautofs 启用并启动\n\nsudo systemctl enable autofs\nsudo systemctl start autofs\n```\n* * *\n\n###### 实验\n```sh\nsudo yum install cifs-utils autofs -y\nsudo vim /etc/auto.master.d/shares.autofs\n  /share /etc/auto.shares\nsudovim /etc/auto.shares\n  work -fstype=cifs,credentials=/etc/me.cred ://server0/student\n  docs -fstype=cifs,guest ://server0/public\n  cases -fstype=cifs,credentials=/etc/me.cred ://server0/student\nsudo vim /etc/my.cred\n  username=student\n  password=student\n  domain=MYGROUP\ngroups    #查看当前用户所属组\nsudo groupadd bakerst -g 10221    #创建组\nsudo usermod -aG bakerst student    #附加组\nnewgrp bakerst    #切换（更新）组\n```\n","source":"_posts/rh134-e7-ac-ac-e5-8d-81-e4-ba-8c-e7-ab-a0-e8-ae-bf-e9-97-ae-e5-85-b7-e6-9c-89smb-e7-9a-84-e7-bd-91-e7-bb-9c-e5-ad-98-e5-82-a8.md","raw":"---\ntitle: RH134 第十二章 访问具有SMB的网络存储\ntags:\n  - samba\nurl: 443.html\nid: 443\ncategories:\n  - RHEL134\ndate: 2018-10-11 15:12:19\n---\n\nRHEL 使用 samba 服务提供 windows 客户端可以使用的服务。samba 实施“服务器消息块（SMB）协议”，而 “常用Internet 文件系统”（CIFS）是SMB的一种方言，这两个名称经常互换使用。  \n\n###### 连接至SMB/CIFS共享\n\n红帽桌面和服务器均可连接到由使得SMB协议的任何服务器所提供的共享\n\n###### 访问SMB 共享的三个基本步骤：\n\n1、识别要访问的远程共享\n\n2、确定挂载点（应该将共享挂载到的位置），并创建挂载点的空目录。\n\n3、挂载网络文件系统（通过适当的命令或配置更改）。\n\n开始之前，必须先安装一上软件包才能挂载 SMB共享：cifs-utils. mount 命令和autofs 自动挂载程序 均依赖此软件包来挂载 CIFS文件系统。第二个软件包 samba-client 具有一些有用的命令行实用程序（如smbclient），因此也经常值得安装\n\n###### 挂载 SMB共享\n\n1、识别： SMB服务器主机管理员可提供共享的详细信息，如用户名和密码、共享名称等。另一种方式是使用可浏览共享的客户端，如smbclient \n```sh\nsmbclient -L /serverX\n```\n-L 选项要求 smbclient 列出 serverX 上可用的共享\n\n2、挂载点：使用mkdir 在合适位置中创建挂载点。\n```sh\nmkdir -p /mountpoint\n```\n3、挂载： 手动挂载，或并入 /etc/fstab 文件中，为任一操作切换到root 或使用sudo \n\n###### 手动：使用mount 命令\n```sh\nsudo mount -t cifs -o guest //serverX/share /mountpoint\n```\n-t cifs 选项是 SMB共享的文件系统类型； -o guest 选项指示 mount 以guest 账户身份（无需输入密码）尝试并进行身份验证。\n\n/etc/fstab ：使用vim 来编辑 /etc/fstab 文件并将挂载条目添加到文件的底部。将在每次启动时挂载 SMB 共享\n```sh\nsudo vim /etc/fstab \n……\n//serverX/share /mountpoint  cifs  guest  0 0\n```\n使用umount 和root 特权，手动卸载共享\n```sh\nsudo umount /mountpoint\n```\n对SMB 共享执行身份验证。 SMB 共享可以标记为“no-browsable (不可浏览)”，这意味着 smbclient 等客户端将不会显示它们。但是，如果在挂载操作期间明确指定SMB 共享名称，则仍可以访问这些 SMB 共享。 SMB 服务器通常限制 对特定用户或用户组的访问，如果访问受保护的共享，需向 SMB服务器提供合适的凭证。\n\n身份验证的一个常用予以反击用户名和密码对。这些对既可添加至mount 命令（或/etc/fstab 条目），也可存储在挂载操作期间被引用的凭据文件中。如果未提供密码，mount 命令将会提示输入密码，但是使用 /etc/fstab 时必须提供密码。可通过 guest 选项来请求来宾访问权限 。\n\n###### 示例：\n```sh\nsudo mount -t cifs -o guest //serverX/docs /public/docs\n```\n在 /public/docs 中挂载 SMB共享 //serverX/docs 并尝试以 guest 执行身份验证\n```sh\nsudo mount -t cifs -o username=watson //serverX/cases /bakerst/cases\n```\n在 /bakerst/cases 中挂载 SMB 共享 //serverX/cases 并尝试以 watson 执行身份验证。在此示例中，mount 命令将提示输入密码。\n\n凭据谁的能提供更高的安全性，这是因为密码存储在更为安全的文件中，而/etc/fstab 文件则比较易于检查。\n```sh\nsudo mount -t cifs -o credentials=/secure/sherlock  //serverX/sherlook /home/sherlock/work\n```\n在/home/sherlock/work中挂载 SMB共享 //serverX/sherlock 并尝试使用存储于/secure/sherlock 中的凭据执行身份验证。\n\n凭据文件格式为：\n```\nusername=username\npassword=password\ndomain=domian\n```\n应将其放置在仅具有 root 访问权限的某个安全位置（如 chmod 600 ）\n\n在文件操作期间， SMB服务器将根据用于挂载共享的凭据，检查文件的访问权限。客户端将根据从服务器发送来的文件 UID/GID，检查文件的访问权限。这意味着，客户端需要具有与 SMB服务器的文件相同的UID/GID 以及补充组成员资格（如有必要）\n\n处理本地访问检查和备用身份验证方法的挂载选项有很多，例如多用户（和cifscreds）以及基于Kerberos的选项。\n\n###### 使用自动挂载程序挂载 SMB 文件系统  \n\n要使用 mount 命令，需要具有root 特权以连接到 SMB 共享。或者可将条目添加至/etc/fstab,但是此后与SMB服务器的连接需一直保持活动状态。\n\n当某一进程试图访问SMB共享上的文件时，可以将自动挂载程序 （或autofs）服务配置为“按需”挂载 SMB 共享。当共享不再使用并处于不活动状态达一段时间以后，自动挂载程序将会挂载该共享。\n\n使用autofs 在 SMB 共享上设置自动挂载的进程实质与其它自动挂载相同。\n\n添加一个可识别共享基础目录和关联映射文件的auto.master.d 配置文件\n\n创建或编辑映射文件。包括 SMB共享的挂载详细信息\n\n启用并启动 autofs 服务\n\n###### tips :\n\n如果尚未安装此服务，则安装 autofs 软件包，与 mount一样，自动挂载也依赖 cifs-utils软件包来挂载 SMB 共享。\n\n映射文件\n\n指定文件系统类型需要先使用 -fstype=cifs 选项，然后使用一列以逗号分隔的挂载选项（与mount 相同）服务器 URI 地址以冒号“：”为前缀。\n\n###### 示例：\n\n以下示例在路径 /bakerst/cases 为 SMB 共享 //serverX/cases 创建一个自动挂载，并根据凭据文件 /secure/sherlock 进行身份验证。\n```\n/etc/auto.master.d/bakerst.autofs\n\n/bakerst /etc/auto.bakerst\n\n/etc/auto.bakerst\n\ncases -fstype=cifs,credentials=/secure/sherlock ://serverX/cases\n\n/secure/sherlock 内容（属于root,权限 0600）:\n\nusername=sherlock\npassword=violin2018\ndomain=BAKERST\n\nautofs 启用并启动\n\nsudo systemctl enable autofs\nsudo systemctl start autofs\n```\n* * *\n\n###### 实验\n```sh\nsudo yum install cifs-utils autofs -y\nsudo vim /etc/auto.master.d/shares.autofs\n  /share /etc/auto.shares\nsudovim /etc/auto.shares\n  work -fstype=cifs,credentials=/etc/me.cred ://server0/student\n  docs -fstype=cifs,guest ://server0/public\n  cases -fstype=cifs,credentials=/etc/me.cred ://server0/student\nsudo vim /etc/my.cred\n  username=student\n  password=student\n  domain=MYGROUP\ngroups    #查看当前用户所属组\nsudo groupadd bakerst -g 10221    #创建组\nsudo usermod -aG bakerst student    #附加组\nnewgrp bakerst    #切换（更新）组\n```\n","slug":"rh134-e7-ac-ac-e5-8d-81-e4-ba-8c-e7-ab-a0-e8-ae-bf-e9-97-ae-e5-85-b7-e6-9c-89smb-e7-9a-84-e7-bd-91-e7-bb-9c-e5-ad-98-e5-82-a8","published":1,"updated":"2019-01-06T17:15:45.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqhzi000zlxkj2a36d5rr","content":"<p>RHEL 使用 samba 服务提供 windows 客户端可以使用的服务。samba 实施“服务器消息块（SMB）协议”，而 “常用Internet 文件系统”（CIFS）是SMB的一种方言，这两个名称经常互换使用。  </p>\n<h6 id=\"连接至SMB-CIFS共享\"><a href=\"#连接至SMB-CIFS共享\" class=\"headerlink\" title=\"连接至SMB/CIFS共享\"></a>连接至SMB/CIFS共享</h6><p>红帽桌面和服务器均可连接到由使得SMB协议的任何服务器所提供的共享</p>\n<h6 id=\"访问SMB-共享的三个基本步骤：\"><a href=\"#访问SMB-共享的三个基本步骤：\" class=\"headerlink\" title=\"访问SMB 共享的三个基本步骤：\"></a>访问SMB 共享的三个基本步骤：</h6><p>1、识别要访问的远程共享</p>\n<p>2、确定挂载点（应该将共享挂载到的位置），并创建挂载点的空目录。</p>\n<p>3、挂载网络文件系统（通过适当的命令或配置更改）。</p>\n<p>开始之前，必须先安装一上软件包才能挂载 SMB共享：cifs-utils. mount 命令和autofs 自动挂载程序 均依赖此软件包来挂载 CIFS文件系统。第二个软件包 samba-client 具有一些有用的命令行实用程序（如smbclient），因此也经常值得安装</p>\n<h6 id=\"挂载-SMB共享\"><a href=\"#挂载-SMB共享\" class=\"headerlink\" title=\"挂载 SMB共享\"></a>挂载 SMB共享</h6><p>1、识别： SMB服务器主机管理员可提供共享的详细信息，如用户名和密码、共享名称等。另一种方式是使用可浏览共享的客户端，如smbclient<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smbclient -L /serverX</span><br></pre></td></tr></table></figure></p>\n<p>-L 选项要求 smbclient 列出 serverX 上可用的共享</p>\n<p>2、挂载点：使用mkdir 在合适位置中创建挂载点。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /mountpoint</span><br></pre></td></tr></table></figure></p>\n<p>3、挂载： 手动挂载，或并入 /etc/fstab 文件中，为任一操作切换到root 或使用sudo </p>\n<h6 id=\"手动：使用mount-命令\"><a href=\"#手动：使用mount-命令\" class=\"headerlink\" title=\"手动：使用mount 命令\"></a>手动：使用mount 命令</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount -t cifs -o guest //serverX/share /mountpoint</span><br></pre></td></tr></table></figure>\n<p>-t cifs 选项是 SMB共享的文件系统类型； -o guest 选项指示 mount 以guest 账户身份（无需输入密码）尝试并进行身份验证。</p>\n<p>/etc/fstab ：使用vim 来编辑 /etc/fstab 文件并将挂载条目添加到文件的底部。将在每次启动时挂载 SMB 共享<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/fstab </span><br><span class=\"line\">……</span><br><span class=\"line\">//serverX/share /mountpoint  cifs  guest  0 0</span><br></pre></td></tr></table></figure></p>\n<p>使用umount 和root 特权，手动卸载共享<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo umount /mountpoint</span><br></pre></td></tr></table></figure></p>\n<p>对SMB 共享执行身份验证。 SMB 共享可以标记为“no-browsable (不可浏览)”，这意味着 smbclient 等客户端将不会显示它们。但是，如果在挂载操作期间明确指定SMB 共享名称，则仍可以访问这些 SMB 共享。 SMB 服务器通常限制 对特定用户或用户组的访问，如果访问受保护的共享，需向 SMB服务器提供合适的凭证。</p>\n<p>身份验证的一个常用予以反击用户名和密码对。这些对既可添加至mount 命令（或/etc/fstab 条目），也可存储在挂载操作期间被引用的凭据文件中。如果未提供密码，mount 命令将会提示输入密码，但是使用 /etc/fstab 时必须提供密码。可通过 guest 选项来请求来宾访问权限 。</p>\n<h6 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount -t cifs -o guest //serverX/docs /public/docs</span><br></pre></td></tr></table></figure>\n<p>在 /public/docs 中挂载 SMB共享 //serverX/docs 并尝试以 guest 执行身份验证<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount -t cifs -o username=watson //serverX/cases /bakerst/cases</span><br></pre></td></tr></table></figure></p>\n<p>在 /bakerst/cases 中挂载 SMB 共享 //serverX/cases 并尝试以 watson 执行身份验证。在此示例中，mount 命令将提示输入密码。</p>\n<p>凭据谁的能提供更高的安全性，这是因为密码存储在更为安全的文件中，而/etc/fstab 文件则比较易于检查。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount -t cifs -o credentials=/secure/sherlock  //serverX/sherlook /home/sherlock/work</span><br></pre></td></tr></table></figure></p>\n<p>在/home/sherlock/work中挂载 SMB共享 //serverX/sherlock 并尝试使用存储于/secure/sherlock 中的凭据执行身份验证。</p>\n<p>凭据文件格式为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username=username</span><br><span class=\"line\">password=password</span><br><span class=\"line\">domain=domian</span><br></pre></td></tr></table></figure></p>\n<p>应将其放置在仅具有 root 访问权限的某个安全位置（如 chmod 600 ）</p>\n<p>在文件操作期间， SMB服务器将根据用于挂载共享的凭据，检查文件的访问权限。客户端将根据从服务器发送来的文件 UID/GID，检查文件的访问权限。这意味着，客户端需要具有与 SMB服务器的文件相同的UID/GID 以及补充组成员资格（如有必要）</p>\n<p>处理本地访问检查和备用身份验证方法的挂载选项有很多，例如多用户（和cifscreds）以及基于Kerberos的选项。</p>\n<h6 id=\"使用自动挂载程序挂载-SMB-文件系统\"><a href=\"#使用自动挂载程序挂载-SMB-文件系统\" class=\"headerlink\" title=\"使用自动挂载程序挂载 SMB 文件系统\"></a>使用自动挂载程序挂载 SMB 文件系统</h6><p>要使用 mount 命令，需要具有root 特权以连接到 SMB 共享。或者可将条目添加至/etc/fstab,但是此后与SMB服务器的连接需一直保持活动状态。</p>\n<p>当某一进程试图访问SMB共享上的文件时，可以将自动挂载程序 （或autofs）服务配置为“按需”挂载 SMB 共享。当共享不再使用并处于不活动状态达一段时间以后，自动挂载程序将会挂载该共享。</p>\n<p>使用autofs 在 SMB 共享上设置自动挂载的进程实质与其它自动挂载相同。</p>\n<p>添加一个可识别共享基础目录和关联映射文件的auto.master.d 配置文件</p>\n<p>创建或编辑映射文件。包括 SMB共享的挂载详细信息</p>\n<p>启用并启动 autofs 服务</p>\n<h6 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips :\"></a>tips :</h6><p>如果尚未安装此服务，则安装 autofs 软件包，与 mount一样，自动挂载也依赖 cifs-utils软件包来挂载 SMB 共享。</p>\n<p>映射文件</p>\n<p>指定文件系统类型需要先使用 -fstype=cifs 选项，然后使用一列以逗号分隔的挂载选项（与mount 相同）服务器 URI 地址以冒号“：”为前缀。</p>\n<h6 id=\"示例：-1\"><a href=\"#示例：-1\" class=\"headerlink\" title=\"示例：\"></a>示例：</h6><p>以下示例在路径 /bakerst/cases 为 SMB 共享 //serverX/cases 创建一个自动挂载，并根据凭据文件 /secure/sherlock 进行身份验证。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/auto.master.d/bakerst.autofs</span><br><span class=\"line\"></span><br><span class=\"line\">/bakerst /etc/auto.bakerst</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/auto.bakerst</span><br><span class=\"line\"></span><br><span class=\"line\">cases -fstype=cifs,credentials=/secure/sherlock ://serverX/cases</span><br><span class=\"line\"></span><br><span class=\"line\">/secure/sherlock 内容（属于root,权限 0600）:</span><br><span class=\"line\"></span><br><span class=\"line\">username=sherlock</span><br><span class=\"line\">password=violin2018</span><br><span class=\"line\">domain=BAKERST</span><br><span class=\"line\"></span><br><span class=\"line\">autofs 启用并启动</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl enable autofs</span><br><span class=\"line\">sudo systemctl start autofs</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h6 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install cifs-utils autofs -y</span><br><span class=\"line\">sudo vim /etc/auto.master.d/shares.autofs</span><br><span class=\"line\">  /share /etc/auto.shares</span><br><span class=\"line\">sudovim /etc/auto.shares</span><br><span class=\"line\">  work -fstype=cifs,credentials=/etc/me.cred ://server0/student</span><br><span class=\"line\">  docs -fstype=cifs,guest ://server0/public</span><br><span class=\"line\">  cases -fstype=cifs,credentials=/etc/me.cred ://server0/student</span><br><span class=\"line\">sudo vim /etc/my.cred</span><br><span class=\"line\">  username=student</span><br><span class=\"line\">  password=student</span><br><span class=\"line\">  domain=MYGROUP</span><br><span class=\"line\">groups    <span class=\"comment\">#查看当前用户所属组</span></span><br><span class=\"line\">sudo groupadd bakerst -g 10221    <span class=\"comment\">#创建组</span></span><br><span class=\"line\">sudo usermod -aG bakerst student    <span class=\"comment\">#附加组</span></span><br><span class=\"line\">newgrp bakerst    <span class=\"comment\">#切换（更新）组</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>RHEL 使用 samba 服务提供 windows 客户端可以使用的服务。samba 实施“服务器消息块（SMB）协议”，而 “常用Internet 文件系统”（CIFS）是SMB的一种方言，这两个名称经常互换使用。  </p>\n<h6 id=\"连接至SMB-CIFS共享\"><a href=\"#连接至SMB-CIFS共享\" class=\"headerlink\" title=\"连接至SMB/CIFS共享\"></a>连接至SMB/CIFS共享</h6><p>红帽桌面和服务器均可连接到由使得SMB协议的任何服务器所提供的共享</p>\n<h6 id=\"访问SMB-共享的三个基本步骤：\"><a href=\"#访问SMB-共享的三个基本步骤：\" class=\"headerlink\" title=\"访问SMB 共享的三个基本步骤：\"></a>访问SMB 共享的三个基本步骤：</h6><p>1、识别要访问的远程共享</p>\n<p>2、确定挂载点（应该将共享挂载到的位置），并创建挂载点的空目录。</p>\n<p>3、挂载网络文件系统（通过适当的命令或配置更改）。</p>\n<p>开始之前，必须先安装一上软件包才能挂载 SMB共享：cifs-utils. mount 命令和autofs 自动挂载程序 均依赖此软件包来挂载 CIFS文件系统。第二个软件包 samba-client 具有一些有用的命令行实用程序（如smbclient），因此也经常值得安装</p>\n<h6 id=\"挂载-SMB共享\"><a href=\"#挂载-SMB共享\" class=\"headerlink\" title=\"挂载 SMB共享\"></a>挂载 SMB共享</h6><p>1、识别： SMB服务器主机管理员可提供共享的详细信息，如用户名和密码、共享名称等。另一种方式是使用可浏览共享的客户端，如smbclient<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smbclient -L /serverX</span><br></pre></td></tr></table></figure></p>\n<p>-L 选项要求 smbclient 列出 serverX 上可用的共享</p>\n<p>2、挂载点：使用mkdir 在合适位置中创建挂载点。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /mountpoint</span><br></pre></td></tr></table></figure></p>\n<p>3、挂载： 手动挂载，或并入 /etc/fstab 文件中，为任一操作切换到root 或使用sudo </p>\n<h6 id=\"手动：使用mount-命令\"><a href=\"#手动：使用mount-命令\" class=\"headerlink\" title=\"手动：使用mount 命令\"></a>手动：使用mount 命令</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount -t cifs -o guest //serverX/share /mountpoint</span><br></pre></td></tr></table></figure>\n<p>-t cifs 选项是 SMB共享的文件系统类型； -o guest 选项指示 mount 以guest 账户身份（无需输入密码）尝试并进行身份验证。</p>\n<p>/etc/fstab ：使用vim 来编辑 /etc/fstab 文件并将挂载条目添加到文件的底部。将在每次启动时挂载 SMB 共享<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/fstab </span><br><span class=\"line\">……</span><br><span class=\"line\">//serverX/share /mountpoint  cifs  guest  0 0</span><br></pre></td></tr></table></figure></p>\n<p>使用umount 和root 特权，手动卸载共享<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo umount /mountpoint</span><br></pre></td></tr></table></figure></p>\n<p>对SMB 共享执行身份验证。 SMB 共享可以标记为“no-browsable (不可浏览)”，这意味着 smbclient 等客户端将不会显示它们。但是，如果在挂载操作期间明确指定SMB 共享名称，则仍可以访问这些 SMB 共享。 SMB 服务器通常限制 对特定用户或用户组的访问，如果访问受保护的共享，需向 SMB服务器提供合适的凭证。</p>\n<p>身份验证的一个常用予以反击用户名和密码对。这些对既可添加至mount 命令（或/etc/fstab 条目），也可存储在挂载操作期间被引用的凭据文件中。如果未提供密码，mount 命令将会提示输入密码，但是使用 /etc/fstab 时必须提供密码。可通过 guest 选项来请求来宾访问权限 。</p>\n<h6 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount -t cifs -o guest //serverX/docs /public/docs</span><br></pre></td></tr></table></figure>\n<p>在 /public/docs 中挂载 SMB共享 //serverX/docs 并尝试以 guest 执行身份验证<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount -t cifs -o username=watson //serverX/cases /bakerst/cases</span><br></pre></td></tr></table></figure></p>\n<p>在 /bakerst/cases 中挂载 SMB 共享 //serverX/cases 并尝试以 watson 执行身份验证。在此示例中，mount 命令将提示输入密码。</p>\n<p>凭据谁的能提供更高的安全性，这是因为密码存储在更为安全的文件中，而/etc/fstab 文件则比较易于检查。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount -t cifs -o credentials=/secure/sherlock  //serverX/sherlook /home/sherlock/work</span><br></pre></td></tr></table></figure></p>\n<p>在/home/sherlock/work中挂载 SMB共享 //serverX/sherlock 并尝试使用存储于/secure/sherlock 中的凭据执行身份验证。</p>\n<p>凭据文件格式为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username=username</span><br><span class=\"line\">password=password</span><br><span class=\"line\">domain=domian</span><br></pre></td></tr></table></figure></p>\n<p>应将其放置在仅具有 root 访问权限的某个安全位置（如 chmod 600 ）</p>\n<p>在文件操作期间， SMB服务器将根据用于挂载共享的凭据，检查文件的访问权限。客户端将根据从服务器发送来的文件 UID/GID，检查文件的访问权限。这意味着，客户端需要具有与 SMB服务器的文件相同的UID/GID 以及补充组成员资格（如有必要）</p>\n<p>处理本地访问检查和备用身份验证方法的挂载选项有很多，例如多用户（和cifscreds）以及基于Kerberos的选项。</p>\n<h6 id=\"使用自动挂载程序挂载-SMB-文件系统\"><a href=\"#使用自动挂载程序挂载-SMB-文件系统\" class=\"headerlink\" title=\"使用自动挂载程序挂载 SMB 文件系统\"></a>使用自动挂载程序挂载 SMB 文件系统</h6><p>要使用 mount 命令，需要具有root 特权以连接到 SMB 共享。或者可将条目添加至/etc/fstab,但是此后与SMB服务器的连接需一直保持活动状态。</p>\n<p>当某一进程试图访问SMB共享上的文件时，可以将自动挂载程序 （或autofs）服务配置为“按需”挂载 SMB 共享。当共享不再使用并处于不活动状态达一段时间以后，自动挂载程序将会挂载该共享。</p>\n<p>使用autofs 在 SMB 共享上设置自动挂载的进程实质与其它自动挂载相同。</p>\n<p>添加一个可识别共享基础目录和关联映射文件的auto.master.d 配置文件</p>\n<p>创建或编辑映射文件。包括 SMB共享的挂载详细信息</p>\n<p>启用并启动 autofs 服务</p>\n<h6 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips :\"></a>tips :</h6><p>如果尚未安装此服务，则安装 autofs 软件包，与 mount一样，自动挂载也依赖 cifs-utils软件包来挂载 SMB 共享。</p>\n<p>映射文件</p>\n<p>指定文件系统类型需要先使用 -fstype=cifs 选项，然后使用一列以逗号分隔的挂载选项（与mount 相同）服务器 URI 地址以冒号“：”为前缀。</p>\n<h6 id=\"示例：-1\"><a href=\"#示例：-1\" class=\"headerlink\" title=\"示例：\"></a>示例：</h6><p>以下示例在路径 /bakerst/cases 为 SMB 共享 //serverX/cases 创建一个自动挂载，并根据凭据文件 /secure/sherlock 进行身份验证。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/auto.master.d/bakerst.autofs</span><br><span class=\"line\"></span><br><span class=\"line\">/bakerst /etc/auto.bakerst</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/auto.bakerst</span><br><span class=\"line\"></span><br><span class=\"line\">cases -fstype=cifs,credentials=/secure/sherlock ://serverX/cases</span><br><span class=\"line\"></span><br><span class=\"line\">/secure/sherlock 内容（属于root,权限 0600）:</span><br><span class=\"line\"></span><br><span class=\"line\">username=sherlock</span><br><span class=\"line\">password=violin2018</span><br><span class=\"line\">domain=BAKERST</span><br><span class=\"line\"></span><br><span class=\"line\">autofs 启用并启动</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl enable autofs</span><br><span class=\"line\">sudo systemctl start autofs</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h6 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install cifs-utils autofs -y</span><br><span class=\"line\">sudo vim /etc/auto.master.d/shares.autofs</span><br><span class=\"line\">  /share /etc/auto.shares</span><br><span class=\"line\">sudovim /etc/auto.shares</span><br><span class=\"line\">  work -fstype=cifs,credentials=/etc/me.cred ://server0/student</span><br><span class=\"line\">  docs -fstype=cifs,guest ://server0/public</span><br><span class=\"line\">  cases -fstype=cifs,credentials=/etc/me.cred ://server0/student</span><br><span class=\"line\">sudo vim /etc/my.cred</span><br><span class=\"line\">  username=student</span><br><span class=\"line\">  password=student</span><br><span class=\"line\">  domain=MYGROUP</span><br><span class=\"line\">groups    <span class=\"comment\">#查看当前用户所属组</span></span><br><span class=\"line\">sudo groupadd bakerst -g 10221    <span class=\"comment\">#创建组</span></span><br><span class=\"line\">sudo usermod -aG bakerst student    <span class=\"comment\">#附加组</span></span><br><span class=\"line\">newgrp bakerst    <span class=\"comment\">#切换（更新）组</span></span><br></pre></td></tr></table></figure>\n"},{"title":"RH254 控制服务和守护进程","url":"566.html","id":"566","_content":"\n使用systemctl 控制服务\n\n系统启动和服务器进程由systemd 系统和服务管理器进行管理。此程序提供了一种方式，可以在启动时和运行中的系统上激活系统资源、服务器守护进程和其他进程。\n\n守护 进程是在执行我各种任务的后台等待或运行的进程。为了侦听连接，守护进程使用套接字。套接字可以由守护进程创建，或者与守护进程分离，并且可能由另一个进程创建（systemd），随后在客户端建立老婆如甲方将套接字为传递到守护进程。\n\n服务通常指的是一个或多个守护进程，但启动或停止一项服务可能会对系统的状态进行一次性更改（如配置网络接口），不会留下守护进程之后继续运行。\n\n一点历史\n\n许多年来，Linux 和 unix 系统的进程ID 1 属于 init 进程。此进程负责激活系统上的其他服务。常用的守护进程在系统启动时通过System V 和 Linux Standard Base(LSB) init 脚本启动。较不常用的守护进程由其他服务根据需要启动，如 init 或 Xinetd 。这些系统存在诸多限制，但 systemd 可以解决。\n\n在RHEL 7 中进程ID 1 属于systemd 这一新的init ，以下是 systemd 系统提供的几项新功能：\n\n*   并行化功能，它可提高系统的启动速度。\n*   按需启动守护进程，而不需要单独的服务。\n*   自动服务依赖关系管理可以防止长时间超时，例如在网络不可用时不启动网络服务。\n*   利用 Linux 控制组一起追踪相关进程的方式。\n\n注意\n\n有了 systemd ，基于 shell 的服务脚本仅用于几个传统服务.因此，带有shell 变量的配置文件将被取代，如 /etc/sysconfig 中可找到的配置文件。仍在使用中的配置文件作为systemd 环境文件被纳入，并作为 NAME=VALUE 对进行读取。它们不再以 shell 脚本的形式提供。\n\nsystemctl 和 systemd 单元\n\nsystemctl 命令用于管理各种类型的systemd 对象，他们称为单元。可以通过systemctl -t help 命令显示单元类型的列表。\n\n重要\n\nsystemctl 可以缩写或“省略”单元名称、进程树条目和单元说明，除非运行时带有 -l 选项。\n\n常用单元类型：\n\n*   服务单元具有.service 扩展名，代表系统服务。这种单元用于启动经常访问的守护进程，如web 服务器\n*   套接字单元具有.socket 扩展名，代表进程间通信（IPC）套接字。套接字的控制可能在建立客户端老婆如甲方传递到守护进程或新启动的服务。套接字单元用于延迟启动时的服务启动，或者按需启动不常使用的服务，这原则上类似使用xinetd 超级服务器按需启动的服务。\n*   路径单元具有 .path 扩展名，用于将服务的激活推迟到特定文件系统更改发生之后。这通常用于使用假脱机目录，如打印系统。\n\n服务状态\n\n可能通过 systemctl status name.type 查看服务的状。如果示提供单元类型，则 systemctl 将显示服务单元的状态（如果存在）\n```sh\n\n    [root@rhel ~]# systemctl status sshd.service\n    ● sshd.service - OpenSSH server daemon\n       Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled; vendor preset: enabled)\n       Active: active (running) since Thu 2019-01-03 19:26:20 CST; 49s ago\n         Docs: man:sshd(8)\n               man:sshd_config(5)\n     Main PID: 9232 (sshd)\n       CGroup: /system.slice/sshd.service\n               └─9232 /usr/sbin/sshd -D\n\n    Jan 03 19:26:20 rhel.tk systemd[1]: Starting OpenSSH server daemon...\n    Jan 03 19:26:20 rhel.tk sshd[9232]: Server listening on 0.0.0.0 port 22.\n    Jan 03 19:26:20 rhel.tk sshd[9232]: Server listening on :: port 22.\n    Jan 03 19:26:20 rhel.tk systemd[1]: Started OpenSSH server daemon.\n    Jan 03 19:26:58 rhel.tk sshd[9745]: Accepted password for root from 192.168.142.1 port 63462 ssh2\n    [root@rhel ~]#\n```    \n\n\n|关键字|描述\n| :--\n|loaded|单元配置文件已经处理\n|active(running)|正在通过一个或多个持续进程运行\n|active(exited)|已完成一次性配置\n|active(waiting)|运行中，但正在等待事件\n|inactive|不在运行\n|enabled|将在系统启动时启动\n|disabled|不会在系统启动时启动\n|static|无法启动，但可以由某一启用的单元自动启动\n\n\n\n注意\n\nsystemctl status NAME 命令取代了旧版的 RHEL 中使用的service NAME status\n\n使用systemctl 列出单元文件\n\n    #查询所有单元的状态以 验证系统启动\n    [root@rhel ~]# systemctl\n    #仅查询服务单元的状态\n    [root@rhel ~]# systemctl --type=service\n    #调查处于失败或者维护状态的任何单元。可选择添加 -l 选项以显示完整的输出。\n    [root@rhel ~]# systemctl status rngd.service -l\n    #也可使用 status 参数来判断特定的单元是否活动，以及显示该单元是否已启用在系统启动时启动。其他备用命令也可以轻松显示活动和已启用状态：\n    [root@rhel ~]# systemctl is-active sshd\n    [root@rhel ~]# systemctl is-enabled sshd\n    #列出所有已加载单元的活动状态。也可选择限制单元类型。--all 选项可加入不活动的单元\n    [root@rhel ~]# systemctl list-units --type=service\n    [root@rhel ~]# systemctl list-units --type=service --all\n    #列出所有单元的已启用和已禁用设置。也可选择限制单元类型。\n    [root@rhel ~]# systemctl list-unit-files --type=service\n    #仅查看失败的服务。\n    [root@rhel ~]# systemctl --faild --type=service\n\n启动和停止运行中系统上的系统守护进程\n\n启动、停止、重新启动、重新加载和验证状态是管理服务时经常执行的操作。\n\n查看sshd 服务的状态。\n\n    [root@rhel ~]# systemctl status sshd.service\n    ● sshd.service - OpenSSH server daemon\n       Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled; vendor preset: enabled)\n       Active: active (running) since Thu 2019-01-03 19:26:20 CST; 1h 46min ago\n         Docs: man:sshd(8)\n               man:sshd_config(5)\n     Main PID: 9232 (sshd)\n       CGroup: /system.slice/sshd.service\n               └─9232 /usr/sbin/sshd -D\n\n    Jan 03 19:26:20 rhel.tk systemd[1]: Starting OpenSSH server daemon...\n    Jan 03 19:26:20 rhel.tk sshd[9232]: Server listening on 0.0.0.0 port 22.\n    Jan 03 19:26:20 rhel.tk sshd[9232]: Server listening on :: port 22.\n    Jan 03 19:26:20 rhel.tk systemd[1]: Started OpenSSH server daemon.\n    Jan 03 19:26:58 rhel.tk sshd[9745]: Accepted password for root from 192.168.142.1 port 63462 ssh2\n    [root@rhel ~]#\n\n验证进程正在运行。\n\n    [root@rhel ~]# ps -up 9232\n    USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\n    root       9232  0.0  0.1 112756  4316 ?        Ss   19:26   0:00 /usr/sbin/sshd -D\n\n![](QQ截图20190103131704.png)\n\n\n停止服务并验证其状态\n\n![](QQ截图20190103143253.png)\n\n启动服务并查看状态。进程ID已经改变\n\n![](QQ截图20190103143415.png)\n\n以单一命令停止服务，然后再启动该服务\n\n![](QQ截图20190103143559.png)\n\n发出指示使用服务读取和重新加载配置文件，而不完全停止和启动服务。进程ID 不会改变\n\n单元依赖项\n\n服务可能会以其他服务依赖项的形式启动。如果套接字单元已启动。但名称相同的服务单元没有启动，对该网络套接字发出请求时将自动启动该服务。服务也可能会在满足文件系统条件时由路径单元触发。\n\nsystemctl list-dependencies UNIT 命令可用于显示必须与特定单元联会启动的其他单元的树。此命令 --reverser 选项将显示哪些单元必须要在指定单元启动后才能运行。\n\n屏蔽服务\n\n系统可能针对某一特定功能安装了有冲突的服务，如防火墙（iptables 和 firewalld ）。为防止管理员意外启动某一服务，可以屏蔽将在配置目录中创建链接，使得启动该服务时什么也不会发生。\n\n![](image-1.png)\n\n重要\n\n禁用的服务不会在系统启动时自动启动，也不会被其他单元文件启动，但可以手动启动。屏蔽的服务无法手动启动，也不会自动启动。\n\n使守护进程在系统启动时启动或停止\n\n    #查看服务的状态\n    [root@rhel ~]# systemctl status sshd.service\n    #禁用服务并验证其状态。请注意禁用服务不会停止该服务\n    [root@rhel ~]# systemctl disable sshd.service\n    [root@rhel ~]# systemctl status sshd.service\n    #启用服务并验证其状态\n    [root@rhel ~]# systemctl enable sshd.service\n    [root@rhel ~]# systemctl is-enabled sshd.service\n\n|命令|任务\n| :--\n|systemctl status UNIT|查看有关单元状态的详细信息\n|systemctl stop UNIT|在运行中的系统上停止一项服务\n|systemctl start UNIT|在运行中的系统上启动一项服务\n|systemctl restart UNIT|在运行中的系统上重启一项服务\n|systemctl reload UNIT|重新加载运行中服务的配置文件\n|systemctl mask UNIT|彻底禁用服务，使其无法手动启动或在系统启动时启动\n|systemctl umask UNIT|使屏蔽的服务变为可用\n|systemctl enable UNIT|将服务配置为在系统启动时启动\n|systemctl disable UNIT|禁止服务在系统启动时启动\n|systemctl list-dependencies UNIT|列出指定单元依赖的单元\n","source":"_drafts/RH254-控制服务和守护进程.md","raw":"---\ntitle: RH254 控制服务和守护进程\ntags:\n  - systemctl\n  - systemd\nurl: 566.html\nid: 566\ncategories:\n  - RHEL245\n---\n\n使用systemctl 控制服务\n\n系统启动和服务器进程由systemd 系统和服务管理器进行管理。此程序提供了一种方式，可以在启动时和运行中的系统上激活系统资源、服务器守护进程和其他进程。\n\n守护 进程是在执行我各种任务的后台等待或运行的进程。为了侦听连接，守护进程使用套接字。套接字可以由守护进程创建，或者与守护进程分离，并且可能由另一个进程创建（systemd），随后在客户端建立老婆如甲方将套接字为传递到守护进程。\n\n服务通常指的是一个或多个守护进程，但启动或停止一项服务可能会对系统的状态进行一次性更改（如配置网络接口），不会留下守护进程之后继续运行。\n\n一点历史\n\n许多年来，Linux 和 unix 系统的进程ID 1 属于 init 进程。此进程负责激活系统上的其他服务。常用的守护进程在系统启动时通过System V 和 Linux Standard Base(LSB) init 脚本启动。较不常用的守护进程由其他服务根据需要启动，如 init 或 Xinetd 。这些系统存在诸多限制，但 systemd 可以解决。\n\n在RHEL 7 中进程ID 1 属于systemd 这一新的init ，以下是 systemd 系统提供的几项新功能：\n\n*   并行化功能，它可提高系统的启动速度。\n*   按需启动守护进程，而不需要单独的服务。\n*   自动服务依赖关系管理可以防止长时间超时，例如在网络不可用时不启动网络服务。\n*   利用 Linux 控制组一起追踪相关进程的方式。\n\n注意\n\n有了 systemd ，基于 shell 的服务脚本仅用于几个传统服务.因此，带有shell 变量的配置文件将被取代，如 /etc/sysconfig 中可找到的配置文件。仍在使用中的配置文件作为systemd 环境文件被纳入，并作为 NAME=VALUE 对进行读取。它们不再以 shell 脚本的形式提供。\n\nsystemctl 和 systemd 单元\n\nsystemctl 命令用于管理各种类型的systemd 对象，他们称为单元。可以通过systemctl -t help 命令显示单元类型的列表。\n\n重要\n\nsystemctl 可以缩写或“省略”单元名称、进程树条目和单元说明，除非运行时带有 -l 选项。\n\n常用单元类型：\n\n*   服务单元具有.service 扩展名，代表系统服务。这种单元用于启动经常访问的守护进程，如web 服务器\n*   套接字单元具有.socket 扩展名，代表进程间通信（IPC）套接字。套接字的控制可能在建立客户端老婆如甲方传递到守护进程或新启动的服务。套接字单元用于延迟启动时的服务启动，或者按需启动不常使用的服务，这原则上类似使用xinetd 超级服务器按需启动的服务。\n*   路径单元具有 .path 扩展名，用于将服务的激活推迟到特定文件系统更改发生之后。这通常用于使用假脱机目录，如打印系统。\n\n服务状态\n\n可能通过 systemctl status name.type 查看服务的状。如果示提供单元类型，则 systemctl 将显示服务单元的状态（如果存在）\n```sh\n\n    [root@rhel ~]# systemctl status sshd.service\n    ● sshd.service - OpenSSH server daemon\n       Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled; vendor preset: enabled)\n       Active: active (running) since Thu 2019-01-03 19:26:20 CST; 49s ago\n         Docs: man:sshd(8)\n               man:sshd_config(5)\n     Main PID: 9232 (sshd)\n       CGroup: /system.slice/sshd.service\n               └─9232 /usr/sbin/sshd -D\n\n    Jan 03 19:26:20 rhel.tk systemd[1]: Starting OpenSSH server daemon...\n    Jan 03 19:26:20 rhel.tk sshd[9232]: Server listening on 0.0.0.0 port 22.\n    Jan 03 19:26:20 rhel.tk sshd[9232]: Server listening on :: port 22.\n    Jan 03 19:26:20 rhel.tk systemd[1]: Started OpenSSH server daemon.\n    Jan 03 19:26:58 rhel.tk sshd[9745]: Accepted password for root from 192.168.142.1 port 63462 ssh2\n    [root@rhel ~]#\n```    \n\n\n|关键字|描述\n| :--\n|loaded|单元配置文件已经处理\n|active(running)|正在通过一个或多个持续进程运行\n|active(exited)|已完成一次性配置\n|active(waiting)|运行中，但正在等待事件\n|inactive|不在运行\n|enabled|将在系统启动时启动\n|disabled|不会在系统启动时启动\n|static|无法启动，但可以由某一启用的单元自动启动\n\n\n\n注意\n\nsystemctl status NAME 命令取代了旧版的 RHEL 中使用的service NAME status\n\n使用systemctl 列出单元文件\n\n    #查询所有单元的状态以 验证系统启动\n    [root@rhel ~]# systemctl\n    #仅查询服务单元的状态\n    [root@rhel ~]# systemctl --type=service\n    #调查处于失败或者维护状态的任何单元。可选择添加 -l 选项以显示完整的输出。\n    [root@rhel ~]# systemctl status rngd.service -l\n    #也可使用 status 参数来判断特定的单元是否活动，以及显示该单元是否已启用在系统启动时启动。其他备用命令也可以轻松显示活动和已启用状态：\n    [root@rhel ~]# systemctl is-active sshd\n    [root@rhel ~]# systemctl is-enabled sshd\n    #列出所有已加载单元的活动状态。也可选择限制单元类型。--all 选项可加入不活动的单元\n    [root@rhel ~]# systemctl list-units --type=service\n    [root@rhel ~]# systemctl list-units --type=service --all\n    #列出所有单元的已启用和已禁用设置。也可选择限制单元类型。\n    [root@rhel ~]# systemctl list-unit-files --type=service\n    #仅查看失败的服务。\n    [root@rhel ~]# systemctl --faild --type=service\n\n启动和停止运行中系统上的系统守护进程\n\n启动、停止、重新启动、重新加载和验证状态是管理服务时经常执行的操作。\n\n查看sshd 服务的状态。\n\n    [root@rhel ~]# systemctl status sshd.service\n    ● sshd.service - OpenSSH server daemon\n       Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled; vendor preset: enabled)\n       Active: active (running) since Thu 2019-01-03 19:26:20 CST; 1h 46min ago\n         Docs: man:sshd(8)\n               man:sshd_config(5)\n     Main PID: 9232 (sshd)\n       CGroup: /system.slice/sshd.service\n               └─9232 /usr/sbin/sshd -D\n\n    Jan 03 19:26:20 rhel.tk systemd[1]: Starting OpenSSH server daemon...\n    Jan 03 19:26:20 rhel.tk sshd[9232]: Server listening on 0.0.0.0 port 22.\n    Jan 03 19:26:20 rhel.tk sshd[9232]: Server listening on :: port 22.\n    Jan 03 19:26:20 rhel.tk systemd[1]: Started OpenSSH server daemon.\n    Jan 03 19:26:58 rhel.tk sshd[9745]: Accepted password for root from 192.168.142.1 port 63462 ssh2\n    [root@rhel ~]#\n\n验证进程正在运行。\n\n    [root@rhel ~]# ps -up 9232\n    USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\n    root       9232  0.0  0.1 112756  4316 ?        Ss   19:26   0:00 /usr/sbin/sshd -D\n\n![](QQ截图20190103131704.png)\n\n\n停止服务并验证其状态\n\n![](QQ截图20190103143253.png)\n\n启动服务并查看状态。进程ID已经改变\n\n![](QQ截图20190103143415.png)\n\n以单一命令停止服务，然后再启动该服务\n\n![](QQ截图20190103143559.png)\n\n发出指示使用服务读取和重新加载配置文件，而不完全停止和启动服务。进程ID 不会改变\n\n单元依赖项\n\n服务可能会以其他服务依赖项的形式启动。如果套接字单元已启动。但名称相同的服务单元没有启动，对该网络套接字发出请求时将自动启动该服务。服务也可能会在满足文件系统条件时由路径单元触发。\n\nsystemctl list-dependencies UNIT 命令可用于显示必须与特定单元联会启动的其他单元的树。此命令 --reverser 选项将显示哪些单元必须要在指定单元启动后才能运行。\n\n屏蔽服务\n\n系统可能针对某一特定功能安装了有冲突的服务，如防火墙（iptables 和 firewalld ）。为防止管理员意外启动某一服务，可以屏蔽将在配置目录中创建链接，使得启动该服务时什么也不会发生。\n\n![](image-1.png)\n\n重要\n\n禁用的服务不会在系统启动时自动启动，也不会被其他单元文件启动，但可以手动启动。屏蔽的服务无法手动启动，也不会自动启动。\n\n使守护进程在系统启动时启动或停止\n\n    #查看服务的状态\n    [root@rhel ~]# systemctl status sshd.service\n    #禁用服务并验证其状态。请注意禁用服务不会停止该服务\n    [root@rhel ~]# systemctl disable sshd.service\n    [root@rhel ~]# systemctl status sshd.service\n    #启用服务并验证其状态\n    [root@rhel ~]# systemctl enable sshd.service\n    [root@rhel ~]# systemctl is-enabled sshd.service\n\n|命令|任务\n| :--\n|systemctl status UNIT|查看有关单元状态的详细信息\n|systemctl stop UNIT|在运行中的系统上停止一项服务\n|systemctl start UNIT|在运行中的系统上启动一项服务\n|systemctl restart UNIT|在运行中的系统上重启一项服务\n|systemctl reload UNIT|重新加载运行中服务的配置文件\n|systemctl mask UNIT|彻底禁用服务，使其无法手动启动或在系统启动时启动\n|systemctl umask UNIT|使屏蔽的服务变为可用\n|systemctl enable UNIT|将服务配置为在系统启动时启动\n|systemctl disable UNIT|禁止服务在系统启动时启动\n|systemctl list-dependencies UNIT|列出指定单元依赖的单元\n","slug":"RH254-控制服务和守护进程","published":0,"date":"2019-01-06T18:02:14.798Z","updated":"2019-01-06T18:02:14.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqi1k001alxkj9pp3d1ri","content":"<p>使用systemctl 控制服务</p>\n<p>系统启动和服务器进程由systemd 系统和服务管理器进行管理。此程序提供了一种方式，可以在启动时和运行中的系统上激活系统资源、服务器守护进程和其他进程。</p>\n<p>守护 进程是在执行我各种任务的后台等待或运行的进程。为了侦听连接，守护进程使用套接字。套接字可以由守护进程创建，或者与守护进程分离，并且可能由另一个进程创建（systemd），随后在客户端建立老婆如甲方将套接字为传递到守护进程。</p>\n<p>服务通常指的是一个或多个守护进程，但启动或停止一项服务可能会对系统的状态进行一次性更改（如配置网络接口），不会留下守护进程之后继续运行。</p>\n<p>一点历史</p>\n<p>许多年来，Linux 和 unix 系统的进程ID 1 属于 init 进程。此进程负责激活系统上的其他服务。常用的守护进程在系统启动时通过System V 和 Linux Standard Base(LSB) init 脚本启动。较不常用的守护进程由其他服务根据需要启动，如 init 或 Xinetd 。这些系统存在诸多限制，但 systemd 可以解决。</p>\n<p>在RHEL 7 中进程ID 1 属于systemd 这一新的init ，以下是 systemd 系统提供的几项新功能：</p>\n<ul>\n<li>并行化功能，它可提高系统的启动速度。</li>\n<li>按需启动守护进程，而不需要单独的服务。</li>\n<li>自动服务依赖关系管理可以防止长时间超时，例如在网络不可用时不启动网络服务。</li>\n<li>利用 Linux 控制组一起追踪相关进程的方式。</li>\n</ul>\n<p>注意</p>\n<p>有了 systemd ，基于 shell 的服务脚本仅用于几个传统服务.因此，带有shell 变量的配置文件将被取代，如 /etc/sysconfig 中可找到的配置文件。仍在使用中的配置文件作为systemd 环境文件被纳入，并作为 NAME=VALUE 对进行读取。它们不再以 shell 脚本的形式提供。</p>\n<p>systemctl 和 systemd 单元</p>\n<p>systemctl 命令用于管理各种类型的systemd 对象，他们称为单元。可以通过systemctl -t help 命令显示单元类型的列表。</p>\n<p>重要</p>\n<p>systemctl 可以缩写或“省略”单元名称、进程树条目和单元说明，除非运行时带有 -l 选项。</p>\n<p>常用单元类型：</p>\n<ul>\n<li>服务单元具有.service 扩展名，代表系统服务。这种单元用于启动经常访问的守护进程，如web 服务器</li>\n<li>套接字单元具有.socket 扩展名，代表进程间通信（IPC）套接字。套接字的控制可能在建立客户端老婆如甲方传递到守护进程或新启动的服务。套接字单元用于延迟启动时的服务启动，或者按需启动不常使用的服务，这原则上类似使用xinetd 超级服务器按需启动的服务。</li>\n<li>路径单元具有 .path 扩展名，用于将服务的激活推迟到特定文件系统更改发生之后。这通常用于使用假脱机目录，如打印系统。</li>\n</ul>\n<p>服务状态</p>\n<p>可能通过 systemctl status name.type 查看服务的状。如果示提供单元类型，则 systemctl 将显示服务单元的状态（如果存在）</p>\n<pre><code class=\"sh\">\n[root@rhel ~]<span class=\"comment\"># systemctl status sshd.service</span>\n● sshd.service - OpenSSH server daemon\n   Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled; vendor preset: enabled)\n   Active: active (running) since Thu 2019-01-03 19:26:20 CST; 49s ago\n     Docs: man:sshd(8)\n           man:sshd_config(5)\n Main PID: 9232 (sshd)\n   CGroup: /system.slice/sshd.service\n           └─9232 /usr/sbin/sshd -D\n\nJan 03 19:26:20 rhel.tk systemd[1]: Starting OpenSSH server daemon...\nJan 03 19:26:20 rhel.tk sshd[9232]: Server listening on 0.0.0.0 port 22.\nJan 03 19:26:20 rhel.tk sshd[9232]: Server listening on :: port 22.\nJan 03 19:26:20 rhel.tk systemd[1]: Started OpenSSH server daemon.\nJan 03 19:26:58 rhel.tk sshd[9745]: Accepted password <span class=\"keyword\">for</span> root from 192.168.142.1 port 63462 ssh2\n[root@rhel ~]<span class=\"comment\">#</span>\n</code></pre>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">关键字</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">loaded</td>\n<td>单元配置文件已经处理</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">active(running)</td>\n<td>正在通过一个或多个持续进程运行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">active(exited)</td>\n<td>已完成一次性配置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">active(waiting)</td>\n<td>运行中，但正在等待事件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">inactive</td>\n<td>不在运行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">enabled</td>\n<td>将在系统启动时启动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">disabled</td>\n<td>不会在系统启动时启动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">static</td>\n<td>无法启动，但可以由某一启用的单元自动启动</td>\n</tr>\n</tbody>\n</table>\n<p>注意</p>\n<p>systemctl status NAME 命令取代了旧版的 RHEL 中使用的service NAME status</p>\n<p>使用systemctl 列出单元文件</p>\n<pre><code>#查询所有单元的状态以 验证系统启动\n[root@rhel ~]# systemctl\n#仅查询服务单元的状态\n[root@rhel ~]# systemctl --type=service\n#调查处于失败或者维护状态的任何单元。可选择添加 -l 选项以显示完整的输出。\n[root@rhel ~]# systemctl status rngd.service -l\n#也可使用 status 参数来判断特定的单元是否活动，以及显示该单元是否已启用在系统启动时启动。其他备用命令也可以轻松显示活动和已启用状态：\n[root@rhel ~]# systemctl is-active sshd\n[root@rhel ~]# systemctl is-enabled sshd\n#列出所有已加载单元的活动状态。也可选择限制单元类型。--all 选项可加入不活动的单元\n[root@rhel ~]# systemctl list-units --type=service\n[root@rhel ~]# systemctl list-units --type=service --all\n#列出所有单元的已启用和已禁用设置。也可选择限制单元类型。\n[root@rhel ~]# systemctl list-unit-files --type=service\n#仅查看失败的服务。\n[root@rhel ~]# systemctl --faild --type=service\n</code></pre><p>启动和停止运行中系统上的系统守护进程</p>\n<p>启动、停止、重新启动、重新加载和验证状态是管理服务时经常执行的操作。</p>\n<p>查看sshd 服务的状态。</p>\n<pre><code>[root@rhel ~]# systemctl status sshd.service\n● sshd.service - OpenSSH server daemon\n   Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled; vendor preset: enabled)\n   Active: active (running) since Thu 2019-01-03 19:26:20 CST; 1h 46min ago\n     Docs: man:sshd(8)\n           man:sshd_config(5)\n Main PID: 9232 (sshd)\n   CGroup: /system.slice/sshd.service\n           └─9232 /usr/sbin/sshd -D\n\nJan 03 19:26:20 rhel.tk systemd[1]: Starting OpenSSH server daemon...\nJan 03 19:26:20 rhel.tk sshd[9232]: Server listening on 0.0.0.0 port 22.\nJan 03 19:26:20 rhel.tk sshd[9232]: Server listening on :: port 22.\nJan 03 19:26:20 rhel.tk systemd[1]: Started OpenSSH server daemon.\nJan 03 19:26:58 rhel.tk sshd[9745]: Accepted password for root from 192.168.142.1 port 63462 ssh2\n[root@rhel ~]#\n</code></pre><p>验证进程正在运行。</p>\n<pre><code>[root@rhel ~]# ps -up 9232\nUSER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot       9232  0.0  0.1 112756  4316 ?        Ss   19:26   0:00 /usr/sbin/sshd -D\n</code></pre><p><img src=\"/2019/01/07/RH254-控制服务和守护进程/QQ截图20190103131704.png\" alt=\"\"></p>\n<p>停止服务并验证其状态</p>\n<p><img src=\"/2019/01/07/RH254-控制服务和守护进程/QQ截图20190103143253.png\" alt=\"\"></p>\n<p>启动服务并查看状态。进程ID已经改变</p>\n<p><img src=\"/2019/01/07/RH254-控制服务和守护进程/QQ截图20190103143415.png\" alt=\"\"></p>\n<p>以单一命令停止服务，然后再启动该服务</p>\n<p><img src=\"/2019/01/07/RH254-控制服务和守护进程/QQ截图20190103143559.png\" alt=\"\"></p>\n<p>发出指示使用服务读取和重新加载配置文件，而不完全停止和启动服务。进程ID 不会改变</p>\n<p>单元依赖项</p>\n<p>服务可能会以其他服务依赖项的形式启动。如果套接字单元已启动。但名称相同的服务单元没有启动，对该网络套接字发出请求时将自动启动该服务。服务也可能会在满足文件系统条件时由路径单元触发。</p>\n<p>systemctl list-dependencies UNIT 命令可用于显示必须与特定单元联会启动的其他单元的树。此命令 –reverser 选项将显示哪些单元必须要在指定单元启动后才能运行。</p>\n<p>屏蔽服务</p>\n<p>系统可能针对某一特定功能安装了有冲突的服务，如防火墙（iptables 和 firewalld ）。为防止管理员意外启动某一服务，可以屏蔽将在配置目录中创建链接，使得启动该服务时什么也不会发生。</p>\n<p><img src=\"/2019/01/07/RH254-控制服务和守护进程/image-1.png\" alt=\"\"></p>\n<p>重要</p>\n<p>禁用的服务不会在系统启动时自动启动，也不会被其他单元文件启动，但可以手动启动。屏蔽的服务无法手动启动，也不会自动启动。</p>\n<p>使守护进程在系统启动时启动或停止</p>\n<pre><code>#查看服务的状态\n[root@rhel ~]# systemctl status sshd.service\n#禁用服务并验证其状态。请注意禁用服务不会停止该服务\n[root@rhel ~]# systemctl disable sshd.service\n[root@rhel ~]# systemctl status sshd.service\n#启用服务并验证其状态\n[root@rhel ~]# systemctl enable sshd.service\n[root@rhel ~]# systemctl is-enabled sshd.service\n</code></pre><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th>任务</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">systemctl status UNIT</td>\n<td>查看有关单元状态的详细信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">systemctl stop UNIT</td>\n<td>在运行中的系统上停止一项服务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">systemctl start UNIT</td>\n<td>在运行中的系统上启动一项服务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">systemctl restart UNIT</td>\n<td>在运行中的系统上重启一项服务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">systemctl reload UNIT</td>\n<td>重新加载运行中服务的配置文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">systemctl mask UNIT</td>\n<td>彻底禁用服务，使其无法手动启动或在系统启动时启动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">systemctl umask UNIT</td>\n<td>使屏蔽的服务变为可用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">systemctl enable UNIT</td>\n<td>将服务配置为在系统启动时启动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">systemctl disable UNIT</td>\n<td>禁止服务在系统启动时启动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">systemctl list-dependencies UNIT</td>\n<td>列出指定单元依赖的单元</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>使用systemctl 控制服务</p>\n<p>系统启动和服务器进程由systemd 系统和服务管理器进行管理。此程序提供了一种方式，可以在启动时和运行中的系统上激活系统资源、服务器守护进程和其他进程。</p>\n<p>守护 进程是在执行我各种任务的后台等待或运行的进程。为了侦听连接，守护进程使用套接字。套接字可以由守护进程创建，或者与守护进程分离，并且可能由另一个进程创建（systemd），随后在客户端建立老婆如甲方将套接字为传递到守护进程。</p>\n<p>服务通常指的是一个或多个守护进程，但启动或停止一项服务可能会对系统的状态进行一次性更改（如配置网络接口），不会留下守护进程之后继续运行。</p>\n<p>一点历史</p>\n<p>许多年来，Linux 和 unix 系统的进程ID 1 属于 init 进程。此进程负责激活系统上的其他服务。常用的守护进程在系统启动时通过System V 和 Linux Standard Base(LSB) init 脚本启动。较不常用的守护进程由其他服务根据需要启动，如 init 或 Xinetd 。这些系统存在诸多限制，但 systemd 可以解决。</p>\n<p>在RHEL 7 中进程ID 1 属于systemd 这一新的init ，以下是 systemd 系统提供的几项新功能：</p>\n<ul>\n<li>并行化功能，它可提高系统的启动速度。</li>\n<li>按需启动守护进程，而不需要单独的服务。</li>\n<li>自动服务依赖关系管理可以防止长时间超时，例如在网络不可用时不启动网络服务。</li>\n<li>利用 Linux 控制组一起追踪相关进程的方式。</li>\n</ul>\n<p>注意</p>\n<p>有了 systemd ，基于 shell 的服务脚本仅用于几个传统服务.因此，带有shell 变量的配置文件将被取代，如 /etc/sysconfig 中可找到的配置文件。仍在使用中的配置文件作为systemd 环境文件被纳入，并作为 NAME=VALUE 对进行读取。它们不再以 shell 脚本的形式提供。</p>\n<p>systemctl 和 systemd 单元</p>\n<p>systemctl 命令用于管理各种类型的systemd 对象，他们称为单元。可以通过systemctl -t help 命令显示单元类型的列表。</p>\n<p>重要</p>\n<p>systemctl 可以缩写或“省略”单元名称、进程树条目和单元说明，除非运行时带有 -l 选项。</p>\n<p>常用单元类型：</p>\n<ul>\n<li>服务单元具有.service 扩展名，代表系统服务。这种单元用于启动经常访问的守护进程，如web 服务器</li>\n<li>套接字单元具有.socket 扩展名，代表进程间通信（IPC）套接字。套接字的控制可能在建立客户端老婆如甲方传递到守护进程或新启动的服务。套接字单元用于延迟启动时的服务启动，或者按需启动不常使用的服务，这原则上类似使用xinetd 超级服务器按需启动的服务。</li>\n<li>路径单元具有 .path 扩展名，用于将服务的激活推迟到特定文件系统更改发生之后。这通常用于使用假脱机目录，如打印系统。</li>\n</ul>\n<p>服务状态</p>\n<p>可能通过 systemctl status name.type 查看服务的状。如果示提供单元类型，则 systemctl 将显示服务单元的状态（如果存在）</p>\n<pre><code class=\"sh\">\n[root@rhel ~]<span class=\"comment\"># systemctl status sshd.service</span>\n● sshd.service - OpenSSH server daemon\n   Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled; vendor preset: enabled)\n   Active: active (running) since Thu 2019-01-03 19:26:20 CST; 49s ago\n     Docs: man:sshd(8)\n           man:sshd_config(5)\n Main PID: 9232 (sshd)\n   CGroup: /system.slice/sshd.service\n           └─9232 /usr/sbin/sshd -D\n\nJan 03 19:26:20 rhel.tk systemd[1]: Starting OpenSSH server daemon...\nJan 03 19:26:20 rhel.tk sshd[9232]: Server listening on 0.0.0.0 port 22.\nJan 03 19:26:20 rhel.tk sshd[9232]: Server listening on :: port 22.\nJan 03 19:26:20 rhel.tk systemd[1]: Started OpenSSH server daemon.\nJan 03 19:26:58 rhel.tk sshd[9745]: Accepted password <span class=\"keyword\">for</span> root from 192.168.142.1 port 63462 ssh2\n[root@rhel ~]<span class=\"comment\">#</span>\n</code></pre>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">关键字</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">loaded</td>\n<td>单元配置文件已经处理</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">active(running)</td>\n<td>正在通过一个或多个持续进程运行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">active(exited)</td>\n<td>已完成一次性配置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">active(waiting)</td>\n<td>运行中，但正在等待事件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">inactive</td>\n<td>不在运行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">enabled</td>\n<td>将在系统启动时启动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">disabled</td>\n<td>不会在系统启动时启动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">static</td>\n<td>无法启动，但可以由某一启用的单元自动启动</td>\n</tr>\n</tbody>\n</table>\n<p>注意</p>\n<p>systemctl status NAME 命令取代了旧版的 RHEL 中使用的service NAME status</p>\n<p>使用systemctl 列出单元文件</p>\n<pre><code>#查询所有单元的状态以 验证系统启动\n[root@rhel ~]# systemctl\n#仅查询服务单元的状态\n[root@rhel ~]# systemctl --type=service\n#调查处于失败或者维护状态的任何单元。可选择添加 -l 选项以显示完整的输出。\n[root@rhel ~]# systemctl status rngd.service -l\n#也可使用 status 参数来判断特定的单元是否活动，以及显示该单元是否已启用在系统启动时启动。其他备用命令也可以轻松显示活动和已启用状态：\n[root@rhel ~]# systemctl is-active sshd\n[root@rhel ~]# systemctl is-enabled sshd\n#列出所有已加载单元的活动状态。也可选择限制单元类型。--all 选项可加入不活动的单元\n[root@rhel ~]# systemctl list-units --type=service\n[root@rhel ~]# systemctl list-units --type=service --all\n#列出所有单元的已启用和已禁用设置。也可选择限制单元类型。\n[root@rhel ~]# systemctl list-unit-files --type=service\n#仅查看失败的服务。\n[root@rhel ~]# systemctl --faild --type=service\n</code></pre><p>启动和停止运行中系统上的系统守护进程</p>\n<p>启动、停止、重新启动、重新加载和验证状态是管理服务时经常执行的操作。</p>\n<p>查看sshd 服务的状态。</p>\n<pre><code>[root@rhel ~]# systemctl status sshd.service\n● sshd.service - OpenSSH server daemon\n   Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled; vendor preset: enabled)\n   Active: active (running) since Thu 2019-01-03 19:26:20 CST; 1h 46min ago\n     Docs: man:sshd(8)\n           man:sshd_config(5)\n Main PID: 9232 (sshd)\n   CGroup: /system.slice/sshd.service\n           └─9232 /usr/sbin/sshd -D\n\nJan 03 19:26:20 rhel.tk systemd[1]: Starting OpenSSH server daemon...\nJan 03 19:26:20 rhel.tk sshd[9232]: Server listening on 0.0.0.0 port 22.\nJan 03 19:26:20 rhel.tk sshd[9232]: Server listening on :: port 22.\nJan 03 19:26:20 rhel.tk systemd[1]: Started OpenSSH server daemon.\nJan 03 19:26:58 rhel.tk sshd[9745]: Accepted password for root from 192.168.142.1 port 63462 ssh2\n[root@rhel ~]#\n</code></pre><p>验证进程正在运行。</p>\n<pre><code>[root@rhel ~]# ps -up 9232\nUSER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot       9232  0.0  0.1 112756  4316 ?        Ss   19:26   0:00 /usr/sbin/sshd -D\n</code></pre><p><img src=\"/2019/01/07/RH254-控制服务和守护进程/QQ截图20190103131704.png\" alt=\"\"></p>\n<p>停止服务并验证其状态</p>\n<p><img src=\"/2019/01/07/RH254-控制服务和守护进程/QQ截图20190103143253.png\" alt=\"\"></p>\n<p>启动服务并查看状态。进程ID已经改变</p>\n<p><img src=\"/2019/01/07/RH254-控制服务和守护进程/QQ截图20190103143415.png\" alt=\"\"></p>\n<p>以单一命令停止服务，然后再启动该服务</p>\n<p><img src=\"/2019/01/07/RH254-控制服务和守护进程/QQ截图20190103143559.png\" alt=\"\"></p>\n<p>发出指示使用服务读取和重新加载配置文件，而不完全停止和启动服务。进程ID 不会改变</p>\n<p>单元依赖项</p>\n<p>服务可能会以其他服务依赖项的形式启动。如果套接字单元已启动。但名称相同的服务单元没有启动，对该网络套接字发出请求时将自动启动该服务。服务也可能会在满足文件系统条件时由路径单元触发。</p>\n<p>systemctl list-dependencies UNIT 命令可用于显示必须与特定单元联会启动的其他单元的树。此命令 –reverser 选项将显示哪些单元必须要在指定单元启动后才能运行。</p>\n<p>屏蔽服务</p>\n<p>系统可能针对某一特定功能安装了有冲突的服务，如防火墙（iptables 和 firewalld ）。为防止管理员意外启动某一服务，可以屏蔽将在配置目录中创建链接，使得启动该服务时什么也不会发生。</p>\n<p><img src=\"/2019/01/07/RH254-控制服务和守护进程/image-1.png\" alt=\"\"></p>\n<p>重要</p>\n<p>禁用的服务不会在系统启动时自动启动，也不会被其他单元文件启动，但可以手动启动。屏蔽的服务无法手动启动，也不会自动启动。</p>\n<p>使守护进程在系统启动时启动或停止</p>\n<pre><code>#查看服务的状态\n[root@rhel ~]# systemctl status sshd.service\n#禁用服务并验证其状态。请注意禁用服务不会停止该服务\n[root@rhel ~]# systemctl disable sshd.service\n[root@rhel ~]# systemctl status sshd.service\n#启用服务并验证其状态\n[root@rhel ~]# systemctl enable sshd.service\n[root@rhel ~]# systemctl is-enabled sshd.service\n</code></pre><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th>任务</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">systemctl status UNIT</td>\n<td>查看有关单元状态的详细信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">systemctl stop UNIT</td>\n<td>在运行中的系统上停止一项服务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">systemctl start UNIT</td>\n<td>在运行中的系统上启动一项服务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">systemctl restart UNIT</td>\n<td>在运行中的系统上重启一项服务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">systemctl reload UNIT</td>\n<td>重新加载运行中服务的配置文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">systemctl mask UNIT</td>\n<td>彻底禁用服务，使其无法手动启动或在系统启动时启动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">systemctl umask UNIT</td>\n<td>使屏蔽的服务变为可用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">systemctl enable UNIT</td>\n<td>将服务配置为在系统启动时启动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">systemctl disable UNIT</td>\n<td>禁止服务在系统启动时启动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">systemctl list-dependencies UNIT</td>\n<td>列出指定单元依赖的单元</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Chapter 14. Accessing Linux File System","url":"183.html","id":"183","date":"2018-04-17T08:43:24.000Z","_content":"\n在Red Hat Enterprise Linux 中检测到的第一个SCSI、PATA/SATA或USB硬盘驱动器是/dev/sda,第二个/dev/sdb，以此类推。\n\n/dev/sda 的第一个分区为/dev/sda1,第二个分区为/dev/sda2 ，以此类推。\n\n虚拟机中的硬盘驱动器是例外，一般显示了/dev/vd<letter>或/dev/xvd<letter>\n\nLVM(逻辑卷管理)，通过LVM一个或多个块设备可以汇集成一个存储池，称为卷组（VG），对于卷组/dev/目录中有一个名称与该卷组相同的目录。在该目录下，已经创建名称与逻辑卷相同的符号链接。例如：代表myvg卷组的myvg逻辑卷的设备文件是/dev/myvg/mylv。\n\nLVM依赖于设备映射程序(DM)内核驱动程序。以上符号链接/dev/myvg/mylv 指向/dev/dm-number 块设备节点。number 的分配是连续的。从零（0）开始  \n\n。每个逻辑卷在/dev/mapper 目录中有另外一个符号链接，名称为/dev/mapper/myvg-mylv。通常可能使用任一可靠且一致的符号链接名称来访问逻辑卷。因为/dev/dm-number名称在每次启动会有所不同。\n\ndf #显示已经挂载的磁盘空间、已用和剩余，所占比。包括本地和远程\n\ntmpfs 和devtmpfs 设备是系统内存中的文件系统，在系统重启后，写入tmpfs或devtmpfs的文件都会消失。\n```sh\ndf -h    #报告单位是KiB(210),MiB(220),GiB(230)\ndf -H    #报告单位是KB(103),MB(106),GB(109)硬盘驱动器制造商在广告其产品时通常使用SI单位。\ndu -h dir    #以递归方式查看特定目录空间详细信息，-h 同df\ndu -H dir    #以递归方式查看特定目录空间详细信息，-H 同df\n```\nmount 挂载的两种方式:一、驻留在/dev中的设备文件。二、文件系统的通用唯一标识符：UUID。\n\nblkid 命令用来列出其上具体文件系统的现有分区和文件系统的UUID，以后用于格式化该分区的文件系统。  \n\n```sh\n\n[root@server0 Desktop]# blkid\n/dev/sda1: UUID=\"9bf6b9f7-92ad-441b-848e-0257cbb883d1\" TYPE=\"xfs\"\n\n#根据分区的设备文件\nmount /dev/vdb1 /mnt/mydata\n#根据通用唯一标识符UUID\nmount UUID=\"9bf6b9f7-92ad-441b-848e-0257cbb883d1\" /mnt/mydata\n\n```\n如果将文件挂载到现有的目录且这个目录不为空，则这个目录下的文件在挂载后不可访问\n\numount 挂载点    #卸载文件系统。\n\n1.当前处理挂载系统下无法卸载，解决办法：退出当前挂载点  \n\n2.有进程在使用当前挂载点，无法卸载。解决办法：结束进程\n\nlsof /mnt/mydata    #命令列出拨给目录中所有打开的文件以及访问他们的进程。识别哪些进程在阻止文件系统被成功卸载非常有用。\n\n图形桌面环境针对USB闪存设备和驱动器等可移动设备会自动挂载，可移动介质的挂载点是/run/media/<user>/<label>\n\n* * *\n\n#### 软链接和硬链接\n\n硬链接：硬链接是新的目录条目，其引用文件系统中的现有文件。指向同一文件内容的硬链接需要在相同的文件系统中。硬链接具有相同的权限 、链接数、用户/组权限、时间戳、以及文件内容。在文件权限后面，所有者前面的数字为硬链接数。  \n\nln 命令为现在文件创建新的硬链接。该命令需要一个现在文件作为第一参数，后面可以跟一个或多个额外的硬连接。新硬链接创建后无法区别哪一个是现有硬连接的原始链接。使用ls -l 查看时文件类型都是文件。  \n\n```sh\n\n[root@server0 newspace]# echo \"Hello\" >file1.txt\n[root@server0 newspace]# ln file1.txt file2.txt\n[root@server0 newspace]# ll\ntotal 8\n-rw-r--r--. 2 root root  6 Apr 17 15:00 file1.txt\n-rw-r--r--. 2 root root  6 Apr 17 15:00 file2.txt\ndrwxr-xr-x. 2 root root 20 Apr 17 14:46 newdir\n[root@server0 newspace]# cat file2.txt \nHello\n[root@server0 newspace]# echo 'World' >> file1.txt \n[root@server0 newspace]# cat file2.txt \nHello\nWorld\n[root@server0 newspace]# rm -rf file1.txt \n[root@server0 newspace]# cat file2.txt \nHello\nWorld\n[root@server0 newspace]# \n#创建硬连接后，只要一个文件内容改变其它的跟着改变，且删除其中一个硬链接后不会影响其它链接，内容依然可用。\n\n```\nls -s 命令创建软链接，也称为符号链接。软件连接是特殊的文件类型，它指向现在的文件或目录，软链接可以指向其它文件系统中的文件或目录。\n\n![图片.png](1523949252627674.png)\n\n当原始文件被删除后，软链接依然会指向该文件，但目标已经消失。指向缺失的文件的软链接称为：“悬挂的软链接”，查看时会提示文件或目录不存在。\n\n![图片.png](1523949409259777.png)  \n\n软链接指向目录时，可通过cd dir 进入到newdir/目录下。\n\n* * *\n\n#### find and locate 查找文件  \n\nlocate 命令根据locate 数据库中的文件名和路径返回搜索结果。该数据库存储文件名和路径信息。\n\n调用locate搜索的用户必须对包含匹配元素的目录树具有读取权限才会有返回结果。\n\n```sh\n\nlocate passwd    #查找文件名和路径包含passwd文件和目录\nlocate -i messages    #不区分大小写查找包含messages的文件和目录\nlocate -n 5 snow.png    #查找前5个匹配的文件或目录\nupdatedb    #更新locate数据库，默认每天自动更新。root用户可以updatedb手动更新。\n\n```\nfind 命令实时搜索，查找符合命令行参数条件的文件。调用find搜索的用户必须对包含匹配元素的目录树具有读取权限才会有返回结果。find 的第一个参数为目录，如果缺省则默认为当前目录，并在当前目录树下搜索。find 可以根据文件名、文件大小、最近修改时间戳和其他文件特性的任意组合进行搜索。\n\n```sh\n\nfind / -name sshd_config    #在/根目录和所有子目录中搜索名为sshd\\_config的文件\nfind / -name '*.txt'    #在/根目录和所有子目录中搜索以‘.txt’结尾的文件\nfind /etc -name '*pass*'    #在/etc目录和所有子目录中搜索名称中包含pass的文件\nfind / -iname '*messages*'    #-iname 不区分大小写，在/根目录和所有子目录中搜索名称中包含‘messages’的文件  \n\nfind -user student    #在当前目录查找student用户拥有的文件\nfind -group student    #在当前目录查找student组拥有的文件\nfind -uid 1000    #在当前目录查找uid为1000拥有的文件\nfind -gid 1000    #在当前目录查找gid为1000拥有的文件\nfind / -user root -group mail    #在/根目录下搜索root用户和mail组拥有的文件（同时）\n\nfind /home -perm 764    #在home目录下查找文件完全匹配权限为764的文件，777不满足\nfind /home -perm -324    #在home目录下查找文件对应权限至少包含324的文件，三个权限位置对应满足。\nfind /home -perm /442    #在home目录下查找文件中三个权限任何一位有4或2权限的文件\nfind /home -perm -004    #在home目录下查找其它人至少具有读权限的文件\nfind /home -perm -002    #在home目录下查找其它人至少具有写权限的文件\n\n#-perm 选项用于查找具体特定权限集的文件，权限可以描述为八进制值，包含代表读取、写入和执行的4、2和1的某些组合，权限前面可以加上/或-符号。\n#前面带有/的数字权限将匹配文件用户、组、其它人权限集中的至少一位。权限为r--r--r--的文件并不匹配/222，rw-r--r--的文件才匹配。即大于或等于其它中一位即为匹配。\n#前面带有-的数字权限表示所有三个权限都必须存在。-222 只有rw-rw-rw才能匹配。默认值。\n# 与 / 或 - 一起使用时 0 值类似于通配符。因为其表示至少无任何内容权限。\n\nfind /home -size 10M    #查找文件大小等于10M的文件，单位有k(小),M,G，+10M表示大于，-10M表示小于。\nfind /home -size +10M    #-size 单位修饰符将所有内容向上取整为一个单位，find -size 1M 将显示\nfind /home -size -10M    #小于1M的文件。向上取整为1M，尽量使用小单位。如查找1M文件使用或1024k\n\nfind / -mmin 120    #查找正好在前120分钟修改的所有文件\nfind / -mmin +200    #查找200分钟外修改的所有文件,同时也是200分钟内没有修改过的\nfind / -mmin -150    #查找在150分内修改的所有文件\n\nfind / -type    #f:普通文件，d:目录，l：软链接，b:块设备\nfind /etc -type d    #查找etc/目录下的文件夹\nfind / -type l    #查找/根目录下的所有软链接\nfind / -type f -links +1    #查找/目录下类型为文件，硬链接大于1个的文件。+：大于，-：小于\n\n```\n","source":"_posts/chapter-14-accessing-linux-file-system.md","raw":"---\ntitle: Chapter 14. Accessing Linux File System\nurl: 183.html\nid: 183\ncategories:\n  - RHEL124\ndate: 2018-04-17 16:43:24\ntags:\n---\n\n在Red Hat Enterprise Linux 中检测到的第一个SCSI、PATA/SATA或USB硬盘驱动器是/dev/sda,第二个/dev/sdb，以此类推。\n\n/dev/sda 的第一个分区为/dev/sda1,第二个分区为/dev/sda2 ，以此类推。\n\n虚拟机中的硬盘驱动器是例外，一般显示了/dev/vd<letter>或/dev/xvd<letter>\n\nLVM(逻辑卷管理)，通过LVM一个或多个块设备可以汇集成一个存储池，称为卷组（VG），对于卷组/dev/目录中有一个名称与该卷组相同的目录。在该目录下，已经创建名称与逻辑卷相同的符号链接。例如：代表myvg卷组的myvg逻辑卷的设备文件是/dev/myvg/mylv。\n\nLVM依赖于设备映射程序(DM)内核驱动程序。以上符号链接/dev/myvg/mylv 指向/dev/dm-number 块设备节点。number 的分配是连续的。从零（0）开始  \n\n。每个逻辑卷在/dev/mapper 目录中有另外一个符号链接，名称为/dev/mapper/myvg-mylv。通常可能使用任一可靠且一致的符号链接名称来访问逻辑卷。因为/dev/dm-number名称在每次启动会有所不同。\n\ndf #显示已经挂载的磁盘空间、已用和剩余，所占比。包括本地和远程\n\ntmpfs 和devtmpfs 设备是系统内存中的文件系统，在系统重启后，写入tmpfs或devtmpfs的文件都会消失。\n```sh\ndf -h    #报告单位是KiB(210),MiB(220),GiB(230)\ndf -H    #报告单位是KB(103),MB(106),GB(109)硬盘驱动器制造商在广告其产品时通常使用SI单位。\ndu -h dir    #以递归方式查看特定目录空间详细信息，-h 同df\ndu -H dir    #以递归方式查看特定目录空间详细信息，-H 同df\n```\nmount 挂载的两种方式:一、驻留在/dev中的设备文件。二、文件系统的通用唯一标识符：UUID。\n\nblkid 命令用来列出其上具体文件系统的现有分区和文件系统的UUID，以后用于格式化该分区的文件系统。  \n\n```sh\n\n[root@server0 Desktop]# blkid\n/dev/sda1: UUID=\"9bf6b9f7-92ad-441b-848e-0257cbb883d1\" TYPE=\"xfs\"\n\n#根据分区的设备文件\nmount /dev/vdb1 /mnt/mydata\n#根据通用唯一标识符UUID\nmount UUID=\"9bf6b9f7-92ad-441b-848e-0257cbb883d1\" /mnt/mydata\n\n```\n如果将文件挂载到现有的目录且这个目录不为空，则这个目录下的文件在挂载后不可访问\n\numount 挂载点    #卸载文件系统。\n\n1.当前处理挂载系统下无法卸载，解决办法：退出当前挂载点  \n\n2.有进程在使用当前挂载点，无法卸载。解决办法：结束进程\n\nlsof /mnt/mydata    #命令列出拨给目录中所有打开的文件以及访问他们的进程。识别哪些进程在阻止文件系统被成功卸载非常有用。\n\n图形桌面环境针对USB闪存设备和驱动器等可移动设备会自动挂载，可移动介质的挂载点是/run/media/<user>/<label>\n\n* * *\n\n#### 软链接和硬链接\n\n硬链接：硬链接是新的目录条目，其引用文件系统中的现有文件。指向同一文件内容的硬链接需要在相同的文件系统中。硬链接具有相同的权限 、链接数、用户/组权限、时间戳、以及文件内容。在文件权限后面，所有者前面的数字为硬链接数。  \n\nln 命令为现在文件创建新的硬链接。该命令需要一个现在文件作为第一参数，后面可以跟一个或多个额外的硬连接。新硬链接创建后无法区别哪一个是现有硬连接的原始链接。使用ls -l 查看时文件类型都是文件。  \n\n```sh\n\n[root@server0 newspace]# echo \"Hello\" >file1.txt\n[root@server0 newspace]# ln file1.txt file2.txt\n[root@server0 newspace]# ll\ntotal 8\n-rw-r--r--. 2 root root  6 Apr 17 15:00 file1.txt\n-rw-r--r--. 2 root root  6 Apr 17 15:00 file2.txt\ndrwxr-xr-x. 2 root root 20 Apr 17 14:46 newdir\n[root@server0 newspace]# cat file2.txt \nHello\n[root@server0 newspace]# echo 'World' >> file1.txt \n[root@server0 newspace]# cat file2.txt \nHello\nWorld\n[root@server0 newspace]# rm -rf file1.txt \n[root@server0 newspace]# cat file2.txt \nHello\nWorld\n[root@server0 newspace]# \n#创建硬连接后，只要一个文件内容改变其它的跟着改变，且删除其中一个硬链接后不会影响其它链接，内容依然可用。\n\n```\nls -s 命令创建软链接，也称为符号链接。软件连接是特殊的文件类型，它指向现在的文件或目录，软链接可以指向其它文件系统中的文件或目录。\n\n![图片.png](1523949252627674.png)\n\n当原始文件被删除后，软链接依然会指向该文件，但目标已经消失。指向缺失的文件的软链接称为：“悬挂的软链接”，查看时会提示文件或目录不存在。\n\n![图片.png](1523949409259777.png)  \n\n软链接指向目录时，可通过cd dir 进入到newdir/目录下。\n\n* * *\n\n#### find and locate 查找文件  \n\nlocate 命令根据locate 数据库中的文件名和路径返回搜索结果。该数据库存储文件名和路径信息。\n\n调用locate搜索的用户必须对包含匹配元素的目录树具有读取权限才会有返回结果。\n\n```sh\n\nlocate passwd    #查找文件名和路径包含passwd文件和目录\nlocate -i messages    #不区分大小写查找包含messages的文件和目录\nlocate -n 5 snow.png    #查找前5个匹配的文件或目录\nupdatedb    #更新locate数据库，默认每天自动更新。root用户可以updatedb手动更新。\n\n```\nfind 命令实时搜索，查找符合命令行参数条件的文件。调用find搜索的用户必须对包含匹配元素的目录树具有读取权限才会有返回结果。find 的第一个参数为目录，如果缺省则默认为当前目录，并在当前目录树下搜索。find 可以根据文件名、文件大小、最近修改时间戳和其他文件特性的任意组合进行搜索。\n\n```sh\n\nfind / -name sshd_config    #在/根目录和所有子目录中搜索名为sshd\\_config的文件\nfind / -name '*.txt'    #在/根目录和所有子目录中搜索以‘.txt’结尾的文件\nfind /etc -name '*pass*'    #在/etc目录和所有子目录中搜索名称中包含pass的文件\nfind / -iname '*messages*'    #-iname 不区分大小写，在/根目录和所有子目录中搜索名称中包含‘messages’的文件  \n\nfind -user student    #在当前目录查找student用户拥有的文件\nfind -group student    #在当前目录查找student组拥有的文件\nfind -uid 1000    #在当前目录查找uid为1000拥有的文件\nfind -gid 1000    #在当前目录查找gid为1000拥有的文件\nfind / -user root -group mail    #在/根目录下搜索root用户和mail组拥有的文件（同时）\n\nfind /home -perm 764    #在home目录下查找文件完全匹配权限为764的文件，777不满足\nfind /home -perm -324    #在home目录下查找文件对应权限至少包含324的文件，三个权限位置对应满足。\nfind /home -perm /442    #在home目录下查找文件中三个权限任何一位有4或2权限的文件\nfind /home -perm -004    #在home目录下查找其它人至少具有读权限的文件\nfind /home -perm -002    #在home目录下查找其它人至少具有写权限的文件\n\n#-perm 选项用于查找具体特定权限集的文件，权限可以描述为八进制值，包含代表读取、写入和执行的4、2和1的某些组合，权限前面可以加上/或-符号。\n#前面带有/的数字权限将匹配文件用户、组、其它人权限集中的至少一位。权限为r--r--r--的文件并不匹配/222，rw-r--r--的文件才匹配。即大于或等于其它中一位即为匹配。\n#前面带有-的数字权限表示所有三个权限都必须存在。-222 只有rw-rw-rw才能匹配。默认值。\n# 与 / 或 - 一起使用时 0 值类似于通配符。因为其表示至少无任何内容权限。\n\nfind /home -size 10M    #查找文件大小等于10M的文件，单位有k(小),M,G，+10M表示大于，-10M表示小于。\nfind /home -size +10M    #-size 单位修饰符将所有内容向上取整为一个单位，find -size 1M 将显示\nfind /home -size -10M    #小于1M的文件。向上取整为1M，尽量使用小单位。如查找1M文件使用或1024k\n\nfind / -mmin 120    #查找正好在前120分钟修改的所有文件\nfind / -mmin +200    #查找200分钟外修改的所有文件,同时也是200分钟内没有修改过的\nfind / -mmin -150    #查找在150分内修改的所有文件\n\nfind / -type    #f:普通文件，d:目录，l：软链接，b:块设备\nfind /etc -type d    #查找etc/目录下的文件夹\nfind / -type l    #查找/根目录下的所有软链接\nfind / -type f -links +1    #查找/目录下类型为文件，硬链接大于1个的文件。+：大于，-：小于\n\n```\n","slug":"chapter-14-accessing-linux-file-system","published":1,"updated":"2019-01-06T15:38:54.513Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqi1n001blxkjx8rfj2vu","content":"<p>在Red Hat Enterprise Linux 中检测到的第一个SCSI、PATA/SATA或USB硬盘驱动器是/dev/sda,第二个/dev/sdb，以此类推。</p>\n<p>/dev/sda 的第一个分区为/dev/sda1,第二个分区为/dev/sda2 ，以此类推。</p>\n<p>虚拟机中的硬盘驱动器是例外，一般显示了/dev/vd<letter>或/dev/xvd<letter></letter></letter></p>\n<p>LVM(逻辑卷管理)，通过LVM一个或多个块设备可以汇集成一个存储池，称为卷组（VG），对于卷组/dev/目录中有一个名称与该卷组相同的目录。在该目录下，已经创建名称与逻辑卷相同的符号链接。例如：代表myvg卷组的myvg逻辑卷的设备文件是/dev/myvg/mylv。</p>\n<p>LVM依赖于设备映射程序(DM)内核驱动程序。以上符号链接/dev/myvg/mylv 指向/dev/dm-number 块设备节点。number 的分配是连续的。从零（0）开始  </p>\n<p>。每个逻辑卷在/dev/mapper 目录中有另外一个符号链接，名称为/dev/mapper/myvg-mylv。通常可能使用任一可靠且一致的符号链接名称来访问逻辑卷。因为/dev/dm-number名称在每次启动会有所不同。</p>\n<p>df #显示已经挂载的磁盘空间、已用和剩余，所占比。包括本地和远程</p>\n<p>tmpfs 和devtmpfs 设备是系统内存中的文件系统，在系统重启后，写入tmpfs或devtmpfs的文件都会消失。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h    <span class=\"comment\">#报告单位是KiB(210),MiB(220),GiB(230)</span></span><br><span class=\"line\">df -H    <span class=\"comment\">#报告单位是KB(103),MB(106),GB(109)硬盘驱动器制造商在广告其产品时通常使用SI单位。</span></span><br><span class=\"line\">du -h dir    <span class=\"comment\">#以递归方式查看特定目录空间详细信息，-h 同df</span></span><br><span class=\"line\">du -H dir    <span class=\"comment\">#以递归方式查看特定目录空间详细信息，-H 同df</span></span><br></pre></td></tr></table></figure></p>\n<p>mount 挂载的两种方式:一、驻留在/dev中的设备文件。二、文件系统的通用唯一标识符：UUID。</p>\n<p>blkid 命令用来列出其上具体文件系统的现有分区和文件系统的UUID，以后用于格式化该分区的文件系统。  </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@server0 Desktop]<span class=\"comment\"># blkid</span></span><br><span class=\"line\">/dev/sda1: UUID=<span class=\"string\">\"9bf6b9f7-92ad-441b-848e-0257cbb883d1\"</span> TYPE=<span class=\"string\">\"xfs\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#根据分区的设备文件</span></span><br><span class=\"line\">mount /dev/vdb1 /mnt/mydata</span><br><span class=\"line\"><span class=\"comment\">#根据通用唯一标识符UUID</span></span><br><span class=\"line\">mount UUID=<span class=\"string\">\"9bf6b9f7-92ad-441b-848e-0257cbb883d1\"</span> /mnt/mydata</span><br></pre></td></tr></table></figure>\n<p>如果将文件挂载到现有的目录且这个目录不为空，则这个目录下的文件在挂载后不可访问</p>\n<p>umount 挂载点    #卸载文件系统。</p>\n<p>1.当前处理挂载系统下无法卸载，解决办法：退出当前挂载点  </p>\n<p>2.有进程在使用当前挂载点，无法卸载。解决办法：结束进程</p>\n<p>lsof /mnt/mydata    #命令列出拨给目录中所有打开的文件以及访问他们的进程。识别哪些进程在阻止文件系统被成功卸载非常有用。</p>\n<p>图形桌面环境针对USB闪存设备和驱动器等可移动设备会自动挂载，可移动介质的挂载点是/run/media/<user>/<label></label></user></p>\n<hr>\n<h4 id=\"软链接和硬链接\"><a href=\"#软链接和硬链接\" class=\"headerlink\" title=\"软链接和硬链接\"></a>软链接和硬链接</h4><p>硬链接：硬链接是新的目录条目，其引用文件系统中的现有文件。指向同一文件内容的硬链接需要在相同的文件系统中。硬链接具有相同的权限 、链接数、用户/组权限、时间戳、以及文件内容。在文件权限后面，所有者前面的数字为硬链接数。  </p>\n<p>ln 命令为现在文件创建新的硬链接。该命令需要一个现在文件作为第一参数，后面可以跟一个或多个额外的硬连接。新硬链接创建后无法区别哪一个是现有硬连接的原始链接。使用ls -l 查看时文件类型都是文件。  </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@server0 newspace]<span class=\"comment\"># echo \"Hello\" &gt;file1.txt</span></span><br><span class=\"line\">[root@server0 newspace]<span class=\"comment\"># ln file1.txt file2.txt</span></span><br><span class=\"line\">[root@server0 newspace]<span class=\"comment\"># ll</span></span><br><span class=\"line\">total 8</span><br><span class=\"line\">-rw-r--r--. 2 root root  6 Apr 17 15:00 file1.txt</span><br><span class=\"line\">-rw-r--r--. 2 root root  6 Apr 17 15:00 file2.txt</span><br><span class=\"line\">drwxr-xr-x. 2 root root 20 Apr 17 14:46 newdir</span><br><span class=\"line\">[root@server0 newspace]<span class=\"comment\"># cat file2.txt </span></span><br><span class=\"line\">Hello</span><br><span class=\"line\">[root@server0 newspace]<span class=\"comment\"># echo 'World' &gt;&gt; file1.txt </span></span><br><span class=\"line\">[root@server0 newspace]<span class=\"comment\"># cat file2.txt </span></span><br><span class=\"line\">Hello</span><br><span class=\"line\">World</span><br><span class=\"line\">[root@server0 newspace]<span class=\"comment\"># rm -rf file1.txt </span></span><br><span class=\"line\">[root@server0 newspace]<span class=\"comment\"># cat file2.txt </span></span><br><span class=\"line\">Hello</span><br><span class=\"line\">World</span><br><span class=\"line\">[root@server0 newspace]<span class=\"comment\"># </span></span><br><span class=\"line\"><span class=\"comment\">#创建硬连接后，只要一个文件内容改变其它的跟着改变，且删除其中一个硬链接后不会影响其它链接，内容依然可用。</span></span><br></pre></td></tr></table></figure>\n<p>ls -s 命令创建软链接，也称为符号链接。软件连接是特殊的文件类型，它指向现在的文件或目录，软链接可以指向其它文件系统中的文件或目录。</p>\n<p><img src=\"/2018/04/17/chapter-14-accessing-linux-file-system/1523949252627674.png\" alt=\"图片.png\"></p>\n<p>当原始文件被删除后，软链接依然会指向该文件，但目标已经消失。指向缺失的文件的软链接称为：“悬挂的软链接”，查看时会提示文件或目录不存在。</p>\n<p><img src=\"/2018/04/17/chapter-14-accessing-linux-file-system/1523949409259777.png\" alt=\"图片.png\">  </p>\n<p>软链接指向目录时，可通过cd dir 进入到newdir/目录下。</p>\n<hr>\n<h4 id=\"find-and-locate-查找文件\"><a href=\"#find-and-locate-查找文件\" class=\"headerlink\" title=\"find and locate 查找文件\"></a>find and locate 查找文件</h4><p>locate 命令根据locate 数据库中的文件名和路径返回搜索结果。该数据库存储文件名和路径信息。</p>\n<p>调用locate搜索的用户必须对包含匹配元素的目录树具有读取权限才会有返回结果。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">locate passwd    <span class=\"comment\">#查找文件名和路径包含passwd文件和目录</span></span><br><span class=\"line\">locate -i messages    <span class=\"comment\">#不区分大小写查找包含messages的文件和目录</span></span><br><span class=\"line\">locate -n 5 snow.png    <span class=\"comment\">#查找前5个匹配的文件或目录</span></span><br><span class=\"line\">updatedb    <span class=\"comment\">#更新locate数据库，默认每天自动更新。root用户可以updatedb手动更新。</span></span><br></pre></td></tr></table></figure>\n<p>find 命令实时搜索，查找符合命令行参数条件的文件。调用find搜索的用户必须对包含匹配元素的目录树具有读取权限才会有返回结果。find 的第一个参数为目录，如果缺省则默认为当前目录，并在当前目录树下搜索。find 可以根据文件名、文件大小、最近修改时间戳和其他文件特性的任意组合进行搜索。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">find / -name sshd_config    <span class=\"comment\">#在/根目录和所有子目录中搜索名为sshd\\_config的文件</span></span><br><span class=\"line\">find / -name <span class=\"string\">'*.txt'</span>    <span class=\"comment\">#在/根目录和所有子目录中搜索以‘.txt’结尾的文件</span></span><br><span class=\"line\">find /etc -name <span class=\"string\">'*pass*'</span>    <span class=\"comment\">#在/etc目录和所有子目录中搜索名称中包含pass的文件</span></span><br><span class=\"line\">find / -iname <span class=\"string\">'*messages*'</span>    <span class=\"comment\">#-iname 不区分大小写，在/根目录和所有子目录中搜索名称中包含‘messages’的文件  </span></span><br><span class=\"line\"></span><br><span class=\"line\">find -user student    <span class=\"comment\">#在当前目录查找student用户拥有的文件</span></span><br><span class=\"line\">find -group student    <span class=\"comment\">#在当前目录查找student组拥有的文件</span></span><br><span class=\"line\">find -uid 1000    <span class=\"comment\">#在当前目录查找uid为1000拥有的文件</span></span><br><span class=\"line\">find -gid 1000    <span class=\"comment\">#在当前目录查找gid为1000拥有的文件</span></span><br><span class=\"line\">find / -user root -group mail    <span class=\"comment\">#在/根目录下搜索root用户和mail组拥有的文件（同时）</span></span><br><span class=\"line\"></span><br><span class=\"line\">find /home -perm 764    <span class=\"comment\">#在home目录下查找文件完全匹配权限为764的文件，777不满足</span></span><br><span class=\"line\">find /home -perm -324    <span class=\"comment\">#在home目录下查找文件对应权限至少包含324的文件，三个权限位置对应满足。</span></span><br><span class=\"line\">find /home -perm /442    <span class=\"comment\">#在home目录下查找文件中三个权限任何一位有4或2权限的文件</span></span><br><span class=\"line\">find /home -perm -004    <span class=\"comment\">#在home目录下查找其它人至少具有读权限的文件</span></span><br><span class=\"line\">find /home -perm -002    <span class=\"comment\">#在home目录下查找其它人至少具有写权限的文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#-perm 选项用于查找具体特定权限集的文件，权限可以描述为八进制值，包含代表读取、写入和执行的4、2和1的某些组合，权限前面可以加上/或-符号。</span></span><br><span class=\"line\"><span class=\"comment\">#前面带有/的数字权限将匹配文件用户、组、其它人权限集中的至少一位。权限为r--r--r--的文件并不匹配/222，rw-r--r--的文件才匹配。即大于或等于其它中一位即为匹配。</span></span><br><span class=\"line\"><span class=\"comment\">#前面带有-的数字权限表示所有三个权限都必须存在。-222 只有rw-rw-rw才能匹配。默认值。</span></span><br><span class=\"line\"><span class=\"comment\"># 与 / 或 - 一起使用时 0 值类似于通配符。因为其表示至少无任何内容权限。</span></span><br><span class=\"line\"></span><br><span class=\"line\">find /home -size 10M    <span class=\"comment\">#查找文件大小等于10M的文件，单位有k(小),M,G，+10M表示大于，-10M表示小于。</span></span><br><span class=\"line\">find /home -size +10M    <span class=\"comment\">#-size 单位修饰符将所有内容向上取整为一个单位，find -size 1M 将显示</span></span><br><span class=\"line\">find /home -size -10M    <span class=\"comment\">#小于1M的文件。向上取整为1M，尽量使用小单位。如查找1M文件使用或1024k</span></span><br><span class=\"line\"></span><br><span class=\"line\">find / -mmin 120    <span class=\"comment\">#查找正好在前120分钟修改的所有文件</span></span><br><span class=\"line\">find / -mmin +200    <span class=\"comment\">#查找200分钟外修改的所有文件,同时也是200分钟内没有修改过的</span></span><br><span class=\"line\">find / -mmin -150    <span class=\"comment\">#查找在150分内修改的所有文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">find / -<span class=\"built_in\">type</span>    <span class=\"comment\">#f:普通文件，d:目录，l：软链接，b:块设备</span></span><br><span class=\"line\">find /etc -<span class=\"built_in\">type</span> d    <span class=\"comment\">#查找etc/目录下的文件夹</span></span><br><span class=\"line\">find / -<span class=\"built_in\">type</span> l    <span class=\"comment\">#查找/根目录下的所有软链接</span></span><br><span class=\"line\">find / -<span class=\"built_in\">type</span> f -links +1    <span class=\"comment\">#查找/目录下类型为文件，硬链接大于1个的文件。+：大于，-：小于</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在Red Hat Enterprise Linux 中检测到的第一个SCSI、PATA/SATA或USB硬盘驱动器是/dev/sda,第二个/dev/sdb，以此类推。</p>\n<p>/dev/sda 的第一个分区为/dev/sda1,第二个分区为/dev/sda2 ，以此类推。</p>\n<p>虚拟机中的硬盘驱动器是例外，一般显示了/dev/vd<letter>或/dev/xvd<letter></letter></letter></p>\n<p>LVM(逻辑卷管理)，通过LVM一个或多个块设备可以汇集成一个存储池，称为卷组（VG），对于卷组/dev/目录中有一个名称与该卷组相同的目录。在该目录下，已经创建名称与逻辑卷相同的符号链接。例如：代表myvg卷组的myvg逻辑卷的设备文件是/dev/myvg/mylv。</p>\n<p>LVM依赖于设备映射程序(DM)内核驱动程序。以上符号链接/dev/myvg/mylv 指向/dev/dm-number 块设备节点。number 的分配是连续的。从零（0）开始  </p>\n<p>。每个逻辑卷在/dev/mapper 目录中有另外一个符号链接，名称为/dev/mapper/myvg-mylv。通常可能使用任一可靠且一致的符号链接名称来访问逻辑卷。因为/dev/dm-number名称在每次启动会有所不同。</p>\n<p>df #显示已经挂载的磁盘空间、已用和剩余，所占比。包括本地和远程</p>\n<p>tmpfs 和devtmpfs 设备是系统内存中的文件系统，在系统重启后，写入tmpfs或devtmpfs的文件都会消失。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h    <span class=\"comment\">#报告单位是KiB(210),MiB(220),GiB(230)</span></span><br><span class=\"line\">df -H    <span class=\"comment\">#报告单位是KB(103),MB(106),GB(109)硬盘驱动器制造商在广告其产品时通常使用SI单位。</span></span><br><span class=\"line\">du -h dir    <span class=\"comment\">#以递归方式查看特定目录空间详细信息，-h 同df</span></span><br><span class=\"line\">du -H dir    <span class=\"comment\">#以递归方式查看特定目录空间详细信息，-H 同df</span></span><br></pre></td></tr></table></figure></p>\n<p>mount 挂载的两种方式:一、驻留在/dev中的设备文件。二、文件系统的通用唯一标识符：UUID。</p>\n<p>blkid 命令用来列出其上具体文件系统的现有分区和文件系统的UUID，以后用于格式化该分区的文件系统。  </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@server0 Desktop]<span class=\"comment\"># blkid</span></span><br><span class=\"line\">/dev/sda1: UUID=<span class=\"string\">\"9bf6b9f7-92ad-441b-848e-0257cbb883d1\"</span> TYPE=<span class=\"string\">\"xfs\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#根据分区的设备文件</span></span><br><span class=\"line\">mount /dev/vdb1 /mnt/mydata</span><br><span class=\"line\"><span class=\"comment\">#根据通用唯一标识符UUID</span></span><br><span class=\"line\">mount UUID=<span class=\"string\">\"9bf6b9f7-92ad-441b-848e-0257cbb883d1\"</span> /mnt/mydata</span><br></pre></td></tr></table></figure>\n<p>如果将文件挂载到现有的目录且这个目录不为空，则这个目录下的文件在挂载后不可访问</p>\n<p>umount 挂载点    #卸载文件系统。</p>\n<p>1.当前处理挂载系统下无法卸载，解决办法：退出当前挂载点  </p>\n<p>2.有进程在使用当前挂载点，无法卸载。解决办法：结束进程</p>\n<p>lsof /mnt/mydata    #命令列出拨给目录中所有打开的文件以及访问他们的进程。识别哪些进程在阻止文件系统被成功卸载非常有用。</p>\n<p>图形桌面环境针对USB闪存设备和驱动器等可移动设备会自动挂载，可移动介质的挂载点是/run/media/<user>/<label></label></user></p>\n<hr>\n<h4 id=\"软链接和硬链接\"><a href=\"#软链接和硬链接\" class=\"headerlink\" title=\"软链接和硬链接\"></a>软链接和硬链接</h4><p>硬链接：硬链接是新的目录条目，其引用文件系统中的现有文件。指向同一文件内容的硬链接需要在相同的文件系统中。硬链接具有相同的权限 、链接数、用户/组权限、时间戳、以及文件内容。在文件权限后面，所有者前面的数字为硬链接数。  </p>\n<p>ln 命令为现在文件创建新的硬链接。该命令需要一个现在文件作为第一参数，后面可以跟一个或多个额外的硬连接。新硬链接创建后无法区别哪一个是现有硬连接的原始链接。使用ls -l 查看时文件类型都是文件。  </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@server0 newspace]<span class=\"comment\"># echo \"Hello\" &gt;file1.txt</span></span><br><span class=\"line\">[root@server0 newspace]<span class=\"comment\"># ln file1.txt file2.txt</span></span><br><span class=\"line\">[root@server0 newspace]<span class=\"comment\"># ll</span></span><br><span class=\"line\">total 8</span><br><span class=\"line\">-rw-r--r--. 2 root root  6 Apr 17 15:00 file1.txt</span><br><span class=\"line\">-rw-r--r--. 2 root root  6 Apr 17 15:00 file2.txt</span><br><span class=\"line\">drwxr-xr-x. 2 root root 20 Apr 17 14:46 newdir</span><br><span class=\"line\">[root@server0 newspace]<span class=\"comment\"># cat file2.txt </span></span><br><span class=\"line\">Hello</span><br><span class=\"line\">[root@server0 newspace]<span class=\"comment\"># echo 'World' &gt;&gt; file1.txt </span></span><br><span class=\"line\">[root@server0 newspace]<span class=\"comment\"># cat file2.txt </span></span><br><span class=\"line\">Hello</span><br><span class=\"line\">World</span><br><span class=\"line\">[root@server0 newspace]<span class=\"comment\"># rm -rf file1.txt </span></span><br><span class=\"line\">[root@server0 newspace]<span class=\"comment\"># cat file2.txt </span></span><br><span class=\"line\">Hello</span><br><span class=\"line\">World</span><br><span class=\"line\">[root@server0 newspace]<span class=\"comment\"># </span></span><br><span class=\"line\"><span class=\"comment\">#创建硬连接后，只要一个文件内容改变其它的跟着改变，且删除其中一个硬链接后不会影响其它链接，内容依然可用。</span></span><br></pre></td></tr></table></figure>\n<p>ls -s 命令创建软链接，也称为符号链接。软件连接是特殊的文件类型，它指向现在的文件或目录，软链接可以指向其它文件系统中的文件或目录。</p>\n<p><img src=\"/2018/04/17/chapter-14-accessing-linux-file-system/1523949252627674.png\" alt=\"图片.png\"></p>\n<p>当原始文件被删除后，软链接依然会指向该文件，但目标已经消失。指向缺失的文件的软链接称为：“悬挂的软链接”，查看时会提示文件或目录不存在。</p>\n<p><img src=\"/2018/04/17/chapter-14-accessing-linux-file-system/1523949409259777.png\" alt=\"图片.png\">  </p>\n<p>软链接指向目录时，可通过cd dir 进入到newdir/目录下。</p>\n<hr>\n<h4 id=\"find-and-locate-查找文件\"><a href=\"#find-and-locate-查找文件\" class=\"headerlink\" title=\"find and locate 查找文件\"></a>find and locate 查找文件</h4><p>locate 命令根据locate 数据库中的文件名和路径返回搜索结果。该数据库存储文件名和路径信息。</p>\n<p>调用locate搜索的用户必须对包含匹配元素的目录树具有读取权限才会有返回结果。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">locate passwd    <span class=\"comment\">#查找文件名和路径包含passwd文件和目录</span></span><br><span class=\"line\">locate -i messages    <span class=\"comment\">#不区分大小写查找包含messages的文件和目录</span></span><br><span class=\"line\">locate -n 5 snow.png    <span class=\"comment\">#查找前5个匹配的文件或目录</span></span><br><span class=\"line\">updatedb    <span class=\"comment\">#更新locate数据库，默认每天自动更新。root用户可以updatedb手动更新。</span></span><br></pre></td></tr></table></figure>\n<p>find 命令实时搜索，查找符合命令行参数条件的文件。调用find搜索的用户必须对包含匹配元素的目录树具有读取权限才会有返回结果。find 的第一个参数为目录，如果缺省则默认为当前目录，并在当前目录树下搜索。find 可以根据文件名、文件大小、最近修改时间戳和其他文件特性的任意组合进行搜索。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">find / -name sshd_config    <span class=\"comment\">#在/根目录和所有子目录中搜索名为sshd\\_config的文件</span></span><br><span class=\"line\">find / -name <span class=\"string\">'*.txt'</span>    <span class=\"comment\">#在/根目录和所有子目录中搜索以‘.txt’结尾的文件</span></span><br><span class=\"line\">find /etc -name <span class=\"string\">'*pass*'</span>    <span class=\"comment\">#在/etc目录和所有子目录中搜索名称中包含pass的文件</span></span><br><span class=\"line\">find / -iname <span class=\"string\">'*messages*'</span>    <span class=\"comment\">#-iname 不区分大小写，在/根目录和所有子目录中搜索名称中包含‘messages’的文件  </span></span><br><span class=\"line\"></span><br><span class=\"line\">find -user student    <span class=\"comment\">#在当前目录查找student用户拥有的文件</span></span><br><span class=\"line\">find -group student    <span class=\"comment\">#在当前目录查找student组拥有的文件</span></span><br><span class=\"line\">find -uid 1000    <span class=\"comment\">#在当前目录查找uid为1000拥有的文件</span></span><br><span class=\"line\">find -gid 1000    <span class=\"comment\">#在当前目录查找gid为1000拥有的文件</span></span><br><span class=\"line\">find / -user root -group mail    <span class=\"comment\">#在/根目录下搜索root用户和mail组拥有的文件（同时）</span></span><br><span class=\"line\"></span><br><span class=\"line\">find /home -perm 764    <span class=\"comment\">#在home目录下查找文件完全匹配权限为764的文件，777不满足</span></span><br><span class=\"line\">find /home -perm -324    <span class=\"comment\">#在home目录下查找文件对应权限至少包含324的文件，三个权限位置对应满足。</span></span><br><span class=\"line\">find /home -perm /442    <span class=\"comment\">#在home目录下查找文件中三个权限任何一位有4或2权限的文件</span></span><br><span class=\"line\">find /home -perm -004    <span class=\"comment\">#在home目录下查找其它人至少具有读权限的文件</span></span><br><span class=\"line\">find /home -perm -002    <span class=\"comment\">#在home目录下查找其它人至少具有写权限的文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#-perm 选项用于查找具体特定权限集的文件，权限可以描述为八进制值，包含代表读取、写入和执行的4、2和1的某些组合，权限前面可以加上/或-符号。</span></span><br><span class=\"line\"><span class=\"comment\">#前面带有/的数字权限将匹配文件用户、组、其它人权限集中的至少一位。权限为r--r--r--的文件并不匹配/222，rw-r--r--的文件才匹配。即大于或等于其它中一位即为匹配。</span></span><br><span class=\"line\"><span class=\"comment\">#前面带有-的数字权限表示所有三个权限都必须存在。-222 只有rw-rw-rw才能匹配。默认值。</span></span><br><span class=\"line\"><span class=\"comment\"># 与 / 或 - 一起使用时 0 值类似于通配符。因为其表示至少无任何内容权限。</span></span><br><span class=\"line\"></span><br><span class=\"line\">find /home -size 10M    <span class=\"comment\">#查找文件大小等于10M的文件，单位有k(小),M,G，+10M表示大于，-10M表示小于。</span></span><br><span class=\"line\">find /home -size +10M    <span class=\"comment\">#-size 单位修饰符将所有内容向上取整为一个单位，find -size 1M 将显示</span></span><br><span class=\"line\">find /home -size -10M    <span class=\"comment\">#小于1M的文件。向上取整为1M，尽量使用小单位。如查找1M文件使用或1024k</span></span><br><span class=\"line\"></span><br><span class=\"line\">find / -mmin 120    <span class=\"comment\">#查找正好在前120分钟修改的所有文件</span></span><br><span class=\"line\">find / -mmin +200    <span class=\"comment\">#查找200分钟外修改的所有文件,同时也是200分钟内没有修改过的</span></span><br><span class=\"line\">find / -mmin -150    <span class=\"comment\">#查找在150分内修改的所有文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">find / -<span class=\"built_in\">type</span>    <span class=\"comment\">#f:普通文件，d:目录，l：软链接，b:块设备</span></span><br><span class=\"line\">find /etc -<span class=\"built_in\">type</span> d    <span class=\"comment\">#查找etc/目录下的文件夹</span></span><br><span class=\"line\">find / -<span class=\"built_in\">type</span> l    <span class=\"comment\">#查找/根目录下的所有软链接</span></span><br><span class=\"line\">find / -<span class=\"built_in\">type</span> f -links +1    <span class=\"comment\">#查找/目录下类型为文件，硬链接大于1个的文件。+：大于，-：小于</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Chapter 5. Managing Local Linux Users and Groups","url":"295.html","id":"295","date":"2018-04-30T13:59:23.000Z","_content":"\nid 命令用来显示当前已登录用户的信息\n\nls -l 查看文件关联的用户。第三列显示的是用户名，第四列是组\n\nps 显示当前shell的进程\n\nps a 显示所有进程\n\nps au 显示进程关联的用户\n\n#### 用户\n\n/etc/passwd 文件格式（七个冒号分隔字段）\n\n![image.png](1524823773815913.png)\n\n1.  username 是UID到名称的一种映射，使用用户使用\n\n2.  password 以前是以加密格式保存密码的位置，现在密码存储在/etc/shadow的单独文件中\n\n3.  UID 是用户的ID\n\n4.  GID 是用户的主要组ID 编号\n\n5.  GECOS 字段是任意文件，通常包含用户的实际姓名，现在是描述\n\n6.  /home/dir 是用户的家目录\n\n7.  shell 是用户登录时运行的程序。对于普通用户通常是提供用户命令行的shell程序。\n\n\n#### 组\n\n保存在文件/etc/group 中\n\n每个用户有且只有一个主要组，即passwd中的第三个字段。\n\n通常用户创建的文件归主要组所有，通常用户主要组名和用户名相同，用户可以有0个或多个补充组\n\n\n\n#### su 切换命令  \n\nsu - <username\\>\n\nsu username 启动non-login shell    #su 使用当前用户环境变量，不使用username的环境变量\n\nsu - username 启动login shell # - 会将用户的环境变量调用，和这个用户正常登陆一样\n\nsudo 以root身份执行命令\n\nsudo 命令可以使用用户根据/etc/sudoers文件中的设置，而被允许以root身份或其他用户身份运行命令，su 要求的是被切换用户的密码，而sudo 是输入自己的密码  \n\nsudo usermod -L username\n\n使用sudo执行的所用命令都会被记录到/var/log/secure 中，在RHEL7中wheel组的成员都可以使用sudo ，早期版本wheel组用户默认没有这个权限（取消wheel组运行命令前的注释就可以了）\n\n##### visudo 编辑/etc/sudoers文件更方便\n\n大多数使用GUI的应用使用policykit提示用户进行身份认证，以及管理root访问权限\n\n* * *\n\n### 管理本地用户账户  \n\n##### useradd 创建用户  \n\n*   不带选项运行时，useradd username 会为/etc/passwd中的所用字段设置合理的默认值，默认情况下useradd 不设置任何有效密码，用户也必须设置密码后才可以登陆\n\n*   useradd --help 将显示可用于覆盖默认值的基本选项。在大多数情况，可以将相同的选项用于usermod命令\n\n*   默认值从/etc/login.defs文件中读取，如有效的UID编号的范围和默认密码过期规则。此文件中的值仅在创建用户是使用，更改文件对现有用户无任何影响    \n\n\n##### usermod    修改现有用户\n\nusermod --help 将显示可用于修改账户的基本选项，常见选项如下：\n\n\n|usermod 常见选项 ||\n| :--\n|-c, --coment COMMENT|向GECOS字段添加值，如全名\n|-g, --gid GROUP|为用户账户指定主要组\n|-G, --group GROUPS|为用户账户指定个组补充组\n|-a, --append|与-G选项搭配使用，将用户附加到所给的补充组，而不将该用户从其他组删除\n|-d, --home HOME_DIR|为用户账户指定新的主（家）目录\n|-m, --move-home|将用户主目录移到新的位置，必须与-d选项搭配使用\n|-s,--shell SHELL|为用户账户指定新的登陆SHELL\n|-L, --lock|锁定用户账户\n|-U, --unlock|解锁用户账户\n\n\n\n##### userdel    删除用户\n\nuserdel username 可将用户从/etc/passwd中删除，但默认情况下保留主目录不变。\n\n老用户删除后新用户将使用老用户的UID，原文件将在下次创建同等UID的用户是被授权给新用户。\n\nuserdel -r username 同时删除用户和和其主目录。\n\nfind / -nouser -o -nogroup 2>/dev/null #查找没有用户或者没有组的文件或目录\n\nid 显示用户信息  \n\nid username 将显示username的用户信息，包括用户的UID编号和组成员资格\n\npasswd 设置密码  \n\npasswd username  #如果不使用username 将代表当前用户，root可以在不需要旧密码的情况下修改其他用户密码。\n\nroot 可以将密码设置成任何值，如果密码不符合要求，系统会有提示，但仍可以设置。\n\n普通用户必须选择长度至少为8个字符，并且不以字典词语、用户名为密码基础\n\nUID 范围\n\n特定的UID编号和编号范围供RHEL用于特殊目的。\n\nUID 0 始终分配给超级用户root\n\nUID 1-200 是一系列“系统用户”，静态分配给红帽系统进程\n\nUID 201-999 是一系列“系统用户”，供文件系统中没有自己的文件的系统进程使用，通常在安装需要他们的软件时，从可用池中动态分配它们。程序以这些“无特权”系统用户身份运行，以便限制它们访问正常运行所需的资源。\n\nUID 1000+ 是可供分配给普通用户的范围。\n\nRHEL7 以前的版本是UID 1-499 为系统用户，500+ 为普通用户。默认范围可以在/etc/login.defs中修改\n\n```sh  \nuseradd juliet    #添加新用户\ntail -2 /etc/passwd     #查看最后两个用户\npasswd juliet    #修改juliet的密码\n```\n#### 管理本地组账户  \n\n##### groupadd 创建组\n\ngroupadd groupname 如果不带选项，则使用/etc/login.defs文件的指定范围内的下一个可用GID\n\n-g GID 选项用来指定具体的DIG\n```sh\ngroupadd -g 500 ateam     #创建组\n```\n用户专用组（GID 1000以上）是系统自动创建的，因此通常预备一系列GID编号待用于补充组，较高的范围可以避免与系统中GID（0-999）冲突  \n\n-r 选项将使用/etc/login.defs中系统用户的GID编号分配\n```sh\ngroupadd -r appusers\n```\ngroupmod 修改现有的组  \n\n-n 选项用于指定新的名称\n```sh\ngroupmod -n javaapp appusers    #修改javaapp组为appusers\n```\n-g 选项用于指定新的GID  \n```sh\ngroupmod -g 6000 ateam    #修改ateam组的GID为6000\n```\ngroupdel 删除组  \n```sh\ngroupdel javaapp\n```\n如果该组是当前某一用户的主要组，则他不能被删除，与userdel 一样检查文件系统，确保不会遗留该组拥有的任何文件\n\nusermod 变更组成员资格\n```sh\nusermod -g groupname  username   #更改用户主要组\nusermod -aG wheel elvis     #将用户elvis添加进wheel补充组，如果不使用-a选项，用户将删除其他补充组\n```\n##### 管理用户密码  \n\n$6$4Sme7FVt$kIMTvWnXbLGVgpVz2xHuWWAY6AxLEG4rtUm/2NvXyocJe0uT/7rIxD.52GvFJR/txTihH8VatnZ.R65YnmZzL0\n#以$符为分隔，共三段\n* 1. 哈希算法，数字1表示MD5哈希，数字6为SHA-512哈希算法\n* 2. \"4Sme7FVt\" 用于加密哈希的salt，这原先是随机选取的，salt和未加密的密码组合并加密。创建加密的哈希值，使用salt可以防止两个或多个相同密码的用户出现相同的条目\n* 3. \"kIMTvWnXbLGVgpVz2xHuWWAY6AxLEG4rtUm/2NvXyocJe0uT/7rIxD.52GvFJR/txTihH8VatnZ.R65YnmZzL0\" 以加密的哈希值\n\nRHEL7 支持新密码哈希算法：SHA-256(算法5)，SHA-512（算法6）,root 用户通过使用authconfig --passslgo 命令，并从md5,sha-256和sha-512中选择一个适当的参数，7默认使用sha-512\n```sh\n[change@rhel ~]$ sudo authconfig --help | grep passalgo\n  --passalgo=<descrypt|bigcrypt|md5|sha256|sha512>\n```\n/etc/shadow 格式（九个冒号分隔的字段）\n\n![blob.png](1525166687554964.png)\n\n登陆名称。这必须是系统中的有效账户名\n\n以加密的密码。密码开通为！时表示该密码已被锁定。\n\n最近一次更改密码的日期，以距离1970年1月1日的天数表示\n\n可以更改密码前的最少天数，如果0表示“无最短期限要求”\n\n必须修改密码前的最多天数。\n\n密码即将到期的警告期，以天数表示。0表示不警告。\n\n账户在密码过期后保持活动的天数，在此期限内，用户依然可以登录系统并修改密码。在指定天数过后，账户被锁定，变为不活动。\n\n账户到期日期，以距离1970年1月1日的天数表示\n\n这一blank 字段为预留字段，供未来使用\n\n![blob.png](1525167668913001.png)\n```sh\nchage -d 0 username    #强制用户在下次登录是修改密码\nchage -l user    #列出当前用户的设置\nchage -E YYYY-MM-DD    #将在指定日期是账户到期\ndate -d \"+45 days\"    #计算未来的日期\nusermod -L romeo     #锁定用户romeo\nusermod -U romeo     #解除锁定\nchage -M 90 romeo    #设置用户romeo 每90天创建新密码\n```\n","source":"_posts/chapter-5-managing-local-linux-users-and-groups.md","raw":"---\ntitle: Chapter 5. Managing Local Linux Users and Groups\nurl: 295.html\nid: 295\ncategories:\n  - RHEL124\ndate: 2018-04-30 21:59:23\ntags:\n---\n\nid 命令用来显示当前已登录用户的信息\n\nls -l 查看文件关联的用户。第三列显示的是用户名，第四列是组\n\nps 显示当前shell的进程\n\nps a 显示所有进程\n\nps au 显示进程关联的用户\n\n#### 用户\n\n/etc/passwd 文件格式（七个冒号分隔字段）\n\n![image.png](1524823773815913.png)\n\n1.  username 是UID到名称的一种映射，使用用户使用\n\n2.  password 以前是以加密格式保存密码的位置，现在密码存储在/etc/shadow的单独文件中\n\n3.  UID 是用户的ID\n\n4.  GID 是用户的主要组ID 编号\n\n5.  GECOS 字段是任意文件，通常包含用户的实际姓名，现在是描述\n\n6.  /home/dir 是用户的家目录\n\n7.  shell 是用户登录时运行的程序。对于普通用户通常是提供用户命令行的shell程序。\n\n\n#### 组\n\n保存在文件/etc/group 中\n\n每个用户有且只有一个主要组，即passwd中的第三个字段。\n\n通常用户创建的文件归主要组所有，通常用户主要组名和用户名相同，用户可以有0个或多个补充组\n\n\n\n#### su 切换命令  \n\nsu - <username\\>\n\nsu username 启动non-login shell    #su 使用当前用户环境变量，不使用username的环境变量\n\nsu - username 启动login shell # - 会将用户的环境变量调用，和这个用户正常登陆一样\n\nsudo 以root身份执行命令\n\nsudo 命令可以使用用户根据/etc/sudoers文件中的设置，而被允许以root身份或其他用户身份运行命令，su 要求的是被切换用户的密码，而sudo 是输入自己的密码  \n\nsudo usermod -L username\n\n使用sudo执行的所用命令都会被记录到/var/log/secure 中，在RHEL7中wheel组的成员都可以使用sudo ，早期版本wheel组用户默认没有这个权限（取消wheel组运行命令前的注释就可以了）\n\n##### visudo 编辑/etc/sudoers文件更方便\n\n大多数使用GUI的应用使用policykit提示用户进行身份认证，以及管理root访问权限\n\n* * *\n\n### 管理本地用户账户  \n\n##### useradd 创建用户  \n\n*   不带选项运行时，useradd username 会为/etc/passwd中的所用字段设置合理的默认值，默认情况下useradd 不设置任何有效密码，用户也必须设置密码后才可以登陆\n\n*   useradd --help 将显示可用于覆盖默认值的基本选项。在大多数情况，可以将相同的选项用于usermod命令\n\n*   默认值从/etc/login.defs文件中读取，如有效的UID编号的范围和默认密码过期规则。此文件中的值仅在创建用户是使用，更改文件对现有用户无任何影响    \n\n\n##### usermod    修改现有用户\n\nusermod --help 将显示可用于修改账户的基本选项，常见选项如下：\n\n\n|usermod 常见选项 ||\n| :--\n|-c, --coment COMMENT|向GECOS字段添加值，如全名\n|-g, --gid GROUP|为用户账户指定主要组\n|-G, --group GROUPS|为用户账户指定个组补充组\n|-a, --append|与-G选项搭配使用，将用户附加到所给的补充组，而不将该用户从其他组删除\n|-d, --home HOME_DIR|为用户账户指定新的主（家）目录\n|-m, --move-home|将用户主目录移到新的位置，必须与-d选项搭配使用\n|-s,--shell SHELL|为用户账户指定新的登陆SHELL\n|-L, --lock|锁定用户账户\n|-U, --unlock|解锁用户账户\n\n\n\n##### userdel    删除用户\n\nuserdel username 可将用户从/etc/passwd中删除，但默认情况下保留主目录不变。\n\n老用户删除后新用户将使用老用户的UID，原文件将在下次创建同等UID的用户是被授权给新用户。\n\nuserdel -r username 同时删除用户和和其主目录。\n\nfind / -nouser -o -nogroup 2>/dev/null #查找没有用户或者没有组的文件或目录\n\nid 显示用户信息  \n\nid username 将显示username的用户信息，包括用户的UID编号和组成员资格\n\npasswd 设置密码  \n\npasswd username  #如果不使用username 将代表当前用户，root可以在不需要旧密码的情况下修改其他用户密码。\n\nroot 可以将密码设置成任何值，如果密码不符合要求，系统会有提示，但仍可以设置。\n\n普通用户必须选择长度至少为8个字符，并且不以字典词语、用户名为密码基础\n\nUID 范围\n\n特定的UID编号和编号范围供RHEL用于特殊目的。\n\nUID 0 始终分配给超级用户root\n\nUID 1-200 是一系列“系统用户”，静态分配给红帽系统进程\n\nUID 201-999 是一系列“系统用户”，供文件系统中没有自己的文件的系统进程使用，通常在安装需要他们的软件时，从可用池中动态分配它们。程序以这些“无特权”系统用户身份运行，以便限制它们访问正常运行所需的资源。\n\nUID 1000+ 是可供分配给普通用户的范围。\n\nRHEL7 以前的版本是UID 1-499 为系统用户，500+ 为普通用户。默认范围可以在/etc/login.defs中修改\n\n```sh  \nuseradd juliet    #添加新用户\ntail -2 /etc/passwd     #查看最后两个用户\npasswd juliet    #修改juliet的密码\n```\n#### 管理本地组账户  \n\n##### groupadd 创建组\n\ngroupadd groupname 如果不带选项，则使用/etc/login.defs文件的指定范围内的下一个可用GID\n\n-g GID 选项用来指定具体的DIG\n```sh\ngroupadd -g 500 ateam     #创建组\n```\n用户专用组（GID 1000以上）是系统自动创建的，因此通常预备一系列GID编号待用于补充组，较高的范围可以避免与系统中GID（0-999）冲突  \n\n-r 选项将使用/etc/login.defs中系统用户的GID编号分配\n```sh\ngroupadd -r appusers\n```\ngroupmod 修改现有的组  \n\n-n 选项用于指定新的名称\n```sh\ngroupmod -n javaapp appusers    #修改javaapp组为appusers\n```\n-g 选项用于指定新的GID  \n```sh\ngroupmod -g 6000 ateam    #修改ateam组的GID为6000\n```\ngroupdel 删除组  \n```sh\ngroupdel javaapp\n```\n如果该组是当前某一用户的主要组，则他不能被删除，与userdel 一样检查文件系统，确保不会遗留该组拥有的任何文件\n\nusermod 变更组成员资格\n```sh\nusermod -g groupname  username   #更改用户主要组\nusermod -aG wheel elvis     #将用户elvis添加进wheel补充组，如果不使用-a选项，用户将删除其他补充组\n```\n##### 管理用户密码  \n\n$6$4Sme7FVt$kIMTvWnXbLGVgpVz2xHuWWAY6AxLEG4rtUm/2NvXyocJe0uT/7rIxD.52GvFJR/txTihH8VatnZ.R65YnmZzL0\n#以$符为分隔，共三段\n* 1. 哈希算法，数字1表示MD5哈希，数字6为SHA-512哈希算法\n* 2. \"4Sme7FVt\" 用于加密哈希的salt，这原先是随机选取的，salt和未加密的密码组合并加密。创建加密的哈希值，使用salt可以防止两个或多个相同密码的用户出现相同的条目\n* 3. \"kIMTvWnXbLGVgpVz2xHuWWAY6AxLEG4rtUm/2NvXyocJe0uT/7rIxD.52GvFJR/txTihH8VatnZ.R65YnmZzL0\" 以加密的哈希值\n\nRHEL7 支持新密码哈希算法：SHA-256(算法5)，SHA-512（算法6）,root 用户通过使用authconfig --passslgo 命令，并从md5,sha-256和sha-512中选择一个适当的参数，7默认使用sha-512\n```sh\n[change@rhel ~]$ sudo authconfig --help | grep passalgo\n  --passalgo=<descrypt|bigcrypt|md5|sha256|sha512>\n```\n/etc/shadow 格式（九个冒号分隔的字段）\n\n![blob.png](1525166687554964.png)\n\n登陆名称。这必须是系统中的有效账户名\n\n以加密的密码。密码开通为！时表示该密码已被锁定。\n\n最近一次更改密码的日期，以距离1970年1月1日的天数表示\n\n可以更改密码前的最少天数，如果0表示“无最短期限要求”\n\n必须修改密码前的最多天数。\n\n密码即将到期的警告期，以天数表示。0表示不警告。\n\n账户在密码过期后保持活动的天数，在此期限内，用户依然可以登录系统并修改密码。在指定天数过后，账户被锁定，变为不活动。\n\n账户到期日期，以距离1970年1月1日的天数表示\n\n这一blank 字段为预留字段，供未来使用\n\n![blob.png](1525167668913001.png)\n```sh\nchage -d 0 username    #强制用户在下次登录是修改密码\nchage -l user    #列出当前用户的设置\nchage -E YYYY-MM-DD    #将在指定日期是账户到期\ndate -d \"+45 days\"    #计算未来的日期\nusermod -L romeo     #锁定用户romeo\nusermod -U romeo     #解除锁定\nchage -M 90 romeo    #设置用户romeo 每90天创建新密码\n```\n","slug":"chapter-5-managing-local-linux-users-and-groups","published":1,"updated":"2019-01-05T23:37:12.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqi1p001elxkjoso1mm8e","content":"<p>id 命令用来显示当前已登录用户的信息</p>\n<p>ls -l 查看文件关联的用户。第三列显示的是用户名，第四列是组</p>\n<p>ps 显示当前shell的进程</p>\n<p>ps a 显示所有进程</p>\n<p>ps au 显示进程关联的用户</p>\n<h4 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h4><p>/etc/passwd 文件格式（七个冒号分隔字段）</p>\n<p><img src=\"/2018/04/30/chapter-5-managing-local-linux-users-and-groups/1524823773815913.png\" alt=\"image.png\"></p>\n<ol>\n<li><p>username 是UID到名称的一种映射，使用用户使用</p>\n</li>\n<li><p>password 以前是以加密格式保存密码的位置，现在密码存储在/etc/shadow的单独文件中</p>\n</li>\n<li><p>UID 是用户的ID</p>\n</li>\n<li><p>GID 是用户的主要组ID 编号</p>\n</li>\n<li><p>GECOS 字段是任意文件，通常包含用户的实际姓名，现在是描述</p>\n</li>\n<li><p>/home/dir 是用户的家目录</p>\n</li>\n<li><p>shell 是用户登录时运行的程序。对于普通用户通常是提供用户命令行的shell程序。</p>\n</li>\n</ol>\n<h4 id=\"组\"><a href=\"#组\" class=\"headerlink\" title=\"组\"></a>组</h4><p>保存在文件/etc/group 中</p>\n<p>每个用户有且只有一个主要组，即passwd中的第三个字段。</p>\n<p>通常用户创建的文件归主要组所有，通常用户主要组名和用户名相同，用户可以有0个或多个补充组</p>\n<h4 id=\"su-切换命令\"><a href=\"#su-切换命令\" class=\"headerlink\" title=\"su 切换命令\"></a>su 切换命令</h4><p>su - &lt;username></p>\n<p>su username 启动non-login shell    #su 使用当前用户环境变量，不使用username的环境变量</p>\n<p>su - username 启动login shell # - 会将用户的环境变量调用，和这个用户正常登陆一样</p>\n<p>sudo 以root身份执行命令</p>\n<p>sudo 命令可以使用用户根据/etc/sudoers文件中的设置，而被允许以root身份或其他用户身份运行命令，su 要求的是被切换用户的密码，而sudo 是输入自己的密码  </p>\n<p>sudo usermod -L username</p>\n<p>使用sudo执行的所用命令都会被记录到/var/log/secure 中，在RHEL7中wheel组的成员都可以使用sudo ，早期版本wheel组用户默认没有这个权限（取消wheel组运行命令前的注释就可以了）</p>\n<h5 id=\"visudo-编辑-etc-sudoers文件更方便\"><a href=\"#visudo-编辑-etc-sudoers文件更方便\" class=\"headerlink\" title=\"visudo 编辑/etc/sudoers文件更方便\"></a>visudo 编辑/etc/sudoers文件更方便</h5><p>大多数使用GUI的应用使用policykit提示用户进行身份认证，以及管理root访问权限</p>\n<hr>\n<h3 id=\"管理本地用户账户\"><a href=\"#管理本地用户账户\" class=\"headerlink\" title=\"管理本地用户账户\"></a>管理本地用户账户</h3><h5 id=\"useradd-创建用户\"><a href=\"#useradd-创建用户\" class=\"headerlink\" title=\"useradd 创建用户\"></a>useradd 创建用户</h5><ul>\n<li><p>不带选项运行时，useradd username 会为/etc/passwd中的所用字段设置合理的默认值，默认情况下useradd 不设置任何有效密码，用户也必须设置密码后才可以登陆</p>\n</li>\n<li><p>useradd –help 将显示可用于覆盖默认值的基本选项。在大多数情况，可以将相同的选项用于usermod命令</p>\n</li>\n<li><p>默认值从/etc/login.defs文件中读取，如有效的UID编号的范围和默认密码过期规则。此文件中的值仅在创建用户是使用，更改文件对现有用户无任何影响    </p>\n</li>\n</ul>\n<h5 id=\"usermod-修改现有用户\"><a href=\"#usermod-修改现有用户\" class=\"headerlink\" title=\"usermod    修改现有用户\"></a>usermod    修改现有用户</h5><p>usermod –help 将显示可用于修改账户的基本选项，常见选项如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">usermod 常见选项</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-c, –coment COMMENT</td>\n<td>向GECOS字段添加值，如全名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-g, –gid GROUP</td>\n<td>为用户账户指定主要组</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-G, –group GROUPS</td>\n<td>为用户账户指定个组补充组</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-a, –append</td>\n<td>与-G选项搭配使用，将用户附加到所给的补充组，而不将该用户从其他组删除</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-d, –home HOME_DIR</td>\n<td>为用户账户指定新的主（家）目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-m, –move-home</td>\n<td>将用户主目录移到新的位置，必须与-d选项搭配使用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-s,–shell SHELL</td>\n<td>为用户账户指定新的登陆SHELL</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-L, –lock</td>\n<td>锁定用户账户</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-U, –unlock</td>\n<td>解锁用户账户</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"userdel-删除用户\"><a href=\"#userdel-删除用户\" class=\"headerlink\" title=\"userdel    删除用户\"></a>userdel    删除用户</h5><p>userdel username 可将用户从/etc/passwd中删除，但默认情况下保留主目录不变。</p>\n<p>老用户删除后新用户将使用老用户的UID，原文件将在下次创建同等UID的用户是被授权给新用户。</p>\n<p>userdel -r username 同时删除用户和和其主目录。</p>\n<p>find / -nouser -o -nogroup 2&gt;/dev/null #查找没有用户或者没有组的文件或目录</p>\n<p>id 显示用户信息  </p>\n<p>id username 将显示username的用户信息，包括用户的UID编号和组成员资格</p>\n<p>passwd 设置密码  </p>\n<p>passwd username  #如果不使用username 将代表当前用户，root可以在不需要旧密码的情况下修改其他用户密码。</p>\n<p>root 可以将密码设置成任何值，如果密码不符合要求，系统会有提示，但仍可以设置。</p>\n<p>普通用户必须选择长度至少为8个字符，并且不以字典词语、用户名为密码基础</p>\n<p>UID 范围</p>\n<p>特定的UID编号和编号范围供RHEL用于特殊目的。</p>\n<p>UID 0 始终分配给超级用户root</p>\n<p>UID 1-200 是一系列“系统用户”，静态分配给红帽系统进程</p>\n<p>UID 201-999 是一系列“系统用户”，供文件系统中没有自己的文件的系统进程使用，通常在安装需要他们的软件时，从可用池中动态分配它们。程序以这些“无特权”系统用户身份运行，以便限制它们访问正常运行所需的资源。</p>\n<p>UID 1000+ 是可供分配给普通用户的范围。</p>\n<p>RHEL7 以前的版本是UID 1-499 为系统用户，500+ 为普通用户。默认范围可以在/etc/login.defs中修改</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd juliet    <span class=\"comment\">#添加新用户</span></span><br><span class=\"line\">tail -2 /etc/passwd     <span class=\"comment\">#查看最后两个用户</span></span><br><span class=\"line\">passwd juliet    <span class=\"comment\">#修改juliet的密码</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"管理本地组账户\"><a href=\"#管理本地组账户\" class=\"headerlink\" title=\"管理本地组账户\"></a>管理本地组账户</h4><h5 id=\"groupadd-创建组\"><a href=\"#groupadd-创建组\" class=\"headerlink\" title=\"groupadd 创建组\"></a>groupadd 创建组</h5><p>groupadd groupname 如果不带选项，则使用/etc/login.defs文件的指定范围内的下一个可用GID</p>\n<p>-g GID 选项用来指定具体的DIG<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd -g 500 ateam     <span class=\"comment\">#创建组</span></span><br></pre></td></tr></table></figure></p>\n<p>用户专用组（GID 1000以上）是系统自动创建的，因此通常预备一系列GID编号待用于补充组，较高的范围可以避免与系统中GID（0-999）冲突  </p>\n<p>-r 选项将使用/etc/login.defs中系统用户的GID编号分配<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd -r appusers</span><br></pre></td></tr></table></figure></p>\n<p>groupmod 修改现有的组  </p>\n<p>-n 选项用于指定新的名称<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupmod -n javaapp appusers    <span class=\"comment\">#修改javaapp组为appusers</span></span><br></pre></td></tr></table></figure></p>\n<p>-g 选项用于指定新的GID<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupmod -g 6000 ateam    <span class=\"comment\">#修改ateam组的GID为6000</span></span><br></pre></td></tr></table></figure></p>\n<p>groupdel 删除组<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupdel javaapp</span><br></pre></td></tr></table></figure></p>\n<p>如果该组是当前某一用户的主要组，则他不能被删除，与userdel 一样检查文件系统，确保不会遗留该组拥有的任何文件</p>\n<p>usermod 变更组成员资格<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod -g groupname  username   <span class=\"comment\">#更改用户主要组</span></span><br><span class=\"line\">usermod -aG wheel elvis     <span class=\"comment\">#将用户elvis添加进wheel补充组，如果不使用-a选项，用户将删除其他补充组</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"管理用户密码\"><a href=\"#管理用户密码\" class=\"headerlink\" title=\"管理用户密码\"></a>管理用户密码</h5><p>$6$4Sme7FVt$kIMTvWnXbLGVgpVz2xHuWWAY6AxLEG4rtUm/2NvXyocJe0uT/7rIxD.52GvFJR/txTihH8VatnZ.R65YnmZzL0</p>\n<p>#以$符为分隔，共三段</p>\n<ul>\n<li><ol>\n<li>哈希算法，数字1表示MD5哈希，数字6为SHA-512哈希算法</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>“4Sme7FVt” 用于加密哈希的salt，这原先是随机选取的，salt和未加密的密码组合并加密。创建加密的哈希值，使用salt可以防止两个或多个相同密码的用户出现相同的条目</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>“kIMTvWnXbLGVgpVz2xHuWWAY6AxLEG4rtUm/2NvXyocJe0uT/7rIxD.52GvFJR/txTihH8VatnZ.R65YnmZzL0” 以加密的哈希值</li>\n</ol>\n</li>\n</ul>\n<p>RHEL7 支持新密码哈希算法：SHA-256(算法5)，SHA-512（算法6）,root 用户通过使用authconfig –passslgo 命令，并从md5,sha-256和sha-512中选择一个适当的参数，7默认使用sha-512<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[change@rhel ~]$ sudo authconfig --<span class=\"built_in\">help</span> | grep passalgo</span><br><span class=\"line\">  --passalgo=&lt;descrypt|bigcrypt|md5|sha256|sha512&gt;</span><br></pre></td></tr></table></figure></p>\n<p>/etc/shadow 格式（九个冒号分隔的字段）</p>\n<p><img src=\"/2018/04/30/chapter-5-managing-local-linux-users-and-groups/1525166687554964.png\" alt=\"blob.png\"></p>\n<p>登陆名称。这必须是系统中的有效账户名</p>\n<p>以加密的密码。密码开通为！时表示该密码已被锁定。</p>\n<p>最近一次更改密码的日期，以距离1970年1月1日的天数表示</p>\n<p>可以更改密码前的最少天数，如果0表示“无最短期限要求”</p>\n<p>必须修改密码前的最多天数。</p>\n<p>密码即将到期的警告期，以天数表示。0表示不警告。</p>\n<p>账户在密码过期后保持活动的天数，在此期限内，用户依然可以登录系统并修改密码。在指定天数过后，账户被锁定，变为不活动。</p>\n<p>账户到期日期，以距离1970年1月1日的天数表示</p>\n<p>这一blank 字段为预留字段，供未来使用</p>\n<p><img src=\"/2018/04/30/chapter-5-managing-local-linux-users-and-groups/1525167668913001.png\" alt=\"blob.png\"><br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chage -d 0 username    <span class=\"comment\">#强制用户在下次登录是修改密码</span></span><br><span class=\"line\">chage -l user    <span class=\"comment\">#列出当前用户的设置</span></span><br><span class=\"line\">chage -E YYYY-MM-DD    <span class=\"comment\">#将在指定日期是账户到期</span></span><br><span class=\"line\">date -d <span class=\"string\">\"+45 days\"</span>    <span class=\"comment\">#计算未来的日期</span></span><br><span class=\"line\">usermod -L romeo     <span class=\"comment\">#锁定用户romeo</span></span><br><span class=\"line\">usermod -U romeo     <span class=\"comment\">#解除锁定</span></span><br><span class=\"line\">chage -M 90 romeo    <span class=\"comment\">#设置用户romeo 每90天创建新密码</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>id 命令用来显示当前已登录用户的信息</p>\n<p>ls -l 查看文件关联的用户。第三列显示的是用户名，第四列是组</p>\n<p>ps 显示当前shell的进程</p>\n<p>ps a 显示所有进程</p>\n<p>ps au 显示进程关联的用户</p>\n<h4 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h4><p>/etc/passwd 文件格式（七个冒号分隔字段）</p>\n<p><img src=\"/2018/04/30/chapter-5-managing-local-linux-users-and-groups/1524823773815913.png\" alt=\"image.png\"></p>\n<ol>\n<li><p>username 是UID到名称的一种映射，使用用户使用</p>\n</li>\n<li><p>password 以前是以加密格式保存密码的位置，现在密码存储在/etc/shadow的单独文件中</p>\n</li>\n<li><p>UID 是用户的ID</p>\n</li>\n<li><p>GID 是用户的主要组ID 编号</p>\n</li>\n<li><p>GECOS 字段是任意文件，通常包含用户的实际姓名，现在是描述</p>\n</li>\n<li><p>/home/dir 是用户的家目录</p>\n</li>\n<li><p>shell 是用户登录时运行的程序。对于普通用户通常是提供用户命令行的shell程序。</p>\n</li>\n</ol>\n<h4 id=\"组\"><a href=\"#组\" class=\"headerlink\" title=\"组\"></a>组</h4><p>保存在文件/etc/group 中</p>\n<p>每个用户有且只有一个主要组，即passwd中的第三个字段。</p>\n<p>通常用户创建的文件归主要组所有，通常用户主要组名和用户名相同，用户可以有0个或多个补充组</p>\n<h4 id=\"su-切换命令\"><a href=\"#su-切换命令\" class=\"headerlink\" title=\"su 切换命令\"></a>su 切换命令</h4><p>su - &lt;username></p>\n<p>su username 启动non-login shell    #su 使用当前用户环境变量，不使用username的环境变量</p>\n<p>su - username 启动login shell # - 会将用户的环境变量调用，和这个用户正常登陆一样</p>\n<p>sudo 以root身份执行命令</p>\n<p>sudo 命令可以使用用户根据/etc/sudoers文件中的设置，而被允许以root身份或其他用户身份运行命令，su 要求的是被切换用户的密码，而sudo 是输入自己的密码  </p>\n<p>sudo usermod -L username</p>\n<p>使用sudo执行的所用命令都会被记录到/var/log/secure 中，在RHEL7中wheel组的成员都可以使用sudo ，早期版本wheel组用户默认没有这个权限（取消wheel组运行命令前的注释就可以了）</p>\n<h5 id=\"visudo-编辑-etc-sudoers文件更方便\"><a href=\"#visudo-编辑-etc-sudoers文件更方便\" class=\"headerlink\" title=\"visudo 编辑/etc/sudoers文件更方便\"></a>visudo 编辑/etc/sudoers文件更方便</h5><p>大多数使用GUI的应用使用policykit提示用户进行身份认证，以及管理root访问权限</p>\n<hr>\n<h3 id=\"管理本地用户账户\"><a href=\"#管理本地用户账户\" class=\"headerlink\" title=\"管理本地用户账户\"></a>管理本地用户账户</h3><h5 id=\"useradd-创建用户\"><a href=\"#useradd-创建用户\" class=\"headerlink\" title=\"useradd 创建用户\"></a>useradd 创建用户</h5><ul>\n<li><p>不带选项运行时，useradd username 会为/etc/passwd中的所用字段设置合理的默认值，默认情况下useradd 不设置任何有效密码，用户也必须设置密码后才可以登陆</p>\n</li>\n<li><p>useradd –help 将显示可用于覆盖默认值的基本选项。在大多数情况，可以将相同的选项用于usermod命令</p>\n</li>\n<li><p>默认值从/etc/login.defs文件中读取，如有效的UID编号的范围和默认密码过期规则。此文件中的值仅在创建用户是使用，更改文件对现有用户无任何影响    </p>\n</li>\n</ul>\n<h5 id=\"usermod-修改现有用户\"><a href=\"#usermod-修改现有用户\" class=\"headerlink\" title=\"usermod    修改现有用户\"></a>usermod    修改现有用户</h5><p>usermod –help 将显示可用于修改账户的基本选项，常见选项如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">usermod 常见选项</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-c, –coment COMMENT</td>\n<td>向GECOS字段添加值，如全名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-g, –gid GROUP</td>\n<td>为用户账户指定主要组</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-G, –group GROUPS</td>\n<td>为用户账户指定个组补充组</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-a, –append</td>\n<td>与-G选项搭配使用，将用户附加到所给的补充组，而不将该用户从其他组删除</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-d, –home HOME_DIR</td>\n<td>为用户账户指定新的主（家）目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-m, –move-home</td>\n<td>将用户主目录移到新的位置，必须与-d选项搭配使用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-s,–shell SHELL</td>\n<td>为用户账户指定新的登陆SHELL</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-L, –lock</td>\n<td>锁定用户账户</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-U, –unlock</td>\n<td>解锁用户账户</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"userdel-删除用户\"><a href=\"#userdel-删除用户\" class=\"headerlink\" title=\"userdel    删除用户\"></a>userdel    删除用户</h5><p>userdel username 可将用户从/etc/passwd中删除，但默认情况下保留主目录不变。</p>\n<p>老用户删除后新用户将使用老用户的UID，原文件将在下次创建同等UID的用户是被授权给新用户。</p>\n<p>userdel -r username 同时删除用户和和其主目录。</p>\n<p>find / -nouser -o -nogroup 2&gt;/dev/null #查找没有用户或者没有组的文件或目录</p>\n<p>id 显示用户信息  </p>\n<p>id username 将显示username的用户信息，包括用户的UID编号和组成员资格</p>\n<p>passwd 设置密码  </p>\n<p>passwd username  #如果不使用username 将代表当前用户，root可以在不需要旧密码的情况下修改其他用户密码。</p>\n<p>root 可以将密码设置成任何值，如果密码不符合要求，系统会有提示，但仍可以设置。</p>\n<p>普通用户必须选择长度至少为8个字符，并且不以字典词语、用户名为密码基础</p>\n<p>UID 范围</p>\n<p>特定的UID编号和编号范围供RHEL用于特殊目的。</p>\n<p>UID 0 始终分配给超级用户root</p>\n<p>UID 1-200 是一系列“系统用户”，静态分配给红帽系统进程</p>\n<p>UID 201-999 是一系列“系统用户”，供文件系统中没有自己的文件的系统进程使用，通常在安装需要他们的软件时，从可用池中动态分配它们。程序以这些“无特权”系统用户身份运行，以便限制它们访问正常运行所需的资源。</p>\n<p>UID 1000+ 是可供分配给普通用户的范围。</p>\n<p>RHEL7 以前的版本是UID 1-499 为系统用户，500+ 为普通用户。默认范围可以在/etc/login.defs中修改</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd juliet    <span class=\"comment\">#添加新用户</span></span><br><span class=\"line\">tail -2 /etc/passwd     <span class=\"comment\">#查看最后两个用户</span></span><br><span class=\"line\">passwd juliet    <span class=\"comment\">#修改juliet的密码</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"管理本地组账户\"><a href=\"#管理本地组账户\" class=\"headerlink\" title=\"管理本地组账户\"></a>管理本地组账户</h4><h5 id=\"groupadd-创建组\"><a href=\"#groupadd-创建组\" class=\"headerlink\" title=\"groupadd 创建组\"></a>groupadd 创建组</h5><p>groupadd groupname 如果不带选项，则使用/etc/login.defs文件的指定范围内的下一个可用GID</p>\n<p>-g GID 选项用来指定具体的DIG<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd -g 500 ateam     <span class=\"comment\">#创建组</span></span><br></pre></td></tr></table></figure></p>\n<p>用户专用组（GID 1000以上）是系统自动创建的，因此通常预备一系列GID编号待用于补充组，较高的范围可以避免与系统中GID（0-999）冲突  </p>\n<p>-r 选项将使用/etc/login.defs中系统用户的GID编号分配<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd -r appusers</span><br></pre></td></tr></table></figure></p>\n<p>groupmod 修改现有的组  </p>\n<p>-n 选项用于指定新的名称<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupmod -n javaapp appusers    <span class=\"comment\">#修改javaapp组为appusers</span></span><br></pre></td></tr></table></figure></p>\n<p>-g 选项用于指定新的GID<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupmod -g 6000 ateam    <span class=\"comment\">#修改ateam组的GID为6000</span></span><br></pre></td></tr></table></figure></p>\n<p>groupdel 删除组<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupdel javaapp</span><br></pre></td></tr></table></figure></p>\n<p>如果该组是当前某一用户的主要组，则他不能被删除，与userdel 一样检查文件系统，确保不会遗留该组拥有的任何文件</p>\n<p>usermod 变更组成员资格<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod -g groupname  username   <span class=\"comment\">#更改用户主要组</span></span><br><span class=\"line\">usermod -aG wheel elvis     <span class=\"comment\">#将用户elvis添加进wheel补充组，如果不使用-a选项，用户将删除其他补充组</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"管理用户密码\"><a href=\"#管理用户密码\" class=\"headerlink\" title=\"管理用户密码\"></a>管理用户密码</h5><p>$6$4Sme7FVt$kIMTvWnXbLGVgpVz2xHuWWAY6AxLEG4rtUm/2NvXyocJe0uT/7rIxD.52GvFJR/txTihH8VatnZ.R65YnmZzL0</p>\n<p>#以$符为分隔，共三段</p>\n<ul>\n<li><ol>\n<li>哈希算法，数字1表示MD5哈希，数字6为SHA-512哈希算法</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>“4Sme7FVt” 用于加密哈希的salt，这原先是随机选取的，salt和未加密的密码组合并加密。创建加密的哈希值，使用salt可以防止两个或多个相同密码的用户出现相同的条目</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>“kIMTvWnXbLGVgpVz2xHuWWAY6AxLEG4rtUm/2NvXyocJe0uT/7rIxD.52GvFJR/txTihH8VatnZ.R65YnmZzL0” 以加密的哈希值</li>\n</ol>\n</li>\n</ul>\n<p>RHEL7 支持新密码哈希算法：SHA-256(算法5)，SHA-512（算法6）,root 用户通过使用authconfig –passslgo 命令，并从md5,sha-256和sha-512中选择一个适当的参数，7默认使用sha-512<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[change@rhel ~]$ sudo authconfig --<span class=\"built_in\">help</span> | grep passalgo</span><br><span class=\"line\">  --passalgo=&lt;descrypt|bigcrypt|md5|sha256|sha512&gt;</span><br></pre></td></tr></table></figure></p>\n<p>/etc/shadow 格式（九个冒号分隔的字段）</p>\n<p><img src=\"/2018/04/30/chapter-5-managing-local-linux-users-and-groups/1525166687554964.png\" alt=\"blob.png\"></p>\n<p>登陆名称。这必须是系统中的有效账户名</p>\n<p>以加密的密码。密码开通为！时表示该密码已被锁定。</p>\n<p>最近一次更改密码的日期，以距离1970年1月1日的天数表示</p>\n<p>可以更改密码前的最少天数，如果0表示“无最短期限要求”</p>\n<p>必须修改密码前的最多天数。</p>\n<p>密码即将到期的警告期，以天数表示。0表示不警告。</p>\n<p>账户在密码过期后保持活动的天数，在此期限内，用户依然可以登录系统并修改密码。在指定天数过后，账户被锁定，变为不活动。</p>\n<p>账户到期日期，以距离1970年1月1日的天数表示</p>\n<p>这一blank 字段为预留字段，供未来使用</p>\n<p><img src=\"/2018/04/30/chapter-5-managing-local-linux-users-and-groups/1525167668913001.png\" alt=\"blob.png\"><br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chage -d 0 username    <span class=\"comment\">#强制用户在下次登录是修改密码</span></span><br><span class=\"line\">chage -l user    <span class=\"comment\">#列出当前用户的设置</span></span><br><span class=\"line\">chage -E YYYY-MM-DD    <span class=\"comment\">#将在指定日期是账户到期</span></span><br><span class=\"line\">date -d <span class=\"string\">\"+45 days\"</span>    <span class=\"comment\">#计算未来的日期</span></span><br><span class=\"line\">usermod -L romeo     <span class=\"comment\">#锁定用户romeo</span></span><br><span class=\"line\">usermod -U romeo     <span class=\"comment\">#解除锁定</span></span><br><span class=\"line\">chage -M 90 romeo    <span class=\"comment\">#设置用户romeo 每90天创建新密码</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"Chatper 13. Installing and updating software packages","url":"173.html","id":"173","date":"2018-04-17T00:49:48.000Z","_content":"\n红帽提供软件更新服务工具（收费）需要购买服务，并利用注册工具（subscription-manager-gui）进行注册软件管理服务器.\n\n#### Register 用户和红帽账号绑定\n\n    1.在命令行command 输入 subscription-manager-gui,或者在GNOME界面Application-->Other-->Red Hat Subscription Manager 进入，输入对应的root 密码就可以进入图形操作，进入图形后点击右上角的Register会进入一个新的对话窗，subsription 默认服务器地址：subscription.rhn.redhat.com.Next后会要求输入RedHat的账号密码，默认会自动检查相应的订阅，也可以自己手动检查。最后点击Register完成注册。完成后就可以检查更新了。\n\n    2.使用命令行完成自动注册\n```sh\n    subscription-manager register --username=yourname --password=yourpassword  #订阅\n    subscription-manager list --available | less    #查看有效的订阅\n    subscription-manager attach --auto    #自动检查订阅\n    subscription-manager list --consumed    #查看consumed（消费） 订阅\n    subscription-manager unregister    #取消订阅\n```\n\n\n##### Subscribe 订阅授权给指定的产品，选择/删除需要授权的产品\n\nEnable repositories 启用软件包的存储库（理解成yum 源库），每个订阅默认会开启多个存储库，可以根据需要关闭不需要的，如源代码、更新\n\nReview and track  查看和审查自己的订阅信息，可以在本地和红帽网站上查询\n\n###### 订阅的授权证书存放在/etc/pki 及其子目录中\n\n/etc/pki/product    #安装在Red Hat中的产品证书\n/etc/pki/consumer    #存储在这个系统中的RedHat的账号的证书\n/etc/pki/entitlement    #包含了订阅了哪个许可的证书\n\n可以使用rct程序检查证书，相比下subscription-manager程序读取证书更加友好  \n\n* * *\n\nrpm and yum\n\nrpm =red hat packet manager\n\nrpm 包的文件格式：\n\nname-version-release.architectrue\n\nhttpd-tools.2.4.6.7-7.e17.x86_64.rpm  \n\nhttpd-tools=name    名字\n\n2.4.6.7=version    版本\n\n7.el7=release    基于版本的发行号\n\nx86_64=arch    架构\n\n默认安装时只需要使用RPM包的名字，如果有多个版本存在默认安装版本最高的\n\n###### 每个RPM包包含以下三个组成部份：\n\n软件安装的文件、\n\n与软件包（元数据）有关的信息，摘要，描述、是否要求安装其它软件，授权许可、更改日志、以及其它详细信息\n\n在安装、更新或删除此软件包时可能运行的脚本、或此过程中可能触发的脚本。  \n\n如果软件构建为不冲突的文件名，则可以安装多个版本。例如kernel 否则只能安装一个版本。\n\n###### yum---------软件包管理器\n\nPackageKit 和yum 等工具是rpm的前端应用，可以用于安装单个软件包或软件包集合，并解决RPM无法解决的依赖关系。\n\nyum 的主要配置文件为：/etc/yum.conf,其它存储库配置文件位于在/etc/yum.repos.d目录中。  \n\n存储库配置文件至少包含一个存储库ID （在方括号中）、一个名称以及软件包存储库的URL位置。URL可以指向本地目录（文件）或远程网络共享(http和ftp等)。如果将该URL粘贴到浏览器中，则显示的内容应该有RPM软件包（可能位于一个或多个子目录中）。以及包含可用软件包相关信息的repodata目录。  \n```sh\n#yum 命令用于列出存储库、软件包和软件包组\nyum repolist \nyum list yum*    #显示已安装和可用的软件包\nyum grouplist\nyum search apache    #在名字和摘要字段搜索关键字列出的软件包\nyum search all 'web server'    #搜索名字、摘要、描述等字段中包含'web server'的软件包\nyum info PACKAGENAME    #提供与指定软件包相关的详细信息，包括安装所需的磁盘空间。\nyum provides /var/www/html    #显示与指定的路径名（通常包含通配符）匹配的软件包\nyum install PACKAGENAME    #获取并安装软件包，包括依赖项\nyum update PACKAGENAME    #获取并安装更新版本的软件包，包括所有依赖项。通常该进程尝试适当保留配置文件，但是在某些情况下，如果打包商认为旧文件在更新后将无法使用，则可能对其进行重命名，如果未指定软件包名称，它将安装所有相关更新\nyum remove PACKAGENAME    #删除已安装的软件包、包括所有支持软件包。有可能会导致意外删除软件包，因此删除前要仔细检查要删除的软件包列表。\nyum help\n\nuname -r     #仅显示内核 的版本和发行版本\nuname -a     #将显示内核发行版和其它信息\n```\n\n\nyum 有两种类型的组：常规组是软件包集合，环境组是其他组的集全。这些组包含自己的软件包。\n\n与yum list 相似，yum group list (或 yum grouplist ) 将列出已安装和可用的组名称，有些组通过环境安装，默认为隐藏，这些隐藏组也可以通过yum group list hidden 命令列出。如果添加ids 选项，则会显示组ID。  \n```sh\nyum grout list hidden    #显示隐藏组\nyum group list = yum grouplist    #显示已经安装和可选安装的软件包组。\nyum group info = yum groupinfo    #它将列出改必选、默认和可选软件包名称或组ID。\n```\n\n\n#软件包名称或组前面可能标有标记。如下图：  \n\n![图片.png](1523863565421240.png)\n```sh\nyum group install = yum groupinstall     #组安装\nyum group remove = yum groupremove    #组删除\nyum group mark install GROUPNAME    #标记为已安装，下次更新时将安装缺少的软件包和其依赖项。RHEL7 以后增加的命令\ntail -5 /var/log/yum.log    #查看事务历史记录\nyum history     #查看安装和删除事务的摘要\nyum history undo 6    #撤销事务\n\n\n\nyum repolist all    #查看所有可用的存储库\nyum-config-manager     #启用和禁用存储库，这将更改/etc/yum.repos.d/redhat.repo 文件中的enabled 参数\nyum-config-manager  --enable rhel-7-public-bate-debug-rpms      #案例\n```\n第三方存储库：网站、ftp服务器、本地文件系统。将文件放到/etc/yum.repos.d/ 目录中以启用对第三方内容库的支持。内容库配置必须以.repo 结尾。\n\n存储库定义包含存储的URL和名称、也定义是否使用GPG检查 软件包签名；如果是，则还检查URL是否指向受信任的GPG密钥。\n```sh\nyum-config-manager --add-repo=\"http://dl.fedoraproject.org/pub/epel/beta/7/x86_64/\"    #增加epel的源，\n```\n执行完修改/etc/yum.repos.d/下生成的配置文件，提供自定义名称和GPG密钥位置。管理员应将该密钥下载到本地文件，而不是让yum从外部来源检索该密钥。\n\n安装Red Hat Enterprise Linux 7 EPEL存储库软件包:(默认提供配置文件、GPG公钥做为软件安装包的一部分)\n```sh\nrpm --import http://dl.fedoraproject.org/pub/epep/RPM-KEY-EPEL-7   \n``` \n#如果不先安装GPG密钥安装软件时会报错，可以通过--nogpgcheck 忽略检查，不推荐这样操作。\n```sh\nyum install http://dl.fedoraproject.org/pub/epep/beta/7/x86_64/epel-release-7-0.1.noarch.rpm\n```\n配置文件通常在一个文件中列举多个存储库引用。每一存储库引用的开头为包含在方括号里的单一词语名称。可以通过“enabled=0 ”参数来关闭不需要使用的存储库。\n```sh\nyum-config-manager #永久的启用或禁用存储库\nyum --enablerepo=PATTERN \nyum --disablerepo=PATTERN \nyum-config-manager --disable content.example.com\\_rhel7.0\\_x86\\_64\\_rht    \n#content.example.com\\_rhel7.0\\_x86\\_64\\_rht 通过yum repolist 查看\n```\n###### rpm  \n```sh\nrpm -q PACKAGENAME    #查看指定安装的软件名称，列出软件包的名称和版本，与yum list 类似\nrpm -qa         #查看所有安装的软件\nrpm -q -p PACKAGENAME.rpm     #-p 指定安装软件包文件\nrpm -q -f filename     #查看哪个软件包提示了这个文件或文件夹\nrpm -q -i :软件包信息与yum info 类似\nrpm -q -l :    rpm -q -l yum-rhn-plugin    #列出指定软件安装产生的文件\nrpm -q -c：    rpm -q -c yum-rhn-plugin    #仅列出配置文件。\nrpm -q -d:    rpm -q -d yum-rhn-plugin    #仅列出文档文件\nrpm -q --scripts :    rpm -q --scripts openssh-server    #列出可能在安装或删除软件之前或之后运行的shell脚本\nrpm -q --changelog :    rpm -q --changlog audit    #列出软件包的更改信息\n```\ncpio 从rpm包提示文件而不安装该软件包。rpm2cpio PACKAGERFILE.rpm 传送到cpio -id ，它会提取RPM中存储的所有文件。需要时会创建子目录树，也可以指定目录。\n```sh\nrpm2cpio wonderwidgets-1.0-4.x86_64.rpm | cpio -id \"*.txt\"\n```\n","source":"_posts/chatper-13-installing-and-updating-software-packages.md","raw":"---\ntitle: Chatper 13. Installing and updating software packages\nurl: 173.html\nid: 173\ncategories:\n  - RHEL124\ndate: 2018-04-17 08:49:48\ntags:\n---\n\n红帽提供软件更新服务工具（收费）需要购买服务，并利用注册工具（subscription-manager-gui）进行注册软件管理服务器.\n\n#### Register 用户和红帽账号绑定\n\n    1.在命令行command 输入 subscription-manager-gui,或者在GNOME界面Application-->Other-->Red Hat Subscription Manager 进入，输入对应的root 密码就可以进入图形操作，进入图形后点击右上角的Register会进入一个新的对话窗，subsription 默认服务器地址：subscription.rhn.redhat.com.Next后会要求输入RedHat的账号密码，默认会自动检查相应的订阅，也可以自己手动检查。最后点击Register完成注册。完成后就可以检查更新了。\n\n    2.使用命令行完成自动注册\n```sh\n    subscription-manager register --username=yourname --password=yourpassword  #订阅\n    subscription-manager list --available | less    #查看有效的订阅\n    subscription-manager attach --auto    #自动检查订阅\n    subscription-manager list --consumed    #查看consumed（消费） 订阅\n    subscription-manager unregister    #取消订阅\n```\n\n\n##### Subscribe 订阅授权给指定的产品，选择/删除需要授权的产品\n\nEnable repositories 启用软件包的存储库（理解成yum 源库），每个订阅默认会开启多个存储库，可以根据需要关闭不需要的，如源代码、更新\n\nReview and track  查看和审查自己的订阅信息，可以在本地和红帽网站上查询\n\n###### 订阅的授权证书存放在/etc/pki 及其子目录中\n\n/etc/pki/product    #安装在Red Hat中的产品证书\n/etc/pki/consumer    #存储在这个系统中的RedHat的账号的证书\n/etc/pki/entitlement    #包含了订阅了哪个许可的证书\n\n可以使用rct程序检查证书，相比下subscription-manager程序读取证书更加友好  \n\n* * *\n\nrpm and yum\n\nrpm =red hat packet manager\n\nrpm 包的文件格式：\n\nname-version-release.architectrue\n\nhttpd-tools.2.4.6.7-7.e17.x86_64.rpm  \n\nhttpd-tools=name    名字\n\n2.4.6.7=version    版本\n\n7.el7=release    基于版本的发行号\n\nx86_64=arch    架构\n\n默认安装时只需要使用RPM包的名字，如果有多个版本存在默认安装版本最高的\n\n###### 每个RPM包包含以下三个组成部份：\n\n软件安装的文件、\n\n与软件包（元数据）有关的信息，摘要，描述、是否要求安装其它软件，授权许可、更改日志、以及其它详细信息\n\n在安装、更新或删除此软件包时可能运行的脚本、或此过程中可能触发的脚本。  \n\n如果软件构建为不冲突的文件名，则可以安装多个版本。例如kernel 否则只能安装一个版本。\n\n###### yum---------软件包管理器\n\nPackageKit 和yum 等工具是rpm的前端应用，可以用于安装单个软件包或软件包集合，并解决RPM无法解决的依赖关系。\n\nyum 的主要配置文件为：/etc/yum.conf,其它存储库配置文件位于在/etc/yum.repos.d目录中。  \n\n存储库配置文件至少包含一个存储库ID （在方括号中）、一个名称以及软件包存储库的URL位置。URL可以指向本地目录（文件）或远程网络共享(http和ftp等)。如果将该URL粘贴到浏览器中，则显示的内容应该有RPM软件包（可能位于一个或多个子目录中）。以及包含可用软件包相关信息的repodata目录。  \n```sh\n#yum 命令用于列出存储库、软件包和软件包组\nyum repolist \nyum list yum*    #显示已安装和可用的软件包\nyum grouplist\nyum search apache    #在名字和摘要字段搜索关键字列出的软件包\nyum search all 'web server'    #搜索名字、摘要、描述等字段中包含'web server'的软件包\nyum info PACKAGENAME    #提供与指定软件包相关的详细信息，包括安装所需的磁盘空间。\nyum provides /var/www/html    #显示与指定的路径名（通常包含通配符）匹配的软件包\nyum install PACKAGENAME    #获取并安装软件包，包括依赖项\nyum update PACKAGENAME    #获取并安装更新版本的软件包，包括所有依赖项。通常该进程尝试适当保留配置文件，但是在某些情况下，如果打包商认为旧文件在更新后将无法使用，则可能对其进行重命名，如果未指定软件包名称，它将安装所有相关更新\nyum remove PACKAGENAME    #删除已安装的软件包、包括所有支持软件包。有可能会导致意外删除软件包，因此删除前要仔细检查要删除的软件包列表。\nyum help\n\nuname -r     #仅显示内核 的版本和发行版本\nuname -a     #将显示内核发行版和其它信息\n```\n\n\nyum 有两种类型的组：常规组是软件包集合，环境组是其他组的集全。这些组包含自己的软件包。\n\n与yum list 相似，yum group list (或 yum grouplist ) 将列出已安装和可用的组名称，有些组通过环境安装，默认为隐藏，这些隐藏组也可以通过yum group list hidden 命令列出。如果添加ids 选项，则会显示组ID。  \n```sh\nyum grout list hidden    #显示隐藏组\nyum group list = yum grouplist    #显示已经安装和可选安装的软件包组。\nyum group info = yum groupinfo    #它将列出改必选、默认和可选软件包名称或组ID。\n```\n\n\n#软件包名称或组前面可能标有标记。如下图：  \n\n![图片.png](1523863565421240.png)\n```sh\nyum group install = yum groupinstall     #组安装\nyum group remove = yum groupremove    #组删除\nyum group mark install GROUPNAME    #标记为已安装，下次更新时将安装缺少的软件包和其依赖项。RHEL7 以后增加的命令\ntail -5 /var/log/yum.log    #查看事务历史记录\nyum history     #查看安装和删除事务的摘要\nyum history undo 6    #撤销事务\n\n\n\nyum repolist all    #查看所有可用的存储库\nyum-config-manager     #启用和禁用存储库，这将更改/etc/yum.repos.d/redhat.repo 文件中的enabled 参数\nyum-config-manager  --enable rhel-7-public-bate-debug-rpms      #案例\n```\n第三方存储库：网站、ftp服务器、本地文件系统。将文件放到/etc/yum.repos.d/ 目录中以启用对第三方内容库的支持。内容库配置必须以.repo 结尾。\n\n存储库定义包含存储的URL和名称、也定义是否使用GPG检查 软件包签名；如果是，则还检查URL是否指向受信任的GPG密钥。\n```sh\nyum-config-manager --add-repo=\"http://dl.fedoraproject.org/pub/epel/beta/7/x86_64/\"    #增加epel的源，\n```\n执行完修改/etc/yum.repos.d/下生成的配置文件，提供自定义名称和GPG密钥位置。管理员应将该密钥下载到本地文件，而不是让yum从外部来源检索该密钥。\n\n安装Red Hat Enterprise Linux 7 EPEL存储库软件包:(默认提供配置文件、GPG公钥做为软件安装包的一部分)\n```sh\nrpm --import http://dl.fedoraproject.org/pub/epep/RPM-KEY-EPEL-7   \n``` \n#如果不先安装GPG密钥安装软件时会报错，可以通过--nogpgcheck 忽略检查，不推荐这样操作。\n```sh\nyum install http://dl.fedoraproject.org/pub/epep/beta/7/x86_64/epel-release-7-0.1.noarch.rpm\n```\n配置文件通常在一个文件中列举多个存储库引用。每一存储库引用的开头为包含在方括号里的单一词语名称。可以通过“enabled=0 ”参数来关闭不需要使用的存储库。\n```sh\nyum-config-manager #永久的启用或禁用存储库\nyum --enablerepo=PATTERN \nyum --disablerepo=PATTERN \nyum-config-manager --disable content.example.com\\_rhel7.0\\_x86\\_64\\_rht    \n#content.example.com\\_rhel7.0\\_x86\\_64\\_rht 通过yum repolist 查看\n```\n###### rpm  \n```sh\nrpm -q PACKAGENAME    #查看指定安装的软件名称，列出软件包的名称和版本，与yum list 类似\nrpm -qa         #查看所有安装的软件\nrpm -q -p PACKAGENAME.rpm     #-p 指定安装软件包文件\nrpm -q -f filename     #查看哪个软件包提示了这个文件或文件夹\nrpm -q -i :软件包信息与yum info 类似\nrpm -q -l :    rpm -q -l yum-rhn-plugin    #列出指定软件安装产生的文件\nrpm -q -c：    rpm -q -c yum-rhn-plugin    #仅列出配置文件。\nrpm -q -d:    rpm -q -d yum-rhn-plugin    #仅列出文档文件\nrpm -q --scripts :    rpm -q --scripts openssh-server    #列出可能在安装或删除软件之前或之后运行的shell脚本\nrpm -q --changelog :    rpm -q --changlog audit    #列出软件包的更改信息\n```\ncpio 从rpm包提示文件而不安装该软件包。rpm2cpio PACKAGERFILE.rpm 传送到cpio -id ，它会提取RPM中存储的所有文件。需要时会创建子目录树，也可以指定目录。\n```sh\nrpm2cpio wonderwidgets-1.0-4.x86_64.rpm | cpio -id \"*.txt\"\n```\n","slug":"chatper-13-installing-and-updating-software-packages","published":1,"updated":"2019-01-06T15:48:49.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqi1q001flxkjjlgy9o2c","content":"<p>红帽提供软件更新服务工具（收费）需要购买服务，并利用注册工具（subscription-manager-gui）进行注册软件管理服务器.</p>\n<h4 id=\"Register-用户和红帽账号绑定\"><a href=\"#Register-用户和红帽账号绑定\" class=\"headerlink\" title=\"Register 用户和红帽账号绑定\"></a>Register 用户和红帽账号绑定</h4><pre><code>1.在命令行command 输入 subscription-manager-gui,或者在GNOME界面Application--&gt;Other--&gt;Red Hat Subscription Manager 进入，输入对应的root 密码就可以进入图形操作，进入图形后点击右上角的Register会进入一个新的对话窗，subsription 默认服务器地址：subscription.rhn.redhat.com.Next后会要求输入RedHat的账号密码，默认会自动检查相应的订阅，也可以自己手动检查。最后点击Register完成注册。完成后就可以检查更新了。\n\n2.使用命令行完成自动注册\n</code></pre><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    subscription-manager register --username=yourname --password=yourpassword  <span class=\"comment\">#订阅</span></span><br><span class=\"line\">    subscription-manager list --available | less    <span class=\"comment\">#查看有效的订阅</span></span><br><span class=\"line\">    subscription-manager attach --auto    <span class=\"comment\">#自动检查订阅</span></span><br><span class=\"line\">    subscription-manager list --consumed    <span class=\"comment\">#查看consumed（消费） 订阅</span></span><br><span class=\"line\">    subscription-manager unregister    <span class=\"comment\">#取消订阅</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Subscribe-订阅授权给指定的产品，选择-删除需要授权的产品\"><a href=\"#Subscribe-订阅授权给指定的产品，选择-删除需要授权的产品\" class=\"headerlink\" title=\"Subscribe 订阅授权给指定的产品，选择/删除需要授权的产品\"></a>Subscribe 订阅授权给指定的产品，选择/删除需要授权的产品</h5><p>Enable repositories 启用软件包的存储库（理解成yum 源库），每个订阅默认会开启多个存储库，可以根据需要关闭不需要的，如源代码、更新</p>\n<p>Review and track  查看和审查自己的订阅信息，可以在本地和红帽网站上查询</p>\n<h6 id=\"订阅的授权证书存放在-etc-pki-及其子目录中\"><a href=\"#订阅的授权证书存放在-etc-pki-及其子目录中\" class=\"headerlink\" title=\"订阅的授权证书存放在/etc/pki 及其子目录中\"></a>订阅的授权证书存放在/etc/pki 及其子目录中</h6><p>/etc/pki/product    #安装在Red Hat中的产品证书<br>/etc/pki/consumer    #存储在这个系统中的RedHat的账号的证书<br>/etc/pki/entitlement    #包含了订阅了哪个许可的证书</p>\n<p>可以使用rct程序检查证书，相比下subscription-manager程序读取证书更加友好  </p>\n<hr>\n<p>rpm and yum</p>\n<p>rpm =red hat packet manager</p>\n<p>rpm 包的文件格式：</p>\n<p>name-version-release.architectrue</p>\n<p>httpd-tools.2.4.6.7-7.e17.x86_64.rpm  </p>\n<p>httpd-tools=name    名字</p>\n<p>2.4.6.7=version    版本</p>\n<p>7.el7=release    基于版本的发行号</p>\n<p>x86_64=arch    架构</p>\n<p>默认安装时只需要使用RPM包的名字，如果有多个版本存在默认安装版本最高的</p>\n<h6 id=\"每个RPM包包含以下三个组成部份：\"><a href=\"#每个RPM包包含以下三个组成部份：\" class=\"headerlink\" title=\"每个RPM包包含以下三个组成部份：\"></a>每个RPM包包含以下三个组成部份：</h6><p>软件安装的文件、</p>\n<p>与软件包（元数据）有关的信息，摘要，描述、是否要求安装其它软件，授权许可、更改日志、以及其它详细信息</p>\n<p>在安装、更新或删除此软件包时可能运行的脚本、或此过程中可能触发的脚本。  </p>\n<p>如果软件构建为不冲突的文件名，则可以安装多个版本。例如kernel 否则只能安装一个版本。</p>\n<h6 id=\"yum———软件包管理器\"><a href=\"#yum———软件包管理器\" class=\"headerlink\" title=\"yum———软件包管理器\"></a>yum———软件包管理器</h6><p>PackageKit 和yum 等工具是rpm的前端应用，可以用于安装单个软件包或软件包集合，并解决RPM无法解决的依赖关系。</p>\n<p>yum 的主要配置文件为：/etc/yum.conf,其它存储库配置文件位于在/etc/yum.repos.d目录中。  </p>\n<p>存储库配置文件至少包含一个存储库ID （在方括号中）、一个名称以及软件包存储库的URL位置。URL可以指向本地目录（文件）或远程网络共享(http和ftp等)。如果将该URL粘贴到浏览器中，则显示的内容应该有RPM软件包（可能位于一个或多个子目录中）。以及包含可用软件包相关信息的repodata目录。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#yum 命令用于列出存储库、软件包和软件包组</span></span><br><span class=\"line\">yum repolist </span><br><span class=\"line\">yum list yum*    <span class=\"comment\">#显示已安装和可用的软件包</span></span><br><span class=\"line\">yum grouplist</span><br><span class=\"line\">yum search apache    <span class=\"comment\">#在名字和摘要字段搜索关键字列出的软件包</span></span><br><span class=\"line\">yum search all <span class=\"string\">'web server'</span>    <span class=\"comment\">#搜索名字、摘要、描述等字段中包含'web server'的软件包</span></span><br><span class=\"line\">yum info PACKAGENAME    <span class=\"comment\">#提供与指定软件包相关的详细信息，包括安装所需的磁盘空间。</span></span><br><span class=\"line\">yum provides /var/www/html    <span class=\"comment\">#显示与指定的路径名（通常包含通配符）匹配的软件包</span></span><br><span class=\"line\">yum install PACKAGENAME    <span class=\"comment\">#获取并安装软件包，包括依赖项</span></span><br><span class=\"line\">yum update PACKAGENAME    <span class=\"comment\">#获取并安装更新版本的软件包，包括所有依赖项。通常该进程尝试适当保留配置文件，但是在某些情况下，如果打包商认为旧文件在更新后将无法使用，则可能对其进行重命名，如果未指定软件包名称，它将安装所有相关更新</span></span><br><span class=\"line\">yum remove PACKAGENAME    <span class=\"comment\">#删除已安装的软件包、包括所有支持软件包。有可能会导致意外删除软件包，因此删除前要仔细检查要删除的软件包列表。</span></span><br><span class=\"line\">yum <span class=\"built_in\">help</span></span><br><span class=\"line\"></span><br><span class=\"line\">uname -r     <span class=\"comment\">#仅显示内核 的版本和发行版本</span></span><br><span class=\"line\">uname -a     <span class=\"comment\">#将显示内核发行版和其它信息</span></span><br></pre></td></tr></table></figure></p>\n<p>yum 有两种类型的组：常规组是软件包集合，环境组是其他组的集全。这些组包含自己的软件包。</p>\n<p>与yum list 相似，yum group list (或 yum grouplist ) 将列出已安装和可用的组名称，有些组通过环境安装，默认为隐藏，这些隐藏组也可以通过yum group list hidden 命令列出。如果添加ids 选项，则会显示组ID。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum grout list hidden    <span class=\"comment\">#显示隐藏组</span></span><br><span class=\"line\">yum group list = yum grouplist    <span class=\"comment\">#显示已经安装和可选安装的软件包组。</span></span><br><span class=\"line\">yum group info = yum groupinfo    <span class=\"comment\">#它将列出改必选、默认和可选软件包名称或组ID。</span></span><br></pre></td></tr></table></figure></p>\n<p>#软件包名称或组前面可能标有标记。如下图：  </p>\n<p><img src=\"/2018/04/17/chatper-13-installing-and-updating-software-packages/1523863565421240.png\" alt=\"图片.png\"><br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum group install = yum groupinstall     <span class=\"comment\">#组安装</span></span><br><span class=\"line\">yum group remove = yum groupremove    <span class=\"comment\">#组删除</span></span><br><span class=\"line\">yum group mark install GROUPNAME    <span class=\"comment\">#标记为已安装，下次更新时将安装缺少的软件包和其依赖项。RHEL7 以后增加的命令</span></span><br><span class=\"line\">tail -5 /var/<span class=\"built_in\">log</span>/yum.log    <span class=\"comment\">#查看事务历史记录</span></span><br><span class=\"line\">yum <span class=\"built_in\">history</span>     <span class=\"comment\">#查看安装和删除事务的摘要</span></span><br><span class=\"line\">yum <span class=\"built_in\">history</span> undo 6    <span class=\"comment\">#撤销事务</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">yum repolist all    <span class=\"comment\">#查看所有可用的存储库</span></span><br><span class=\"line\">yum-config-manager     <span class=\"comment\">#启用和禁用存储库，这将更改/etc/yum.repos.d/redhat.repo 文件中的enabled 参数</span></span><br><span class=\"line\">yum-config-manager  --<span class=\"built_in\">enable</span> rhel-7-public-bate-debug-rpms      <span class=\"comment\">#案例</span></span><br></pre></td></tr></table></figure></p>\n<p>第三方存储库：网站、ftp服务器、本地文件系统。将文件放到/etc/yum.repos.d/ 目录中以启用对第三方内容库的支持。内容库配置必须以.repo 结尾。</p>\n<p>存储库定义包含存储的URL和名称、也定义是否使用GPG检查 软件包签名；如果是，则还检查URL是否指向受信任的GPG密钥。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-config-manager --add-repo=<span class=\"string\">\"http://dl.fedoraproject.org/pub/epel/beta/7/x86_64/\"</span>    <span class=\"comment\">#增加epel的源，</span></span><br></pre></td></tr></table></figure></p>\n<p>执行完修改/etc/yum.repos.d/下生成的配置文件，提供自定义名称和GPG密钥位置。管理员应将该密钥下载到本地文件，而不是让yum从外部来源检索该密钥。</p>\n<p>安装Red Hat Enterprise Linux 7 EPEL存储库软件包:(默认提供配置文件、GPG公钥做为软件安装包的一部分)<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm --import http://dl.fedoraproject.org/pub/epep/RPM-KEY-EPEL-7   </span><br><span class=\"line\">``` </span><br><span class=\"line\"><span class=\"comment\">#如果不先安装GPG密钥安装软件时会报错，可以通过--nogpgcheck 忽略检查，不推荐这样操作。</span></span><br><span class=\"line\">```sh</span><br><span class=\"line\">yum install http://dl.fedoraproject.org/pub/epep/beta/7/x86_64/epel-release-7-0.1.noarch.rpm</span><br></pre></td></tr></table></figure></p>\n<p>配置文件通常在一个文件中列举多个存储库引用。每一存储库引用的开头为包含在方括号里的单一词语名称。可以通过“enabled=0 ”参数来关闭不需要使用的存储库。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-config-manager <span class=\"comment\">#永久的启用或禁用存储库</span></span><br><span class=\"line\">yum --enablerepo=PATTERN </span><br><span class=\"line\">yum --disablerepo=PATTERN </span><br><span class=\"line\">yum-config-manager --<span class=\"built_in\">disable</span> content.example.com\\_rhel7.0\\_x86\\_64\\_rht    </span><br><span class=\"line\"><span class=\"comment\">#content.example.com\\_rhel7.0\\_x86\\_64\\_rht 通过yum repolist 查看</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"rpm\"><a href=\"#rpm\" class=\"headerlink\" title=\"rpm\"></a>rpm</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -q PACKAGENAME    <span class=\"comment\">#查看指定安装的软件名称，列出软件包的名称和版本，与yum list 类似</span></span><br><span class=\"line\">rpm -qa         <span class=\"comment\">#查看所有安装的软件</span></span><br><span class=\"line\">rpm -q -p PACKAGENAME.rpm     <span class=\"comment\">#-p 指定安装软件包文件</span></span><br><span class=\"line\">rpm -q -f filename     <span class=\"comment\">#查看哪个软件包提示了这个文件或文件夹</span></span><br><span class=\"line\">rpm -q -i :软件包信息与yum info 类似</span><br><span class=\"line\">rpm -q -l :    rpm -q -l yum-rhn-plugin    <span class=\"comment\">#列出指定软件安装产生的文件</span></span><br><span class=\"line\">rpm -q -c：    rpm -q -c yum-rhn-plugin    <span class=\"comment\">#仅列出配置文件。</span></span><br><span class=\"line\">rpm -q -d:    rpm -q -d yum-rhn-plugin    <span class=\"comment\">#仅列出文档文件</span></span><br><span class=\"line\">rpm -q --scripts :    rpm -q --scripts openssh-server    <span class=\"comment\">#列出可能在安装或删除软件之前或之后运行的shell脚本</span></span><br><span class=\"line\">rpm -q --changelog :    rpm -q --changlog audit    <span class=\"comment\">#列出软件包的更改信息</span></span><br></pre></td></tr></table></figure>\n<p>cpio 从rpm包提示文件而不安装该软件包。rpm2cpio PACKAGERFILE.rpm 传送到cpio -id ，它会提取RPM中存储的所有文件。需要时会创建子目录树，也可以指定目录。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm2cpio wonderwidgets-1.0-4.x86_64.rpm | cpio -id <span class=\"string\">\"*.txt\"</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>红帽提供软件更新服务工具（收费）需要购买服务，并利用注册工具（subscription-manager-gui）进行注册软件管理服务器.</p>\n<h4 id=\"Register-用户和红帽账号绑定\"><a href=\"#Register-用户和红帽账号绑定\" class=\"headerlink\" title=\"Register 用户和红帽账号绑定\"></a>Register 用户和红帽账号绑定</h4><pre><code>1.在命令行command 输入 subscription-manager-gui,或者在GNOME界面Application--&gt;Other--&gt;Red Hat Subscription Manager 进入，输入对应的root 密码就可以进入图形操作，进入图形后点击右上角的Register会进入一个新的对话窗，subsription 默认服务器地址：subscription.rhn.redhat.com.Next后会要求输入RedHat的账号密码，默认会自动检查相应的订阅，也可以自己手动检查。最后点击Register完成注册。完成后就可以检查更新了。\n\n2.使用命令行完成自动注册\n</code></pre><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    subscription-manager register --username=yourname --password=yourpassword  <span class=\"comment\">#订阅</span></span><br><span class=\"line\">    subscription-manager list --available | less    <span class=\"comment\">#查看有效的订阅</span></span><br><span class=\"line\">    subscription-manager attach --auto    <span class=\"comment\">#自动检查订阅</span></span><br><span class=\"line\">    subscription-manager list --consumed    <span class=\"comment\">#查看consumed（消费） 订阅</span></span><br><span class=\"line\">    subscription-manager unregister    <span class=\"comment\">#取消订阅</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Subscribe-订阅授权给指定的产品，选择-删除需要授权的产品\"><a href=\"#Subscribe-订阅授权给指定的产品，选择-删除需要授权的产品\" class=\"headerlink\" title=\"Subscribe 订阅授权给指定的产品，选择/删除需要授权的产品\"></a>Subscribe 订阅授权给指定的产品，选择/删除需要授权的产品</h5><p>Enable repositories 启用软件包的存储库（理解成yum 源库），每个订阅默认会开启多个存储库，可以根据需要关闭不需要的，如源代码、更新</p>\n<p>Review and track  查看和审查自己的订阅信息，可以在本地和红帽网站上查询</p>\n<h6 id=\"订阅的授权证书存放在-etc-pki-及其子目录中\"><a href=\"#订阅的授权证书存放在-etc-pki-及其子目录中\" class=\"headerlink\" title=\"订阅的授权证书存放在/etc/pki 及其子目录中\"></a>订阅的授权证书存放在/etc/pki 及其子目录中</h6><p>/etc/pki/product    #安装在Red Hat中的产品证书<br>/etc/pki/consumer    #存储在这个系统中的RedHat的账号的证书<br>/etc/pki/entitlement    #包含了订阅了哪个许可的证书</p>\n<p>可以使用rct程序检查证书，相比下subscription-manager程序读取证书更加友好  </p>\n<hr>\n<p>rpm and yum</p>\n<p>rpm =red hat packet manager</p>\n<p>rpm 包的文件格式：</p>\n<p>name-version-release.architectrue</p>\n<p>httpd-tools.2.4.6.7-7.e17.x86_64.rpm  </p>\n<p>httpd-tools=name    名字</p>\n<p>2.4.6.7=version    版本</p>\n<p>7.el7=release    基于版本的发行号</p>\n<p>x86_64=arch    架构</p>\n<p>默认安装时只需要使用RPM包的名字，如果有多个版本存在默认安装版本最高的</p>\n<h6 id=\"每个RPM包包含以下三个组成部份：\"><a href=\"#每个RPM包包含以下三个组成部份：\" class=\"headerlink\" title=\"每个RPM包包含以下三个组成部份：\"></a>每个RPM包包含以下三个组成部份：</h6><p>软件安装的文件、</p>\n<p>与软件包（元数据）有关的信息，摘要，描述、是否要求安装其它软件，授权许可、更改日志、以及其它详细信息</p>\n<p>在安装、更新或删除此软件包时可能运行的脚本、或此过程中可能触发的脚本。  </p>\n<p>如果软件构建为不冲突的文件名，则可以安装多个版本。例如kernel 否则只能安装一个版本。</p>\n<h6 id=\"yum———软件包管理器\"><a href=\"#yum———软件包管理器\" class=\"headerlink\" title=\"yum———软件包管理器\"></a>yum———软件包管理器</h6><p>PackageKit 和yum 等工具是rpm的前端应用，可以用于安装单个软件包或软件包集合，并解决RPM无法解决的依赖关系。</p>\n<p>yum 的主要配置文件为：/etc/yum.conf,其它存储库配置文件位于在/etc/yum.repos.d目录中。  </p>\n<p>存储库配置文件至少包含一个存储库ID （在方括号中）、一个名称以及软件包存储库的URL位置。URL可以指向本地目录（文件）或远程网络共享(http和ftp等)。如果将该URL粘贴到浏览器中，则显示的内容应该有RPM软件包（可能位于一个或多个子目录中）。以及包含可用软件包相关信息的repodata目录。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#yum 命令用于列出存储库、软件包和软件包组</span></span><br><span class=\"line\">yum repolist </span><br><span class=\"line\">yum list yum*    <span class=\"comment\">#显示已安装和可用的软件包</span></span><br><span class=\"line\">yum grouplist</span><br><span class=\"line\">yum search apache    <span class=\"comment\">#在名字和摘要字段搜索关键字列出的软件包</span></span><br><span class=\"line\">yum search all <span class=\"string\">'web server'</span>    <span class=\"comment\">#搜索名字、摘要、描述等字段中包含'web server'的软件包</span></span><br><span class=\"line\">yum info PACKAGENAME    <span class=\"comment\">#提供与指定软件包相关的详细信息，包括安装所需的磁盘空间。</span></span><br><span class=\"line\">yum provides /var/www/html    <span class=\"comment\">#显示与指定的路径名（通常包含通配符）匹配的软件包</span></span><br><span class=\"line\">yum install PACKAGENAME    <span class=\"comment\">#获取并安装软件包，包括依赖项</span></span><br><span class=\"line\">yum update PACKAGENAME    <span class=\"comment\">#获取并安装更新版本的软件包，包括所有依赖项。通常该进程尝试适当保留配置文件，但是在某些情况下，如果打包商认为旧文件在更新后将无法使用，则可能对其进行重命名，如果未指定软件包名称，它将安装所有相关更新</span></span><br><span class=\"line\">yum remove PACKAGENAME    <span class=\"comment\">#删除已安装的软件包、包括所有支持软件包。有可能会导致意外删除软件包，因此删除前要仔细检查要删除的软件包列表。</span></span><br><span class=\"line\">yum <span class=\"built_in\">help</span></span><br><span class=\"line\"></span><br><span class=\"line\">uname -r     <span class=\"comment\">#仅显示内核 的版本和发行版本</span></span><br><span class=\"line\">uname -a     <span class=\"comment\">#将显示内核发行版和其它信息</span></span><br></pre></td></tr></table></figure></p>\n<p>yum 有两种类型的组：常规组是软件包集合，环境组是其他组的集全。这些组包含自己的软件包。</p>\n<p>与yum list 相似，yum group list (或 yum grouplist ) 将列出已安装和可用的组名称，有些组通过环境安装，默认为隐藏，这些隐藏组也可以通过yum group list hidden 命令列出。如果添加ids 选项，则会显示组ID。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum grout list hidden    <span class=\"comment\">#显示隐藏组</span></span><br><span class=\"line\">yum group list = yum grouplist    <span class=\"comment\">#显示已经安装和可选安装的软件包组。</span></span><br><span class=\"line\">yum group info = yum groupinfo    <span class=\"comment\">#它将列出改必选、默认和可选软件包名称或组ID。</span></span><br></pre></td></tr></table></figure></p>\n<p>#软件包名称或组前面可能标有标记。如下图：  </p>\n<p><img src=\"/2018/04/17/chatper-13-installing-and-updating-software-packages/1523863565421240.png\" alt=\"图片.png\"><br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum group install = yum groupinstall     <span class=\"comment\">#组安装</span></span><br><span class=\"line\">yum group remove = yum groupremove    <span class=\"comment\">#组删除</span></span><br><span class=\"line\">yum group mark install GROUPNAME    <span class=\"comment\">#标记为已安装，下次更新时将安装缺少的软件包和其依赖项。RHEL7 以后增加的命令</span></span><br><span class=\"line\">tail -5 /var/<span class=\"built_in\">log</span>/yum.log    <span class=\"comment\">#查看事务历史记录</span></span><br><span class=\"line\">yum <span class=\"built_in\">history</span>     <span class=\"comment\">#查看安装和删除事务的摘要</span></span><br><span class=\"line\">yum <span class=\"built_in\">history</span> undo 6    <span class=\"comment\">#撤销事务</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">yum repolist all    <span class=\"comment\">#查看所有可用的存储库</span></span><br><span class=\"line\">yum-config-manager     <span class=\"comment\">#启用和禁用存储库，这将更改/etc/yum.repos.d/redhat.repo 文件中的enabled 参数</span></span><br><span class=\"line\">yum-config-manager  --<span class=\"built_in\">enable</span> rhel-7-public-bate-debug-rpms      <span class=\"comment\">#案例</span></span><br></pre></td></tr></table></figure></p>\n<p>第三方存储库：网站、ftp服务器、本地文件系统。将文件放到/etc/yum.repos.d/ 目录中以启用对第三方内容库的支持。内容库配置必须以.repo 结尾。</p>\n<p>存储库定义包含存储的URL和名称、也定义是否使用GPG检查 软件包签名；如果是，则还检查URL是否指向受信任的GPG密钥。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-config-manager --add-repo=<span class=\"string\">\"http://dl.fedoraproject.org/pub/epel/beta/7/x86_64/\"</span>    <span class=\"comment\">#增加epel的源，</span></span><br></pre></td></tr></table></figure></p>\n<p>执行完修改/etc/yum.repos.d/下生成的配置文件，提供自定义名称和GPG密钥位置。管理员应将该密钥下载到本地文件，而不是让yum从外部来源检索该密钥。</p>\n<p>安装Red Hat Enterprise Linux 7 EPEL存储库软件包:(默认提供配置文件、GPG公钥做为软件安装包的一部分)<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm --import http://dl.fedoraproject.org/pub/epep/RPM-KEY-EPEL-7   </span><br><span class=\"line\">``` </span><br><span class=\"line\"><span class=\"comment\">#如果不先安装GPG密钥安装软件时会报错，可以通过--nogpgcheck 忽略检查，不推荐这样操作。</span></span><br><span class=\"line\">```sh</span><br><span class=\"line\">yum install http://dl.fedoraproject.org/pub/epep/beta/7/x86_64/epel-release-7-0.1.noarch.rpm</span><br></pre></td></tr></table></figure></p>\n<p>配置文件通常在一个文件中列举多个存储库引用。每一存储库引用的开头为包含在方括号里的单一词语名称。可以通过“enabled=0 ”参数来关闭不需要使用的存储库。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-config-manager <span class=\"comment\">#永久的启用或禁用存储库</span></span><br><span class=\"line\">yum --enablerepo=PATTERN </span><br><span class=\"line\">yum --disablerepo=PATTERN </span><br><span class=\"line\">yum-config-manager --<span class=\"built_in\">disable</span> content.example.com\\_rhel7.0\\_x86\\_64\\_rht    </span><br><span class=\"line\"><span class=\"comment\">#content.example.com\\_rhel7.0\\_x86\\_64\\_rht 通过yum repolist 查看</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"rpm\"><a href=\"#rpm\" class=\"headerlink\" title=\"rpm\"></a>rpm</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -q PACKAGENAME    <span class=\"comment\">#查看指定安装的软件名称，列出软件包的名称和版本，与yum list 类似</span></span><br><span class=\"line\">rpm -qa         <span class=\"comment\">#查看所有安装的软件</span></span><br><span class=\"line\">rpm -q -p PACKAGENAME.rpm     <span class=\"comment\">#-p 指定安装软件包文件</span></span><br><span class=\"line\">rpm -q -f filename     <span class=\"comment\">#查看哪个软件包提示了这个文件或文件夹</span></span><br><span class=\"line\">rpm -q -i :软件包信息与yum info 类似</span><br><span class=\"line\">rpm -q -l :    rpm -q -l yum-rhn-plugin    <span class=\"comment\">#列出指定软件安装产生的文件</span></span><br><span class=\"line\">rpm -q -c：    rpm -q -c yum-rhn-plugin    <span class=\"comment\">#仅列出配置文件。</span></span><br><span class=\"line\">rpm -q -d:    rpm -q -d yum-rhn-plugin    <span class=\"comment\">#仅列出文档文件</span></span><br><span class=\"line\">rpm -q --scripts :    rpm -q --scripts openssh-server    <span class=\"comment\">#列出可能在安装或删除软件之前或之后运行的shell脚本</span></span><br><span class=\"line\">rpm -q --changelog :    rpm -q --changlog audit    <span class=\"comment\">#列出软件包的更改信息</span></span><br></pre></td></tr></table></figure>\n<p>cpio 从rpm包提示文件而不安装该软件包。rpm2cpio PACKAGERFILE.rpm 传送到cpio -id ，它会提取RPM中存储的所有文件。需要时会创建子目录树，也可以指定目录。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm2cpio wonderwidgets-1.0-4.x86_64.rpm | cpio -id <span class=\"string\">\"*.txt\"</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"RH134 第七章 管理 SELINUX 安全性","url":"377.html","id":"377","date":"2018-05-21T09:41:40.000Z","_content":"\n### SElinux 安全的基本概念  \n\nSecurity Enhanced Linux（SELinux）是一个额外的系统安全层。SELinux 的主要目标是防止已遭泄露的系统服务访问用户数据。大多数Linux管理员都熟悉标准的用户/组/其他权限安全模型。这种基于用户和组的模型称为自由决定的访问控制。SELinux 提供另一层安全，它基于对象并由更加复杂的规则控制，称为强制访问控制。\n\n![blob.png](1526607016211181.png)\n\n要允许远程匿名访问Web服务器，必须打开防火墙端口。然而，恶意人员却有机会通过安全漏洞侵入系统，而且如果他们破坏web 服务器进程，还会取得其权限，即apache 用户和apache 组的权限。该用户/组具有对文档根目录（/var/www/html）等项目的读取权限，以及对 /tmp 、/var/tmp 和所有人均可编写的任何其他文件/目录的写入权限  \n\n![image.png](1526867174600183.png)\n\nSELinux 是用于确定哪个进程可以访问哪些文件、目录和端口的一组安全规则。每个文件文件、进程和端口都具有特别的安全标签，称为SELinux 上下文。上下文是一个名称，SELinux 策略使用它来确定某个进程能否访问文件、目录或端口。除非显式规则授予访问权限，否则，在默认情况下，策略不允许任何交互。如果没有允许规则，则不允许访问。  \n\nSELinux 标签具有多种上下文：用户、角色、类型和敏感度。目标策略（即 RHEL 中启用的默认策略）会根据类型上下文来制定自己规则。类型上下文名称通常以 \\_t 结尾。\n\nWeb 服务器的类型上下文是 httpd_t 。\n\n通常位于 /var/www/html 中的文件和目录的类型上下文是 httpd\\_sys\\_content_t 。 \n\n通常位于 /tmp 和 /var/tmp 中的文件和目录的类型上下文是 tmp_t 。\n\nWeb 服务器端口的类型上下文是 http\\_port\\_t .\n\n存在某个策略规则 ，其允许 Apache （作为httpd\\_t 运行的Web 服务器进程）访问上下文通常位于 /var/www/html 及其他 Web 服务器目录 （httpd\\_sys\\_content\\_t） 中的文件和目录。对于通常位于 /tmp 和 /var/tmp 中的文件，策略中没有允许 规则 ，因此不允许进程访问。有了 SELinux ，恶意用户就无法访问 /tmp 目录。SELinux 还有适用于 NFS 和 CIFS 等远程文件系统的规则，尽管这些文件系统上的所有文件都使用相同的上下文标签。  \n\n许多处理文件的命令具有一个用于显示或设置 SELinux 的上下文选项（通常是 -Z ）.例如，ps、ls、cp 和 mkdir 全都使用 -Z 选项来显示或设置 SELinux 上下文。\n\n![image.png](1526868364153324.png)\n\n###### SELinux 模式  \n\n若出于故障排除目的，可使用 SELinux 模式暂时禁用 SELinux 保护\n\n![image.png](1526868454617069.png)  \n\n在强制（Enforcing）模式中，SELinux 主动拒绝访问尝试读取类型上下文 tmp_t 的文件的Web 服务器。在强制模式中，SELinux 不仅记录而且提供保护。  \n\n\n\n![image.png](1526868484423514.png)\n\n许可（Permissive ）模式通常用于对问题进程故障排除，在许可模式中，即使没有显式规则， SELinux 也会允许所有交互，而且会记录它在强制模式中拒绝的那些交互。可使用此模式来暂时允许访问 SELinux 正在限制的内容。无需重新启动即可在强制模式和许可模式之间相互转换。\n\n第三种模式是禁用（Disabled）模式，会完全禁用SELinux 。需要重新启动系统才能彻底禁用SELinux ，或是从禁用模式转为强制模式或许可模式。\n\n###### TIPS:\n\n最好使用许可模式，而不是彻底关闭 SELinux 。原因之一在于即使在许可模式中，内核也将根据需要自动维护 SELinux 文件系统标签，从而避免为了启用 SELinux 而重启系统，重新标记文件系统所带来的昂贵费用。\n\n要显示当前使用的有效 SELinux 模式，使用 getenforce 命令  \n```sh\n[root@client ~]# getenforce \nEnforcing\n```\n###### SELinux 布尔值  \n\nSELinux 布尔值的更改 SELinux 策略行为的开关。 SELinux  布尔值是可以启用或禁用的规则，安全管理可以使用 SELinux 布尔值来有选择地调整策略。\n\ngetsebool  命令用于显示 SELinux 布尔值及其当前值。 -a 选项可列出所有布尔值\n```sh\n[root@client ~]# getsebool -a\nabrt_anon_write --> off\nabrt_handle_event --> off\nabrt_upload_watch_anon_write --> on\nantivirus_can_scan_system --> off\n………………\n```\n###### 更改 SELinux 模式\n\nsetenforce 命令修改当前的 SELinux 模式。\n```sh\n[root@client ~]# setenforce \nusage:  setenforce [ Enforcing | Permissive | 1 | 0 ]\n```\n暂时性设置 SELinux 模式的另一种做法是在启动时将参数传递给内核。传递内核参数 enforcing=0 会使系统在启动时进入许可模式。值 1 将指定强制模式。可在指定 selinux=0 参数时禁用 SELinux 。值 1 将启用 SELinux 。  \n\n###### 设置默认 SELinux \n\n确定在启动时使用哪种 SELinux 模式的配置文件是 /etc/selinux/config .配置文件中包含有用的注释信息\n\n![image.png](1526871627344712.png)\n\n使用 /etc/selinux/config 更改启动时的默认 SELinux 模式。在上述示例中，它被设置为强制模式。  \n\n传递 selinux= 和/或 enforcing= 内核参数会覆盖在 /etc/selinux/config 中指定的任何默认值。\n\n###### 更改 SELinux 上下文\n\n初始 SELinux 上下文\n\n通常文件父目录的 SELinux 上下文决定该文件的初始 SELinux 上下文。父目录的上下文会分配给新建文件。这适用于 vim、cp、和touch等命令。但是，如果文件是在其他位置创建并且权限得以保留，（如使用 mv 或 cp -a），那么原始 SELinux 上下文将不会发生更改。\n\n![image.png](1526872601651338.png)  \n\n更改文件的 SELinux 上下文。可使用两个命令来更改文件 SELinux 上下文： chcon 和restorecon 。chcon 命令将文件的上下文更改成已指定为该命令参数的上下文。 -t 选项经常只用于指定上下文的类型。\n\nrestorecon 命令是更改文件或目录的 SELinux 上下文的首选方法。不同于 chcon ，在使用此命令时，不会明确指定上下文，它使用 SELinux 策略中的规则来确定应该是哪种文件上下文。\n\n###### TIPS：\n\n不应使用 chcon 来更改文件的 SELinux 上下文。在明确指定上下文时，可能会出错。如果在系统启动时重新标记了其它文件系统，文件上下文将会还原为默认上下文。\n```sh\n[root@server0 ~]# mkdir /virtual\n[root@server0 ~]# ls -Zd /virtual/\ndrwxr-xr-x. root root unconfined_u:object_r:default_t:s0 /virtual/\n[root@server0 ~]# chcon -t httpd\\_sys\\_content_t /virtual/\n[root@server0 ~]# ls -Zd /virtual/\ndrwxr-xr-x. root root unconfined_u:object_r:httpd_sys_content_t:s0 /virtual/\n[root@server0 ~]# restorecon -v /virtual/\nrestorecon reset /virtual context unconfined_u:object_r:httpd_sys_content_t:s0->unconfined_u:object_r:default_t:s0\n[root@server0 ~]# ls -Zd /virtual/\ndrwxr-xr-x. root root unconfined_u:object_r:default_t:s0 /virtual/\n```\n###### 定义 SELinux 默认文件上下文规则  \n\nsemanage fcontext 命令可用于显示或修改 restorecon 命令用来设置默认文件上下文的规则。它使用扩展正则表达式来指定路径和文件名。fcontext 规则中最常用的扩展正则表达式是 (/.\\*)?，这意味着：“（可选）匹配 / 后跟任意的字符”。它将会匹配在表达式前面列出的目录并递归地匹配该目录中的所有内容。\n\nrestorecon 命令是 policycoreutil 软件包的一部分； semanage 是 policycoreutil-python 软件包的一部分。\n```sh\n[root@server0 ~]# touch /tmp/file1 /tmp/file2\n[root@server0 ~]# ls -Z /tmp/file*\n-rw-r--r--. root root unconfined_u:object_r:user_tmp_t:s0 /tmp/file1\n-rw-r--r--. root root unconfined_u:object_r:user_tmp_t:s0 /tmp/file2\n[root@server0 ~]# mv /tmp/file1 /var/www/html/\n[root@server0 ~]# cp /tmp/file2 /var/www/html/\n[root@server0 ~]# ls -Z /var/www/html/\n-rw-r--r--. root root unconfined_u:object_r:user_tmp_t:s0 file1\n-rw-r--r--. root root unconfined_u:object_r:httpd_sys_content_t:s0 file2\n[root@server0 ~]# semanage fcontext -l\n………………\n/var/www(/.*)?                                     all files          system_u:object_r:httpd_sys_content_t:s0 \n………………\n[root@server0 ~]# restorecon -Rv /var/www/\nrestorecon reset /var/www/html/file1 context unconfined_u:object_r:user_tmp_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0\n[root@server0 ~]# ls -Z /var/www/html/file\nls: cannot access /var/www/html/file: No such file or directory\n[root@server0 ~]# ls -Z /var/www/html\n-rw-r--r--. root root unconfined_u:object_r:httpd_sys_content_t:s0 file1\n-rw-r--r--. root root unconfined_u:object_r:httpd_sys_content_t:s0 file2\n```\n以下示例显示了如何使用semanage 为新目录添加上下文。  \n```sh\n[root@server0 ~]# touch /virtual/index.html\n[root@server0 ~]# ls -Zd /virtual/\ndrwxr-xr-x. root root unconfined_u:object_r:default_t:s0 /virtual/\n[root@server0 ~]# ls -Z /virtual/\n-rw-r--r--. root root unconfined_u:object_r:default_t:s0 index.html\n[root@server0 ~]# semanage fcontext -a -t httpd\\_sys\\_content_t '/virtual(/.*)?'\n[root@server0 ~]# restorecon -RFvv /virtual/\nrestorecon reset /virtual context unconfined_u:object_r:default_t:s0->system_u:object_r:httpd_sys_content_t:s0\nrestorecon reset /virtual/index.html context unconfined_u:object_r:default_t:s0->system_u:object_r:httpd_sys_content_t:s0\n[root@server0 ~]# ls -Zd /virtual/\ndrwxr-xr-x. root root system_u:object_r:httpd_sys_content_t:s0 /virtual/\n[root@server0 ~]# ls -Z /virtual/\n-rw-r--r--. root root system_u:object_r:httpd_sys_content_t:s0 index.html\n\n#实验\n[root@server0 ~]# mkdir /custom\n[root@server0 ~]# echo \"This is server0\" >/custom/index.html\n[root@server0 ~]# vim /etc/httpd/conf/httpd.conf \n[root@server0 ~]# grep custom /etc/httpd/conf/httpd.conf \nDocumentRoot \"/custom\"\n<Directory \"/custom\">\n[root@server0 ~]# systemctl start httpd\n[root@server0 ~]# semanage fcontext -a -t httpd\\_sys\\_content_t '/custom(/.*)?'\n[root@server0 ~]# restorecon -Rv /custom/\nrestorecon reset /custom context unconfined_u:object_r:default_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0\nrestorecon reset /custom/index.html context unconfined_u:object_r:default_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0\n```\n###### 更改 SELinux 布尔值\n\nSELinux 布尔值是更改 SELinux 策略行为的开关。 SELinux 布尔值是可以启用或禁用的规则。安全管理员可以使用 SELlinux 布尔值来有选择地调整策略。\n\nselinux-policy-devel 软件包提供多个手册页（即 \\*\\_selinux(8)），可用于解释不同服务的布尔值的含义。如果已经安装此软件包，则 man -k '\\_selinux' 命令会列出这些文档。\n\ngetsebool 命令用于显示SELinux 布尔值；setsebool 用于修改 SELinux 布尔值。setsebool -P 修改 SELinux 策略，并使修改永久保留。 semanage boolean -l 将显示布尔值是否为永久值，并提供该布尔值的简短描述。\n\n\n\ngetsebool -a     #查看所有boolean 值\n```sh\ngetsebool httpd_enable_homedirs    #查看指定内容布尔值\nsetsbool httpd_enable_homedirs [ on | off | 0 | 1 ]     #设置布尔值，1=on,0=off\nsemanage boolean -l | grep httpd_eable_homedirs    # 查看布尔值是否为永久值（当前，永久）\nsetsebool -P httpd_enable_homedirs [ on | off | 0 | 1 ]     #设置永久布尔值\nsemanage boolean -l  -C    #仅列出本地修改的 SELinux 布尔值状态（与策略中默认值不同的任何设置）\n```\n###### 对 SELinux 进行故障的排除  \n\n1、在考试做任何调整之前，应了解到SELinux 禁止意图访问的这一做法也许非常正确。当Web 服务器尝试访问 /home 中的文件时，如果用户并未发布 Web 内容，则可能表明服务器遭入侵。如果已授权访问权限，则需要采取其他步骤来解决此问题。\n\n2、最常见的 SELinux 问题是使用不正确的文件上下文，此问题会在以下情况中发生：即，使用一个文件上下文在某个位置创建了文件，而该文件又被移至预期会使用其他上下文的地方。在大多数情况下，运行 restorecon 将会更正此问题。以这种方式更正问题对系统剩余部分的安全性有非常小的影响。\n\n3、对于严苛限制性访问的另一个补救措施可以通过调整布尔值。例如：ftpd\\_anon\\_write 布尔值控制匿名 FTP 用户能否上传文件。如果希望允许匿名 FTP 用户上传文件到服务器，则必须启用此布尔值。调整布尔值需格外谨慎，因为布尔值会对系统的安全性造成广泛影响。\n\n4、SELinux 策略可能存在阻止合法访问的漏洞。由于 SELinux 技术已经成熟，这种情况极少发生。\n\n###### 监控 SELinux 冲突\n\n必须安装setroubleshoot-server 包，以便将 SELinux 消息发送到 /var/log/messages 。setroubleshoot-server 侦听 /var/log/audit/audit.log 中的审核消息，并发送简短摘要到 /var/log/messages 。该摘要包括 SELinux 冲突的唯一标识符 （ UUID ），可用于收集更多信息。 sealert -l UUID  可用于生成特定事件的报告。 sealert -a /var/log/audit/audit.log 用于生成该文件中的所有事件报告。\n\n![image.png](1526892834926496.png)\n\n![image.png](1526892877639896.png)\n\n![image.png](1526892917350022.png)\n\n![image.png](1526892939342968.png)\n\n###### TIPS：\n\n“Raw Audit Messages”部分显示，目标文件 /var/www/html/file3 正是问题所在，同样，目标上下文 tcontext 似乎并不属于Web 服务器。使用 restorecon /var/www/html/file3 命令修复此文件上下文。如果还需要调整其它文件，restorecon 可递归地重置上下文：restorecon -R /var/www/\n\n1、查看 tail -f /var/log/messages  查看有sealert 的内容，确定事件 UUID \n\n2、运行给出的 sealert -l UUID 查看解决办法\n\n3、运行 2 中的命令给出信息的头部是建议解决方案\n\n4、查看 \"Raw Audit Messages\" 确定问题文件，给结合步骤 3 给出解决方案。\n","source":"_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7.md","raw":"---\ntitle: RH134 第七章 管理 SELINUX 安全性\nurl: 377.html\nid: 377\ncategories:\n  - RHEL134\ndate: 2018-05-21 17:41:40\ntags:\n---\n\n### SElinux 安全的基本概念  \n\nSecurity Enhanced Linux（SELinux）是一个额外的系统安全层。SELinux 的主要目标是防止已遭泄露的系统服务访问用户数据。大多数Linux管理员都熟悉标准的用户/组/其他权限安全模型。这种基于用户和组的模型称为自由决定的访问控制。SELinux 提供另一层安全，它基于对象并由更加复杂的规则控制，称为强制访问控制。\n\n![blob.png](1526607016211181.png)\n\n要允许远程匿名访问Web服务器，必须打开防火墙端口。然而，恶意人员却有机会通过安全漏洞侵入系统，而且如果他们破坏web 服务器进程，还会取得其权限，即apache 用户和apache 组的权限。该用户/组具有对文档根目录（/var/www/html）等项目的读取权限，以及对 /tmp 、/var/tmp 和所有人均可编写的任何其他文件/目录的写入权限  \n\n![image.png](1526867174600183.png)\n\nSELinux 是用于确定哪个进程可以访问哪些文件、目录和端口的一组安全规则。每个文件文件、进程和端口都具有特别的安全标签，称为SELinux 上下文。上下文是一个名称，SELinux 策略使用它来确定某个进程能否访问文件、目录或端口。除非显式规则授予访问权限，否则，在默认情况下，策略不允许任何交互。如果没有允许规则，则不允许访问。  \n\nSELinux 标签具有多种上下文：用户、角色、类型和敏感度。目标策略（即 RHEL 中启用的默认策略）会根据类型上下文来制定自己规则。类型上下文名称通常以 \\_t 结尾。\n\nWeb 服务器的类型上下文是 httpd_t 。\n\n通常位于 /var/www/html 中的文件和目录的类型上下文是 httpd\\_sys\\_content_t 。 \n\n通常位于 /tmp 和 /var/tmp 中的文件和目录的类型上下文是 tmp_t 。\n\nWeb 服务器端口的类型上下文是 http\\_port\\_t .\n\n存在某个策略规则 ，其允许 Apache （作为httpd\\_t 运行的Web 服务器进程）访问上下文通常位于 /var/www/html 及其他 Web 服务器目录 （httpd\\_sys\\_content\\_t） 中的文件和目录。对于通常位于 /tmp 和 /var/tmp 中的文件，策略中没有允许 规则 ，因此不允许进程访问。有了 SELinux ，恶意用户就无法访问 /tmp 目录。SELinux 还有适用于 NFS 和 CIFS 等远程文件系统的规则，尽管这些文件系统上的所有文件都使用相同的上下文标签。  \n\n许多处理文件的命令具有一个用于显示或设置 SELinux 的上下文选项（通常是 -Z ）.例如，ps、ls、cp 和 mkdir 全都使用 -Z 选项来显示或设置 SELinux 上下文。\n\n![image.png](1526868364153324.png)\n\n###### SELinux 模式  \n\n若出于故障排除目的，可使用 SELinux 模式暂时禁用 SELinux 保护\n\n![image.png](1526868454617069.png)  \n\n在强制（Enforcing）模式中，SELinux 主动拒绝访问尝试读取类型上下文 tmp_t 的文件的Web 服务器。在强制模式中，SELinux 不仅记录而且提供保护。  \n\n\n\n![image.png](1526868484423514.png)\n\n许可（Permissive ）模式通常用于对问题进程故障排除，在许可模式中，即使没有显式规则， SELinux 也会允许所有交互，而且会记录它在强制模式中拒绝的那些交互。可使用此模式来暂时允许访问 SELinux 正在限制的内容。无需重新启动即可在强制模式和许可模式之间相互转换。\n\n第三种模式是禁用（Disabled）模式，会完全禁用SELinux 。需要重新启动系统才能彻底禁用SELinux ，或是从禁用模式转为强制模式或许可模式。\n\n###### TIPS:\n\n最好使用许可模式，而不是彻底关闭 SELinux 。原因之一在于即使在许可模式中，内核也将根据需要自动维护 SELinux 文件系统标签，从而避免为了启用 SELinux 而重启系统，重新标记文件系统所带来的昂贵费用。\n\n要显示当前使用的有效 SELinux 模式，使用 getenforce 命令  \n```sh\n[root@client ~]# getenforce \nEnforcing\n```\n###### SELinux 布尔值  \n\nSELinux 布尔值的更改 SELinux 策略行为的开关。 SELinux  布尔值是可以启用或禁用的规则，安全管理可以使用 SELinux 布尔值来有选择地调整策略。\n\ngetsebool  命令用于显示 SELinux 布尔值及其当前值。 -a 选项可列出所有布尔值\n```sh\n[root@client ~]# getsebool -a\nabrt_anon_write --> off\nabrt_handle_event --> off\nabrt_upload_watch_anon_write --> on\nantivirus_can_scan_system --> off\n………………\n```\n###### 更改 SELinux 模式\n\nsetenforce 命令修改当前的 SELinux 模式。\n```sh\n[root@client ~]# setenforce \nusage:  setenforce [ Enforcing | Permissive | 1 | 0 ]\n```\n暂时性设置 SELinux 模式的另一种做法是在启动时将参数传递给内核。传递内核参数 enforcing=0 会使系统在启动时进入许可模式。值 1 将指定强制模式。可在指定 selinux=0 参数时禁用 SELinux 。值 1 将启用 SELinux 。  \n\n###### 设置默认 SELinux \n\n确定在启动时使用哪种 SELinux 模式的配置文件是 /etc/selinux/config .配置文件中包含有用的注释信息\n\n![image.png](1526871627344712.png)\n\n使用 /etc/selinux/config 更改启动时的默认 SELinux 模式。在上述示例中，它被设置为强制模式。  \n\n传递 selinux= 和/或 enforcing= 内核参数会覆盖在 /etc/selinux/config 中指定的任何默认值。\n\n###### 更改 SELinux 上下文\n\n初始 SELinux 上下文\n\n通常文件父目录的 SELinux 上下文决定该文件的初始 SELinux 上下文。父目录的上下文会分配给新建文件。这适用于 vim、cp、和touch等命令。但是，如果文件是在其他位置创建并且权限得以保留，（如使用 mv 或 cp -a），那么原始 SELinux 上下文将不会发生更改。\n\n![image.png](1526872601651338.png)  \n\n更改文件的 SELinux 上下文。可使用两个命令来更改文件 SELinux 上下文： chcon 和restorecon 。chcon 命令将文件的上下文更改成已指定为该命令参数的上下文。 -t 选项经常只用于指定上下文的类型。\n\nrestorecon 命令是更改文件或目录的 SELinux 上下文的首选方法。不同于 chcon ，在使用此命令时，不会明确指定上下文，它使用 SELinux 策略中的规则来确定应该是哪种文件上下文。\n\n###### TIPS：\n\n不应使用 chcon 来更改文件的 SELinux 上下文。在明确指定上下文时，可能会出错。如果在系统启动时重新标记了其它文件系统，文件上下文将会还原为默认上下文。\n```sh\n[root@server0 ~]# mkdir /virtual\n[root@server0 ~]# ls -Zd /virtual/\ndrwxr-xr-x. root root unconfined_u:object_r:default_t:s0 /virtual/\n[root@server0 ~]# chcon -t httpd\\_sys\\_content_t /virtual/\n[root@server0 ~]# ls -Zd /virtual/\ndrwxr-xr-x. root root unconfined_u:object_r:httpd_sys_content_t:s0 /virtual/\n[root@server0 ~]# restorecon -v /virtual/\nrestorecon reset /virtual context unconfined_u:object_r:httpd_sys_content_t:s0->unconfined_u:object_r:default_t:s0\n[root@server0 ~]# ls -Zd /virtual/\ndrwxr-xr-x. root root unconfined_u:object_r:default_t:s0 /virtual/\n```\n###### 定义 SELinux 默认文件上下文规则  \n\nsemanage fcontext 命令可用于显示或修改 restorecon 命令用来设置默认文件上下文的规则。它使用扩展正则表达式来指定路径和文件名。fcontext 规则中最常用的扩展正则表达式是 (/.\\*)?，这意味着：“（可选）匹配 / 后跟任意的字符”。它将会匹配在表达式前面列出的目录并递归地匹配该目录中的所有内容。\n\nrestorecon 命令是 policycoreutil 软件包的一部分； semanage 是 policycoreutil-python 软件包的一部分。\n```sh\n[root@server0 ~]# touch /tmp/file1 /tmp/file2\n[root@server0 ~]# ls -Z /tmp/file*\n-rw-r--r--. root root unconfined_u:object_r:user_tmp_t:s0 /tmp/file1\n-rw-r--r--. root root unconfined_u:object_r:user_tmp_t:s0 /tmp/file2\n[root@server0 ~]# mv /tmp/file1 /var/www/html/\n[root@server0 ~]# cp /tmp/file2 /var/www/html/\n[root@server0 ~]# ls -Z /var/www/html/\n-rw-r--r--. root root unconfined_u:object_r:user_tmp_t:s0 file1\n-rw-r--r--. root root unconfined_u:object_r:httpd_sys_content_t:s0 file2\n[root@server0 ~]# semanage fcontext -l\n………………\n/var/www(/.*)?                                     all files          system_u:object_r:httpd_sys_content_t:s0 \n………………\n[root@server0 ~]# restorecon -Rv /var/www/\nrestorecon reset /var/www/html/file1 context unconfined_u:object_r:user_tmp_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0\n[root@server0 ~]# ls -Z /var/www/html/file\nls: cannot access /var/www/html/file: No such file or directory\n[root@server0 ~]# ls -Z /var/www/html\n-rw-r--r--. root root unconfined_u:object_r:httpd_sys_content_t:s0 file1\n-rw-r--r--. root root unconfined_u:object_r:httpd_sys_content_t:s0 file2\n```\n以下示例显示了如何使用semanage 为新目录添加上下文。  \n```sh\n[root@server0 ~]# touch /virtual/index.html\n[root@server0 ~]# ls -Zd /virtual/\ndrwxr-xr-x. root root unconfined_u:object_r:default_t:s0 /virtual/\n[root@server0 ~]# ls -Z /virtual/\n-rw-r--r--. root root unconfined_u:object_r:default_t:s0 index.html\n[root@server0 ~]# semanage fcontext -a -t httpd\\_sys\\_content_t '/virtual(/.*)?'\n[root@server0 ~]# restorecon -RFvv /virtual/\nrestorecon reset /virtual context unconfined_u:object_r:default_t:s0->system_u:object_r:httpd_sys_content_t:s0\nrestorecon reset /virtual/index.html context unconfined_u:object_r:default_t:s0->system_u:object_r:httpd_sys_content_t:s0\n[root@server0 ~]# ls -Zd /virtual/\ndrwxr-xr-x. root root system_u:object_r:httpd_sys_content_t:s0 /virtual/\n[root@server0 ~]# ls -Z /virtual/\n-rw-r--r--. root root system_u:object_r:httpd_sys_content_t:s0 index.html\n\n#实验\n[root@server0 ~]# mkdir /custom\n[root@server0 ~]# echo \"This is server0\" >/custom/index.html\n[root@server0 ~]# vim /etc/httpd/conf/httpd.conf \n[root@server0 ~]# grep custom /etc/httpd/conf/httpd.conf \nDocumentRoot \"/custom\"\n<Directory \"/custom\">\n[root@server0 ~]# systemctl start httpd\n[root@server0 ~]# semanage fcontext -a -t httpd\\_sys\\_content_t '/custom(/.*)?'\n[root@server0 ~]# restorecon -Rv /custom/\nrestorecon reset /custom context unconfined_u:object_r:default_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0\nrestorecon reset /custom/index.html context unconfined_u:object_r:default_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0\n```\n###### 更改 SELinux 布尔值\n\nSELinux 布尔值是更改 SELinux 策略行为的开关。 SELinux 布尔值是可以启用或禁用的规则。安全管理员可以使用 SELlinux 布尔值来有选择地调整策略。\n\nselinux-policy-devel 软件包提供多个手册页（即 \\*\\_selinux(8)），可用于解释不同服务的布尔值的含义。如果已经安装此软件包，则 man -k '\\_selinux' 命令会列出这些文档。\n\ngetsebool 命令用于显示SELinux 布尔值；setsebool 用于修改 SELinux 布尔值。setsebool -P 修改 SELinux 策略，并使修改永久保留。 semanage boolean -l 将显示布尔值是否为永久值，并提供该布尔值的简短描述。\n\n\n\ngetsebool -a     #查看所有boolean 值\n```sh\ngetsebool httpd_enable_homedirs    #查看指定内容布尔值\nsetsbool httpd_enable_homedirs [ on | off | 0 | 1 ]     #设置布尔值，1=on,0=off\nsemanage boolean -l | grep httpd_eable_homedirs    # 查看布尔值是否为永久值（当前，永久）\nsetsebool -P httpd_enable_homedirs [ on | off | 0 | 1 ]     #设置永久布尔值\nsemanage boolean -l  -C    #仅列出本地修改的 SELinux 布尔值状态（与策略中默认值不同的任何设置）\n```\n###### 对 SELinux 进行故障的排除  \n\n1、在考试做任何调整之前，应了解到SELinux 禁止意图访问的这一做法也许非常正确。当Web 服务器尝试访问 /home 中的文件时，如果用户并未发布 Web 内容，则可能表明服务器遭入侵。如果已授权访问权限，则需要采取其他步骤来解决此问题。\n\n2、最常见的 SELinux 问题是使用不正确的文件上下文，此问题会在以下情况中发生：即，使用一个文件上下文在某个位置创建了文件，而该文件又被移至预期会使用其他上下文的地方。在大多数情况下，运行 restorecon 将会更正此问题。以这种方式更正问题对系统剩余部分的安全性有非常小的影响。\n\n3、对于严苛限制性访问的另一个补救措施可以通过调整布尔值。例如：ftpd\\_anon\\_write 布尔值控制匿名 FTP 用户能否上传文件。如果希望允许匿名 FTP 用户上传文件到服务器，则必须启用此布尔值。调整布尔值需格外谨慎，因为布尔值会对系统的安全性造成广泛影响。\n\n4、SELinux 策略可能存在阻止合法访问的漏洞。由于 SELinux 技术已经成熟，这种情况极少发生。\n\n###### 监控 SELinux 冲突\n\n必须安装setroubleshoot-server 包，以便将 SELinux 消息发送到 /var/log/messages 。setroubleshoot-server 侦听 /var/log/audit/audit.log 中的审核消息，并发送简短摘要到 /var/log/messages 。该摘要包括 SELinux 冲突的唯一标识符 （ UUID ），可用于收集更多信息。 sealert -l UUID  可用于生成特定事件的报告。 sealert -a /var/log/audit/audit.log 用于生成该文件中的所有事件报告。\n\n![image.png](1526892834926496.png)\n\n![image.png](1526892877639896.png)\n\n![image.png](1526892917350022.png)\n\n![image.png](1526892939342968.png)\n\n###### TIPS：\n\n“Raw Audit Messages”部分显示，目标文件 /var/www/html/file3 正是问题所在，同样，目标上下文 tcontext 似乎并不属于Web 服务器。使用 restorecon /var/www/html/file3 命令修复此文件上下文。如果还需要调整其它文件，restorecon 可递归地重置上下文：restorecon -R /var/www/\n\n1、查看 tail -f /var/log/messages  查看有sealert 的内容，确定事件 UUID \n\n2、运行给出的 sealert -l UUID 查看解决办法\n\n3、运行 2 中的命令给出信息的头部是建议解决方案\n\n4、查看 \"Raw Audit Messages\" 确定问题文件，给结合步骤 3 给出解决方案。\n","slug":"rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7","published":1,"updated":"2019-01-06T16:52:33.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqi1s001glxkjbnv8y6ss","content":"<h3 id=\"SElinux-安全的基本概念\"><a href=\"#SElinux-安全的基本概念\" class=\"headerlink\" title=\"SElinux 安全的基本概念\"></a>SElinux 安全的基本概念</h3><p>Security Enhanced Linux（SELinux）是一个额外的系统安全层。SELinux 的主要目标是防止已遭泄露的系统服务访问用户数据。大多数Linux管理员都熟悉标准的用户/组/其他权限安全模型。这种基于用户和组的模型称为自由决定的访问控制。SELinux 提供另一层安全，它基于对象并由更加复杂的规则控制，称为强制访问控制。</p>\n<p><img src=\"/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526607016211181.png\" alt=\"blob.png\"></p>\n<p>要允许远程匿名访问Web服务器，必须打开防火墙端口。然而，恶意人员却有机会通过安全漏洞侵入系统，而且如果他们破坏web 服务器进程，还会取得其权限，即apache 用户和apache 组的权限。该用户/组具有对文档根目录（/var/www/html）等项目的读取权限，以及对 /tmp 、/var/tmp 和所有人均可编写的任何其他文件/目录的写入权限  </p>\n<p><img src=\"/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526867174600183.png\" alt=\"image.png\"></p>\n<p>SELinux 是用于确定哪个进程可以访问哪些文件、目录和端口的一组安全规则。每个文件文件、进程和端口都具有特别的安全标签，称为SELinux 上下文。上下文是一个名称，SELinux 策略使用它来确定某个进程能否访问文件、目录或端口。除非显式规则授予访问权限，否则，在默认情况下，策略不允许任何交互。如果没有允许规则，则不允许访问。  </p>\n<p>SELinux 标签具有多种上下文：用户、角色、类型和敏感度。目标策略（即 RHEL 中启用的默认策略）会根据类型上下文来制定自己规则。类型上下文名称通常以 _t 结尾。</p>\n<p>Web 服务器的类型上下文是 httpd_t 。</p>\n<p>通常位于 /var/www/html 中的文件和目录的类型上下文是 httpd_sys_content_t 。 </p>\n<p>通常位于 /tmp 和 /var/tmp 中的文件和目录的类型上下文是 tmp_t 。</p>\n<p>Web 服务器端口的类型上下文是 http_port_t .</p>\n<p>存在某个策略规则 ，其允许 Apache （作为httpd_t 运行的Web 服务器进程）访问上下文通常位于 /var/www/html 及其他 Web 服务器目录 （httpd_sys_content_t） 中的文件和目录。对于通常位于 /tmp 和 /var/tmp 中的文件，策略中没有允许 规则 ，因此不允许进程访问。有了 SELinux ，恶意用户就无法访问 /tmp 目录。SELinux 还有适用于 NFS 和 CIFS 等远程文件系统的规则，尽管这些文件系统上的所有文件都使用相同的上下文标签。  </p>\n<p>许多处理文件的命令具有一个用于显示或设置 SELinux 的上下文选项（通常是 -Z ）.例如，ps、ls、cp 和 mkdir 全都使用 -Z 选项来显示或设置 SELinux 上下文。</p>\n<p><img src=\"/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526868364153324.png\" alt=\"image.png\"></p>\n<h6 id=\"SELinux-模式\"><a href=\"#SELinux-模式\" class=\"headerlink\" title=\"SELinux 模式\"></a>SELinux 模式</h6><p>若出于故障排除目的，可使用 SELinux 模式暂时禁用 SELinux 保护</p>\n<p><img src=\"/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526868454617069.png\" alt=\"image.png\">  </p>\n<p>在强制（Enforcing）模式中，SELinux 主动拒绝访问尝试读取类型上下文 tmp_t 的文件的Web 服务器。在强制模式中，SELinux 不仅记录而且提供保护。  </p>\n<p><img src=\"/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526868484423514.png\" alt=\"image.png\"></p>\n<p>许可（Permissive ）模式通常用于对问题进程故障排除，在许可模式中，即使没有显式规则， SELinux 也会允许所有交互，而且会记录它在强制模式中拒绝的那些交互。可使用此模式来暂时允许访问 SELinux 正在限制的内容。无需重新启动即可在强制模式和许可模式之间相互转换。</p>\n<p>第三种模式是禁用（Disabled）模式，会完全禁用SELinux 。需要重新启动系统才能彻底禁用SELinux ，或是从禁用模式转为强制模式或许可模式。</p>\n<h6 id=\"TIPS\"><a href=\"#TIPS\" class=\"headerlink\" title=\"TIPS:\"></a>TIPS:</h6><p>最好使用许可模式，而不是彻底关闭 SELinux 。原因之一在于即使在许可模式中，内核也将根据需要自动维护 SELinux 文件系统标签，从而避免为了启用 SELinux 而重启系统，重新标记文件系统所带来的昂贵费用。</p>\n<p>要显示当前使用的有效 SELinux 模式，使用 getenforce 命令<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@client ~]<span class=\"comment\"># getenforce </span></span><br><span class=\"line\">Enforcing</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"SELinux-布尔值\"><a href=\"#SELinux-布尔值\" class=\"headerlink\" title=\"SELinux 布尔值\"></a>SELinux 布尔值</h6><p>SELinux 布尔值的更改 SELinux 策略行为的开关。 SELinux  布尔值是可以启用或禁用的规则，安全管理可以使用 SELinux 布尔值来有选择地调整策略。</p>\n<p>getsebool  命令用于显示 SELinux 布尔值及其当前值。 -a 选项可列出所有布尔值<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@client ~]<span class=\"comment\"># getsebool -a</span></span><br><span class=\"line\">abrt_anon_write --&gt; off</span><br><span class=\"line\">abrt_handle_event --&gt; off</span><br><span class=\"line\">abrt_upload_watch_anon_write --&gt; on</span><br><span class=\"line\">antivirus_can_scan_system --&gt; off</span><br><span class=\"line\">………………</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"更改-SELinux-模式\"><a href=\"#更改-SELinux-模式\" class=\"headerlink\" title=\"更改 SELinux 模式\"></a>更改 SELinux 模式</h6><p>setenforce 命令修改当前的 SELinux 模式。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@client ~]<span class=\"comment\"># setenforce </span></span><br><span class=\"line\">usage:  setenforce [ Enforcing | Permissive | 1 | 0 ]</span><br></pre></td></tr></table></figure></p>\n<p>暂时性设置 SELinux 模式的另一种做法是在启动时将参数传递给内核。传递内核参数 enforcing=0 会使系统在启动时进入许可模式。值 1 将指定强制模式。可在指定 selinux=0 参数时禁用 SELinux 。值 1 将启用 SELinux 。  </p>\n<h6 id=\"设置默认-SELinux\"><a href=\"#设置默认-SELinux\" class=\"headerlink\" title=\"设置默认 SELinux\"></a>设置默认 SELinux</h6><p>确定在启动时使用哪种 SELinux 模式的配置文件是 /etc/selinux/config .配置文件中包含有用的注释信息</p>\n<p><img src=\"/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526871627344712.png\" alt=\"image.png\"></p>\n<p>使用 /etc/selinux/config 更改启动时的默认 SELinux 模式。在上述示例中，它被设置为强制模式。  </p>\n<p>传递 selinux= 和/或 enforcing= 内核参数会覆盖在 /etc/selinux/config 中指定的任何默认值。</p>\n<h6 id=\"更改-SELinux-上下文\"><a href=\"#更改-SELinux-上下文\" class=\"headerlink\" title=\"更改 SELinux 上下文\"></a>更改 SELinux 上下文</h6><p>初始 SELinux 上下文</p>\n<p>通常文件父目录的 SELinux 上下文决定该文件的初始 SELinux 上下文。父目录的上下文会分配给新建文件。这适用于 vim、cp、和touch等命令。但是，如果文件是在其他位置创建并且权限得以保留，（如使用 mv 或 cp -a），那么原始 SELinux 上下文将不会发生更改。</p>\n<p><img src=\"/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526872601651338.png\" alt=\"image.png\">  </p>\n<p>更改文件的 SELinux 上下文。可使用两个命令来更改文件 SELinux 上下文： chcon 和restorecon 。chcon 命令将文件的上下文更改成已指定为该命令参数的上下文。 -t 选项经常只用于指定上下文的类型。</p>\n<p>restorecon 命令是更改文件或目录的 SELinux 上下文的首选方法。不同于 chcon ，在使用此命令时，不会明确指定上下文，它使用 SELinux 策略中的规则来确定应该是哪种文件上下文。</p>\n<h6 id=\"TIPS：\"><a href=\"#TIPS：\" class=\"headerlink\" title=\"TIPS：\"></a>TIPS：</h6><p>不应使用 chcon 来更改文件的 SELinux 上下文。在明确指定上下文时，可能会出错。如果在系统启动时重新标记了其它文件系统，文件上下文将会还原为默认上下文。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@server0 ~]<span class=\"comment\"># mkdir /virtual</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ls -Zd /virtual/</span></span><br><span class=\"line\">drwxr-xr-x. root root unconfined_u:object_r:default_t:s0 /virtual/</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># chcon -t httpd\\_sys\\_content_t /virtual/</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ls -Zd /virtual/</span></span><br><span class=\"line\">drwxr-xr-x. root root unconfined_u:object_r:httpd_sys_content_t:s0 /virtual/</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># restorecon -v /virtual/</span></span><br><span class=\"line\">restorecon reset /virtual context unconfined_u:object_r:httpd_sys_content_t:s0-&gt;unconfined_u:object_r:default_t:s0</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ls -Zd /virtual/</span></span><br><span class=\"line\">drwxr-xr-x. root root unconfined_u:object_r:default_t:s0 /virtual/</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"定义-SELinux-默认文件上下文规则\"><a href=\"#定义-SELinux-默认文件上下文规则\" class=\"headerlink\" title=\"定义 SELinux 默认文件上下文规则\"></a>定义 SELinux 默认文件上下文规则</h6><p>semanage fcontext 命令可用于显示或修改 restorecon 命令用来设置默认文件上下文的规则。它使用扩展正则表达式来指定路径和文件名。fcontext 规则中最常用的扩展正则表达式是 (/.*)?，这意味着：“（可选）匹配 / 后跟任意的字符”。它将会匹配在表达式前面列出的目录并递归地匹配该目录中的所有内容。</p>\n<p>restorecon 命令是 policycoreutil 软件包的一部分； semanage 是 policycoreutil-python 软件包的一部分。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@server0 ~]<span class=\"comment\"># touch /tmp/file1 /tmp/file2</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ls -Z /tmp/file*</span></span><br><span class=\"line\">-rw-r--r--. root root unconfined_u:object_r:user_tmp_t:s0 /tmp/file1</span><br><span class=\"line\">-rw-r--r--. root root unconfined_u:object_r:user_tmp_t:s0 /tmp/file2</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># mv /tmp/file1 /var/www/html/</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># cp /tmp/file2 /var/www/html/</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ls -Z /var/www/html/</span></span><br><span class=\"line\">-rw-r--r--. root root unconfined_u:object_r:user_tmp_t:s0 file1</span><br><span class=\"line\">-rw-r--r--. root root unconfined_u:object_r:httpd_sys_content_t:s0 file2</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># semanage fcontext -l</span></span><br><span class=\"line\">………………</span><br><span class=\"line\">/var/www(/.*)?                                     all files          system_u:object_r:httpd_sys_content_t:s0 </span><br><span class=\"line\">………………</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># restorecon -Rv /var/www/</span></span><br><span class=\"line\">restorecon reset /var/www/html/file1 context unconfined_u:object_r:user_tmp_t:s0-&gt;unconfined_u:object_r:httpd_sys_content_t:s0</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ls -Z /var/www/html/file</span></span><br><span class=\"line\">ls: cannot access /var/www/html/file: No such file or directory</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ls -Z /var/www/html</span></span><br><span class=\"line\">-rw-r--r--. root root unconfined_u:object_r:httpd_sys_content_t:s0 file1</span><br><span class=\"line\">-rw-r--r--. root root unconfined_u:object_r:httpd_sys_content_t:s0 file2</span><br></pre></td></tr></table></figure></p>\n<p>以下示例显示了如何使用semanage 为新目录添加上下文。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@server0 ~]<span class=\"comment\"># touch /virtual/index.html</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ls -Zd /virtual/</span></span><br><span class=\"line\">drwxr-xr-x. root root unconfined_u:object_r:default_t:s0 /virtual/</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ls -Z /virtual/</span></span><br><span class=\"line\">-rw-r--r--. root root unconfined_u:object_r:default_t:s0 index.html</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># semanage fcontext -a -t httpd\\_sys\\_content_t '/virtual(/.*)?'</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># restorecon -RFvv /virtual/</span></span><br><span class=\"line\">restorecon reset /virtual context unconfined_u:object_r:default_t:s0-&gt;system_u:object_r:httpd_sys_content_t:s0</span><br><span class=\"line\">restorecon reset /virtual/index.html context unconfined_u:object_r:default_t:s0-&gt;system_u:object_r:httpd_sys_content_t:s0</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ls -Zd /virtual/</span></span><br><span class=\"line\">drwxr-xr-x. root root system_u:object_r:httpd_sys_content_t:s0 /virtual/</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ls -Z /virtual/</span></span><br><span class=\"line\">-rw-r--r--. root root system_u:object_r:httpd_sys_content_t:s0 index.html</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#实验</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># mkdir /custom</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># echo \"This is server0\" &gt;/custom/index.html</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># vim /etc/httpd/conf/httpd.conf </span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># grep custom /etc/httpd/conf/httpd.conf </span></span><br><span class=\"line\">DocumentRoot <span class=\"string\">\"/custom\"</span></span><br><span class=\"line\">&lt;Directory <span class=\"string\">\"/custom\"</span>&gt;</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># systemctl start httpd</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># semanage fcontext -a -t httpd\\_sys\\_content_t '/custom(/.*)?'</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># restorecon -Rv /custom/</span></span><br><span class=\"line\">restorecon reset /custom context unconfined_u:object_r:default_t:s0-&gt;unconfined_u:object_r:httpd_sys_content_t:s0</span><br><span class=\"line\">restorecon reset /custom/index.html context unconfined_u:object_r:default_t:s0-&gt;unconfined_u:object_r:httpd_sys_content_t:s0</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"更改-SELinux-布尔值\"><a href=\"#更改-SELinux-布尔值\" class=\"headerlink\" title=\"更改 SELinux 布尔值\"></a>更改 SELinux 布尔值</h6><p>SELinux 布尔值是更改 SELinux 策略行为的开关。 SELinux 布尔值是可以启用或禁用的规则。安全管理员可以使用 SELlinux 布尔值来有选择地调整策略。</p>\n<p>selinux-policy-devel 软件包提供多个手册页（即 *_selinux(8)），可用于解释不同服务的布尔值的含义。如果已经安装此软件包，则 man -k ‘_selinux’ 命令会列出这些文档。</p>\n<p>getsebool 命令用于显示SELinux 布尔值；setsebool 用于修改 SELinux 布尔值。setsebool -P 修改 SELinux 策略，并使修改永久保留。 semanage boolean -l 将显示布尔值是否为永久值，并提供该布尔值的简短描述。</p>\n<p>getsebool -a     #查看所有boolean 值<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getsebool httpd_enable_homedirs    <span class=\"comment\">#查看指定内容布尔值</span></span><br><span class=\"line\">setsbool httpd_enable_homedirs [ on | off | 0 | 1 ]     <span class=\"comment\">#设置布尔值，1=on,0=off</span></span><br><span class=\"line\">semanage boolean -l | grep httpd_eable_homedirs    <span class=\"comment\"># 查看布尔值是否为永久值（当前，永久）</span></span><br><span class=\"line\">setsebool -P httpd_enable_homedirs [ on | off | 0 | 1 ]     <span class=\"comment\">#设置永久布尔值</span></span><br><span class=\"line\">semanage boolean -l  -C    <span class=\"comment\">#仅列出本地修改的 SELinux 布尔值状态（与策略中默认值不同的任何设置）</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"对-SELinux-进行故障的排除\"><a href=\"#对-SELinux-进行故障的排除\" class=\"headerlink\" title=\"对 SELinux 进行故障的排除\"></a>对 SELinux 进行故障的排除</h6><p>1、在考试做任何调整之前，应了解到SELinux 禁止意图访问的这一做法也许非常正确。当Web 服务器尝试访问 /home 中的文件时，如果用户并未发布 Web 内容，则可能表明服务器遭入侵。如果已授权访问权限，则需要采取其他步骤来解决此问题。</p>\n<p>2、最常见的 SELinux 问题是使用不正确的文件上下文，此问题会在以下情况中发生：即，使用一个文件上下文在某个位置创建了文件，而该文件又被移至预期会使用其他上下文的地方。在大多数情况下，运行 restorecon 将会更正此问题。以这种方式更正问题对系统剩余部分的安全性有非常小的影响。</p>\n<p>3、对于严苛限制性访问的另一个补救措施可以通过调整布尔值。例如：ftpd_anon_write 布尔值控制匿名 FTP 用户能否上传文件。如果希望允许匿名 FTP 用户上传文件到服务器，则必须启用此布尔值。调整布尔值需格外谨慎，因为布尔值会对系统的安全性造成广泛影响。</p>\n<p>4、SELinux 策略可能存在阻止合法访问的漏洞。由于 SELinux 技术已经成熟，这种情况极少发生。</p>\n<h6 id=\"监控-SELinux-冲突\"><a href=\"#监控-SELinux-冲突\" class=\"headerlink\" title=\"监控 SELinux 冲突\"></a>监控 SELinux 冲突</h6><p>必须安装setroubleshoot-server 包，以便将 SELinux 消息发送到 /var/log/messages 。setroubleshoot-server 侦听 /var/log/audit/audit.log 中的审核消息，并发送简短摘要到 /var/log/messages 。该摘要包括 SELinux 冲突的唯一标识符 （ UUID ），可用于收集更多信息。 sealert -l UUID  可用于生成特定事件的报告。 sealert -a /var/log/audit/audit.log 用于生成该文件中的所有事件报告。</p>\n<p><img src=\"/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526892834926496.png\" alt=\"image.png\"></p>\n<p><img src=\"/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526892877639896.png\" alt=\"image.png\"></p>\n<p><img src=\"/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526892917350022.png\" alt=\"image.png\"></p>\n<p><img src=\"/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526892939342968.png\" alt=\"image.png\"></p>\n<h6 id=\"TIPS：-1\"><a href=\"#TIPS：-1\" class=\"headerlink\" title=\"TIPS：\"></a>TIPS：</h6><p>“Raw Audit Messages”部分显示，目标文件 /var/www/html/file3 正是问题所在，同样，目标上下文 tcontext 似乎并不属于Web 服务器。使用 restorecon /var/www/html/file3 命令修复此文件上下文。如果还需要调整其它文件，restorecon 可递归地重置上下文：restorecon -R /var/www/</p>\n<p>1、查看 tail -f /var/log/messages  查看有sealert 的内容，确定事件 UUID </p>\n<p>2、运行给出的 sealert -l UUID 查看解决办法</p>\n<p>3、运行 2 中的命令给出信息的头部是建议解决方案</p>\n<p>4、查看 “Raw Audit Messages” 确定问题文件，给结合步骤 3 给出解决方案。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"SElinux-安全的基本概念\"><a href=\"#SElinux-安全的基本概念\" class=\"headerlink\" title=\"SElinux 安全的基本概念\"></a>SElinux 安全的基本概念</h3><p>Security Enhanced Linux（SELinux）是一个额外的系统安全层。SELinux 的主要目标是防止已遭泄露的系统服务访问用户数据。大多数Linux管理员都熟悉标准的用户/组/其他权限安全模型。这种基于用户和组的模型称为自由决定的访问控制。SELinux 提供另一层安全，它基于对象并由更加复杂的规则控制，称为强制访问控制。</p>\n<p><img src=\"/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526607016211181.png\" alt=\"blob.png\"></p>\n<p>要允许远程匿名访问Web服务器，必须打开防火墙端口。然而，恶意人员却有机会通过安全漏洞侵入系统，而且如果他们破坏web 服务器进程，还会取得其权限，即apache 用户和apache 组的权限。该用户/组具有对文档根目录（/var/www/html）等项目的读取权限，以及对 /tmp 、/var/tmp 和所有人均可编写的任何其他文件/目录的写入权限  </p>\n<p><img src=\"/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526867174600183.png\" alt=\"image.png\"></p>\n<p>SELinux 是用于确定哪个进程可以访问哪些文件、目录和端口的一组安全规则。每个文件文件、进程和端口都具有特别的安全标签，称为SELinux 上下文。上下文是一个名称，SELinux 策略使用它来确定某个进程能否访问文件、目录或端口。除非显式规则授予访问权限，否则，在默认情况下，策略不允许任何交互。如果没有允许规则，则不允许访问。  </p>\n<p>SELinux 标签具有多种上下文：用户、角色、类型和敏感度。目标策略（即 RHEL 中启用的默认策略）会根据类型上下文来制定自己规则。类型上下文名称通常以 _t 结尾。</p>\n<p>Web 服务器的类型上下文是 httpd_t 。</p>\n<p>通常位于 /var/www/html 中的文件和目录的类型上下文是 httpd_sys_content_t 。 </p>\n<p>通常位于 /tmp 和 /var/tmp 中的文件和目录的类型上下文是 tmp_t 。</p>\n<p>Web 服务器端口的类型上下文是 http_port_t .</p>\n<p>存在某个策略规则 ，其允许 Apache （作为httpd_t 运行的Web 服务器进程）访问上下文通常位于 /var/www/html 及其他 Web 服务器目录 （httpd_sys_content_t） 中的文件和目录。对于通常位于 /tmp 和 /var/tmp 中的文件，策略中没有允许 规则 ，因此不允许进程访问。有了 SELinux ，恶意用户就无法访问 /tmp 目录。SELinux 还有适用于 NFS 和 CIFS 等远程文件系统的规则，尽管这些文件系统上的所有文件都使用相同的上下文标签。  </p>\n<p>许多处理文件的命令具有一个用于显示或设置 SELinux 的上下文选项（通常是 -Z ）.例如，ps、ls、cp 和 mkdir 全都使用 -Z 选项来显示或设置 SELinux 上下文。</p>\n<p><img src=\"/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526868364153324.png\" alt=\"image.png\"></p>\n<h6 id=\"SELinux-模式\"><a href=\"#SELinux-模式\" class=\"headerlink\" title=\"SELinux 模式\"></a>SELinux 模式</h6><p>若出于故障排除目的，可使用 SELinux 模式暂时禁用 SELinux 保护</p>\n<p><img src=\"/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526868454617069.png\" alt=\"image.png\">  </p>\n<p>在强制（Enforcing）模式中，SELinux 主动拒绝访问尝试读取类型上下文 tmp_t 的文件的Web 服务器。在强制模式中，SELinux 不仅记录而且提供保护。  </p>\n<p><img src=\"/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526868484423514.png\" alt=\"image.png\"></p>\n<p>许可（Permissive ）模式通常用于对问题进程故障排除，在许可模式中，即使没有显式规则， SELinux 也会允许所有交互，而且会记录它在强制模式中拒绝的那些交互。可使用此模式来暂时允许访问 SELinux 正在限制的内容。无需重新启动即可在强制模式和许可模式之间相互转换。</p>\n<p>第三种模式是禁用（Disabled）模式，会完全禁用SELinux 。需要重新启动系统才能彻底禁用SELinux ，或是从禁用模式转为强制模式或许可模式。</p>\n<h6 id=\"TIPS\"><a href=\"#TIPS\" class=\"headerlink\" title=\"TIPS:\"></a>TIPS:</h6><p>最好使用许可模式，而不是彻底关闭 SELinux 。原因之一在于即使在许可模式中，内核也将根据需要自动维护 SELinux 文件系统标签，从而避免为了启用 SELinux 而重启系统，重新标记文件系统所带来的昂贵费用。</p>\n<p>要显示当前使用的有效 SELinux 模式，使用 getenforce 命令<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@client ~]<span class=\"comment\"># getenforce </span></span><br><span class=\"line\">Enforcing</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"SELinux-布尔值\"><a href=\"#SELinux-布尔值\" class=\"headerlink\" title=\"SELinux 布尔值\"></a>SELinux 布尔值</h6><p>SELinux 布尔值的更改 SELinux 策略行为的开关。 SELinux  布尔值是可以启用或禁用的规则，安全管理可以使用 SELinux 布尔值来有选择地调整策略。</p>\n<p>getsebool  命令用于显示 SELinux 布尔值及其当前值。 -a 选项可列出所有布尔值<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@client ~]<span class=\"comment\"># getsebool -a</span></span><br><span class=\"line\">abrt_anon_write --&gt; off</span><br><span class=\"line\">abrt_handle_event --&gt; off</span><br><span class=\"line\">abrt_upload_watch_anon_write --&gt; on</span><br><span class=\"line\">antivirus_can_scan_system --&gt; off</span><br><span class=\"line\">………………</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"更改-SELinux-模式\"><a href=\"#更改-SELinux-模式\" class=\"headerlink\" title=\"更改 SELinux 模式\"></a>更改 SELinux 模式</h6><p>setenforce 命令修改当前的 SELinux 模式。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@client ~]<span class=\"comment\"># setenforce </span></span><br><span class=\"line\">usage:  setenforce [ Enforcing | Permissive | 1 | 0 ]</span><br></pre></td></tr></table></figure></p>\n<p>暂时性设置 SELinux 模式的另一种做法是在启动时将参数传递给内核。传递内核参数 enforcing=0 会使系统在启动时进入许可模式。值 1 将指定强制模式。可在指定 selinux=0 参数时禁用 SELinux 。值 1 将启用 SELinux 。  </p>\n<h6 id=\"设置默认-SELinux\"><a href=\"#设置默认-SELinux\" class=\"headerlink\" title=\"设置默认 SELinux\"></a>设置默认 SELinux</h6><p>确定在启动时使用哪种 SELinux 模式的配置文件是 /etc/selinux/config .配置文件中包含有用的注释信息</p>\n<p><img src=\"/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526871627344712.png\" alt=\"image.png\"></p>\n<p>使用 /etc/selinux/config 更改启动时的默认 SELinux 模式。在上述示例中，它被设置为强制模式。  </p>\n<p>传递 selinux= 和/或 enforcing= 内核参数会覆盖在 /etc/selinux/config 中指定的任何默认值。</p>\n<h6 id=\"更改-SELinux-上下文\"><a href=\"#更改-SELinux-上下文\" class=\"headerlink\" title=\"更改 SELinux 上下文\"></a>更改 SELinux 上下文</h6><p>初始 SELinux 上下文</p>\n<p>通常文件父目录的 SELinux 上下文决定该文件的初始 SELinux 上下文。父目录的上下文会分配给新建文件。这适用于 vim、cp、和touch等命令。但是，如果文件是在其他位置创建并且权限得以保留，（如使用 mv 或 cp -a），那么原始 SELinux 上下文将不会发生更改。</p>\n<p><img src=\"/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526872601651338.png\" alt=\"image.png\">  </p>\n<p>更改文件的 SELinux 上下文。可使用两个命令来更改文件 SELinux 上下文： chcon 和restorecon 。chcon 命令将文件的上下文更改成已指定为该命令参数的上下文。 -t 选项经常只用于指定上下文的类型。</p>\n<p>restorecon 命令是更改文件或目录的 SELinux 上下文的首选方法。不同于 chcon ，在使用此命令时，不会明确指定上下文，它使用 SELinux 策略中的规则来确定应该是哪种文件上下文。</p>\n<h6 id=\"TIPS：\"><a href=\"#TIPS：\" class=\"headerlink\" title=\"TIPS：\"></a>TIPS：</h6><p>不应使用 chcon 来更改文件的 SELinux 上下文。在明确指定上下文时，可能会出错。如果在系统启动时重新标记了其它文件系统，文件上下文将会还原为默认上下文。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@server0 ~]<span class=\"comment\"># mkdir /virtual</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ls -Zd /virtual/</span></span><br><span class=\"line\">drwxr-xr-x. root root unconfined_u:object_r:default_t:s0 /virtual/</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># chcon -t httpd\\_sys\\_content_t /virtual/</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ls -Zd /virtual/</span></span><br><span class=\"line\">drwxr-xr-x. root root unconfined_u:object_r:httpd_sys_content_t:s0 /virtual/</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># restorecon -v /virtual/</span></span><br><span class=\"line\">restorecon reset /virtual context unconfined_u:object_r:httpd_sys_content_t:s0-&gt;unconfined_u:object_r:default_t:s0</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ls -Zd /virtual/</span></span><br><span class=\"line\">drwxr-xr-x. root root unconfined_u:object_r:default_t:s0 /virtual/</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"定义-SELinux-默认文件上下文规则\"><a href=\"#定义-SELinux-默认文件上下文规则\" class=\"headerlink\" title=\"定义 SELinux 默认文件上下文规则\"></a>定义 SELinux 默认文件上下文规则</h6><p>semanage fcontext 命令可用于显示或修改 restorecon 命令用来设置默认文件上下文的规则。它使用扩展正则表达式来指定路径和文件名。fcontext 规则中最常用的扩展正则表达式是 (/.*)?，这意味着：“（可选）匹配 / 后跟任意的字符”。它将会匹配在表达式前面列出的目录并递归地匹配该目录中的所有内容。</p>\n<p>restorecon 命令是 policycoreutil 软件包的一部分； semanage 是 policycoreutil-python 软件包的一部分。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@server0 ~]<span class=\"comment\"># touch /tmp/file1 /tmp/file2</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ls -Z /tmp/file*</span></span><br><span class=\"line\">-rw-r--r--. root root unconfined_u:object_r:user_tmp_t:s0 /tmp/file1</span><br><span class=\"line\">-rw-r--r--. root root unconfined_u:object_r:user_tmp_t:s0 /tmp/file2</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># mv /tmp/file1 /var/www/html/</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># cp /tmp/file2 /var/www/html/</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ls -Z /var/www/html/</span></span><br><span class=\"line\">-rw-r--r--. root root unconfined_u:object_r:user_tmp_t:s0 file1</span><br><span class=\"line\">-rw-r--r--. root root unconfined_u:object_r:httpd_sys_content_t:s0 file2</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># semanage fcontext -l</span></span><br><span class=\"line\">………………</span><br><span class=\"line\">/var/www(/.*)?                                     all files          system_u:object_r:httpd_sys_content_t:s0 </span><br><span class=\"line\">………………</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># restorecon -Rv /var/www/</span></span><br><span class=\"line\">restorecon reset /var/www/html/file1 context unconfined_u:object_r:user_tmp_t:s0-&gt;unconfined_u:object_r:httpd_sys_content_t:s0</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ls -Z /var/www/html/file</span></span><br><span class=\"line\">ls: cannot access /var/www/html/file: No such file or directory</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ls -Z /var/www/html</span></span><br><span class=\"line\">-rw-r--r--. root root unconfined_u:object_r:httpd_sys_content_t:s0 file1</span><br><span class=\"line\">-rw-r--r--. root root unconfined_u:object_r:httpd_sys_content_t:s0 file2</span><br></pre></td></tr></table></figure></p>\n<p>以下示例显示了如何使用semanage 为新目录添加上下文。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@server0 ~]<span class=\"comment\"># touch /virtual/index.html</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ls -Zd /virtual/</span></span><br><span class=\"line\">drwxr-xr-x. root root unconfined_u:object_r:default_t:s0 /virtual/</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ls -Z /virtual/</span></span><br><span class=\"line\">-rw-r--r--. root root unconfined_u:object_r:default_t:s0 index.html</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># semanage fcontext -a -t httpd\\_sys\\_content_t '/virtual(/.*)?'</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># restorecon -RFvv /virtual/</span></span><br><span class=\"line\">restorecon reset /virtual context unconfined_u:object_r:default_t:s0-&gt;system_u:object_r:httpd_sys_content_t:s0</span><br><span class=\"line\">restorecon reset /virtual/index.html context unconfined_u:object_r:default_t:s0-&gt;system_u:object_r:httpd_sys_content_t:s0</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ls -Zd /virtual/</span></span><br><span class=\"line\">drwxr-xr-x. root root system_u:object_r:httpd_sys_content_t:s0 /virtual/</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># ls -Z /virtual/</span></span><br><span class=\"line\">-rw-r--r--. root root system_u:object_r:httpd_sys_content_t:s0 index.html</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#实验</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># mkdir /custom</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># echo \"This is server0\" &gt;/custom/index.html</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># vim /etc/httpd/conf/httpd.conf </span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># grep custom /etc/httpd/conf/httpd.conf </span></span><br><span class=\"line\">DocumentRoot <span class=\"string\">\"/custom\"</span></span><br><span class=\"line\">&lt;Directory <span class=\"string\">\"/custom\"</span>&gt;</span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># systemctl start httpd</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># semanage fcontext -a -t httpd\\_sys\\_content_t '/custom(/.*)?'</span></span><br><span class=\"line\">[root@server0 ~]<span class=\"comment\"># restorecon -Rv /custom/</span></span><br><span class=\"line\">restorecon reset /custom context unconfined_u:object_r:default_t:s0-&gt;unconfined_u:object_r:httpd_sys_content_t:s0</span><br><span class=\"line\">restorecon reset /custom/index.html context unconfined_u:object_r:default_t:s0-&gt;unconfined_u:object_r:httpd_sys_content_t:s0</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"更改-SELinux-布尔值\"><a href=\"#更改-SELinux-布尔值\" class=\"headerlink\" title=\"更改 SELinux 布尔值\"></a>更改 SELinux 布尔值</h6><p>SELinux 布尔值是更改 SELinux 策略行为的开关。 SELinux 布尔值是可以启用或禁用的规则。安全管理员可以使用 SELlinux 布尔值来有选择地调整策略。</p>\n<p>selinux-policy-devel 软件包提供多个手册页（即 *_selinux(8)），可用于解释不同服务的布尔值的含义。如果已经安装此软件包，则 man -k ‘_selinux’ 命令会列出这些文档。</p>\n<p>getsebool 命令用于显示SELinux 布尔值；setsebool 用于修改 SELinux 布尔值。setsebool -P 修改 SELinux 策略，并使修改永久保留。 semanage boolean -l 将显示布尔值是否为永久值，并提供该布尔值的简短描述。</p>\n<p>getsebool -a     #查看所有boolean 值<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getsebool httpd_enable_homedirs    <span class=\"comment\">#查看指定内容布尔值</span></span><br><span class=\"line\">setsbool httpd_enable_homedirs [ on | off | 0 | 1 ]     <span class=\"comment\">#设置布尔值，1=on,0=off</span></span><br><span class=\"line\">semanage boolean -l | grep httpd_eable_homedirs    <span class=\"comment\"># 查看布尔值是否为永久值（当前，永久）</span></span><br><span class=\"line\">setsebool -P httpd_enable_homedirs [ on | off | 0 | 1 ]     <span class=\"comment\">#设置永久布尔值</span></span><br><span class=\"line\">semanage boolean -l  -C    <span class=\"comment\">#仅列出本地修改的 SELinux 布尔值状态（与策略中默认值不同的任何设置）</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"对-SELinux-进行故障的排除\"><a href=\"#对-SELinux-进行故障的排除\" class=\"headerlink\" title=\"对 SELinux 进行故障的排除\"></a>对 SELinux 进行故障的排除</h6><p>1、在考试做任何调整之前，应了解到SELinux 禁止意图访问的这一做法也许非常正确。当Web 服务器尝试访问 /home 中的文件时，如果用户并未发布 Web 内容，则可能表明服务器遭入侵。如果已授权访问权限，则需要采取其他步骤来解决此问题。</p>\n<p>2、最常见的 SELinux 问题是使用不正确的文件上下文，此问题会在以下情况中发生：即，使用一个文件上下文在某个位置创建了文件，而该文件又被移至预期会使用其他上下文的地方。在大多数情况下，运行 restorecon 将会更正此问题。以这种方式更正问题对系统剩余部分的安全性有非常小的影响。</p>\n<p>3、对于严苛限制性访问的另一个补救措施可以通过调整布尔值。例如：ftpd_anon_write 布尔值控制匿名 FTP 用户能否上传文件。如果希望允许匿名 FTP 用户上传文件到服务器，则必须启用此布尔值。调整布尔值需格外谨慎，因为布尔值会对系统的安全性造成广泛影响。</p>\n<p>4、SELinux 策略可能存在阻止合法访问的漏洞。由于 SELinux 技术已经成熟，这种情况极少发生。</p>\n<h6 id=\"监控-SELinux-冲突\"><a href=\"#监控-SELinux-冲突\" class=\"headerlink\" title=\"监控 SELinux 冲突\"></a>监控 SELinux 冲突</h6><p>必须安装setroubleshoot-server 包，以便将 SELinux 消息发送到 /var/log/messages 。setroubleshoot-server 侦听 /var/log/audit/audit.log 中的审核消息，并发送简短摘要到 /var/log/messages 。该摘要包括 SELinux 冲突的唯一标识符 （ UUID ），可用于收集更多信息。 sealert -l UUID  可用于生成特定事件的报告。 sealert -a /var/log/audit/audit.log 用于生成该文件中的所有事件报告。</p>\n<p><img src=\"/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526892834926496.png\" alt=\"image.png\"></p>\n<p><img src=\"/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526892877639896.png\" alt=\"image.png\"></p>\n<p><img src=\"/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526892917350022.png\" alt=\"image.png\"></p>\n<p><img src=\"/2018/05/21/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526892939342968.png\" alt=\"image.png\"></p>\n<h6 id=\"TIPS：-1\"><a href=\"#TIPS：-1\" class=\"headerlink\" title=\"TIPS：\"></a>TIPS：</h6><p>“Raw Audit Messages”部分显示，目标文件 /var/www/html/file3 正是问题所在，同样，目标上下文 tcontext 似乎并不属于Web 服务器。使用 restorecon /var/www/html/file3 命令修复此文件上下文。如果还需要调整其它文件，restorecon 可递归地重置上下文：restorecon -R /var/www/</p>\n<p>1、查看 tail -f /var/log/messages  查看有sealert 的内容，确定事件 UUID </p>\n<p>2、运行给出的 sealert -l UUID 查看解决办法</p>\n<p>3、运行 2 中的命令给出信息的头部是建议解决方案</p>\n<p>4、查看 “Raw Audit Messages” 确定问题文件，给结合步骤 3 给出解决方案。</p>\n"},{"title":"RH134 第三章 使用VIM创建和编辑文本文件","url":"338.html","id":"338","date":"2018-05-08T03:07:04.000Z","_content":"\n当非特权用户在RHEL7 计算机上使用vi时，执行的命令将是vim。这是在shell 启动时通过/etc/profile.d/vim.sh 中设置的别名完成的。  \n\n对于 UID 小于或等于200的用户，没有设置这一别名。这些用户将执行vi，也就是vi兼容模式中的vim。这意思意味了典型vi中没有的功能将被禁用。在需要较新的功能时，建议始终执行vim 命令。而不要依赖不一定可用的别名。用户通常需要以root身份操作时尤其需要这么做。\n\n**三种不同版本的vim   \n**\n\nvim-minimal:仅提供vi功能和相关命令，此版本包括在RHEL7最小化安装里。\n\nvim-enhanced：此版本提供vim命令，提供表达式，高亮，文件类型插件，和拼写检查\n\nvim-X11：此版本提供gvim 图形化的vim.同时支持鼠标\n\n**vim 的三个主要模式：**\n\n| 功能 |模式\n| :--\n|命令模式|此模式用于文件导航，剪切和粘贴以及简单命令。 撤销，重做和其他操作也可以从此模式执行\n|插入模式|此模式用于正常文本编。替换模式是插入模式的一种变体，替换文本而不是插入文本。\n|执行模式|此模式用于保存，退出和打开文件，以及搜索和替换等更复杂的操作。从这种模式中，可以将程序的输出插入到当前文件中.配置 vim等等。 任何操作都有可能可能使用ex这个模式完成。\n\n打开文件后，vim将在命令模式中启动。将在屏幕左下角看到有关已打开文件信息（文件名、行数、字符数），并将在右下角看到当前的光标位置（行、字符）以及正在显示文件的哪个部分（ALL表示全部，Top表示文件前几行，Bot 表示文件底部），或者显示百分比来表示当前所处文件位置。最下方线条在vim术语中称为标尺。  \n\n要切换到插入模式，系统提供了可用的命令，且每个命令在键盘上均分配有一个不同的键\n\n|键|结果\n| :--\n|i|切换到插入模式，并在当前光标位置之前插入\n|a|切换到插入模式，并在当前光标位置之后插入\n|I|将光标移至当前行的开头位置，并切换到插入模式\n|A|将光标移到当前行的结尾位置，并切换到插入模式\n|R|从光标下的字符开始，切换到替换模式。处理替换模式时，不会插入文件，输入的每个字符均将替换当前文档中的字符。\n|o|在当前行的下方新打开一个行，并切换到插入模式。\n|O|在当前行的上方新打开一个行，并切换到插入模式。\n\n每次处于插入或替换模式时，标尺将会显示--INSERT-- 或 --REPLACE--。按Esc 即可返回命令模式。\n\nRHEL 随附的vi和vim 版本已经配置为在命令和插入模式中识别和使用常规光标键以及如PgUp和End等键，这并不是vi所有安装版本上的默认行为。事实上，之前版本的vi根本不识别光标键，而是只允许在命令模式中使用诸如hjkl的键来操作。  \n\n**vim光标操作**\n\n\n|键  |结果\n| :--\n|h|向左移动一个位置\n|l|向右移动一个位置\n|j|向下移动一下位置\n|k|向上移动一个位置\n|^|移至当前行首\n|$|移至当前行尾\n|gg|移至文件第一行\n|G|移至文件最后一行\n\n保存文件通过ex模式实现，在命令模式下按  :（冒号）进入 ex模式\n\n|键|结果\n| :--\n|:wq|保存并退出当前文件\n|: x  |保存当前文件（如果存在未保存的更改），然后退出\n|:w|保存当前文件并保留在编辑器中\n|:w <filename>|以其他文件名保存当前文件\n|:q|退出当前文件（仅在没有未保存更改的的情况下）\n|:q!|退出当前文件，忽略任何未保存更改，！表示强制\n|:3|跳到第3行\n\n高级移动命令，仅在命令模式中可用，所有移到命令可以通过键入数字来加上前缀，如5w,将光标移动5个单词，或者12j将光标向下移到12行。实际上，每个命令（包括切换到插入模式）都可通过实际命令前键入重复次数来重复执行一定的次数，在vim术语中，这称为计数。  \n\n|键|结果\n| :--\n|w|将光标移到下一单词的开头（w包含标点符号）\n|b|将光标移到上一单词的开头（b包含标点符号）\n|(|将光标移到当前或上一句子的开头\n|)|将光标移到下一句子的开头\n|{|将光标移到当前/上一段落的开头\n|}|将光标移到下一段落的开头\n\n替换文本，vim允许用户通过\"change\"命令替换大量（或少量）文件。\"change\"命令的使用方式为：按 c 键，后面加上光标移动；例如cw可以将当前光标位置更改到当前单词的末尾。要替换的文本被删除（放置在未命名寄存器中），vim 也会切换到插入模式。  \n\n按c 两下（cc）将开始以行范围的方式替换，即替换一整行（或者带上数字时替换多行）同样的操作也适用于删除（d）\n\n大多数移动命令可以带上i和a前缀，以选择inner 或a 版本的移动。例如ciw将替换整个当前单词，而不仅仅是从当前光标位置起，而caw则执行相同的功能，但包括周围任何空白区。\n\n要替换到行末为止，可以使用cS，但C可执行相同的功能。（同样适用于删除命令（D））\n\n要权替换光标处的字符，可按r再键入新的字符\n\n要改变光标处字符的大小写，或按 ~\n\n\n\n删除文本的操作方式与替换文本相同。用于删除文本的命令是d,而且对更改文本有效的所有相同移到也适用于删除，包括D可以删除光标位置到行末的内容。\n\n**复制和粘贴**  \n\nvim 用于描述复制和粘贴操作的术语与大多数人目前熟悉的稍有不同，复制操作也称为拖拉，而粘贴操作则叫做放置，这体现在分配给这些操作的键盘命令上：拖拉是y加上移到，而放置操作则通过p和P执行。\n\n拖拉操作遵循与替换和删除操作相同的通用方案：如用户可以选择键入要重复某一操作的次数，后面加上y，再加上一种移到。例如5yaw，将复制当前的单词，以及后面4个单词（共5个）.按yy将拖拉一整行，等等\n\n放置（粘贴）通过p和P命令执行；小写p将内容放置到当前光标位置的后面（如果粘贴是的是行范围数据，则放在当前行下面），而大写P则放置到当前光标位置的前面或者当前行上方。与所有其它命令一样，放置命令可以加上寄存器粘贴次数作为前缀。\n\n**多个寄存器**\n\nvim 不是仅提供一个供复制和粘贴 使用的剪贴板，而是提供26个命名寄存器，以及欠点特殊用途的寄存器。拥有多个寄存器可以让用户更加高效地很乖剪切和粘贴命令，而不必担心丢失数据，或者过多的移动光标。如果未指定要使用的寄存器，则将使用“未命名”寄存器。常规寄存器称为a到z,通过在命令的计数和实际命令之间放入\"registername来选择，例如：要复制当前行和后面2行到t寄存器中，用户可以使用3\"tyy\n\n要放置命名寄存器中的内容，只需要在放置命令之前加上\"registername，例如：\"sp将在光标位置后面放置s寄存器中的内容。\n\n每次使用命名寄存器时，未命名寄存器也会更新。\n\n删除和更改操作也可加上寄存器选择作为前缀。未指定寄存器时，将仅使用未命名寄存器。当使用寄存器的大写版本时，被剪切或拖拉的文本将附加到该寄存器，而不是覆盖它。\n\n**特殊寄存器**\n\n有10个数字编号的寄存器，分别为\"0 - \"9寄存器，\"0使用拥有最近拖拉文本的副本，而寄存器\"1则具有最近删除的文本的副本。当新的文本补更改或删除时，\"1的内容将移到\"2中，\"2的内容移动\"3中，以此类推。与命名寄存器不同，数字编号寄存器的内容不会在会话之间保存。\n\n**可视模式**\n\n在进入可视模式后（通过标尺--VISUAL--表示），任何光标移动将开始选择文本。可视模式中发出的任何更改、删除或拖拉命令不需要光标移动部分，而是对选定的文件起作用。\n\n可视模式有三个类别：基于字符（通过 v 启动）、基于行（通过 V 启动） 、基于块（通过 Ctrl+v 启动）。使用gvim时，也可通过鼠标选择文本。\n\n可视模式中发出的任何ex 命令也默认对选定的文本起作用。\n\n**搜索**\n\n在当前文档中搜索可能通过两种方式：按 / 键从光标处向前搜索，或者按 ？从当前光标位置向后搜索。进入搜索模式后，可以键入要搜索的正则表达式，然后按Enter 键跳到第一个匹配项。\n\n要搜索下一个或者上一个匹配项可分别按 n 和 N 键。\n\n奖励快捷方式：\\* 将立即向前搜索光标处的单词。\n\n**搜索和替换**\n\nvim 中的搜索和替换通过 ex 命令实施，其使用的语法与用户通过sed 搜索和替换时所用的相同，包括使用正则表达式进入搜索的功能：\n\nranges/pattern/string/flags\n\nrange 可以是行号（43）、行范围（1，7 表示1 - 7行）、搜索条件（/README\\\\.txt）、%(当前文档中的所有行；搜索和替换通常仅会对当前行操作)，或者'<,'>(当前的可视选择)。\n\n两个最常见的flaga 是 g （替换一行中多个位置上的pattern） 和 i  （使当前的搜索区分大小写）\n\n:%s/\\\\<cat\\\\>/god/gi     #搜索文档中每个位置的cat ，并替换成dog ，不区分大小写，但仅对完整的词语，而不是诸如：\"catalog\" 中的一部分。\n\n\n\n**撤消和恢复**\n\n为了允许人为的失误存在，vim配备了撤消/恢复机制。只要在命令模式中按u 即可撤消最近一个操作。如果撤消了过多操作，按 Ctrl + r 即可恢复最近一次撤消。\n\n奖励诀窍：从命令模式中按 . (句号 英文)将对当前恢复最近一个编辑操作。这可以用于对多个行轻松执行同一编辑操作。\n","source":"_posts/rh134-e7-ac-ac-e4-b8-89-e7-ab-a0-e4-bd-bf-e7-94-a8vim-e5-88-9b-e5-bb-ba-e5-92-8c-e7-bc-96-e8-be-91-e6-96-87-e6-9c-ac-e6-96-87-e4-bb-b6.md","raw":"---\ntitle: RH134 第三章 使用VIM创建和编辑文本文件\nurl: 338.html\nid: 338\ncategories:\n  - RHEL134\ndate: 2018-05-08 11:07:04\ntags:\n---\n\n当非特权用户在RHEL7 计算机上使用vi时，执行的命令将是vim。这是在shell 启动时通过/etc/profile.d/vim.sh 中设置的别名完成的。  \n\n对于 UID 小于或等于200的用户，没有设置这一别名。这些用户将执行vi，也就是vi兼容模式中的vim。这意思意味了典型vi中没有的功能将被禁用。在需要较新的功能时，建议始终执行vim 命令。而不要依赖不一定可用的别名。用户通常需要以root身份操作时尤其需要这么做。\n\n**三种不同版本的vim   \n**\n\nvim-minimal:仅提供vi功能和相关命令，此版本包括在RHEL7最小化安装里。\n\nvim-enhanced：此版本提供vim命令，提供表达式，高亮，文件类型插件，和拼写检查\n\nvim-X11：此版本提供gvim 图形化的vim.同时支持鼠标\n\n**vim 的三个主要模式：**\n\n| 功能 |模式\n| :--\n|命令模式|此模式用于文件导航，剪切和粘贴以及简单命令。 撤销，重做和其他操作也可以从此模式执行\n|插入模式|此模式用于正常文本编。替换模式是插入模式的一种变体，替换文本而不是插入文本。\n|执行模式|此模式用于保存，退出和打开文件，以及搜索和替换等更复杂的操作。从这种模式中，可以将程序的输出插入到当前文件中.配置 vim等等。 任何操作都有可能可能使用ex这个模式完成。\n\n打开文件后，vim将在命令模式中启动。将在屏幕左下角看到有关已打开文件信息（文件名、行数、字符数），并将在右下角看到当前的光标位置（行、字符）以及正在显示文件的哪个部分（ALL表示全部，Top表示文件前几行，Bot 表示文件底部），或者显示百分比来表示当前所处文件位置。最下方线条在vim术语中称为标尺。  \n\n要切换到插入模式，系统提供了可用的命令，且每个命令在键盘上均分配有一个不同的键\n\n|键|结果\n| :--\n|i|切换到插入模式，并在当前光标位置之前插入\n|a|切换到插入模式，并在当前光标位置之后插入\n|I|将光标移至当前行的开头位置，并切换到插入模式\n|A|将光标移到当前行的结尾位置，并切换到插入模式\n|R|从光标下的字符开始，切换到替换模式。处理替换模式时，不会插入文件，输入的每个字符均将替换当前文档中的字符。\n|o|在当前行的下方新打开一个行，并切换到插入模式。\n|O|在当前行的上方新打开一个行，并切换到插入模式。\n\n每次处于插入或替换模式时，标尺将会显示--INSERT-- 或 --REPLACE--。按Esc 即可返回命令模式。\n\nRHEL 随附的vi和vim 版本已经配置为在命令和插入模式中识别和使用常规光标键以及如PgUp和End等键，这并不是vi所有安装版本上的默认行为。事实上，之前版本的vi根本不识别光标键，而是只允许在命令模式中使用诸如hjkl的键来操作。  \n\n**vim光标操作**\n\n\n|键  |结果\n| :--\n|h|向左移动一个位置\n|l|向右移动一个位置\n|j|向下移动一下位置\n|k|向上移动一个位置\n|^|移至当前行首\n|$|移至当前行尾\n|gg|移至文件第一行\n|G|移至文件最后一行\n\n保存文件通过ex模式实现，在命令模式下按  :（冒号）进入 ex模式\n\n|键|结果\n| :--\n|:wq|保存并退出当前文件\n|: x  |保存当前文件（如果存在未保存的更改），然后退出\n|:w|保存当前文件并保留在编辑器中\n|:w <filename>|以其他文件名保存当前文件\n|:q|退出当前文件（仅在没有未保存更改的的情况下）\n|:q!|退出当前文件，忽略任何未保存更改，！表示强制\n|:3|跳到第3行\n\n高级移动命令，仅在命令模式中可用，所有移到命令可以通过键入数字来加上前缀，如5w,将光标移动5个单词，或者12j将光标向下移到12行。实际上，每个命令（包括切换到插入模式）都可通过实际命令前键入重复次数来重复执行一定的次数，在vim术语中，这称为计数。  \n\n|键|结果\n| :--\n|w|将光标移到下一单词的开头（w包含标点符号）\n|b|将光标移到上一单词的开头（b包含标点符号）\n|(|将光标移到当前或上一句子的开头\n|)|将光标移到下一句子的开头\n|{|将光标移到当前/上一段落的开头\n|}|将光标移到下一段落的开头\n\n替换文本，vim允许用户通过\"change\"命令替换大量（或少量）文件。\"change\"命令的使用方式为：按 c 键，后面加上光标移动；例如cw可以将当前光标位置更改到当前单词的末尾。要替换的文本被删除（放置在未命名寄存器中），vim 也会切换到插入模式。  \n\n按c 两下（cc）将开始以行范围的方式替换，即替换一整行（或者带上数字时替换多行）同样的操作也适用于删除（d）\n\n大多数移动命令可以带上i和a前缀，以选择inner 或a 版本的移动。例如ciw将替换整个当前单词，而不仅仅是从当前光标位置起，而caw则执行相同的功能，但包括周围任何空白区。\n\n要替换到行末为止，可以使用cS，但C可执行相同的功能。（同样适用于删除命令（D））\n\n要权替换光标处的字符，可按r再键入新的字符\n\n要改变光标处字符的大小写，或按 ~\n\n\n\n删除文本的操作方式与替换文本相同。用于删除文本的命令是d,而且对更改文本有效的所有相同移到也适用于删除，包括D可以删除光标位置到行末的内容。\n\n**复制和粘贴**  \n\nvim 用于描述复制和粘贴操作的术语与大多数人目前熟悉的稍有不同，复制操作也称为拖拉，而粘贴操作则叫做放置，这体现在分配给这些操作的键盘命令上：拖拉是y加上移到，而放置操作则通过p和P执行。\n\n拖拉操作遵循与替换和删除操作相同的通用方案：如用户可以选择键入要重复某一操作的次数，后面加上y，再加上一种移到。例如5yaw，将复制当前的单词，以及后面4个单词（共5个）.按yy将拖拉一整行，等等\n\n放置（粘贴）通过p和P命令执行；小写p将内容放置到当前光标位置的后面（如果粘贴是的是行范围数据，则放在当前行下面），而大写P则放置到当前光标位置的前面或者当前行上方。与所有其它命令一样，放置命令可以加上寄存器粘贴次数作为前缀。\n\n**多个寄存器**\n\nvim 不是仅提供一个供复制和粘贴 使用的剪贴板，而是提供26个命名寄存器，以及欠点特殊用途的寄存器。拥有多个寄存器可以让用户更加高效地很乖剪切和粘贴命令，而不必担心丢失数据，或者过多的移动光标。如果未指定要使用的寄存器，则将使用“未命名”寄存器。常规寄存器称为a到z,通过在命令的计数和实际命令之间放入\"registername来选择，例如：要复制当前行和后面2行到t寄存器中，用户可以使用3\"tyy\n\n要放置命名寄存器中的内容，只需要在放置命令之前加上\"registername，例如：\"sp将在光标位置后面放置s寄存器中的内容。\n\n每次使用命名寄存器时，未命名寄存器也会更新。\n\n删除和更改操作也可加上寄存器选择作为前缀。未指定寄存器时，将仅使用未命名寄存器。当使用寄存器的大写版本时，被剪切或拖拉的文本将附加到该寄存器，而不是覆盖它。\n\n**特殊寄存器**\n\n有10个数字编号的寄存器，分别为\"0 - \"9寄存器，\"0使用拥有最近拖拉文本的副本，而寄存器\"1则具有最近删除的文本的副本。当新的文本补更改或删除时，\"1的内容将移到\"2中，\"2的内容移动\"3中，以此类推。与命名寄存器不同，数字编号寄存器的内容不会在会话之间保存。\n\n**可视模式**\n\n在进入可视模式后（通过标尺--VISUAL--表示），任何光标移动将开始选择文本。可视模式中发出的任何更改、删除或拖拉命令不需要光标移动部分，而是对选定的文件起作用。\n\n可视模式有三个类别：基于字符（通过 v 启动）、基于行（通过 V 启动） 、基于块（通过 Ctrl+v 启动）。使用gvim时，也可通过鼠标选择文本。\n\n可视模式中发出的任何ex 命令也默认对选定的文本起作用。\n\n**搜索**\n\n在当前文档中搜索可能通过两种方式：按 / 键从光标处向前搜索，或者按 ？从当前光标位置向后搜索。进入搜索模式后，可以键入要搜索的正则表达式，然后按Enter 键跳到第一个匹配项。\n\n要搜索下一个或者上一个匹配项可分别按 n 和 N 键。\n\n奖励快捷方式：\\* 将立即向前搜索光标处的单词。\n\n**搜索和替换**\n\nvim 中的搜索和替换通过 ex 命令实施，其使用的语法与用户通过sed 搜索和替换时所用的相同，包括使用正则表达式进入搜索的功能：\n\nranges/pattern/string/flags\n\nrange 可以是行号（43）、行范围（1，7 表示1 - 7行）、搜索条件（/README\\\\.txt）、%(当前文档中的所有行；搜索和替换通常仅会对当前行操作)，或者'<,'>(当前的可视选择)。\n\n两个最常见的flaga 是 g （替换一行中多个位置上的pattern） 和 i  （使当前的搜索区分大小写）\n\n:%s/\\\\<cat\\\\>/god/gi     #搜索文档中每个位置的cat ，并替换成dog ，不区分大小写，但仅对完整的词语，而不是诸如：\"catalog\" 中的一部分。\n\n\n\n**撤消和恢复**\n\n为了允许人为的失误存在，vim配备了撤消/恢复机制。只要在命令模式中按u 即可撤消最近一个操作。如果撤消了过多操作，按 Ctrl + r 即可恢复最近一次撤消。\n\n奖励诀窍：从命令模式中按 . (句号 英文)将对当前恢复最近一个编辑操作。这可以用于对多个行轻松执行同一编辑操作。\n","slug":"rh134-e7-ac-ac-e4-b8-89-e7-ab-a0-e4-bd-bf-e7-94-a8vim-e5-88-9b-e5-bb-ba-e5-92-8c-e7-bc-96-e8-be-91-e6-96-87-e6-9c-ac-e6-96-87-e4-bb-b6","published":1,"updated":"2019-01-06T16:59:55.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqi1u001jlxkjm7khln5n","content":"<p>当非特权用户在RHEL7 计算机上使用vi时，执行的命令将是vim。这是在shell 启动时通过/etc/profile.d/vim.sh 中设置的别名完成的。  </p>\n<p>对于 UID 小于或等于200的用户，没有设置这一别名。这些用户将执行vi，也就是vi兼容模式中的vim。这意思意味了典型vi中没有的功能将被禁用。在需要较新的功能时，建议始终执行vim 命令。而不要依赖不一定可用的别名。用户通常需要以root身份操作时尤其需要这么做。</p>\n<p><strong>三种不同版本的vim   \n</strong></p>\n<p>vim-minimal:仅提供vi功能和相关命令，此版本包括在RHEL7最小化安装里。</p>\n<p>vim-enhanced：此版本提供vim命令，提供表达式，高亮，文件类型插件，和拼写检查</p>\n<p>vim-X11：此版本提供gvim 图形化的vim.同时支持鼠标</p>\n<p><strong>vim 的三个主要模式：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能</th>\n<th>模式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">命令模式</td>\n<td>此模式用于文件导航，剪切和粘贴以及简单命令。 撤销，重做和其他操作也可以从此模式执行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">插入模式</td>\n<td>此模式用于正常文本编。替换模式是插入模式的一种变体，替换文本而不是插入文本。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">执行模式</td>\n<td>此模式用于保存，退出和打开文件，以及搜索和替换等更复杂的操作。从这种模式中，可以将程序的输出插入到当前文件中.配置 vim等等。 任何操作都有可能可能使用ex这个模式完成。</td>\n</tr>\n</tbody>\n</table>\n<p>打开文件后，vim将在命令模式中启动。将在屏幕左下角看到有关已打开文件信息（文件名、行数、字符数），并将在右下角看到当前的光标位置（行、字符）以及正在显示文件的哪个部分（ALL表示全部，Top表示文件前几行，Bot 表示文件底部），或者显示百分比来表示当前所处文件位置。最下方线条在vim术语中称为标尺。  </p>\n<p>要切换到插入模式，系统提供了可用的命令，且每个命令在键盘上均分配有一个不同的键</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">键</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">i</td>\n<td>切换到插入模式，并在当前光标位置之前插入</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">a</td>\n<td>切换到插入模式，并在当前光标位置之后插入</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">I</td>\n<td>将光标移至当前行的开头位置，并切换到插入模式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">A</td>\n<td>将光标移到当前行的结尾位置，并切换到插入模式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">R</td>\n<td>从光标下的字符开始，切换到替换模式。处理替换模式时，不会插入文件，输入的每个字符均将替换当前文档中的字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">o</td>\n<td>在当前行的下方新打开一个行，并切换到插入模式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">O</td>\n<td>在当前行的上方新打开一个行，并切换到插入模式。</td>\n</tr>\n</tbody>\n</table>\n<p>每次处于插入或替换模式时，标尺将会显示–INSERT– 或 –REPLACE–。按Esc 即可返回命令模式。</p>\n<p>RHEL 随附的vi和vim 版本已经配置为在命令和插入模式中识别和使用常规光标键以及如PgUp和End等键，这并不是vi所有安装版本上的默认行为。事实上，之前版本的vi根本不识别光标键，而是只允许在命令模式中使用诸如hjkl的键来操作。  </p>\n<p><strong>vim光标操作</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">键</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">h</td>\n<td>向左移动一个位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">l</td>\n<td>向右移动一个位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">j</td>\n<td>向下移动一下位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">k</td>\n<td>向上移动一个位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">^</td>\n<td>移至当前行首</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$</td>\n<td>移至当前行尾</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gg</td>\n<td>移至文件第一行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">G</td>\n<td>移至文件最后一行</td>\n</tr>\n</tbody>\n</table>\n<p>保存文件通过ex模式实现，在命令模式下按  :（冒号）进入 ex模式</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">键</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">:wq</td>\n<td>保存并退出当前文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">: x</td>\n<td>保存当前文件（如果存在未保存的更改），然后退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:w</td>\n<td>保存当前文件并保留在编辑器中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:w <filename></filename></td>\n<td>以其他文件名保存当前文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:q</td>\n<td>退出当前文件（仅在没有未保存更改的的情况下）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:q!</td>\n<td>退出当前文件，忽略任何未保存更改，！表示强制</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:3</td>\n<td>跳到第3行</td>\n</tr>\n</tbody>\n</table>\n<p>高级移动命令，仅在命令模式中可用，所有移到命令可以通过键入数字来加上前缀，如5w,将光标移动5个单词，或者12j将光标向下移到12行。实际上，每个命令（包括切换到插入模式）都可通过实际命令前键入重复次数来重复执行一定的次数，在vim术语中，这称为计数。  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">键</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">w</td>\n<td>将光标移到下一单词的开头（w包含标点符号）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">b</td>\n<td>将光标移到上一单词的开头（b包含标点符号）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(</td>\n<td>将光标移到当前或上一句子的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">)</td>\n<td>将光标移到下一句子的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{</td>\n<td>将光标移到当前/上一段落的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">}</td>\n<td>将光标移到下一段落的开头</td>\n</tr>\n</tbody>\n</table>\n<p>替换文本，vim允许用户通过”change”命令替换大量（或少量）文件。”change”命令的使用方式为：按 c 键，后面加上光标移动；例如cw可以将当前光标位置更改到当前单词的末尾。要替换的文本被删除（放置在未命名寄存器中），vim 也会切换到插入模式。  </p>\n<p>按c 两下（cc）将开始以行范围的方式替换，即替换一整行（或者带上数字时替换多行）同样的操作也适用于删除（d）</p>\n<p>大多数移动命令可以带上i和a前缀，以选择inner 或a 版本的移动。例如ciw将替换整个当前单词，而不仅仅是从当前光标位置起，而caw则执行相同的功能，但包括周围任何空白区。</p>\n<p>要替换到行末为止，可以使用cS，但C可执行相同的功能。（同样适用于删除命令（D））</p>\n<p>要权替换光标处的字符，可按r再键入新的字符</p>\n<p>要改变光标处字符的大小写，或按 ~</p>\n<p>删除文本的操作方式与替换文本相同。用于删除文本的命令是d,而且对更改文本有效的所有相同移到也适用于删除，包括D可以删除光标位置到行末的内容。</p>\n<p><strong>复制和粘贴</strong>  </p>\n<p>vim 用于描述复制和粘贴操作的术语与大多数人目前熟悉的稍有不同，复制操作也称为拖拉，而粘贴操作则叫做放置，这体现在分配给这些操作的键盘命令上：拖拉是y加上移到，而放置操作则通过p和P执行。</p>\n<p>拖拉操作遵循与替换和删除操作相同的通用方案：如用户可以选择键入要重复某一操作的次数，后面加上y，再加上一种移到。例如5yaw，将复制当前的单词，以及后面4个单词（共5个）.按yy将拖拉一整行，等等</p>\n<p>放置（粘贴）通过p和P命令执行；小写p将内容放置到当前光标位置的后面（如果粘贴是的是行范围数据，则放在当前行下面），而大写P则放置到当前光标位置的前面或者当前行上方。与所有其它命令一样，放置命令可以加上寄存器粘贴次数作为前缀。</p>\n<p><strong>多个寄存器</strong></p>\n<p>vim 不是仅提供一个供复制和粘贴 使用的剪贴板，而是提供26个命名寄存器，以及欠点特殊用途的寄存器。拥有多个寄存器可以让用户更加高效地很乖剪切和粘贴命令，而不必担心丢失数据，或者过多的移动光标。如果未指定要使用的寄存器，则将使用“未命名”寄存器。常规寄存器称为a到z,通过在命令的计数和实际命令之间放入”registername来选择，例如：要复制当前行和后面2行到t寄存器中，用户可以使用3”tyy</p>\n<p>要放置命名寄存器中的内容，只需要在放置命令之前加上”registername，例如：”sp将在光标位置后面放置s寄存器中的内容。</p>\n<p>每次使用命名寄存器时，未命名寄存器也会更新。</p>\n<p>删除和更改操作也可加上寄存器选择作为前缀。未指定寄存器时，将仅使用未命名寄存器。当使用寄存器的大写版本时，被剪切或拖拉的文本将附加到该寄存器，而不是覆盖它。</p>\n<p><strong>特殊寄存器</strong></p>\n<p>有10个数字编号的寄存器，分别为”0 - “9寄存器，”0使用拥有最近拖拉文本的副本，而寄存器”1则具有最近删除的文本的副本。当新的文本补更改或删除时，”1的内容将移到”2中，”2的内容移动”3中，以此类推。与命名寄存器不同，数字编号寄存器的内容不会在会话之间保存。</p>\n<p><strong>可视模式</strong></p>\n<p>在进入可视模式后（通过标尺–VISUAL–表示），任何光标移动将开始选择文本。可视模式中发出的任何更改、删除或拖拉命令不需要光标移动部分，而是对选定的文件起作用。</p>\n<p>可视模式有三个类别：基于字符（通过 v 启动）、基于行（通过 V 启动） 、基于块（通过 Ctrl+v 启动）。使用gvim时，也可通过鼠标选择文本。</p>\n<p>可视模式中发出的任何ex 命令也默认对选定的文本起作用。</p>\n<p><strong>搜索</strong></p>\n<p>在当前文档中搜索可能通过两种方式：按 / 键从光标处向前搜索，或者按 ？从当前光标位置向后搜索。进入搜索模式后，可以键入要搜索的正则表达式，然后按Enter 键跳到第一个匹配项。</p>\n<p>要搜索下一个或者上一个匹配项可分别按 n 和 N 键。</p>\n<p>奖励快捷方式：* 将立即向前搜索光标处的单词。</p>\n<p><strong>搜索和替换</strong></p>\n<p>vim 中的搜索和替换通过 ex 命令实施，其使用的语法与用户通过sed 搜索和替换时所用的相同，包括使用正则表达式进入搜索的功能：</p>\n<p>ranges/pattern/string/flags</p>\n<p>range 可以是行号（43）、行范围（1，7 表示1 - 7行）、搜索条件（/README\\.txt）、%(当前文档中的所有行；搜索和替换通常仅会对当前行操作)，或者’&lt;,’&gt;(当前的可视选择)。</p>\n<p>两个最常见的flaga 是 g （替换一行中多个位置上的pattern） 和 i  （使当前的搜索区分大小写）</p>\n<p>:%s/\\&lt;cat\\&gt;/god/gi     #搜索文档中每个位置的cat ，并替换成dog ，不区分大小写，但仅对完整的词语，而不是诸如：”catalog” 中的一部分。</p>\n<p><strong>撤消和恢复</strong></p>\n<p>为了允许人为的失误存在，vim配备了撤消/恢复机制。只要在命令模式中按u 即可撤消最近一个操作。如果撤消了过多操作，按 Ctrl + r 即可恢复最近一次撤消。</p>\n<p>奖励诀窍：从命令模式中按 . (句号 英文)将对当前恢复最近一个编辑操作。这可以用于对多个行轻松执行同一编辑操作。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>当非特权用户在RHEL7 计算机上使用vi时，执行的命令将是vim。这是在shell 启动时通过/etc/profile.d/vim.sh 中设置的别名完成的。  </p>\n<p>对于 UID 小于或等于200的用户，没有设置这一别名。这些用户将执行vi，也就是vi兼容模式中的vim。这意思意味了典型vi中没有的功能将被禁用。在需要较新的功能时，建议始终执行vim 命令。而不要依赖不一定可用的别名。用户通常需要以root身份操作时尤其需要这么做。</p>\n<p><strong>三种不同版本的vim   \n</strong></p>\n<p>vim-minimal:仅提供vi功能和相关命令，此版本包括在RHEL7最小化安装里。</p>\n<p>vim-enhanced：此版本提供vim命令，提供表达式，高亮，文件类型插件，和拼写检查</p>\n<p>vim-X11：此版本提供gvim 图形化的vim.同时支持鼠标</p>\n<p><strong>vim 的三个主要模式：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能</th>\n<th>模式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">命令模式</td>\n<td>此模式用于文件导航，剪切和粘贴以及简单命令。 撤销，重做和其他操作也可以从此模式执行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">插入模式</td>\n<td>此模式用于正常文本编。替换模式是插入模式的一种变体，替换文本而不是插入文本。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">执行模式</td>\n<td>此模式用于保存，退出和打开文件，以及搜索和替换等更复杂的操作。从这种模式中，可以将程序的输出插入到当前文件中.配置 vim等等。 任何操作都有可能可能使用ex这个模式完成。</td>\n</tr>\n</tbody>\n</table>\n<p>打开文件后，vim将在命令模式中启动。将在屏幕左下角看到有关已打开文件信息（文件名、行数、字符数），并将在右下角看到当前的光标位置（行、字符）以及正在显示文件的哪个部分（ALL表示全部，Top表示文件前几行，Bot 表示文件底部），或者显示百分比来表示当前所处文件位置。最下方线条在vim术语中称为标尺。  </p>\n<p>要切换到插入模式，系统提供了可用的命令，且每个命令在键盘上均分配有一个不同的键</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">键</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">i</td>\n<td>切换到插入模式，并在当前光标位置之前插入</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">a</td>\n<td>切换到插入模式，并在当前光标位置之后插入</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">I</td>\n<td>将光标移至当前行的开头位置，并切换到插入模式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">A</td>\n<td>将光标移到当前行的结尾位置，并切换到插入模式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">R</td>\n<td>从光标下的字符开始，切换到替换模式。处理替换模式时，不会插入文件，输入的每个字符均将替换当前文档中的字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">o</td>\n<td>在当前行的下方新打开一个行，并切换到插入模式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">O</td>\n<td>在当前行的上方新打开一个行，并切换到插入模式。</td>\n</tr>\n</tbody>\n</table>\n<p>每次处于插入或替换模式时，标尺将会显示–INSERT– 或 –REPLACE–。按Esc 即可返回命令模式。</p>\n<p>RHEL 随附的vi和vim 版本已经配置为在命令和插入模式中识别和使用常规光标键以及如PgUp和End等键，这并不是vi所有安装版本上的默认行为。事实上，之前版本的vi根本不识别光标键，而是只允许在命令模式中使用诸如hjkl的键来操作。  </p>\n<p><strong>vim光标操作</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">键</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">h</td>\n<td>向左移动一个位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">l</td>\n<td>向右移动一个位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">j</td>\n<td>向下移动一下位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">k</td>\n<td>向上移动一个位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">^</td>\n<td>移至当前行首</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$</td>\n<td>移至当前行尾</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">gg</td>\n<td>移至文件第一行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">G</td>\n<td>移至文件最后一行</td>\n</tr>\n</tbody>\n</table>\n<p>保存文件通过ex模式实现，在命令模式下按  :（冒号）进入 ex模式</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">键</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">:wq</td>\n<td>保存并退出当前文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">: x</td>\n<td>保存当前文件（如果存在未保存的更改），然后退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:w</td>\n<td>保存当前文件并保留在编辑器中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:w <filename></filename></td>\n<td>以其他文件名保存当前文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:q</td>\n<td>退出当前文件（仅在没有未保存更改的的情况下）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:q!</td>\n<td>退出当前文件，忽略任何未保存更改，！表示强制</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:3</td>\n<td>跳到第3行</td>\n</tr>\n</tbody>\n</table>\n<p>高级移动命令，仅在命令模式中可用，所有移到命令可以通过键入数字来加上前缀，如5w,将光标移动5个单词，或者12j将光标向下移到12行。实际上，每个命令（包括切换到插入模式）都可通过实际命令前键入重复次数来重复执行一定的次数，在vim术语中，这称为计数。  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">键</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">w</td>\n<td>将光标移到下一单词的开头（w包含标点符号）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">b</td>\n<td>将光标移到上一单词的开头（b包含标点符号）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(</td>\n<td>将光标移到当前或上一句子的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">)</td>\n<td>将光标移到下一句子的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{</td>\n<td>将光标移到当前/上一段落的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">}</td>\n<td>将光标移到下一段落的开头</td>\n</tr>\n</tbody>\n</table>\n<p>替换文本，vim允许用户通过”change”命令替换大量（或少量）文件。”change”命令的使用方式为：按 c 键，后面加上光标移动；例如cw可以将当前光标位置更改到当前单词的末尾。要替换的文本被删除（放置在未命名寄存器中），vim 也会切换到插入模式。  </p>\n<p>按c 两下（cc）将开始以行范围的方式替换，即替换一整行（或者带上数字时替换多行）同样的操作也适用于删除（d）</p>\n<p>大多数移动命令可以带上i和a前缀，以选择inner 或a 版本的移动。例如ciw将替换整个当前单词，而不仅仅是从当前光标位置起，而caw则执行相同的功能，但包括周围任何空白区。</p>\n<p>要替换到行末为止，可以使用cS，但C可执行相同的功能。（同样适用于删除命令（D））</p>\n<p>要权替换光标处的字符，可按r再键入新的字符</p>\n<p>要改变光标处字符的大小写，或按 ~</p>\n<p>删除文本的操作方式与替换文本相同。用于删除文本的命令是d,而且对更改文本有效的所有相同移到也适用于删除，包括D可以删除光标位置到行末的内容。</p>\n<p><strong>复制和粘贴</strong>  </p>\n<p>vim 用于描述复制和粘贴操作的术语与大多数人目前熟悉的稍有不同，复制操作也称为拖拉，而粘贴操作则叫做放置，这体现在分配给这些操作的键盘命令上：拖拉是y加上移到，而放置操作则通过p和P执行。</p>\n<p>拖拉操作遵循与替换和删除操作相同的通用方案：如用户可以选择键入要重复某一操作的次数，后面加上y，再加上一种移到。例如5yaw，将复制当前的单词，以及后面4个单词（共5个）.按yy将拖拉一整行，等等</p>\n<p>放置（粘贴）通过p和P命令执行；小写p将内容放置到当前光标位置的后面（如果粘贴是的是行范围数据，则放在当前行下面），而大写P则放置到当前光标位置的前面或者当前行上方。与所有其它命令一样，放置命令可以加上寄存器粘贴次数作为前缀。</p>\n<p><strong>多个寄存器</strong></p>\n<p>vim 不是仅提供一个供复制和粘贴 使用的剪贴板，而是提供26个命名寄存器，以及欠点特殊用途的寄存器。拥有多个寄存器可以让用户更加高效地很乖剪切和粘贴命令，而不必担心丢失数据，或者过多的移动光标。如果未指定要使用的寄存器，则将使用“未命名”寄存器。常规寄存器称为a到z,通过在命令的计数和实际命令之间放入”registername来选择，例如：要复制当前行和后面2行到t寄存器中，用户可以使用3”tyy</p>\n<p>要放置命名寄存器中的内容，只需要在放置命令之前加上”registername，例如：”sp将在光标位置后面放置s寄存器中的内容。</p>\n<p>每次使用命名寄存器时，未命名寄存器也会更新。</p>\n<p>删除和更改操作也可加上寄存器选择作为前缀。未指定寄存器时，将仅使用未命名寄存器。当使用寄存器的大写版本时，被剪切或拖拉的文本将附加到该寄存器，而不是覆盖它。</p>\n<p><strong>特殊寄存器</strong></p>\n<p>有10个数字编号的寄存器，分别为”0 - “9寄存器，”0使用拥有最近拖拉文本的副本，而寄存器”1则具有最近删除的文本的副本。当新的文本补更改或删除时，”1的内容将移到”2中，”2的内容移动”3中，以此类推。与命名寄存器不同，数字编号寄存器的内容不会在会话之间保存。</p>\n<p><strong>可视模式</strong></p>\n<p>在进入可视模式后（通过标尺–VISUAL–表示），任何光标移动将开始选择文本。可视模式中发出的任何更改、删除或拖拉命令不需要光标移动部分，而是对选定的文件起作用。</p>\n<p>可视模式有三个类别：基于字符（通过 v 启动）、基于行（通过 V 启动） 、基于块（通过 Ctrl+v 启动）。使用gvim时，也可通过鼠标选择文本。</p>\n<p>可视模式中发出的任何ex 命令也默认对选定的文本起作用。</p>\n<p><strong>搜索</strong></p>\n<p>在当前文档中搜索可能通过两种方式：按 / 键从光标处向前搜索，或者按 ？从当前光标位置向后搜索。进入搜索模式后，可以键入要搜索的正则表达式，然后按Enter 键跳到第一个匹配项。</p>\n<p>要搜索下一个或者上一个匹配项可分别按 n 和 N 键。</p>\n<p>奖励快捷方式：* 将立即向前搜索光标处的单词。</p>\n<p><strong>搜索和替换</strong></p>\n<p>vim 中的搜索和替换通过 ex 命令实施，其使用的语法与用户通过sed 搜索和替换时所用的相同，包括使用正则表达式进入搜索的功能：</p>\n<p>ranges/pattern/string/flags</p>\n<p>range 可以是行号（43）、行范围（1，7 表示1 - 7行）、搜索条件（/README\\.txt）、%(当前文档中的所有行；搜索和替换通常仅会对当前行操作)，或者’&lt;,’&gt;(当前的可视选择)。</p>\n<p>两个最常见的flaga 是 g （替换一行中多个位置上的pattern） 和 i  （使当前的搜索区分大小写）</p>\n<p>:%s/\\&lt;cat\\&gt;/god/gi     #搜索文档中每个位置的cat ，并替换成dog ，不区分大小写，但仅对完整的词语，而不是诸如：”catalog” 中的一部分。</p>\n<p><strong>撤消和恢复</strong></p>\n<p>为了允许人为的失误存在，vim配备了撤消/恢复机制。只要在命令模式中按u 即可撤消最近一个操作。如果撤消了过多操作，按 Ctrl + r 即可恢复最近一次撤消。</p>\n<p>奖励诀窍：从命令模式中按 . (句号 英文)将对当前恢复最近一个编辑操作。这可以用于对多个行轻松执行同一编辑操作。</p>\n"},{"title":"RH134 第九章 向linux 系统添加磁盘、分区和文件系统","url":"399.html","id":"399","date":"2018-07-12T03:21:48.000Z","_content":"\n使用fdisk 在采用MBR 分区方案的磁盘上创建和删除磁盘分区  \n\n使用gdisk在采用 GPT 分区方案的磁盘上创建和删除磁盘分区\n\n使用mkfs 格式化带有文件系统的设备\n\n###### 磁盘分区\n\n硬盘分区可以将硬盘划分为多个逻辑存储单元，这些单元称为分区。通过将磁盘划分为多个分区，系统管理员可以使用不同的分区执行不同功能，例如：\n\n*   限制应用或用户的可用空间\n    \n*   允许从同一磁盘进行不同操作系统的多重启动\n    \n*   将操作系统和程序文件与用户文件分隔开。\n    \n*   创建用于操作系统虚拟内存交换的单独区域。\n    \n*   限制磁盘空间使用情况，提高诊断工具和备份映像的性能。\n    \n\n###### MBR 分区方案\n\nMBR 指定BIOS 如果对磁盘进行分区，最多支持4个主分区，在linux 上可以使用扩展分区和逻辑分区来创建最多15个分区。由于分区大小数据以32位值存储，最大磁盘和分区大小限制为 2 TiB  \n\n###### GPT 分区方案\n\n对于运行统一可扩展固件接口接口（UEFI）固件的系统，GPT 是在物理硬盘上布置上分区表的标准。GPT是UEFI 标准的一部分。GPT 默认情况下支持最多128个分区。GPT 使用 64 位值，支持最大 8 ZiB 。即80亿太字字的分区和磁盘。\n\n###### 注意：\n\nGTP 的 8 ZiB限制是基于512字节的块大小，随着硬盘驱动器供应商转为使用 4096 字节块，此限制将增加至64 ZiB.\n\n除解决 MBR 分区方案的限制以外，GPT 还可提供一些其他功能特性和优势。正如其名，GPT 使用128的GUID 来唯一识别每个磁盘和分区。与 MBR 存在单一故障点不同， GPT 提供分区表信息的冗余。主GPT 位于磁盘头部，而备份副本（次要GPT）位于磁盘尾部。此外 GPT 采用 CRC 校验和来检测 GPT 头和分区表中的错误与损坏。\n\n###### 使用fdisk 管理MBR 分区  \n\n创建 MBR 式磁盘分区涉及八个步骤：\n\n1、指定设备，以root身份运行\n\n![image.png](1531276497330227.png)\n\n2、请求一个新的主分区可扩展分区\n\n输入 n 以请求一个新分区，并指定该分区是主分区还是扩展分区。默认为主分区类型，超过4个分区可通过扩展分区来解决\n\n![image.png](1531276592930306.png)\n\n3、指定分区编号  \n\n用来作为磁盘上新分区的标识使用，默认值是未使用的最小分区编号\n\n![image.png](1531276722303229.png)\n\n4、指定新分区开始的第一个扇区  \n\n默认值为第一个可用扇区，一般不需要改\n\n![image.png](1531276804698343.png)\n\n5、指定新分区结束 的最后一个扇区\n\n默认值是与新分区相邻的可用且未分区扇区中的最后一个扇区。\n\n![image.png](1531276896690206.png)\n\n除末尾扇区编号以外，fdisk 还可以接受代表分区期望大小的数字，该数字以扇区数表示：\n\n![image.png](1531276914317730.png)\n\nfdisk 提供的最后一个，也是最为用户友好的输入选项，就是以单位 KB,MB,或GB 指定新分区的大小：\n\n![image.png](1531276934798991.png)\n\n输入分区的末尾边界后，fdisk 就会显示分区创建的确认信息。\n\n![image.png](1531276954842354.png)\n\n6、定义分区类型\n\n如果新创建的分区应具有 Linux 以外的类型，请输入 t 命令来更改分区类型。输入新分区类型的十六进制代码。如果需要，可使用 L 命令显示所有分区类型的十六进制代码表。正确设置分区类型非常重要，因为某些工具依靠它才能正常运行。例如，当 Linux 内核遇到类型为 0xfd（Linux RAID）分区时，它将尝试自动启动 RAID 卷。\n\n![image.png](1531276971677806.png)\n\n7、保存分区表更改\n\n发出 w 命令，以便将更改写入到磁盘分区表并退出 fdisk 程序。从而完成创建请求。  \n\n![image.png](1531276989994678.png)\n\n8、启动内核对新分区表的重新读取。\n\n运行partprobe 命令，并将磁盘设备名称作为参数，以强制重新读取其分区表。\n\n![image.png](1531277008909144.png)\n\n###### tips:\n\n仅当管理员发出 w 命令将所有分区表更改定稿到磁盘时，fdisk 程序才会将所有分区表编辑排队，并将这些编辑写入到磁盘。如果在退出交互式fdisk 会话之前未执行 w 命令，则所有请求都会被丢弃，而磁盘的分区表不变。此功能在向fdisk 发出错误命令时尤为实用，要放弃错误的命令并避免意想不到的后果。只需退出 fdisk 并且不保存分区表更改。\n\n删除 MBR 磁盘分区  \n\n使用 fdisk 从采用 MBR 分区的磁盘中删除分区需要到五个步骤：\n\n1、指定要删除分区的磁盘，执行 fdisk 命令，并指定磁盘设备名称作为参数\n\n2、确定要删除分区的编号，输入 p 以打印分区表\n\n3、请求删除分区，输入 d 命令启动分区删除，然后指定要删除的分区编号 \n\n4、保存分区表更改，发出 w 指令，将更改写入到分区表，从而完成分区表删除请求\n\n5、启动内核对分区表的重新读取，使用 partprobe 以磁盘名称为参数。 ps: partprobe /dev/sdb \n\n  \n\n* * *\n\n###### 使用 gdisk 管理gpt 分区\n\n对于采用 GPT 分区方案的磁盘，可使用 gdisk 分区编辑器管理分区。\n\n###### 警告：\n\n尽管已向 fdisk 添加了 GPT 的支持，但该支持仍被视为实验性质，因此应使用 gdisk 命令在采用 GPT 分区方案进行分区的磁盘上执行分区更改。\n\n  \n\n创建 GPT 磁盘分区需要八个步骤：\n\n1、指定要创建分区的设备，同 fdisk \n\n2、 请求新分区，同 fdisk \n\n3、指定分区编号 ，同 fdisk \n\n4、指定新分区开始的磁盘位置，同 fdisk ,支持指定大小（KB,MB,GB,TB,PB）的方式\n\n5、指定磁盘上新分区的最后一个扇区，同 fdisk \n\n6、定义分区类型，操作同 fdisk \n\n7、保存分区表\n\n8、重新加载分区\n\n删除 GPT 的磁盘分区表，同 fdisk 操作  \n\n###### 创建文件系统   \n\n创建块设备后，下一步是为其应用文件系统格式。文件系统将向块设备应用一种结构 ，这样就可以存储数据并从中检索数据。红帽企业 Linux 支持许多不同的文件系统类型，其中两种常见的类型是 xfs 和 ext4 。红帽企业 Linux 安装程序 anaconda 中默认使用 xfs .  \n\nmkfs 命令可用于为块设备应用文件系统。如果不指定类型，则将使用扩展类型二（ext2）文件系统，该类型在许多使用场合下并不可取。要指定文件类型，应使用 -t 。\n\n![image.png](1531296248918343.png)\n\n###### 挂载文件系统\n\n应用文件系统格式后，添加新文件系统的文件最后一步是将该文件系统连接到目录结构中。文件系统连接到目录层次结构中后，用户空间实用程序可以访问设备上的文件或在设备上写入文件。\n\n###### 手动挂载文件系统\n\n管理员可使用 mount 命令将设备手动连接到目录位置或挂载点，具体为指定设备和挂载点，以及可能需要的任何选项，从而自定义设备的行为。\n\nmount /dev/sdb1 /mnt\n\nmount 还可用于查看当前已挂载的文件系统、挂载点和选项\n\n![image.png](1531296936475764.png)\n\n手动挂载文件系统是验证已经格式化的设备是否可访问或是否按预期方式工作的一种理想方式。但是，当系统重新启动后，尽管文件系统仍然存在并且具有完整的数据，但它不会再次换挂载到目录树中。如果管理员希望永久挂载文件系统，则需要将该文件系统的一个列表添加到 /etc/fstab 。  \n\n###### 永久挂载文件系统\n\n通过将设备的列表添加到 /etc/fstab  文件中，管理员可心将设备配置为在系统启动后挂载到挂载点。\n\n/etc/fstab 是以空格分隔的文件，每行具有六个字段\n\n![image.png](1531297457952475.png)\n\n第一个字段是指定要使用的设备。示例中分别使用了 UUID 和设备文件两种方式来指定设备。UUID 存储在文件系统超级块中，并在文件系统创建时创建。\n\n###### tips:\n\n使用 UUID 更为可取，因为块设备标识符在特定情况下可能会发生变化，例如当云提供商更改虚拟机的基础存储层时。块设备的文件可能会变化，但UUID 会在设备的超级块中保持不变。\n\nblkid 命令可用于扫描连接到计算机的块设备，并报告已分配的 UUID 和文件系统格式等数据。\n\n![image.png](1531297827908462.png)\n\n第二个字段是设备应连接到目录层次结构中的挂载点。挂载点应已存在，如果不存在，可以使用 mkdir 创建挂载点。挂载点中最好不要有文件。\n\n第三个字段是包含已应用于块设备的文件系统类型。\n\n第四个字段是挂载时应该应用于设备以便自定义行为的选项列表。此字段是必须的，且有一组称为 defaults 的常用选项。其它选项记录在 mount man page 中。\n\n最后两个字段是转储标志和 fsck 顺序。转储标志与dump 命令配合使用，用于生成设备内容的备份。fsck 顺序字段确定在文件系统未完全卸载的情况下，是否应在启动时运行 fsck 。fsck 顺序的值指示当有多个文件系统需要检查时，应对这些文件系统运行 fsck 的顺序 。\n\n###### tips :  \n\n/etc/fstab 中存在错误的条目可能会导致计算机无法启动。为避免这种情况，管理员应卸载新文件系统，然后使用 mount -a （该命令将读取 /etc/fstab ）将该文件系统重新挂载到原位，以验证条目是否有效。如果 mount -a 命令返回错误，则应在重新启动计算机之前纠正错误。\n\n###### 管理交换空间\n\n交换空间是可与Linux  内核内存管理子系统配合使用的磁盘区域。交换空间用于通过保存不活动的内存页来补充系统RAM 。系统 RAM与交换空间组合在一起称为虚拟内存。\n\n当系统上的内存使用量超过定义的限制时，内核将梳理 RAM ，寻找已分配给进程但空闲的内存页。内核将空闲的内存页写入到交换区，并且重新分配 RAM 页面以代其他进程使用。如果某个程序需要访问已写入到磁盘的页面，则内核会找到另一个空闲的内存页，将其写入到磁盘，然后从交换区重新调用所需的页面。\n\n由于交换区位于磁盘上，所以与 RAM相经交换非常慢。尽管交换空间用于扩充系统 RAM ，但应仅可能将交换空间的使用保持在最低限度。\n\n创建交换空间，管理员需要执行三项任务：\n\n*   创建分区\n    \n*   将分区的类型设置为 82 Linux swap \n    \n*   对设备进行签名格式化\n    \n\n创建分区，使用工具 fdisk 创建所需大小的分区。\n\n![image.png](1531359731927864.png)\n\n![image.png](1531359756116868.png)\n\n###### 分配分区类型  \n\n交换分区创建后，建议为做法是将分区类型可系统 ID 更改为 82 Linux swap 。在过去，工具会根据分配类型来确定是否应激活设备，但现在情况已不再如此。即使实用程序不再使用分区类型，设备分区类型也可以全管理员快速确定该分区的用途。\n\n![image.png](1531359953672134.png)\n\n格式化设备， mkswap 命令向设备应用交换签名。与其他格式化工具不同， mkswap 在设备开关写入单个数据块，而将设备的其余部分保留为未格式化，从而使其可用于存储内存页。\n\n![image.png](1531359975493820.png)\n\n###### 激活交换空间\n\n管理员可以使用  swapon 命令激活已格式化交换空间。可以在设备上调用 swapon  ，否则 swapon -a 就将激活 /etc/fstab 文件中列出的所有交换空间。\n\n![image.png](1531360582174595.png)\n\n###### 永久激活交换空间  \n\n交换空间很可能需要在每次计算机启动时自动激活。为使计算机在每次启动时都激活交换空间，必需在 /etc/fstab 文件中进行配置。\n\n如果需要，管理员可以使用 swapoff 命令停用交换空间。只有当任何交换的数据都可以写入到其他活动的交换空间或写回内存中时， swapoff 才会成功。如果数据无法写入到其他位置，则 swapoff 会失败，并显示错误，而交换空间将仍保持活动。\n\n![image.png](1531360808313305.png)\n\n该示例使用UUID 作为第一个字段。 UUID 存储在设备上存储的交换签名中，并且是 mkswap 输出的一部份。如果 mkswap 输出已丢失，则可以使用 blkid 命令扫描系统并报告所有已连接的块设备。如果管理员不希望使用 UUID ，则第一个字段也可以使用原始设备名称。\n\n第二个字段通常为 mount point 保留。但是，由于交换设备无法通过目录结构访问，此字段是占位符值 swap \n\n第三个字段是文件系统类型。交换空间的文件系统类型为 swap \n\n第四个字段是选项，在上例中，使用了选项 defaults 。defaults 包括 挂载选项 auto, 即用于设备交换空间在启动时自动激活的选项。\n\n最后两个字段 是转储标志和 fsck 顺序。交换空间不需要备份，也不需要文件系统检查 。\n\n###### 注意：\n\n默认情况下会按顺序使用交换空间，即先使用第一个已激活交换空间，直到其空间已满，然后内核将开始使用第十个交换空间。使用 swapon -s 可显示交换空间的优先级。并可使用 pri= 挂载选项设备这些优先级。如果交换空间具有相同的优先级，则内核将循环写入到这些空间，而非写入单个交换空间直到其容量已满。\n\n  \n\n![image.png](1531365704503638.png)","source":"_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f.md","raw":"---\ntitle: RH134 第九章 向linux 系统添加磁盘、分区和文件系统\nurl: 399.html\nid: 399\ncategories:\n  - RHEL134\ndate: 2018-07-12 11:21:48\ntags:\n---\n\n使用fdisk 在采用MBR 分区方案的磁盘上创建和删除磁盘分区  \n\n使用gdisk在采用 GPT 分区方案的磁盘上创建和删除磁盘分区\n\n使用mkfs 格式化带有文件系统的设备\n\n###### 磁盘分区\n\n硬盘分区可以将硬盘划分为多个逻辑存储单元，这些单元称为分区。通过将磁盘划分为多个分区，系统管理员可以使用不同的分区执行不同功能，例如：\n\n*   限制应用或用户的可用空间\n    \n*   允许从同一磁盘进行不同操作系统的多重启动\n    \n*   将操作系统和程序文件与用户文件分隔开。\n    \n*   创建用于操作系统虚拟内存交换的单独区域。\n    \n*   限制磁盘空间使用情况，提高诊断工具和备份映像的性能。\n    \n\n###### MBR 分区方案\n\nMBR 指定BIOS 如果对磁盘进行分区，最多支持4个主分区，在linux 上可以使用扩展分区和逻辑分区来创建最多15个分区。由于分区大小数据以32位值存储，最大磁盘和分区大小限制为 2 TiB  \n\n###### GPT 分区方案\n\n对于运行统一可扩展固件接口接口（UEFI）固件的系统，GPT 是在物理硬盘上布置上分区表的标准。GPT是UEFI 标准的一部分。GPT 默认情况下支持最多128个分区。GPT 使用 64 位值，支持最大 8 ZiB 。即80亿太字字的分区和磁盘。\n\n###### 注意：\n\nGTP 的 8 ZiB限制是基于512字节的块大小，随着硬盘驱动器供应商转为使用 4096 字节块，此限制将增加至64 ZiB.\n\n除解决 MBR 分区方案的限制以外，GPT 还可提供一些其他功能特性和优势。正如其名，GPT 使用128的GUID 来唯一识别每个磁盘和分区。与 MBR 存在单一故障点不同， GPT 提供分区表信息的冗余。主GPT 位于磁盘头部，而备份副本（次要GPT）位于磁盘尾部。此外 GPT 采用 CRC 校验和来检测 GPT 头和分区表中的错误与损坏。\n\n###### 使用fdisk 管理MBR 分区  \n\n创建 MBR 式磁盘分区涉及八个步骤：\n\n1、指定设备，以root身份运行\n\n![image.png](1531276497330227.png)\n\n2、请求一个新的主分区可扩展分区\n\n输入 n 以请求一个新分区，并指定该分区是主分区还是扩展分区。默认为主分区类型，超过4个分区可通过扩展分区来解决\n\n![image.png](1531276592930306.png)\n\n3、指定分区编号  \n\n用来作为磁盘上新分区的标识使用，默认值是未使用的最小分区编号\n\n![image.png](1531276722303229.png)\n\n4、指定新分区开始的第一个扇区  \n\n默认值为第一个可用扇区，一般不需要改\n\n![image.png](1531276804698343.png)\n\n5、指定新分区结束 的最后一个扇区\n\n默认值是与新分区相邻的可用且未分区扇区中的最后一个扇区。\n\n![image.png](1531276896690206.png)\n\n除末尾扇区编号以外，fdisk 还可以接受代表分区期望大小的数字，该数字以扇区数表示：\n\n![image.png](1531276914317730.png)\n\nfdisk 提供的最后一个，也是最为用户友好的输入选项，就是以单位 KB,MB,或GB 指定新分区的大小：\n\n![image.png](1531276934798991.png)\n\n输入分区的末尾边界后，fdisk 就会显示分区创建的确认信息。\n\n![image.png](1531276954842354.png)\n\n6、定义分区类型\n\n如果新创建的分区应具有 Linux 以外的类型，请输入 t 命令来更改分区类型。输入新分区类型的十六进制代码。如果需要，可使用 L 命令显示所有分区类型的十六进制代码表。正确设置分区类型非常重要，因为某些工具依靠它才能正常运行。例如，当 Linux 内核遇到类型为 0xfd（Linux RAID）分区时，它将尝试自动启动 RAID 卷。\n\n![image.png](1531276971677806.png)\n\n7、保存分区表更改\n\n发出 w 命令，以便将更改写入到磁盘分区表并退出 fdisk 程序。从而完成创建请求。  \n\n![image.png](1531276989994678.png)\n\n8、启动内核对新分区表的重新读取。\n\n运行partprobe 命令，并将磁盘设备名称作为参数，以强制重新读取其分区表。\n\n![image.png](1531277008909144.png)\n\n###### tips:\n\n仅当管理员发出 w 命令将所有分区表更改定稿到磁盘时，fdisk 程序才会将所有分区表编辑排队，并将这些编辑写入到磁盘。如果在退出交互式fdisk 会话之前未执行 w 命令，则所有请求都会被丢弃，而磁盘的分区表不变。此功能在向fdisk 发出错误命令时尤为实用，要放弃错误的命令并避免意想不到的后果。只需退出 fdisk 并且不保存分区表更改。\n\n删除 MBR 磁盘分区  \n\n使用 fdisk 从采用 MBR 分区的磁盘中删除分区需要到五个步骤：\n\n1、指定要删除分区的磁盘，执行 fdisk 命令，并指定磁盘设备名称作为参数\n\n2、确定要删除分区的编号，输入 p 以打印分区表\n\n3、请求删除分区，输入 d 命令启动分区删除，然后指定要删除的分区编号 \n\n4、保存分区表更改，发出 w 指令，将更改写入到分区表，从而完成分区表删除请求\n\n5、启动内核对分区表的重新读取，使用 partprobe 以磁盘名称为参数。 ps: partprobe /dev/sdb \n\n  \n\n* * *\n\n###### 使用 gdisk 管理gpt 分区\n\n对于采用 GPT 分区方案的磁盘，可使用 gdisk 分区编辑器管理分区。\n\n###### 警告：\n\n尽管已向 fdisk 添加了 GPT 的支持，但该支持仍被视为实验性质，因此应使用 gdisk 命令在采用 GPT 分区方案进行分区的磁盘上执行分区更改。\n\n  \n\n创建 GPT 磁盘分区需要八个步骤：\n\n1、指定要创建分区的设备，同 fdisk \n\n2、 请求新分区，同 fdisk \n\n3、指定分区编号 ，同 fdisk \n\n4、指定新分区开始的磁盘位置，同 fdisk ,支持指定大小（KB,MB,GB,TB,PB）的方式\n\n5、指定磁盘上新分区的最后一个扇区，同 fdisk \n\n6、定义分区类型，操作同 fdisk \n\n7、保存分区表\n\n8、重新加载分区\n\n删除 GPT 的磁盘分区表，同 fdisk 操作  \n\n###### 创建文件系统   \n\n创建块设备后，下一步是为其应用文件系统格式。文件系统将向块设备应用一种结构 ，这样就可以存储数据并从中检索数据。红帽企业 Linux 支持许多不同的文件系统类型，其中两种常见的类型是 xfs 和 ext4 。红帽企业 Linux 安装程序 anaconda 中默认使用 xfs .  \n\nmkfs 命令可用于为块设备应用文件系统。如果不指定类型，则将使用扩展类型二（ext2）文件系统，该类型在许多使用场合下并不可取。要指定文件类型，应使用 -t 。\n\n![image.png](1531296248918343.png)\n\n###### 挂载文件系统\n\n应用文件系统格式后，添加新文件系统的文件最后一步是将该文件系统连接到目录结构中。文件系统连接到目录层次结构中后，用户空间实用程序可以访问设备上的文件或在设备上写入文件。\n\n###### 手动挂载文件系统\n\n管理员可使用 mount 命令将设备手动连接到目录位置或挂载点，具体为指定设备和挂载点，以及可能需要的任何选项，从而自定义设备的行为。\n\nmount /dev/sdb1 /mnt\n\nmount 还可用于查看当前已挂载的文件系统、挂载点和选项\n\n![image.png](1531296936475764.png)\n\n手动挂载文件系统是验证已经格式化的设备是否可访问或是否按预期方式工作的一种理想方式。但是，当系统重新启动后，尽管文件系统仍然存在并且具有完整的数据，但它不会再次换挂载到目录树中。如果管理员希望永久挂载文件系统，则需要将该文件系统的一个列表添加到 /etc/fstab 。  \n\n###### 永久挂载文件系统\n\n通过将设备的列表添加到 /etc/fstab  文件中，管理员可心将设备配置为在系统启动后挂载到挂载点。\n\n/etc/fstab 是以空格分隔的文件，每行具有六个字段\n\n![image.png](1531297457952475.png)\n\n第一个字段是指定要使用的设备。示例中分别使用了 UUID 和设备文件两种方式来指定设备。UUID 存储在文件系统超级块中，并在文件系统创建时创建。\n\n###### tips:\n\n使用 UUID 更为可取，因为块设备标识符在特定情况下可能会发生变化，例如当云提供商更改虚拟机的基础存储层时。块设备的文件可能会变化，但UUID 会在设备的超级块中保持不变。\n\nblkid 命令可用于扫描连接到计算机的块设备，并报告已分配的 UUID 和文件系统格式等数据。\n\n![image.png](1531297827908462.png)\n\n第二个字段是设备应连接到目录层次结构中的挂载点。挂载点应已存在，如果不存在，可以使用 mkdir 创建挂载点。挂载点中最好不要有文件。\n\n第三个字段是包含已应用于块设备的文件系统类型。\n\n第四个字段是挂载时应该应用于设备以便自定义行为的选项列表。此字段是必须的，且有一组称为 defaults 的常用选项。其它选项记录在 mount man page 中。\n\n最后两个字段是转储标志和 fsck 顺序。转储标志与dump 命令配合使用，用于生成设备内容的备份。fsck 顺序字段确定在文件系统未完全卸载的情况下，是否应在启动时运行 fsck 。fsck 顺序的值指示当有多个文件系统需要检查时，应对这些文件系统运行 fsck 的顺序 。\n\n###### tips :  \n\n/etc/fstab 中存在错误的条目可能会导致计算机无法启动。为避免这种情况，管理员应卸载新文件系统，然后使用 mount -a （该命令将读取 /etc/fstab ）将该文件系统重新挂载到原位，以验证条目是否有效。如果 mount -a 命令返回错误，则应在重新启动计算机之前纠正错误。\n\n###### 管理交换空间\n\n交换空间是可与Linux  内核内存管理子系统配合使用的磁盘区域。交换空间用于通过保存不活动的内存页来补充系统RAM 。系统 RAM与交换空间组合在一起称为虚拟内存。\n\n当系统上的内存使用量超过定义的限制时，内核将梳理 RAM ，寻找已分配给进程但空闲的内存页。内核将空闲的内存页写入到交换区，并且重新分配 RAM 页面以代其他进程使用。如果某个程序需要访问已写入到磁盘的页面，则内核会找到另一个空闲的内存页，将其写入到磁盘，然后从交换区重新调用所需的页面。\n\n由于交换区位于磁盘上，所以与 RAM相经交换非常慢。尽管交换空间用于扩充系统 RAM ，但应仅可能将交换空间的使用保持在最低限度。\n\n创建交换空间，管理员需要执行三项任务：\n\n*   创建分区\n    \n*   将分区的类型设置为 82 Linux swap \n    \n*   对设备进行签名格式化\n    \n\n创建分区，使用工具 fdisk 创建所需大小的分区。\n\n![image.png](1531359731927864.png)\n\n![image.png](1531359756116868.png)\n\n###### 分配分区类型  \n\n交换分区创建后，建议为做法是将分区类型可系统 ID 更改为 82 Linux swap 。在过去，工具会根据分配类型来确定是否应激活设备，但现在情况已不再如此。即使实用程序不再使用分区类型，设备分区类型也可以全管理员快速确定该分区的用途。\n\n![image.png](1531359953672134.png)\n\n格式化设备， mkswap 命令向设备应用交换签名。与其他格式化工具不同， mkswap 在设备开关写入单个数据块，而将设备的其余部分保留为未格式化，从而使其可用于存储内存页。\n\n![image.png](1531359975493820.png)\n\n###### 激活交换空间\n\n管理员可以使用  swapon 命令激活已格式化交换空间。可以在设备上调用 swapon  ，否则 swapon -a 就将激活 /etc/fstab 文件中列出的所有交换空间。\n\n![image.png](1531360582174595.png)\n\n###### 永久激活交换空间  \n\n交换空间很可能需要在每次计算机启动时自动激活。为使计算机在每次启动时都激活交换空间，必需在 /etc/fstab 文件中进行配置。\n\n如果需要，管理员可以使用 swapoff 命令停用交换空间。只有当任何交换的数据都可以写入到其他活动的交换空间或写回内存中时， swapoff 才会成功。如果数据无法写入到其他位置，则 swapoff 会失败，并显示错误，而交换空间将仍保持活动。\n\n![image.png](1531360808313305.png)\n\n该示例使用UUID 作为第一个字段。 UUID 存储在设备上存储的交换签名中，并且是 mkswap 输出的一部份。如果 mkswap 输出已丢失，则可以使用 blkid 命令扫描系统并报告所有已连接的块设备。如果管理员不希望使用 UUID ，则第一个字段也可以使用原始设备名称。\n\n第二个字段通常为 mount point 保留。但是，由于交换设备无法通过目录结构访问，此字段是占位符值 swap \n\n第三个字段是文件系统类型。交换空间的文件系统类型为 swap \n\n第四个字段是选项，在上例中，使用了选项 defaults 。defaults 包括 挂载选项 auto, 即用于设备交换空间在启动时自动激活的选项。\n\n最后两个字段 是转储标志和 fsck 顺序。交换空间不需要备份，也不需要文件系统检查 。\n\n###### 注意：\n\n默认情况下会按顺序使用交换空间，即先使用第一个已激活交换空间，直到其空间已满，然后内核将开始使用第十个交换空间。使用 swapon -s 可显示交换空间的优先级。并可使用 pri= 挂载选项设备这些优先级。如果交换空间具有相同的优先级，则内核将循环写入到这些空间，而非写入单个交换空间直到其容量已满。\n\n  \n\n![image.png](1531365704503638.png)","slug":"rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f","published":1,"updated":"2019-01-04T21:52:36.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqi1x001llxkjp60zqyni","content":"<p>使用fdisk 在采用MBR 分区方案的磁盘上创建和删除磁盘分区  </p>\n<p>使用gdisk在采用 GPT 分区方案的磁盘上创建和删除磁盘分区</p>\n<p>使用mkfs 格式化带有文件系统的设备</p>\n<h6 id=\"磁盘分区\"><a href=\"#磁盘分区\" class=\"headerlink\" title=\"磁盘分区\"></a>磁盘分区</h6><p>硬盘分区可以将硬盘划分为多个逻辑存储单元，这些单元称为分区。通过将磁盘划分为多个分区，系统管理员可以使用不同的分区执行不同功能，例如：</p>\n<ul>\n<li><p>限制应用或用户的可用空间</p>\n</li>\n<li><p>允许从同一磁盘进行不同操作系统的多重启动</p>\n</li>\n<li><p>将操作系统和程序文件与用户文件分隔开。</p>\n</li>\n<li><p>创建用于操作系统虚拟内存交换的单独区域。</p>\n</li>\n<li><p>限制磁盘空间使用情况，提高诊断工具和备份映像的性能。</p>\n</li>\n</ul>\n<h6 id=\"MBR-分区方案\"><a href=\"#MBR-分区方案\" class=\"headerlink\" title=\"MBR 分区方案\"></a>MBR 分区方案</h6><p>MBR 指定BIOS 如果对磁盘进行分区，最多支持4个主分区，在linux 上可以使用扩展分区和逻辑分区来创建最多15个分区。由于分区大小数据以32位值存储，最大磁盘和分区大小限制为 2 TiB  </p>\n<h6 id=\"GPT-分区方案\"><a href=\"#GPT-分区方案\" class=\"headerlink\" title=\"GPT 分区方案\"></a>GPT 分区方案</h6><p>对于运行统一可扩展固件接口接口（UEFI）固件的系统，GPT 是在物理硬盘上布置上分区表的标准。GPT是UEFI 标准的一部分。GPT 默认情况下支持最多128个分区。GPT 使用 64 位值，支持最大 8 ZiB 。即80亿太字字的分区和磁盘。</p>\n<h6 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h6><p>GTP 的 8 ZiB限制是基于512字节的块大小，随着硬盘驱动器供应商转为使用 4096 字节块，此限制将增加至64 ZiB.</p>\n<p>除解决 MBR 分区方案的限制以外，GPT 还可提供一些其他功能特性和优势。正如其名，GPT 使用128的GUID 来唯一识别每个磁盘和分区。与 MBR 存在单一故障点不同， GPT 提供分区表信息的冗余。主GPT 位于磁盘头部，而备份副本（次要GPT）位于磁盘尾部。此外 GPT 采用 CRC 校验和来检测 GPT 头和分区表中的错误与损坏。</p>\n<h6 id=\"使用fdisk-管理MBR-分区\"><a href=\"#使用fdisk-管理MBR-分区\" class=\"headerlink\" title=\"使用fdisk 管理MBR 分区\"></a>使用fdisk 管理MBR 分区</h6><p>创建 MBR 式磁盘分区涉及八个步骤：</p>\n<p>1、指定设备，以root身份运行</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276497330227.png\" alt=\"image.png\"></p>\n<p>2、请求一个新的主分区可扩展分区</p>\n<p>输入 n 以请求一个新分区，并指定该分区是主分区还是扩展分区。默认为主分区类型，超过4个分区可通过扩展分区来解决</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276592930306.png\" alt=\"image.png\"></p>\n<p>3、指定分区编号  </p>\n<p>用来作为磁盘上新分区的标识使用，默认值是未使用的最小分区编号</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276722303229.png\" alt=\"image.png\"></p>\n<p>4、指定新分区开始的第一个扇区  </p>\n<p>默认值为第一个可用扇区，一般不需要改</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276804698343.png\" alt=\"image.png\"></p>\n<p>5、指定新分区结束 的最后一个扇区</p>\n<p>默认值是与新分区相邻的可用且未分区扇区中的最后一个扇区。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276896690206.png\" alt=\"image.png\"></p>\n<p>除末尾扇区编号以外，fdisk 还可以接受代表分区期望大小的数字，该数字以扇区数表示：</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276914317730.png\" alt=\"image.png\"></p>\n<p>fdisk 提供的最后一个，也是最为用户友好的输入选项，就是以单位 KB,MB,或GB 指定新分区的大小：</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276934798991.png\" alt=\"image.png\"></p>\n<p>输入分区的末尾边界后，fdisk 就会显示分区创建的确认信息。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276954842354.png\" alt=\"image.png\"></p>\n<p>6、定义分区类型</p>\n<p>如果新创建的分区应具有 Linux 以外的类型，请输入 t 命令来更改分区类型。输入新分区类型的十六进制代码。如果需要，可使用 L 命令显示所有分区类型的十六进制代码表。正确设置分区类型非常重要，因为某些工具依靠它才能正常运行。例如，当 Linux 内核遇到类型为 0xfd（Linux RAID）分区时，它将尝试自动启动 RAID 卷。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276971677806.png\" alt=\"image.png\"></p>\n<p>7、保存分区表更改</p>\n<p>发出 w 命令，以便将更改写入到磁盘分区表并退出 fdisk 程序。从而完成创建请求。  </p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276989994678.png\" alt=\"image.png\"></p>\n<p>8、启动内核对新分区表的重新读取。</p>\n<p>运行partprobe 命令，并将磁盘设备名称作为参数，以强制重新读取其分区表。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531277008909144.png\" alt=\"image.png\"></p>\n<h6 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips:\"></a>tips:</h6><p>仅当管理员发出 w 命令将所有分区表更改定稿到磁盘时，fdisk 程序才会将所有分区表编辑排队，并将这些编辑写入到磁盘。如果在退出交互式fdisk 会话之前未执行 w 命令，则所有请求都会被丢弃，而磁盘的分区表不变。此功能在向fdisk 发出错误命令时尤为实用，要放弃错误的命令并避免意想不到的后果。只需退出 fdisk 并且不保存分区表更改。</p>\n<p>删除 MBR 磁盘分区  </p>\n<p>使用 fdisk 从采用 MBR 分区的磁盘中删除分区需要到五个步骤：</p>\n<p>1、指定要删除分区的磁盘，执行 fdisk 命令，并指定磁盘设备名称作为参数</p>\n<p>2、确定要删除分区的编号，输入 p 以打印分区表</p>\n<p>3、请求删除分区，输入 d 命令启动分区删除，然后指定要删除的分区编号 </p>\n<p>4、保存分区表更改，发出 w 指令，将更改写入到分区表，从而完成分区表删除请求</p>\n<p>5、启动内核对分区表的重新读取，使用 partprobe 以磁盘名称为参数。 ps: partprobe /dev/sdb </p>\n<hr>\n<h6 id=\"使用-gdisk-管理gpt-分区\"><a href=\"#使用-gdisk-管理gpt-分区\" class=\"headerlink\" title=\"使用 gdisk 管理gpt 分区\"></a>使用 gdisk 管理gpt 分区</h6><p>对于采用 GPT 分区方案的磁盘，可使用 gdisk 分区编辑器管理分区。</p>\n<h6 id=\"警告：\"><a href=\"#警告：\" class=\"headerlink\" title=\"警告：\"></a>警告：</h6><p>尽管已向 fdisk 添加了 GPT 的支持，但该支持仍被视为实验性质，因此应使用 gdisk 命令在采用 GPT 分区方案进行分区的磁盘上执行分区更改。</p>\n<p>创建 GPT 磁盘分区需要八个步骤：</p>\n<p>1、指定要创建分区的设备，同 fdisk </p>\n<p>2、 请求新分区，同 fdisk </p>\n<p>3、指定分区编号 ，同 fdisk </p>\n<p>4、指定新分区开始的磁盘位置，同 fdisk ,支持指定大小（KB,MB,GB,TB,PB）的方式</p>\n<p>5、指定磁盘上新分区的最后一个扇区，同 fdisk </p>\n<p>6、定义分区类型，操作同 fdisk </p>\n<p>7、保存分区表</p>\n<p>8、重新加载分区</p>\n<p>删除 GPT 的磁盘分区表，同 fdisk 操作  </p>\n<h6 id=\"创建文件系统\"><a href=\"#创建文件系统\" class=\"headerlink\" title=\"创建文件系统\"></a>创建文件系统</h6><p>创建块设备后，下一步是为其应用文件系统格式。文件系统将向块设备应用一种结构 ，这样就可以存储数据并从中检索数据。红帽企业 Linux 支持许多不同的文件系统类型，其中两种常见的类型是 xfs 和 ext4 。红帽企业 Linux 安装程序 anaconda 中默认使用 xfs .  </p>\n<p>mkfs 命令可用于为块设备应用文件系统。如果不指定类型，则将使用扩展类型二（ext2）文件系统，该类型在许多使用场合下并不可取。要指定文件类型，应使用 -t 。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531296248918343.png\" alt=\"image.png\"></p>\n<h6 id=\"挂载文件系统\"><a href=\"#挂载文件系统\" class=\"headerlink\" title=\"挂载文件系统\"></a>挂载文件系统</h6><p>应用文件系统格式后，添加新文件系统的文件最后一步是将该文件系统连接到目录结构中。文件系统连接到目录层次结构中后，用户空间实用程序可以访问设备上的文件或在设备上写入文件。</p>\n<h6 id=\"手动挂载文件系统\"><a href=\"#手动挂载文件系统\" class=\"headerlink\" title=\"手动挂载文件系统\"></a>手动挂载文件系统</h6><p>管理员可使用 mount 命令将设备手动连接到目录位置或挂载点，具体为指定设备和挂载点，以及可能需要的任何选项，从而自定义设备的行为。</p>\n<p>mount /dev/sdb1 /mnt</p>\n<p>mount 还可用于查看当前已挂载的文件系统、挂载点和选项</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531296936475764.png\" alt=\"image.png\"></p>\n<p>手动挂载文件系统是验证已经格式化的设备是否可访问或是否按预期方式工作的一种理想方式。但是，当系统重新启动后，尽管文件系统仍然存在并且具有完整的数据，但它不会再次换挂载到目录树中。如果管理员希望永久挂载文件系统，则需要将该文件系统的一个列表添加到 /etc/fstab 。  </p>\n<h6 id=\"永久挂载文件系统\"><a href=\"#永久挂载文件系统\" class=\"headerlink\" title=\"永久挂载文件系统\"></a>永久挂载文件系统</h6><p>通过将设备的列表添加到 /etc/fstab  文件中，管理员可心将设备配置为在系统启动后挂载到挂载点。</p>\n<p>/etc/fstab 是以空格分隔的文件，每行具有六个字段</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531297457952475.png\" alt=\"image.png\"></p>\n<p>第一个字段是指定要使用的设备。示例中分别使用了 UUID 和设备文件两种方式来指定设备。UUID 存储在文件系统超级块中，并在文件系统创建时创建。</p>\n<h6 id=\"tips-1\"><a href=\"#tips-1\" class=\"headerlink\" title=\"tips:\"></a>tips:</h6><p>使用 UUID 更为可取，因为块设备标识符在特定情况下可能会发生变化，例如当云提供商更改虚拟机的基础存储层时。块设备的文件可能会变化，但UUID 会在设备的超级块中保持不变。</p>\n<p>blkid 命令可用于扫描连接到计算机的块设备，并报告已分配的 UUID 和文件系统格式等数据。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531297827908462.png\" alt=\"image.png\"></p>\n<p>第二个字段是设备应连接到目录层次结构中的挂载点。挂载点应已存在，如果不存在，可以使用 mkdir 创建挂载点。挂载点中最好不要有文件。</p>\n<p>第三个字段是包含已应用于块设备的文件系统类型。</p>\n<p>第四个字段是挂载时应该应用于设备以便自定义行为的选项列表。此字段是必须的，且有一组称为 defaults 的常用选项。其它选项记录在 mount man page 中。</p>\n<p>最后两个字段是转储标志和 fsck 顺序。转储标志与dump 命令配合使用，用于生成设备内容的备份。fsck 顺序字段确定在文件系统未完全卸载的情况下，是否应在启动时运行 fsck 。fsck 顺序的值指示当有多个文件系统需要检查时，应对这些文件系统运行 fsck 的顺序 。</p>\n<h6 id=\"tips-2\"><a href=\"#tips-2\" class=\"headerlink\" title=\"tips :\"></a>tips :</h6><p>/etc/fstab 中存在错误的条目可能会导致计算机无法启动。为避免这种情况，管理员应卸载新文件系统，然后使用 mount -a （该命令将读取 /etc/fstab ）将该文件系统重新挂载到原位，以验证条目是否有效。如果 mount -a 命令返回错误，则应在重新启动计算机之前纠正错误。</p>\n<h6 id=\"管理交换空间\"><a href=\"#管理交换空间\" class=\"headerlink\" title=\"管理交换空间\"></a>管理交换空间</h6><p>交换空间是可与Linux  内核内存管理子系统配合使用的磁盘区域。交换空间用于通过保存不活动的内存页来补充系统RAM 。系统 RAM与交换空间组合在一起称为虚拟内存。</p>\n<p>当系统上的内存使用量超过定义的限制时，内核将梳理 RAM ，寻找已分配给进程但空闲的内存页。内核将空闲的内存页写入到交换区，并且重新分配 RAM 页面以代其他进程使用。如果某个程序需要访问已写入到磁盘的页面，则内核会找到另一个空闲的内存页，将其写入到磁盘，然后从交换区重新调用所需的页面。</p>\n<p>由于交换区位于磁盘上，所以与 RAM相经交换非常慢。尽管交换空间用于扩充系统 RAM ，但应仅可能将交换空间的使用保持在最低限度。</p>\n<p>创建交换空间，管理员需要执行三项任务：</p>\n<ul>\n<li><p>创建分区</p>\n</li>\n<li><p>将分区的类型设置为 82 Linux swap </p>\n</li>\n<li><p>对设备进行签名格式化</p>\n</li>\n</ul>\n<p>创建分区，使用工具 fdisk 创建所需大小的分区。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531359731927864.png\" alt=\"image.png\"></p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531359756116868.png\" alt=\"image.png\"></p>\n<h6 id=\"分配分区类型\"><a href=\"#分配分区类型\" class=\"headerlink\" title=\"分配分区类型\"></a>分配分区类型</h6><p>交换分区创建后，建议为做法是将分区类型可系统 ID 更改为 82 Linux swap 。在过去，工具会根据分配类型来确定是否应激活设备，但现在情况已不再如此。即使实用程序不再使用分区类型，设备分区类型也可以全管理员快速确定该分区的用途。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531359953672134.png\" alt=\"image.png\"></p>\n<p>格式化设备， mkswap 命令向设备应用交换签名。与其他格式化工具不同， mkswap 在设备开关写入单个数据块，而将设备的其余部分保留为未格式化，从而使其可用于存储内存页。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531359975493820.png\" alt=\"image.png\"></p>\n<h6 id=\"激活交换空间\"><a href=\"#激活交换空间\" class=\"headerlink\" title=\"激活交换空间\"></a>激活交换空间</h6><p>管理员可以使用  swapon 命令激活已格式化交换空间。可以在设备上调用 swapon  ，否则 swapon -a 就将激活 /etc/fstab 文件中列出的所有交换空间。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531360582174595.png\" alt=\"image.png\"></p>\n<h6 id=\"永久激活交换空间\"><a href=\"#永久激活交换空间\" class=\"headerlink\" title=\"永久激活交换空间\"></a>永久激活交换空间</h6><p>交换空间很可能需要在每次计算机启动时自动激活。为使计算机在每次启动时都激活交换空间，必需在 /etc/fstab 文件中进行配置。</p>\n<p>如果需要，管理员可以使用 swapoff 命令停用交换空间。只有当任何交换的数据都可以写入到其他活动的交换空间或写回内存中时， swapoff 才会成功。如果数据无法写入到其他位置，则 swapoff 会失败，并显示错误，而交换空间将仍保持活动。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531360808313305.png\" alt=\"image.png\"></p>\n<p>该示例使用UUID 作为第一个字段。 UUID 存储在设备上存储的交换签名中，并且是 mkswap 输出的一部份。如果 mkswap 输出已丢失，则可以使用 blkid 命令扫描系统并报告所有已连接的块设备。如果管理员不希望使用 UUID ，则第一个字段也可以使用原始设备名称。</p>\n<p>第二个字段通常为 mount point 保留。但是，由于交换设备无法通过目录结构访问，此字段是占位符值 swap </p>\n<p>第三个字段是文件系统类型。交换空间的文件系统类型为 swap </p>\n<p>第四个字段是选项，在上例中，使用了选项 defaults 。defaults 包括 挂载选项 auto, 即用于设备交换空间在启动时自动激活的选项。</p>\n<p>最后两个字段 是转储标志和 fsck 顺序。交换空间不需要备份，也不需要文件系统检查 。</p>\n<h6 id=\"注意：-1\"><a href=\"#注意：-1\" class=\"headerlink\" title=\"注意：\"></a>注意：</h6><p>默认情况下会按顺序使用交换空间，即先使用第一个已激活交换空间，直到其空间已满，然后内核将开始使用第十个交换空间。使用 swapon -s 可显示交换空间的优先级。并可使用 pri= 挂载选项设备这些优先级。如果交换空间具有相同的优先级，则内核将循环写入到这些空间，而非写入单个交换空间直到其容量已满。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531365704503638.png\" alt=\"image.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用fdisk 在采用MBR 分区方案的磁盘上创建和删除磁盘分区  </p>\n<p>使用gdisk在采用 GPT 分区方案的磁盘上创建和删除磁盘分区</p>\n<p>使用mkfs 格式化带有文件系统的设备</p>\n<h6 id=\"磁盘分区\"><a href=\"#磁盘分区\" class=\"headerlink\" title=\"磁盘分区\"></a>磁盘分区</h6><p>硬盘分区可以将硬盘划分为多个逻辑存储单元，这些单元称为分区。通过将磁盘划分为多个分区，系统管理员可以使用不同的分区执行不同功能，例如：</p>\n<ul>\n<li><p>限制应用或用户的可用空间</p>\n</li>\n<li><p>允许从同一磁盘进行不同操作系统的多重启动</p>\n</li>\n<li><p>将操作系统和程序文件与用户文件分隔开。</p>\n</li>\n<li><p>创建用于操作系统虚拟内存交换的单独区域。</p>\n</li>\n<li><p>限制磁盘空间使用情况，提高诊断工具和备份映像的性能。</p>\n</li>\n</ul>\n<h6 id=\"MBR-分区方案\"><a href=\"#MBR-分区方案\" class=\"headerlink\" title=\"MBR 分区方案\"></a>MBR 分区方案</h6><p>MBR 指定BIOS 如果对磁盘进行分区，最多支持4个主分区，在linux 上可以使用扩展分区和逻辑分区来创建最多15个分区。由于分区大小数据以32位值存储，最大磁盘和分区大小限制为 2 TiB  </p>\n<h6 id=\"GPT-分区方案\"><a href=\"#GPT-分区方案\" class=\"headerlink\" title=\"GPT 分区方案\"></a>GPT 分区方案</h6><p>对于运行统一可扩展固件接口接口（UEFI）固件的系统，GPT 是在物理硬盘上布置上分区表的标准。GPT是UEFI 标准的一部分。GPT 默认情况下支持最多128个分区。GPT 使用 64 位值，支持最大 8 ZiB 。即80亿太字字的分区和磁盘。</p>\n<h6 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h6><p>GTP 的 8 ZiB限制是基于512字节的块大小，随着硬盘驱动器供应商转为使用 4096 字节块，此限制将增加至64 ZiB.</p>\n<p>除解决 MBR 分区方案的限制以外，GPT 还可提供一些其他功能特性和优势。正如其名，GPT 使用128的GUID 来唯一识别每个磁盘和分区。与 MBR 存在单一故障点不同， GPT 提供分区表信息的冗余。主GPT 位于磁盘头部，而备份副本（次要GPT）位于磁盘尾部。此外 GPT 采用 CRC 校验和来检测 GPT 头和分区表中的错误与损坏。</p>\n<h6 id=\"使用fdisk-管理MBR-分区\"><a href=\"#使用fdisk-管理MBR-分区\" class=\"headerlink\" title=\"使用fdisk 管理MBR 分区\"></a>使用fdisk 管理MBR 分区</h6><p>创建 MBR 式磁盘分区涉及八个步骤：</p>\n<p>1、指定设备，以root身份运行</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276497330227.png\" alt=\"image.png\"></p>\n<p>2、请求一个新的主分区可扩展分区</p>\n<p>输入 n 以请求一个新分区，并指定该分区是主分区还是扩展分区。默认为主分区类型，超过4个分区可通过扩展分区来解决</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276592930306.png\" alt=\"image.png\"></p>\n<p>3、指定分区编号  </p>\n<p>用来作为磁盘上新分区的标识使用，默认值是未使用的最小分区编号</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276722303229.png\" alt=\"image.png\"></p>\n<p>4、指定新分区开始的第一个扇区  </p>\n<p>默认值为第一个可用扇区，一般不需要改</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276804698343.png\" alt=\"image.png\"></p>\n<p>5、指定新分区结束 的最后一个扇区</p>\n<p>默认值是与新分区相邻的可用且未分区扇区中的最后一个扇区。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276896690206.png\" alt=\"image.png\"></p>\n<p>除末尾扇区编号以外，fdisk 还可以接受代表分区期望大小的数字，该数字以扇区数表示：</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276914317730.png\" alt=\"image.png\"></p>\n<p>fdisk 提供的最后一个，也是最为用户友好的输入选项，就是以单位 KB,MB,或GB 指定新分区的大小：</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276934798991.png\" alt=\"image.png\"></p>\n<p>输入分区的末尾边界后，fdisk 就会显示分区创建的确认信息。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276954842354.png\" alt=\"image.png\"></p>\n<p>6、定义分区类型</p>\n<p>如果新创建的分区应具有 Linux 以外的类型，请输入 t 命令来更改分区类型。输入新分区类型的十六进制代码。如果需要，可使用 L 命令显示所有分区类型的十六进制代码表。正确设置分区类型非常重要，因为某些工具依靠它才能正常运行。例如，当 Linux 内核遇到类型为 0xfd（Linux RAID）分区时，它将尝试自动启动 RAID 卷。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276971677806.png\" alt=\"image.png\"></p>\n<p>7、保存分区表更改</p>\n<p>发出 w 命令，以便将更改写入到磁盘分区表并退出 fdisk 程序。从而完成创建请求。  </p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276989994678.png\" alt=\"image.png\"></p>\n<p>8、启动内核对新分区表的重新读取。</p>\n<p>运行partprobe 命令，并将磁盘设备名称作为参数，以强制重新读取其分区表。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531277008909144.png\" alt=\"image.png\"></p>\n<h6 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips:\"></a>tips:</h6><p>仅当管理员发出 w 命令将所有分区表更改定稿到磁盘时，fdisk 程序才会将所有分区表编辑排队，并将这些编辑写入到磁盘。如果在退出交互式fdisk 会话之前未执行 w 命令，则所有请求都会被丢弃，而磁盘的分区表不变。此功能在向fdisk 发出错误命令时尤为实用，要放弃错误的命令并避免意想不到的后果。只需退出 fdisk 并且不保存分区表更改。</p>\n<p>删除 MBR 磁盘分区  </p>\n<p>使用 fdisk 从采用 MBR 分区的磁盘中删除分区需要到五个步骤：</p>\n<p>1、指定要删除分区的磁盘，执行 fdisk 命令，并指定磁盘设备名称作为参数</p>\n<p>2、确定要删除分区的编号，输入 p 以打印分区表</p>\n<p>3、请求删除分区，输入 d 命令启动分区删除，然后指定要删除的分区编号 </p>\n<p>4、保存分区表更改，发出 w 指令，将更改写入到分区表，从而完成分区表删除请求</p>\n<p>5、启动内核对分区表的重新读取，使用 partprobe 以磁盘名称为参数。 ps: partprobe /dev/sdb </p>\n<hr>\n<h6 id=\"使用-gdisk-管理gpt-分区\"><a href=\"#使用-gdisk-管理gpt-分区\" class=\"headerlink\" title=\"使用 gdisk 管理gpt 分区\"></a>使用 gdisk 管理gpt 分区</h6><p>对于采用 GPT 分区方案的磁盘，可使用 gdisk 分区编辑器管理分区。</p>\n<h6 id=\"警告：\"><a href=\"#警告：\" class=\"headerlink\" title=\"警告：\"></a>警告：</h6><p>尽管已向 fdisk 添加了 GPT 的支持，但该支持仍被视为实验性质，因此应使用 gdisk 命令在采用 GPT 分区方案进行分区的磁盘上执行分区更改。</p>\n<p>创建 GPT 磁盘分区需要八个步骤：</p>\n<p>1、指定要创建分区的设备，同 fdisk </p>\n<p>2、 请求新分区，同 fdisk </p>\n<p>3、指定分区编号 ，同 fdisk </p>\n<p>4、指定新分区开始的磁盘位置，同 fdisk ,支持指定大小（KB,MB,GB,TB,PB）的方式</p>\n<p>5、指定磁盘上新分区的最后一个扇区，同 fdisk </p>\n<p>6、定义分区类型，操作同 fdisk </p>\n<p>7、保存分区表</p>\n<p>8、重新加载分区</p>\n<p>删除 GPT 的磁盘分区表，同 fdisk 操作  </p>\n<h6 id=\"创建文件系统\"><a href=\"#创建文件系统\" class=\"headerlink\" title=\"创建文件系统\"></a>创建文件系统</h6><p>创建块设备后，下一步是为其应用文件系统格式。文件系统将向块设备应用一种结构 ，这样就可以存储数据并从中检索数据。红帽企业 Linux 支持许多不同的文件系统类型，其中两种常见的类型是 xfs 和 ext4 。红帽企业 Linux 安装程序 anaconda 中默认使用 xfs .  </p>\n<p>mkfs 命令可用于为块设备应用文件系统。如果不指定类型，则将使用扩展类型二（ext2）文件系统，该类型在许多使用场合下并不可取。要指定文件类型，应使用 -t 。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531296248918343.png\" alt=\"image.png\"></p>\n<h6 id=\"挂载文件系统\"><a href=\"#挂载文件系统\" class=\"headerlink\" title=\"挂载文件系统\"></a>挂载文件系统</h6><p>应用文件系统格式后，添加新文件系统的文件最后一步是将该文件系统连接到目录结构中。文件系统连接到目录层次结构中后，用户空间实用程序可以访问设备上的文件或在设备上写入文件。</p>\n<h6 id=\"手动挂载文件系统\"><a href=\"#手动挂载文件系统\" class=\"headerlink\" title=\"手动挂载文件系统\"></a>手动挂载文件系统</h6><p>管理员可使用 mount 命令将设备手动连接到目录位置或挂载点，具体为指定设备和挂载点，以及可能需要的任何选项，从而自定义设备的行为。</p>\n<p>mount /dev/sdb1 /mnt</p>\n<p>mount 还可用于查看当前已挂载的文件系统、挂载点和选项</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531296936475764.png\" alt=\"image.png\"></p>\n<p>手动挂载文件系统是验证已经格式化的设备是否可访问或是否按预期方式工作的一种理想方式。但是，当系统重新启动后，尽管文件系统仍然存在并且具有完整的数据，但它不会再次换挂载到目录树中。如果管理员希望永久挂载文件系统，则需要将该文件系统的一个列表添加到 /etc/fstab 。  </p>\n<h6 id=\"永久挂载文件系统\"><a href=\"#永久挂载文件系统\" class=\"headerlink\" title=\"永久挂载文件系统\"></a>永久挂载文件系统</h6><p>通过将设备的列表添加到 /etc/fstab  文件中，管理员可心将设备配置为在系统启动后挂载到挂载点。</p>\n<p>/etc/fstab 是以空格分隔的文件，每行具有六个字段</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531297457952475.png\" alt=\"image.png\"></p>\n<p>第一个字段是指定要使用的设备。示例中分别使用了 UUID 和设备文件两种方式来指定设备。UUID 存储在文件系统超级块中，并在文件系统创建时创建。</p>\n<h6 id=\"tips-1\"><a href=\"#tips-1\" class=\"headerlink\" title=\"tips:\"></a>tips:</h6><p>使用 UUID 更为可取，因为块设备标识符在特定情况下可能会发生变化，例如当云提供商更改虚拟机的基础存储层时。块设备的文件可能会变化，但UUID 会在设备的超级块中保持不变。</p>\n<p>blkid 命令可用于扫描连接到计算机的块设备，并报告已分配的 UUID 和文件系统格式等数据。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531297827908462.png\" alt=\"image.png\"></p>\n<p>第二个字段是设备应连接到目录层次结构中的挂载点。挂载点应已存在，如果不存在，可以使用 mkdir 创建挂载点。挂载点中最好不要有文件。</p>\n<p>第三个字段是包含已应用于块设备的文件系统类型。</p>\n<p>第四个字段是挂载时应该应用于设备以便自定义行为的选项列表。此字段是必须的，且有一组称为 defaults 的常用选项。其它选项记录在 mount man page 中。</p>\n<p>最后两个字段是转储标志和 fsck 顺序。转储标志与dump 命令配合使用，用于生成设备内容的备份。fsck 顺序字段确定在文件系统未完全卸载的情况下，是否应在启动时运行 fsck 。fsck 顺序的值指示当有多个文件系统需要检查时，应对这些文件系统运行 fsck 的顺序 。</p>\n<h6 id=\"tips-2\"><a href=\"#tips-2\" class=\"headerlink\" title=\"tips :\"></a>tips :</h6><p>/etc/fstab 中存在错误的条目可能会导致计算机无法启动。为避免这种情况，管理员应卸载新文件系统，然后使用 mount -a （该命令将读取 /etc/fstab ）将该文件系统重新挂载到原位，以验证条目是否有效。如果 mount -a 命令返回错误，则应在重新启动计算机之前纠正错误。</p>\n<h6 id=\"管理交换空间\"><a href=\"#管理交换空间\" class=\"headerlink\" title=\"管理交换空间\"></a>管理交换空间</h6><p>交换空间是可与Linux  内核内存管理子系统配合使用的磁盘区域。交换空间用于通过保存不活动的内存页来补充系统RAM 。系统 RAM与交换空间组合在一起称为虚拟内存。</p>\n<p>当系统上的内存使用量超过定义的限制时，内核将梳理 RAM ，寻找已分配给进程但空闲的内存页。内核将空闲的内存页写入到交换区，并且重新分配 RAM 页面以代其他进程使用。如果某个程序需要访问已写入到磁盘的页面，则内核会找到另一个空闲的内存页，将其写入到磁盘，然后从交换区重新调用所需的页面。</p>\n<p>由于交换区位于磁盘上，所以与 RAM相经交换非常慢。尽管交换空间用于扩充系统 RAM ，但应仅可能将交换空间的使用保持在最低限度。</p>\n<p>创建交换空间，管理员需要执行三项任务：</p>\n<ul>\n<li><p>创建分区</p>\n</li>\n<li><p>将分区的类型设置为 82 Linux swap </p>\n</li>\n<li><p>对设备进行签名格式化</p>\n</li>\n</ul>\n<p>创建分区，使用工具 fdisk 创建所需大小的分区。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531359731927864.png\" alt=\"image.png\"></p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531359756116868.png\" alt=\"image.png\"></p>\n<h6 id=\"分配分区类型\"><a href=\"#分配分区类型\" class=\"headerlink\" title=\"分配分区类型\"></a>分配分区类型</h6><p>交换分区创建后，建议为做法是将分区类型可系统 ID 更改为 82 Linux swap 。在过去，工具会根据分配类型来确定是否应激活设备，但现在情况已不再如此。即使实用程序不再使用分区类型，设备分区类型也可以全管理员快速确定该分区的用途。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531359953672134.png\" alt=\"image.png\"></p>\n<p>格式化设备， mkswap 命令向设备应用交换签名。与其他格式化工具不同， mkswap 在设备开关写入单个数据块，而将设备的其余部分保留为未格式化，从而使其可用于存储内存页。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531359975493820.png\" alt=\"image.png\"></p>\n<h6 id=\"激活交换空间\"><a href=\"#激活交换空间\" class=\"headerlink\" title=\"激活交换空间\"></a>激活交换空间</h6><p>管理员可以使用  swapon 命令激活已格式化交换空间。可以在设备上调用 swapon  ，否则 swapon -a 就将激活 /etc/fstab 文件中列出的所有交换空间。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531360582174595.png\" alt=\"image.png\"></p>\n<h6 id=\"永久激活交换空间\"><a href=\"#永久激活交换空间\" class=\"headerlink\" title=\"永久激活交换空间\"></a>永久激活交换空间</h6><p>交换空间很可能需要在每次计算机启动时自动激活。为使计算机在每次启动时都激活交换空间，必需在 /etc/fstab 文件中进行配置。</p>\n<p>如果需要，管理员可以使用 swapoff 命令停用交换空间。只有当任何交换的数据都可以写入到其他活动的交换空间或写回内存中时， swapoff 才会成功。如果数据无法写入到其他位置，则 swapoff 会失败，并显示错误，而交换空间将仍保持活动。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531360808313305.png\" alt=\"image.png\"></p>\n<p>该示例使用UUID 作为第一个字段。 UUID 存储在设备上存储的交换签名中，并且是 mkswap 输出的一部份。如果 mkswap 输出已丢失，则可以使用 blkid 命令扫描系统并报告所有已连接的块设备。如果管理员不希望使用 UUID ，则第一个字段也可以使用原始设备名称。</p>\n<p>第二个字段通常为 mount point 保留。但是，由于交换设备无法通过目录结构访问，此字段是占位符值 swap </p>\n<p>第三个字段是文件系统类型。交换空间的文件系统类型为 swap </p>\n<p>第四个字段是选项，在上例中，使用了选项 defaults 。defaults 包括 挂载选项 auto, 即用于设备交换空间在启动时自动激活的选项。</p>\n<p>最后两个字段 是转储标志和 fsck 顺序。交换空间不需要备份，也不需要文件系统检查 。</p>\n<h6 id=\"注意：-1\"><a href=\"#注意：-1\" class=\"headerlink\" title=\"注意：\"></a>注意：</h6><p>默认情况下会按顺序使用交换空间，即先使用第一个已激活交换空间，直到其空间已满，然后内核将开始使用第十个交换空间。使用 swapon -s 可显示交换空间的优先级。并可使用 pri= 挂载选项设备这些优先级。如果交换空间具有相同的优先级，则内核将循环写入到这些空间，而非写入单个交换空间直到其容量已满。</p>\n<p><img src=\"/2018/07/12/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531365704503638.png\" alt=\"image.png\"></p>\n"},{"title":"RH134 第八章 连接到网络定义的用户和组","url":"390.html","id":"390","date":"2018-07-06T10:00:19.000Z","_content":"\n### 使用身份管理服务  \n\n用户信息和身份验证服务\n\n集中式身份管理系统至少需要提供两项服务：\n\n1、账户信息：包括用户名、主目录位置、UID 和 GID 、组成员身份等信息。常用的解决方案包括 LDAP （轻量级目录访问协议，用于 Active Directory 和 IPA 服务器等多个产品中）以及网络信息服务（NIS）。\n\n2、身份验证信息：系统验证用户身份的一种方法。这可以通过两种方式完成：向客户端系统提供加密密码哈希，或向服务器发送（加密）密码并接收响应。 LDAP 服务器不仅提供账号信息，也提供身份验证信息。 Kerberos 仅提供 sso 身份验证服务，通常与 LDAP 用户信息一起使用。 Kerberos 可用于 IPA 服务器和 Active Directory。\n\n在 RHEL7 系统上，本地用户信息由 /etc/passwd 提供，而身份验证信息（采用哈希密码的形式）由 /etc/shadow 提供。\n\n将系统连接到集中式 LDAP 服务器和 Kerberos 服务器\n\n###### Authconfig\n\n将 RHEL 7 系统配置为使用集中式身份管理服务器需要编辑各种文件，以及配置某些守护进程。为连接到中央 LDAP 服务器和 Kerberos 服务器，至少需要更新以下文件：\n\n/etc/ldap.conf：关于中央 LDAP 服务器及其设置的信息\n\n/etc/krb5.conf：关于中央 Kerberos 基础架构的信息\n\n/etc/sssd/sssd.conf：用于配置系统安全服务守护进程（sssd），即负责检索和缓存用户信息和身份验证信息的守护进程\n\n/etc/nsswitch.conf：为系统指明应使用哪些用户信息和身份验证服务\n\n/etc/pam.d/\\*：配置应如何处理各种服务的身份验证\n\n/etc/openldap/cacerts：用于存储根证书颁发机构（CA），这些证书颁发机构可以验证用来识别 LDAP 服务器的 SSL 证书。\n\nsssd 守护进程需要先启用并启动，然后才能供系统使用  \n\n配置如此多的文件和服务很容易出错 ， RHEL 7 随附了一套工具，可以自动完成这些配置：authconfig. authconfig 包含三个全部可以执行相同操作的相关工具：\n\nauthconfig：命令行工具。此工具可用于在多个系统间自动进程配置。与 authconfig 配置使用的命令往往都较长，其中会传递多个选项。此工具使用 authconfig 软件包安装。\n\nauthconfig-tui: authconfig 的交互式版本。使用菜单驱动的文本界面。可通过 ssh 使用。此工具使用 authconfig 软件包安装\n\nauthconfig-gtk：此版本将启动图形界面，它也可以作为 system-config-authentication 启动。此工具使用 authconfig-gtk 软件安装。\n\n###### 必需的LDAP 参数\n\n要连接到中央LDAP服务以获取用户信息，authconfig 需要一些设置：\n\nLDAP 服务器的主机名称\n\n*   系统应在其中查找用户的LDAP树部分的base DN(区分名称)。这通常类似于 dc=example,dc=com 或 ou=People,o=PonyCorp. 此信息将由 LDAP 服务器管理员提供。\n\n*   如果使用SSL/TLS 为与 LDAP 服务器的通信加密，那么 LDAP 服务器将提供可验证证书的根CA证书。\n\n\n重要信息：系统还需要安装一些额外的软件包来提供LDAP 客户端功能。安装 sssd 将提供所有必需的依赖关系。\n\n###### 必需的 Kerberos 参数\n\n要将系统配置为使用集中工 Kerberos 系统进程用户身份验证，authconfig 需要以下设置：\n\n*   要使用 Kerberos 域的名称， Kerberos 域是全部使用一组共同的 Kerberos 服务器和用户进行身份验证的计算机组成的域。\n\n*   一个或多个关键分发中心（KDC）。这是Kerberos 服务器的主机名称。\n\n*   一个或多个管理服务器主机名称。这是客户端在希望更改密码或执行其他修改时将联系的计算机。它通常与主KDC 相同，但也可以是不同的计算机。\n\n\n此外，管理员可以指定是否应使用 DNS 来查找要为特定主机名称使用的域，以及自动查找 KDC 服务器和管理服务器。可以安装一个额外的软件包 krb5-workstation ,以便帮助对 Kerberos 问题进行调试，以及从命令行处理 Kerberos 票据。\n\n###### 使用authconfig-gtk   \n\n要使用authconfig-gtk 配置系统以采用 LDAP + Kerberos 请执行以下步骤：\n\n1、安装必需的软件包\n```sh\nyum -y install authconfig-gtk sssd krb5-workstation pam_krb5(必须)\n```\n2、启动authconfig-gtk   \n\n3、填写相关信息，如图\n\n![image.png](1530842356574303.png)\n\n4、如果支持 TLS ，请选中使用 TLS 加密连接，然后下载 CA 证书  \n\n5、从身份验证方法下载菜单选择 Kerberos 密码，然后填写域，KDC 和管理服务器字段。如果选中使用 DNS 查找域的 KDC 选项，则最后两个字段不可用。\n\n6、如果中央目录不可用，用户可以通过选项高级选项上的在首次登录时创建的主目录框，在首次登录时创建目录\n\n7、单击应用按钮以保存并激活更改。这将写入所有相关配置文件，并（重新）启动 sssd 服务。\n\n###### 测试配置\n\n要测试 LDAP + Kerberos 配置，管理员只需要尝试使用某个网络用户的凭据登录系统（通过ssh ），此外，getent 命令可用于检索有关某个网络用户的信息，格式为 getent passwd <USERNAME>  \n\nTIPS ： 在默认配置中，当没有为 getent  命令指定用户名时， sssd 不会列举网络用户，这是为保持图形登录 屏幕的整洁以及节省宝贵的网络资源和时间。\n\n###### 将系统连接到 IPA 服务器\n\n红帽提供了一种配置 LDAP 和 Kerberos 的集成解决方案：IPA (身份、策略和审核)服务器。 IPA 服务器提供 LDAP 和 Kerberos ,还有一套基于命令行和基于Web 的管理工具。除用户和身份验证信息以外， IPA 服务器还可以将 sudo 规则、ssh 公钥、SSH 主机密钥、TLS 证书、自动挂载器映射以及更多功能集中化。\n\n使用 ipa-client \n\n可以通过 authconfig 这套工具将 RHEL7 系统配置为使用 IPA 服务器，但还有一种专用的工具：ipa-client-install  。此命令可从ipa-client 包安装，该软件包将引入所有依赖关系（如 sssd）\n\n使用 ipa-client-install 的优势之一是，它可以从DNS 检索到几乎所有的必要信息（当由IPA服务器配置或由管理员手动配置时），并能够在 IPA服务器上创建主机条目和更多信息。这就使 IPA 服务器管理员可以为该主机设置访问策略、创建服务主体（例如，对于 NFSv4 导出）等等\n\n当不带任何参数运行 ipa-client-install 时，它将首次尝试从 DNS 检索有关为其DNS 域配置的 IPA 服务器信息，如果失败，它将提示管理员输入必要信息，例如IPA 服务器的域名和要使用的域。需要提供的其他信息是允许在 IPA 服务器上创建新计算机条目的账户的用户名和密码。除非已为此目的创建了另一个账户，否则默认 IPA 服务器管理员账户（admin） 可以用于此目的。\n\nDNS 驱动配置参考：  \n```sg\nipa-client-install --domain=server0.example.com --no-ntp --mkhomedir\n```\n![image.png](1530861460111883.png)\n\n可以将所有必需信息作为命令行参数指定，从而使无人值守设置作为系统初始配置的一部分完成：例如通过kickstart 指定这些信息。  \n\n使系统加入 Active Directory   \n\nRHEL 7 提供多种方法可使系统加入 Active Directory 。管理员可以选择安装 samba-winbind 软件包，然后通过authconfig 系统工具配置winbind;，也可以安装 sssd 和 realmd 软件包，然后使用 sssd 和 realm 命令。\n\n注意：rcalm 命令也可以用于加入 Kerberos 域或 IPA 服务器域，但最终配置略有不同。例如，用户的用户名将加上@domain .ipa-client-install 是加入 IPA 域的首选方法。\n\n例：假定 Active Directory 域名为 domain.example.com \n```sh\n1、yum -y install realmd        #安装必要的软件包 realmd \n2、sudo realm discover domain.example.com        #发现domain域的设置\n3、sudo realm join domain.example.com             #加入域并配置 sssd、pam、 /etc/nsswitch.conf .此命令尝试使用 Administrator 账户使本地系统加入 Active directory ，系统提示时输入此账户密码。要使用其它账户，请使用 --user 参数。\n4、#Active Directory 账户现在本地可用，但使用 Active Directory 登录仍处理禁用状态。要启用登录，请使用以下命令：\nsudo realm permit --realm domain.example.com --all\n#要仅允许特定用户登录，请将 --all 替换为这些用户的列表。例如：\nsudo realm permit --realm domain.example.com DOMAIN\\\\\\Itchy DOMAIN\\\\\\Scratchy.\n```\n###### 注意\n\n默认情况下，域用户必须使用其完全限定名称登录；例如\n\nipauser@ipa.example.com(IPA 用户) 或 DOMAIN\\\\Picard (Active Directory)。要禁用此功能，请将 /etc/sssd/sssd.conf 中相应域块中的 use\\_fully\\_qualified_names 设置更改为False ，或将其完全删除，然后重新启动 sssd 服务。\n\n\n\nauthconfig{ , -{ ,-gtk , -tui}}  可用于将系统配置为使用集中式身份管理服务  \n\nsssd 配置为后台检索、验证缓存身份验证和用户信息。\n","source":"_posts/rh134-e7-ac-ac-e5-85-ab-e7-ab-a0-e8-bf-9e-e6-8e-a5-e5-88-b0-e7-bd-91-e7-bb-9c-e5-ae-9a-e4-b9-89-e7-9a-84-e7-94-a8-e6-88-b7-e5-92-8c-e7-bb-84.md","raw":"---\ntitle: RH134 第八章 连接到网络定义的用户和组\nurl: 390.html\nid: 390\ncategories:\n  - RHEL134\ndate: 2018-07-06 18:00:19\ntags:\n---\n\n### 使用身份管理服务  \n\n用户信息和身份验证服务\n\n集中式身份管理系统至少需要提供两项服务：\n\n1、账户信息：包括用户名、主目录位置、UID 和 GID 、组成员身份等信息。常用的解决方案包括 LDAP （轻量级目录访问协议，用于 Active Directory 和 IPA 服务器等多个产品中）以及网络信息服务（NIS）。\n\n2、身份验证信息：系统验证用户身份的一种方法。这可以通过两种方式完成：向客户端系统提供加密密码哈希，或向服务器发送（加密）密码并接收响应。 LDAP 服务器不仅提供账号信息，也提供身份验证信息。 Kerberos 仅提供 sso 身份验证服务，通常与 LDAP 用户信息一起使用。 Kerberos 可用于 IPA 服务器和 Active Directory。\n\n在 RHEL7 系统上，本地用户信息由 /etc/passwd 提供，而身份验证信息（采用哈希密码的形式）由 /etc/shadow 提供。\n\n将系统连接到集中式 LDAP 服务器和 Kerberos 服务器\n\n###### Authconfig\n\n将 RHEL 7 系统配置为使用集中式身份管理服务器需要编辑各种文件，以及配置某些守护进程。为连接到中央 LDAP 服务器和 Kerberos 服务器，至少需要更新以下文件：\n\n/etc/ldap.conf：关于中央 LDAP 服务器及其设置的信息\n\n/etc/krb5.conf：关于中央 Kerberos 基础架构的信息\n\n/etc/sssd/sssd.conf：用于配置系统安全服务守护进程（sssd），即负责检索和缓存用户信息和身份验证信息的守护进程\n\n/etc/nsswitch.conf：为系统指明应使用哪些用户信息和身份验证服务\n\n/etc/pam.d/\\*：配置应如何处理各种服务的身份验证\n\n/etc/openldap/cacerts：用于存储根证书颁发机构（CA），这些证书颁发机构可以验证用来识别 LDAP 服务器的 SSL 证书。\n\nsssd 守护进程需要先启用并启动，然后才能供系统使用  \n\n配置如此多的文件和服务很容易出错 ， RHEL 7 随附了一套工具，可以自动完成这些配置：authconfig. authconfig 包含三个全部可以执行相同操作的相关工具：\n\nauthconfig：命令行工具。此工具可用于在多个系统间自动进程配置。与 authconfig 配置使用的命令往往都较长，其中会传递多个选项。此工具使用 authconfig 软件包安装。\n\nauthconfig-tui: authconfig 的交互式版本。使用菜单驱动的文本界面。可通过 ssh 使用。此工具使用 authconfig 软件包安装\n\nauthconfig-gtk：此版本将启动图形界面，它也可以作为 system-config-authentication 启动。此工具使用 authconfig-gtk 软件安装。\n\n###### 必需的LDAP 参数\n\n要连接到中央LDAP服务以获取用户信息，authconfig 需要一些设置：\n\nLDAP 服务器的主机名称\n\n*   系统应在其中查找用户的LDAP树部分的base DN(区分名称)。这通常类似于 dc=example,dc=com 或 ou=People,o=PonyCorp. 此信息将由 LDAP 服务器管理员提供。\n\n*   如果使用SSL/TLS 为与 LDAP 服务器的通信加密，那么 LDAP 服务器将提供可验证证书的根CA证书。\n\n\n重要信息：系统还需要安装一些额外的软件包来提供LDAP 客户端功能。安装 sssd 将提供所有必需的依赖关系。\n\n###### 必需的 Kerberos 参数\n\n要将系统配置为使用集中工 Kerberos 系统进程用户身份验证，authconfig 需要以下设置：\n\n*   要使用 Kerberos 域的名称， Kerberos 域是全部使用一组共同的 Kerberos 服务器和用户进行身份验证的计算机组成的域。\n\n*   一个或多个关键分发中心（KDC）。这是Kerberos 服务器的主机名称。\n\n*   一个或多个管理服务器主机名称。这是客户端在希望更改密码或执行其他修改时将联系的计算机。它通常与主KDC 相同，但也可以是不同的计算机。\n\n\n此外，管理员可以指定是否应使用 DNS 来查找要为特定主机名称使用的域，以及自动查找 KDC 服务器和管理服务器。可以安装一个额外的软件包 krb5-workstation ,以便帮助对 Kerberos 问题进行调试，以及从命令行处理 Kerberos 票据。\n\n###### 使用authconfig-gtk   \n\n要使用authconfig-gtk 配置系统以采用 LDAP + Kerberos 请执行以下步骤：\n\n1、安装必需的软件包\n```sh\nyum -y install authconfig-gtk sssd krb5-workstation pam_krb5(必须)\n```\n2、启动authconfig-gtk   \n\n3、填写相关信息，如图\n\n![image.png](1530842356574303.png)\n\n4、如果支持 TLS ，请选中使用 TLS 加密连接，然后下载 CA 证书  \n\n5、从身份验证方法下载菜单选择 Kerberos 密码，然后填写域，KDC 和管理服务器字段。如果选中使用 DNS 查找域的 KDC 选项，则最后两个字段不可用。\n\n6、如果中央目录不可用，用户可以通过选项高级选项上的在首次登录时创建的主目录框，在首次登录时创建目录\n\n7、单击应用按钮以保存并激活更改。这将写入所有相关配置文件，并（重新）启动 sssd 服务。\n\n###### 测试配置\n\n要测试 LDAP + Kerberos 配置，管理员只需要尝试使用某个网络用户的凭据登录系统（通过ssh ），此外，getent 命令可用于检索有关某个网络用户的信息，格式为 getent passwd <USERNAME>  \n\nTIPS ： 在默认配置中，当没有为 getent  命令指定用户名时， sssd 不会列举网络用户，这是为保持图形登录 屏幕的整洁以及节省宝贵的网络资源和时间。\n\n###### 将系统连接到 IPA 服务器\n\n红帽提供了一种配置 LDAP 和 Kerberos 的集成解决方案：IPA (身份、策略和审核)服务器。 IPA 服务器提供 LDAP 和 Kerberos ,还有一套基于命令行和基于Web 的管理工具。除用户和身份验证信息以外， IPA 服务器还可以将 sudo 规则、ssh 公钥、SSH 主机密钥、TLS 证书、自动挂载器映射以及更多功能集中化。\n\n使用 ipa-client \n\n可以通过 authconfig 这套工具将 RHEL7 系统配置为使用 IPA 服务器，但还有一种专用的工具：ipa-client-install  。此命令可从ipa-client 包安装，该软件包将引入所有依赖关系（如 sssd）\n\n使用 ipa-client-install 的优势之一是，它可以从DNS 检索到几乎所有的必要信息（当由IPA服务器配置或由管理员手动配置时），并能够在 IPA服务器上创建主机条目和更多信息。这就使 IPA 服务器管理员可以为该主机设置访问策略、创建服务主体（例如，对于 NFSv4 导出）等等\n\n当不带任何参数运行 ipa-client-install 时，它将首次尝试从 DNS 检索有关为其DNS 域配置的 IPA 服务器信息，如果失败，它将提示管理员输入必要信息，例如IPA 服务器的域名和要使用的域。需要提供的其他信息是允许在 IPA 服务器上创建新计算机条目的账户的用户名和密码。除非已为此目的创建了另一个账户，否则默认 IPA 服务器管理员账户（admin） 可以用于此目的。\n\nDNS 驱动配置参考：  \n```sg\nipa-client-install --domain=server0.example.com --no-ntp --mkhomedir\n```\n![image.png](1530861460111883.png)\n\n可以将所有必需信息作为命令行参数指定，从而使无人值守设置作为系统初始配置的一部分完成：例如通过kickstart 指定这些信息。  \n\n使系统加入 Active Directory   \n\nRHEL 7 提供多种方法可使系统加入 Active Directory 。管理员可以选择安装 samba-winbind 软件包，然后通过authconfig 系统工具配置winbind;，也可以安装 sssd 和 realmd 软件包，然后使用 sssd 和 realm 命令。\n\n注意：rcalm 命令也可以用于加入 Kerberos 域或 IPA 服务器域，但最终配置略有不同。例如，用户的用户名将加上@domain .ipa-client-install 是加入 IPA 域的首选方法。\n\n例：假定 Active Directory 域名为 domain.example.com \n```sh\n1、yum -y install realmd        #安装必要的软件包 realmd \n2、sudo realm discover domain.example.com        #发现domain域的设置\n3、sudo realm join domain.example.com             #加入域并配置 sssd、pam、 /etc/nsswitch.conf .此命令尝试使用 Administrator 账户使本地系统加入 Active directory ，系统提示时输入此账户密码。要使用其它账户，请使用 --user 参数。\n4、#Active Directory 账户现在本地可用，但使用 Active Directory 登录仍处理禁用状态。要启用登录，请使用以下命令：\nsudo realm permit --realm domain.example.com --all\n#要仅允许特定用户登录，请将 --all 替换为这些用户的列表。例如：\nsudo realm permit --realm domain.example.com DOMAIN\\\\\\Itchy DOMAIN\\\\\\Scratchy.\n```\n###### 注意\n\n默认情况下，域用户必须使用其完全限定名称登录；例如\n\nipauser@ipa.example.com(IPA 用户) 或 DOMAIN\\\\Picard (Active Directory)。要禁用此功能，请将 /etc/sssd/sssd.conf 中相应域块中的 use\\_fully\\_qualified_names 设置更改为False ，或将其完全删除，然后重新启动 sssd 服务。\n\n\n\nauthconfig{ , -{ ,-gtk , -tui}}  可用于将系统配置为使用集中式身份管理服务  \n\nsssd 配置为后台检索、验证缓存身份验证和用户信息。\n","slug":"rh134-e7-ac-ac-e5-85-ab-e7-ab-a0-e8-bf-9e-e6-8e-a5-e5-88-b0-e7-bd-91-e7-bb-9c-e5-ae-9a-e4-b9-89-e7-9a-84-e7-94-a8-e6-88-b7-e5-92-8c-e7-bb-84","published":1,"updated":"2019-01-06T17:36:18.717Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqi1z001nlxkjcojie3a6","content":"<h3 id=\"使用身份管理服务\"><a href=\"#使用身份管理服务\" class=\"headerlink\" title=\"使用身份管理服务\"></a>使用身份管理服务</h3><p>用户信息和身份验证服务</p>\n<p>集中式身份管理系统至少需要提供两项服务：</p>\n<p>1、账户信息：包括用户名、主目录位置、UID 和 GID 、组成员身份等信息。常用的解决方案包括 LDAP （轻量级目录访问协议，用于 Active Directory 和 IPA 服务器等多个产品中）以及网络信息服务（NIS）。</p>\n<p>2、身份验证信息：系统验证用户身份的一种方法。这可以通过两种方式完成：向客户端系统提供加密密码哈希，或向服务器发送（加密）密码并接收响应。 LDAP 服务器不仅提供账号信息，也提供身份验证信息。 Kerberos 仅提供 sso 身份验证服务，通常与 LDAP 用户信息一起使用。 Kerberos 可用于 IPA 服务器和 Active Directory。</p>\n<p>在 RHEL7 系统上，本地用户信息由 /etc/passwd 提供，而身份验证信息（采用哈希密码的形式）由 /etc/shadow 提供。</p>\n<p>将系统连接到集中式 LDAP 服务器和 Kerberos 服务器</p>\n<h6 id=\"Authconfig\"><a href=\"#Authconfig\" class=\"headerlink\" title=\"Authconfig\"></a>Authconfig</h6><p>将 RHEL 7 系统配置为使用集中式身份管理服务器需要编辑各种文件，以及配置某些守护进程。为连接到中央 LDAP 服务器和 Kerberos 服务器，至少需要更新以下文件：</p>\n<p>/etc/ldap.conf：关于中央 LDAP 服务器及其设置的信息</p>\n<p>/etc/krb5.conf：关于中央 Kerberos 基础架构的信息</p>\n<p>/etc/sssd/sssd.conf：用于配置系统安全服务守护进程（sssd），即负责检索和缓存用户信息和身份验证信息的守护进程</p>\n<p>/etc/nsswitch.conf：为系统指明应使用哪些用户信息和身份验证服务</p>\n<p>/etc/pam.d/*：配置应如何处理各种服务的身份验证</p>\n<p>/etc/openldap/cacerts：用于存储根证书颁发机构（CA），这些证书颁发机构可以验证用来识别 LDAP 服务器的 SSL 证书。</p>\n<p>sssd 守护进程需要先启用并启动，然后才能供系统使用  </p>\n<p>配置如此多的文件和服务很容易出错 ， RHEL 7 随附了一套工具，可以自动完成这些配置：authconfig. authconfig 包含三个全部可以执行相同操作的相关工具：</p>\n<p>authconfig：命令行工具。此工具可用于在多个系统间自动进程配置。与 authconfig 配置使用的命令往往都较长，其中会传递多个选项。此工具使用 authconfig 软件包安装。</p>\n<p>authconfig-tui: authconfig 的交互式版本。使用菜单驱动的文本界面。可通过 ssh 使用。此工具使用 authconfig 软件包安装</p>\n<p>authconfig-gtk：此版本将启动图形界面，它也可以作为 system-config-authentication 启动。此工具使用 authconfig-gtk 软件安装。</p>\n<h6 id=\"必需的LDAP-参数\"><a href=\"#必需的LDAP-参数\" class=\"headerlink\" title=\"必需的LDAP 参数\"></a>必需的LDAP 参数</h6><p>要连接到中央LDAP服务以获取用户信息，authconfig 需要一些设置：</p>\n<p>LDAP 服务器的主机名称</p>\n<ul>\n<li><p>系统应在其中查找用户的LDAP树部分的base DN(区分名称)。这通常类似于 dc=example,dc=com 或 ou=People,o=PonyCorp. 此信息将由 LDAP 服务器管理员提供。</p>\n</li>\n<li><p>如果使用SSL/TLS 为与 LDAP 服务器的通信加密，那么 LDAP 服务器将提供可验证证书的根CA证书。</p>\n</li>\n</ul>\n<p>重要信息：系统还需要安装一些额外的软件包来提供LDAP 客户端功能。安装 sssd 将提供所有必需的依赖关系。</p>\n<h6 id=\"必需的-Kerberos-参数\"><a href=\"#必需的-Kerberos-参数\" class=\"headerlink\" title=\"必需的 Kerberos 参数\"></a>必需的 Kerberos 参数</h6><p>要将系统配置为使用集中工 Kerberos 系统进程用户身份验证，authconfig 需要以下设置：</p>\n<ul>\n<li><p>要使用 Kerberos 域的名称， Kerberos 域是全部使用一组共同的 Kerberos 服务器和用户进行身份验证的计算机组成的域。</p>\n</li>\n<li><p>一个或多个关键分发中心（KDC）。这是Kerberos 服务器的主机名称。</p>\n</li>\n<li><p>一个或多个管理服务器主机名称。这是客户端在希望更改密码或执行其他修改时将联系的计算机。它通常与主KDC 相同，但也可以是不同的计算机。</p>\n</li>\n</ul>\n<p>此外，管理员可以指定是否应使用 DNS 来查找要为特定主机名称使用的域，以及自动查找 KDC 服务器和管理服务器。可以安装一个额外的软件包 krb5-workstation ,以便帮助对 Kerberos 问题进行调试，以及从命令行处理 Kerberos 票据。</p>\n<h6 id=\"使用authconfig-gtk\"><a href=\"#使用authconfig-gtk\" class=\"headerlink\" title=\"使用authconfig-gtk\"></a>使用authconfig-gtk</h6><p>要使用authconfig-gtk 配置系统以采用 LDAP + Kerberos 请执行以下步骤：</p>\n<p>1、安装必需的软件包<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install authconfig-gtk sssd krb5-workstation pam_krb5(必须)</span><br></pre></td></tr></table></figure></p>\n<p>2、启动authconfig-gtk   </p>\n<p>3、填写相关信息，如图</p>\n<p><img src=\"/2018/07/06/rh134-e7-ac-ac-e5-85-ab-e7-ab-a0-e8-bf-9e-e6-8e-a5-e5-88-b0-e7-bd-91-e7-bb-9c-e5-ae-9a-e4-b9-89-e7-9a-84-e7-94-a8-e6-88-b7-e5-92-8c-e7-bb-84/1530842356574303.png\" alt=\"image.png\"></p>\n<p>4、如果支持 TLS ，请选中使用 TLS 加密连接，然后下载 CA 证书  </p>\n<p>5、从身份验证方法下载菜单选择 Kerberos 密码，然后填写域，KDC 和管理服务器字段。如果选中使用 DNS 查找域的 KDC 选项，则最后两个字段不可用。</p>\n<p>6、如果中央目录不可用，用户可以通过选项高级选项上的在首次登录时创建的主目录框，在首次登录时创建目录</p>\n<p>7、单击应用按钮以保存并激活更改。这将写入所有相关配置文件，并（重新）启动 sssd 服务。</p>\n<h6 id=\"测试配置\"><a href=\"#测试配置\" class=\"headerlink\" title=\"测试配置\"></a>测试配置</h6><p>要测试 LDAP + Kerberos 配置，管理员只需要尝试使用某个网络用户的凭据登录系统（通过ssh ），此外，getent 命令可用于检索有关某个网络用户的信息，格式为 getent passwd <username>  </username></p>\n<p>TIPS ： 在默认配置中，当没有为 getent  命令指定用户名时， sssd 不会列举网络用户，这是为保持图形登录 屏幕的整洁以及节省宝贵的网络资源和时间。</p>\n<h6 id=\"将系统连接到-IPA-服务器\"><a href=\"#将系统连接到-IPA-服务器\" class=\"headerlink\" title=\"将系统连接到 IPA 服务器\"></a>将系统连接到 IPA 服务器</h6><p>红帽提供了一种配置 LDAP 和 Kerberos 的集成解决方案：IPA (身份、策略和审核)服务器。 IPA 服务器提供 LDAP 和 Kerberos ,还有一套基于命令行和基于Web 的管理工具。除用户和身份验证信息以外， IPA 服务器还可以将 sudo 规则、ssh 公钥、SSH 主机密钥、TLS 证书、自动挂载器映射以及更多功能集中化。</p>\n<p>使用 ipa-client </p>\n<p>可以通过 authconfig 这套工具将 RHEL7 系统配置为使用 IPA 服务器，但还有一种专用的工具：ipa-client-install  。此命令可从ipa-client 包安装，该软件包将引入所有依赖关系（如 sssd）</p>\n<p>使用 ipa-client-install 的优势之一是，它可以从DNS 检索到几乎所有的必要信息（当由IPA服务器配置或由管理员手动配置时），并能够在 IPA服务器上创建主机条目和更多信息。这就使 IPA 服务器管理员可以为该主机设置访问策略、创建服务主体（例如，对于 NFSv4 导出）等等</p>\n<p>当不带任何参数运行 ipa-client-install 时，它将首次尝试从 DNS 检索有关为其DNS 域配置的 IPA 服务器信息，如果失败，它将提示管理员输入必要信息，例如IPA 服务器的域名和要使用的域。需要提供的其他信息是允许在 IPA 服务器上创建新计算机条目的账户的用户名和密码。除非已为此目的创建了另一个账户，否则默认 IPA 服务器管理员账户（admin） 可以用于此目的。</p>\n<p>DNS 驱动配置参考：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipa-client-install --domain=server0.example.com --no-ntp --mkhomedir</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/07/06/rh134-e7-ac-ac-e5-85-ab-e7-ab-a0-e8-bf-9e-e6-8e-a5-e5-88-b0-e7-bd-91-e7-bb-9c-e5-ae-9a-e4-b9-89-e7-9a-84-e7-94-a8-e6-88-b7-e5-92-8c-e7-bb-84/1530861460111883.png\" alt=\"image.png\"></p>\n<p>可以将所有必需信息作为命令行参数指定，从而使无人值守设置作为系统初始配置的一部分完成：例如通过kickstart 指定这些信息。  </p>\n<p>使系统加入 Active Directory   </p>\n<p>RHEL 7 提供多种方法可使系统加入 Active Directory 。管理员可以选择安装 samba-winbind 软件包，然后通过authconfig 系统工具配置winbind;，也可以安装 sssd 和 realmd 软件包，然后使用 sssd 和 realm 命令。</p>\n<p>注意：rcalm 命令也可以用于加入 Kerberos 域或 IPA 服务器域，但最终配置略有不同。例如，用户的用户名将加上@domain .ipa-client-install 是加入 IPA 域的首选方法。</p>\n<p>例：假定 Active Directory 域名为 domain.example.com<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、yum -y install realmd        <span class=\"comment\">#安装必要的软件包 realmd </span></span><br><span class=\"line\">2、sudo realm discover domain.example.com        <span class=\"comment\">#发现domain域的设置</span></span><br><span class=\"line\">3、sudo realm join domain.example.com             <span class=\"comment\">#加入域并配置 sssd、pam、 /etc/nsswitch.conf .此命令尝试使用 Administrator 账户使本地系统加入 Active directory ，系统提示时输入此账户密码。要使用其它账户，请使用 --user 参数。</span></span><br><span class=\"line\">4、<span class=\"comment\">#Active Directory 账户现在本地可用，但使用 Active Directory 登录仍处理禁用状态。要启用登录，请使用以下命令：</span></span><br><span class=\"line\">sudo realm permit --realm domain.example.com --all</span><br><span class=\"line\"><span class=\"comment\">#要仅允许特定用户登录，请将 --all 替换为这些用户的列表。例如：</span></span><br><span class=\"line\">sudo realm permit --realm domain.example.com DOMAIN\\\\\\Itchy DOMAIN\\\\\\Scratchy.</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h6><p>默认情况下，域用户必须使用其完全限定名称登录；例如</p>\n<p><a href=\"mailto:ipauser@ipa.example.com\" target=\"_blank\" rel=\"noopener\">ipauser@ipa.example.com</a>(IPA 用户) 或 DOMAIN\\Picard (Active Directory)。要禁用此功能，请将 /etc/sssd/sssd.conf 中相应域块中的 use_fully_qualified_names 设置更改为False ，或将其完全删除，然后重新启动 sssd 服务。</p>\n<p>authconfig{ , -{ ,-gtk , -tui}}  可用于将系统配置为使用集中式身份管理服务  </p>\n<p>sssd 配置为后台检索、验证缓存身份验证和用户信息。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"使用身份管理服务\"><a href=\"#使用身份管理服务\" class=\"headerlink\" title=\"使用身份管理服务\"></a>使用身份管理服务</h3><p>用户信息和身份验证服务</p>\n<p>集中式身份管理系统至少需要提供两项服务：</p>\n<p>1、账户信息：包括用户名、主目录位置、UID 和 GID 、组成员身份等信息。常用的解决方案包括 LDAP （轻量级目录访问协议，用于 Active Directory 和 IPA 服务器等多个产品中）以及网络信息服务（NIS）。</p>\n<p>2、身份验证信息：系统验证用户身份的一种方法。这可以通过两种方式完成：向客户端系统提供加密密码哈希，或向服务器发送（加密）密码并接收响应。 LDAP 服务器不仅提供账号信息，也提供身份验证信息。 Kerberos 仅提供 sso 身份验证服务，通常与 LDAP 用户信息一起使用。 Kerberos 可用于 IPA 服务器和 Active Directory。</p>\n<p>在 RHEL7 系统上，本地用户信息由 /etc/passwd 提供，而身份验证信息（采用哈希密码的形式）由 /etc/shadow 提供。</p>\n<p>将系统连接到集中式 LDAP 服务器和 Kerberos 服务器</p>\n<h6 id=\"Authconfig\"><a href=\"#Authconfig\" class=\"headerlink\" title=\"Authconfig\"></a>Authconfig</h6><p>将 RHEL 7 系统配置为使用集中式身份管理服务器需要编辑各种文件，以及配置某些守护进程。为连接到中央 LDAP 服务器和 Kerberos 服务器，至少需要更新以下文件：</p>\n<p>/etc/ldap.conf：关于中央 LDAP 服务器及其设置的信息</p>\n<p>/etc/krb5.conf：关于中央 Kerberos 基础架构的信息</p>\n<p>/etc/sssd/sssd.conf：用于配置系统安全服务守护进程（sssd），即负责检索和缓存用户信息和身份验证信息的守护进程</p>\n<p>/etc/nsswitch.conf：为系统指明应使用哪些用户信息和身份验证服务</p>\n<p>/etc/pam.d/*：配置应如何处理各种服务的身份验证</p>\n<p>/etc/openldap/cacerts：用于存储根证书颁发机构（CA），这些证书颁发机构可以验证用来识别 LDAP 服务器的 SSL 证书。</p>\n<p>sssd 守护进程需要先启用并启动，然后才能供系统使用  </p>\n<p>配置如此多的文件和服务很容易出错 ， RHEL 7 随附了一套工具，可以自动完成这些配置：authconfig. authconfig 包含三个全部可以执行相同操作的相关工具：</p>\n<p>authconfig：命令行工具。此工具可用于在多个系统间自动进程配置。与 authconfig 配置使用的命令往往都较长，其中会传递多个选项。此工具使用 authconfig 软件包安装。</p>\n<p>authconfig-tui: authconfig 的交互式版本。使用菜单驱动的文本界面。可通过 ssh 使用。此工具使用 authconfig 软件包安装</p>\n<p>authconfig-gtk：此版本将启动图形界面，它也可以作为 system-config-authentication 启动。此工具使用 authconfig-gtk 软件安装。</p>\n<h6 id=\"必需的LDAP-参数\"><a href=\"#必需的LDAP-参数\" class=\"headerlink\" title=\"必需的LDAP 参数\"></a>必需的LDAP 参数</h6><p>要连接到中央LDAP服务以获取用户信息，authconfig 需要一些设置：</p>\n<p>LDAP 服务器的主机名称</p>\n<ul>\n<li><p>系统应在其中查找用户的LDAP树部分的base DN(区分名称)。这通常类似于 dc=example,dc=com 或 ou=People,o=PonyCorp. 此信息将由 LDAP 服务器管理员提供。</p>\n</li>\n<li><p>如果使用SSL/TLS 为与 LDAP 服务器的通信加密，那么 LDAP 服务器将提供可验证证书的根CA证书。</p>\n</li>\n</ul>\n<p>重要信息：系统还需要安装一些额外的软件包来提供LDAP 客户端功能。安装 sssd 将提供所有必需的依赖关系。</p>\n<h6 id=\"必需的-Kerberos-参数\"><a href=\"#必需的-Kerberos-参数\" class=\"headerlink\" title=\"必需的 Kerberos 参数\"></a>必需的 Kerberos 参数</h6><p>要将系统配置为使用集中工 Kerberos 系统进程用户身份验证，authconfig 需要以下设置：</p>\n<ul>\n<li><p>要使用 Kerberos 域的名称， Kerberos 域是全部使用一组共同的 Kerberos 服务器和用户进行身份验证的计算机组成的域。</p>\n</li>\n<li><p>一个或多个关键分发中心（KDC）。这是Kerberos 服务器的主机名称。</p>\n</li>\n<li><p>一个或多个管理服务器主机名称。这是客户端在希望更改密码或执行其他修改时将联系的计算机。它通常与主KDC 相同，但也可以是不同的计算机。</p>\n</li>\n</ul>\n<p>此外，管理员可以指定是否应使用 DNS 来查找要为特定主机名称使用的域，以及自动查找 KDC 服务器和管理服务器。可以安装一个额外的软件包 krb5-workstation ,以便帮助对 Kerberos 问题进行调试，以及从命令行处理 Kerberos 票据。</p>\n<h6 id=\"使用authconfig-gtk\"><a href=\"#使用authconfig-gtk\" class=\"headerlink\" title=\"使用authconfig-gtk\"></a>使用authconfig-gtk</h6><p>要使用authconfig-gtk 配置系统以采用 LDAP + Kerberos 请执行以下步骤：</p>\n<p>1、安装必需的软件包<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install authconfig-gtk sssd krb5-workstation pam_krb5(必须)</span><br></pre></td></tr></table></figure></p>\n<p>2、启动authconfig-gtk   </p>\n<p>3、填写相关信息，如图</p>\n<p><img src=\"/2018/07/06/rh134-e7-ac-ac-e5-85-ab-e7-ab-a0-e8-bf-9e-e6-8e-a5-e5-88-b0-e7-bd-91-e7-bb-9c-e5-ae-9a-e4-b9-89-e7-9a-84-e7-94-a8-e6-88-b7-e5-92-8c-e7-bb-84/1530842356574303.png\" alt=\"image.png\"></p>\n<p>4、如果支持 TLS ，请选中使用 TLS 加密连接，然后下载 CA 证书  </p>\n<p>5、从身份验证方法下载菜单选择 Kerberos 密码，然后填写域，KDC 和管理服务器字段。如果选中使用 DNS 查找域的 KDC 选项，则最后两个字段不可用。</p>\n<p>6、如果中央目录不可用，用户可以通过选项高级选项上的在首次登录时创建的主目录框，在首次登录时创建目录</p>\n<p>7、单击应用按钮以保存并激活更改。这将写入所有相关配置文件，并（重新）启动 sssd 服务。</p>\n<h6 id=\"测试配置\"><a href=\"#测试配置\" class=\"headerlink\" title=\"测试配置\"></a>测试配置</h6><p>要测试 LDAP + Kerberos 配置，管理员只需要尝试使用某个网络用户的凭据登录系统（通过ssh ），此外，getent 命令可用于检索有关某个网络用户的信息，格式为 getent passwd <username>  </username></p>\n<p>TIPS ： 在默认配置中，当没有为 getent  命令指定用户名时， sssd 不会列举网络用户，这是为保持图形登录 屏幕的整洁以及节省宝贵的网络资源和时间。</p>\n<h6 id=\"将系统连接到-IPA-服务器\"><a href=\"#将系统连接到-IPA-服务器\" class=\"headerlink\" title=\"将系统连接到 IPA 服务器\"></a>将系统连接到 IPA 服务器</h6><p>红帽提供了一种配置 LDAP 和 Kerberos 的集成解决方案：IPA (身份、策略和审核)服务器。 IPA 服务器提供 LDAP 和 Kerberos ,还有一套基于命令行和基于Web 的管理工具。除用户和身份验证信息以外， IPA 服务器还可以将 sudo 规则、ssh 公钥、SSH 主机密钥、TLS 证书、自动挂载器映射以及更多功能集中化。</p>\n<p>使用 ipa-client </p>\n<p>可以通过 authconfig 这套工具将 RHEL7 系统配置为使用 IPA 服务器，但还有一种专用的工具：ipa-client-install  。此命令可从ipa-client 包安装，该软件包将引入所有依赖关系（如 sssd）</p>\n<p>使用 ipa-client-install 的优势之一是，它可以从DNS 检索到几乎所有的必要信息（当由IPA服务器配置或由管理员手动配置时），并能够在 IPA服务器上创建主机条目和更多信息。这就使 IPA 服务器管理员可以为该主机设置访问策略、创建服务主体（例如，对于 NFSv4 导出）等等</p>\n<p>当不带任何参数运行 ipa-client-install 时，它将首次尝试从 DNS 检索有关为其DNS 域配置的 IPA 服务器信息，如果失败，它将提示管理员输入必要信息，例如IPA 服务器的域名和要使用的域。需要提供的其他信息是允许在 IPA 服务器上创建新计算机条目的账户的用户名和密码。除非已为此目的创建了另一个账户，否则默认 IPA 服务器管理员账户（admin） 可以用于此目的。</p>\n<p>DNS 驱动配置参考：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipa-client-install --domain=server0.example.com --no-ntp --mkhomedir</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/07/06/rh134-e7-ac-ac-e5-85-ab-e7-ab-a0-e8-bf-9e-e6-8e-a5-e5-88-b0-e7-bd-91-e7-bb-9c-e5-ae-9a-e4-b9-89-e7-9a-84-e7-94-a8-e6-88-b7-e5-92-8c-e7-bb-84/1530861460111883.png\" alt=\"image.png\"></p>\n<p>可以将所有必需信息作为命令行参数指定，从而使无人值守设置作为系统初始配置的一部分完成：例如通过kickstart 指定这些信息。  </p>\n<p>使系统加入 Active Directory   </p>\n<p>RHEL 7 提供多种方法可使系统加入 Active Directory 。管理员可以选择安装 samba-winbind 软件包，然后通过authconfig 系统工具配置winbind;，也可以安装 sssd 和 realmd 软件包，然后使用 sssd 和 realm 命令。</p>\n<p>注意：rcalm 命令也可以用于加入 Kerberos 域或 IPA 服务器域，但最终配置略有不同。例如，用户的用户名将加上@domain .ipa-client-install 是加入 IPA 域的首选方法。</p>\n<p>例：假定 Active Directory 域名为 domain.example.com<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、yum -y install realmd        <span class=\"comment\">#安装必要的软件包 realmd </span></span><br><span class=\"line\">2、sudo realm discover domain.example.com        <span class=\"comment\">#发现domain域的设置</span></span><br><span class=\"line\">3、sudo realm join domain.example.com             <span class=\"comment\">#加入域并配置 sssd、pam、 /etc/nsswitch.conf .此命令尝试使用 Administrator 账户使本地系统加入 Active directory ，系统提示时输入此账户密码。要使用其它账户，请使用 --user 参数。</span></span><br><span class=\"line\">4、<span class=\"comment\">#Active Directory 账户现在本地可用，但使用 Active Directory 登录仍处理禁用状态。要启用登录，请使用以下命令：</span></span><br><span class=\"line\">sudo realm permit --realm domain.example.com --all</span><br><span class=\"line\"><span class=\"comment\">#要仅允许特定用户登录，请将 --all 替换为这些用户的列表。例如：</span></span><br><span class=\"line\">sudo realm permit --realm domain.example.com DOMAIN\\\\\\Itchy DOMAIN\\\\\\Scratchy.</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h6><p>默认情况下，域用户必须使用其完全限定名称登录；例如</p>\n<p><a href=\"mailto:ipauser@ipa.example.com\" target=\"_blank\" rel=\"noopener\">ipauser@ipa.example.com</a>(IPA 用户) 或 DOMAIN\\Picard (Active Directory)。要禁用此功能，请将 /etc/sssd/sssd.conf 中相应域块中的 use_fully_qualified_names 设置更改为False ，或将其完全删除，然后重新启动 sssd 服务。</p>\n<p>authconfig{ , -{ ,-gtk , -tui}}  可用于将系统配置为使用集中式身份管理服务  </p>\n<p>sssd 配置为后台检索、验证缓存身份验证和用户信息。</p>\n"},{"title":"RH134 第六章 使用访问控制列表（ACL）控制对文件的访问","url":"369.html","id":"369","date":"2018-05-17T09:16:40.000Z","_content":"\n###### 访问控制列表概念  \n\n标准Linux 文件权限可以满足绝大多数情况的要求，但它也有局限性。限制访问文件的权限也仅限授予文件所有者、单组成员或其他任何人。进程（正在运行的程序）可能不适合成为文件所属的成员，授予所有人权限则更不是理想的操作。\n\nACL 允许向文件分配细化权限。除标准的文件所有者、组所有者和其他文件权限之外，还可以向指定用户或指定组，以及由UID或GUID确定的用户和组授予权限。这个权限均应用相同的权限标志：r w x .\n\n文件所有者可以在单个文件或目录上设置ACL 。新文件和子目录可以自动从父目录默认ACL（若存在）中继承ACL设置。与常规文件的访问规则相似，父目录层次结构需要至少设置其他执行权限，以便启用指定用户和指定组的访问权限。\n\n###### 文件系统挂载选项\n\n文件系统挂载已经启用的ACL 支持。XFS 文件系统内置有 ACL支持。在 RHEL 7上创建的ext4 文件系统默认启用了 acl 选项，而安装红帽早期版本中创建的ext4 文件系统则可能需要通过挂载请求包含ACL 选项，或者在超级块中设置选项。\n\n###### 查看和解释ACL 权限\n\nls -l 仅输入最少的 ACL 设置详细信息\n\n![image.png](1526285537683356.png)\n\n如果由10个字符组成的权限字符串的末尾是 “+”，即表示此文件有相关联的ACL 设置 。对用户、组和其它的“rwx”标志解释如下：  \n\n*   用户：显示用户 ACL 设置，其与标准的用户文件设置相同：rwx\n\n*   组：显示当前的 ACL 掩码设置，而不是组所有者设置：rw\n\n*   其他：显示其他 ACL 设置，其与标准的其它文件设置相同，无访问权限。\n\n\n###### TIPS:\n\n如果使用chmod 更改具有 ACL 文件的组权限，则不会更改组所有者仅限，而是更改 ACL 掩码。如果目的是更新文件的组所有者权限，需要使用\n```sh\n setfacl -m g::perms file\n```\n###### 查看文件 acl \n\n要显示文件上的 ACL 设置 ，使用 getfacl file\n\n![image.png](1526286552326310.png)\n\n![image.png](1526286628954630.png)\n\n#前三行是注释，用于识别文件名、所有者（student）、和组所有者（controller）.如果存在任何其它文件标志（如 setuid 或 setgid ),则会出现第四行注释来显示所设置的标志。\n\n![image.png](1526286600143773.png)\n\n1.  文件所有者权限。student 具有 rwx 。  \n\n2.  指定用户权限。与此文件相关联的每位指定用户均有一个条目。james 不具有任何权限。\n\n3.  指定用户权限。UID 1005 具有 rwx ，但是掩码将有效权限限制为rw \n\n\n###### 掩码条目：\n\n![image.png](1526288457208748.png)\n\n掩码设置显示可能为所有指定用户、组所有者和指定组提供的最大权限 。 UID 1005 、controller 和 GID 2210 无法执行此文件，即便每个条目增均已经设置执行权限。\n\n###### 其它条目：\n\n![image.png](1526288467671948.png)\n\n其他或“全局”权限。所有其他的UID 和GID 均无任何权限。\n\n###### 查看目录 ACL\n\n要显示目录上的 ACL 设置，使用 getfacl /direcotry:\n\n![image.png](1526288669879354.png)\n\n###### 打开注释条目：\n\n![image.png](1526288787444516.png)\n\n前三行是注释，用于识别目录名、所有者（student)和组所有者（controller）。如果存在任何其他目录标志（如 setuid,setgid,sticky）,则会出现第四行注释来显示所设置的标志（示例为 setgid）\n\n###### 标准 ACL 条目\n\n![image.png](1526347461483244.png)\n\n此目录上的 ACL 权限与前述文件示例中的相同，但适用于目录。其关键区别在于这些条目包含了执行权限（适用时），以允许目录搜索权限  \n\n###### 默认条目\n\n![image.png](1526347563548361.png)\n\n1.  默认文件所有者 ACL 权限。 文件所有者将获得 rwx ，并在新子目录上执行操作  \n\n2.  默认指定用户 ACL 权限，每位指定用户均有一个条目，他们将自动获得应用到新文件或子目录的默认ACL ，james 始终默认设置为没有任何权限\n\n\n![image.png](1526347790707759.png)\n\n默认掩码设置显示可能为所有新建文件或目录，（其具有指定用户 ACL 、组所有者 ACL 或指定组 ACL ）提供的初始最大权限： 读取和写入新文件，对新子目录的执行权限，但是新文件永远不可获得执行权限。  \n\n![image.png](1526347988908292.png)\n\n默认其它或“全局”权限，所有其它 UID 和 GID  对新文件或新子目录均没有任何权限。  \n\n上述示例中的默认条目不包括指定用户 （ UID 1005）和指定组（GID 2210），因此，它们不会自动获得添加至任何新文件或新子目录的初始 ACL 条目。这会有效的将他们限制在其已具有 ACL 的文件和子目录中，或者限制在相关文件所有者后来使用 setfacl 添加了 ACL 的文件和子目录。这些条目仍可创建自己的文件和子目录。\n\n###### TIPS:\n\ngetfacl 中的输出可用作 setfacl 的输入。使用 getfacl -R /directory 生成目录及其内容的输出，通过将此输出传递给 setfacl --set-file=file 进行批量更新，可保存此输出并可用于日后恢复。\n\nACL 掩码  \n\nACL  掩码定义可授予指定用户、组所有者和指定组的最大权限。它不限制文件所有者或其他用户的权限。所有实施 ACL 的文件和目录都将具有ACL 掩码。\n\n可使用 getfacl 查看掩码，并通过 setfacl 显示设置掩码。如果未显式设置，系统会自动计算并添加掩码；但也可从父目录默认掩码设置中继承掩码。默认情况下，每当添加、修改或删除任何受影响的 ACL 时，均会重新计算掩码。 \n\n###### ACL 权限优先级\n\n在决定一个进程（正在运行的程序）能否访问文件时，将按如下所示应用文件权限和 ACL ：\n\n*   如果正在以文件所有者身份运行进程，则应用文件的用户 ACL 权限。\n\n*   如果正在以指定用户 ACL 条目中列出的用户身份运行进程，则应用指定用户 ACL 权限（只要掩码允许）\n\n*   如果正在以与文件的组所有者相匹配的组身份运行进程，或者以具有显式指定组 ACL 条目的组身份运行进程，则应用相匹配的 ACL 权限（只要掩码允许 ）\n\n*   否则，将应用文件的其它 ACL 权限。\n\n\n##### 使用 ACL 保护文件安全\n\n###### 更改 ACL 文件权限\n\n使用 setfacl 添加、修改或删除文件和目录的标准 ACL \n\nACL 采用普通的权限文件系统表示法：rwx (读、写、执行)，“-”表示缺少相关权限。X(大写) 表示如果文件还没有相关的执行权限，则只设置目录的执行权限，用户同 chmod \n\n###### 添加或修改 ACL 权限\n\n可以使用 -m 通过合作行设置，或者使用 -M（使用“-”（短划线），而不使用 stdin 的文件名）通过文件传递 ACL 。这两个选项会为文件或目录添加新的 ACL 条目，或替换特定的现在 ACL 条目。文件或目录的任何其它现在 ACL 条目不变\n\n使用 --set 或 --set-file 选项来完全替换文件的 ACL 设置\n\n首次定义文件的 ACL 时，如果添加操作不包含文件所有者、组所有者或其它权限的设置，则系统会基于当前标准文件权限来设置以上权限的设置（这些设置也称为基础 ACL ，且无法删除），系统也会计算并添加新掩码值。\n\n要添加或修改用户 ACL 或指定用户 ACL ：\n```sh\nsetfacl -m u:name:rX file\n```\n如果 name 留空，则它适用于文件所有者，否则 name 可以是用户名或 UID 值。在本例中，授予权限为只读和执行（需要文件所属组有执行权限）（除非 file 为目录，此时目录设置执行权限，以允许进程目录搜索）\n\nACL 文件所有者和标准文件所有者权限相同，因此使用chmod 设置所有者权限对 ACL 没有任何影响\n\n要添加或修改组 ACL 或指定组 ACL \n```sh\nsetfacl -m g:name:rw file\n```\n与添加或修改用户 ACL 的模式相同，如果 name 留空，则它适用于所有者。否则请指定组名或 GID 值。\n\n对于具有 ACL 设置的谁的， chmod 的对任何组权限都没有影响，但会更新 ACL 掩码。  \n\n要添加或修改其它 ACL \n```sh\nsetfacl -m o::- file\n```\n其它 ACL 仅接受权限设置，权限通常为 “-”即无权限，或者指定任何标准权限 rwx \n\nACL 其它权限及标准其他权限相同，因此使用其它权限中的 chmod 等于使用其它权限中的 setfacl \n\n通过一条命令添加多个条目，并以逗号分隔各个条目\n```sh\nsetfacl -m u::rwx,g:sodor:rX,o::- file\n```\n###### 使用 getfacl 作为输入\n\ngetfacl 的输出作为 setfacl 输入\n```sh\ngetfacl file-A | setfacl --set-file=- file-B\n# --set-file 接受文件或 stdin 中的输入，‘-’指定了 stdin 的使用。在此例中，file-B 和 file-A 设置相同。\n```\n###### 设置明确的 ACL 掩码  \n\n可以明确设置文件或目录的 ACL 掩码，以限制指定用户、组所有者和指定组的最大有效权限。限制超出掩码的权限。\n```sh\nsetfacl -m m::r file\n```\n该操作会设置 ACL 的掩码值为只读权限，此设置不影响所有者和其它用户。\n\ngetfacl 时会在受掩码设置限制的条目旁边显示 “注释”\n\n###### TIPS:\n\n默认情况下，每当修改或删除受影响的 ACL 设置（指定用户、组所有者或指定组）时系统都会重新计算 ACL 掩码，进而可能重新设置上一个明确的掩码设置。\n\n为避免重新计算掩码，请使用 -n ,或者将掩码设置 （ -m m::perms） 包含在会修改受掩码影响的 ACL 设置的任何 setfacl 操作中。\n\n递归 ACL 修改，使用 -R 选项\n```sh\nsetfacl -R -m u:name:rX directory\n\n#该操作会将用户name 添加到 directory 和所有文件和子目录中，从而授予只读和条件执行权限。\n```\n###### 删除 ACL \n\n无需指定 \":perms（权限）\" 外，删除特定 ACL 条目与修改操作的基本形式相同。\n```sh\nsetfacl -x u:name,g:name file\n```\n该操作只会从文件或目录 ACL 列表中删除指定用户和指定组。任何其它现有 ACL 均保持活动。可以在同一 setfacl 操作中使用删除 (-x) 和 修改 （-m）操作。\n\n掩码只能在未设置其它 ACL （无法删除的基础 ACL 除外）的情况下删除。因此必须最后删除。文件不再有 ACL ，并且 ls -l 不会在权限字符串旁边显示 “+” 符号。要删除文件或目录的所有 ACL （包括目录的默认 ACL ）使用：\n```sh\nsetfacl -b file\n```\n###### 控制默认 ACL 文件权限\n\n目录可以设置默认 ACL ，这些 ACL 会由所有新文件和新子目录自动继承，可以针对各个标准 ACL 设置来设置默认 ACL 权限，其中包括默认掩码\n\n目录仍然需要具备标准 ACL 才能进程访问权限控制，因为默认 ACL 不会对目录实施访问权限控制；他们仅提供 ACL 权限继承支持。\n```sh\nsetfacl -m d:u:name:rx directory\n```\n该命令会添加一个默认的指定用户（d:u:name），该用户拥有对子目录的只读和执行权限。\n\n用于为各个 ACL 类型添加默认 ACL 的 setfacl 命令与用于标准 ACL 的命令完全相同，但是以 \"d:\" 开关，或者在命令行使用 \"-d\" 选项。\n\n###### TIPS：\n\n设置目录默认 ACL 时，需要在默认 ACL 中包含执行权限（X）来确保用户可以访问子目录.\n\n用户不会自动设置对新文件的常规文件执行权限，新常规文件的掩码为rw-\n\n新文件和新子目录会继续从创建用户设置自己的 UID 和主要组 GID 值，不过当父目录 setgid 标志启用时除外，这种情况下，主要组 GID 与 父目录 GID 相同。\n\n###### 删除默认 ACL\n```sh\nsetfacl -x d:u:name directory \nsetfacl -k /directory     #删除目录的所有默认 ACL \nsetfacl -b /directory     #删除目录的所有 ACL\n\nsetfacl -Rm g:sodor:rwX /shares/steamies    #递归授予sodor组 读取、写入、条件执行权限。（仅针对目录和现有可执行文件）\nsetfacl -Rm u:james:- /shares/steamies    #递归授予 james 无任何权限\nsetfacl -m d:g:sodor:rwx /shares/steamies    #添加sodor 组默认访问规则，steamies 目录的读取、写入、执行权限\nsetfacl -m d:u:james:- /share/steamies    #添加用户james 对steamies 目录无任何权限\n```\n","source":"_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae.md","raw":"---\ntitle: RH134 第六章 使用访问控制列表（ACL）控制对文件的访问\nurl: 369.html\nid: 369\ncategories:\n  - RHEL134\ndate: 2018-05-17 17:16:40\ntags:\n---\n\n###### 访问控制列表概念  \n\n标准Linux 文件权限可以满足绝大多数情况的要求，但它也有局限性。限制访问文件的权限也仅限授予文件所有者、单组成员或其他任何人。进程（正在运行的程序）可能不适合成为文件所属的成员，授予所有人权限则更不是理想的操作。\n\nACL 允许向文件分配细化权限。除标准的文件所有者、组所有者和其他文件权限之外，还可以向指定用户或指定组，以及由UID或GUID确定的用户和组授予权限。这个权限均应用相同的权限标志：r w x .\n\n文件所有者可以在单个文件或目录上设置ACL 。新文件和子目录可以自动从父目录默认ACL（若存在）中继承ACL设置。与常规文件的访问规则相似，父目录层次结构需要至少设置其他执行权限，以便启用指定用户和指定组的访问权限。\n\n###### 文件系统挂载选项\n\n文件系统挂载已经启用的ACL 支持。XFS 文件系统内置有 ACL支持。在 RHEL 7上创建的ext4 文件系统默认启用了 acl 选项，而安装红帽早期版本中创建的ext4 文件系统则可能需要通过挂载请求包含ACL 选项，或者在超级块中设置选项。\n\n###### 查看和解释ACL 权限\n\nls -l 仅输入最少的 ACL 设置详细信息\n\n![image.png](1526285537683356.png)\n\n如果由10个字符组成的权限字符串的末尾是 “+”，即表示此文件有相关联的ACL 设置 。对用户、组和其它的“rwx”标志解释如下：  \n\n*   用户：显示用户 ACL 设置，其与标准的用户文件设置相同：rwx\n\n*   组：显示当前的 ACL 掩码设置，而不是组所有者设置：rw\n\n*   其他：显示其他 ACL 设置，其与标准的其它文件设置相同，无访问权限。\n\n\n###### TIPS:\n\n如果使用chmod 更改具有 ACL 文件的组权限，则不会更改组所有者仅限，而是更改 ACL 掩码。如果目的是更新文件的组所有者权限，需要使用\n```sh\n setfacl -m g::perms file\n```\n###### 查看文件 acl \n\n要显示文件上的 ACL 设置 ，使用 getfacl file\n\n![image.png](1526286552326310.png)\n\n![image.png](1526286628954630.png)\n\n#前三行是注释，用于识别文件名、所有者（student）、和组所有者（controller）.如果存在任何其它文件标志（如 setuid 或 setgid ),则会出现第四行注释来显示所设置的标志。\n\n![image.png](1526286600143773.png)\n\n1.  文件所有者权限。student 具有 rwx 。  \n\n2.  指定用户权限。与此文件相关联的每位指定用户均有一个条目。james 不具有任何权限。\n\n3.  指定用户权限。UID 1005 具有 rwx ，但是掩码将有效权限限制为rw \n\n\n###### 掩码条目：\n\n![image.png](1526288457208748.png)\n\n掩码设置显示可能为所有指定用户、组所有者和指定组提供的最大权限 。 UID 1005 、controller 和 GID 2210 无法执行此文件，即便每个条目增均已经设置执行权限。\n\n###### 其它条目：\n\n![image.png](1526288467671948.png)\n\n其他或“全局”权限。所有其他的UID 和GID 均无任何权限。\n\n###### 查看目录 ACL\n\n要显示目录上的 ACL 设置，使用 getfacl /direcotry:\n\n![image.png](1526288669879354.png)\n\n###### 打开注释条目：\n\n![image.png](1526288787444516.png)\n\n前三行是注释，用于识别目录名、所有者（student)和组所有者（controller）。如果存在任何其他目录标志（如 setuid,setgid,sticky）,则会出现第四行注释来显示所设置的标志（示例为 setgid）\n\n###### 标准 ACL 条目\n\n![image.png](1526347461483244.png)\n\n此目录上的 ACL 权限与前述文件示例中的相同，但适用于目录。其关键区别在于这些条目包含了执行权限（适用时），以允许目录搜索权限  \n\n###### 默认条目\n\n![image.png](1526347563548361.png)\n\n1.  默认文件所有者 ACL 权限。 文件所有者将获得 rwx ，并在新子目录上执行操作  \n\n2.  默认指定用户 ACL 权限，每位指定用户均有一个条目，他们将自动获得应用到新文件或子目录的默认ACL ，james 始终默认设置为没有任何权限\n\n\n![image.png](1526347790707759.png)\n\n默认掩码设置显示可能为所有新建文件或目录，（其具有指定用户 ACL 、组所有者 ACL 或指定组 ACL ）提供的初始最大权限： 读取和写入新文件，对新子目录的执行权限，但是新文件永远不可获得执行权限。  \n\n![image.png](1526347988908292.png)\n\n默认其它或“全局”权限，所有其它 UID 和 GID  对新文件或新子目录均没有任何权限。  \n\n上述示例中的默认条目不包括指定用户 （ UID 1005）和指定组（GID 2210），因此，它们不会自动获得添加至任何新文件或新子目录的初始 ACL 条目。这会有效的将他们限制在其已具有 ACL 的文件和子目录中，或者限制在相关文件所有者后来使用 setfacl 添加了 ACL 的文件和子目录。这些条目仍可创建自己的文件和子目录。\n\n###### TIPS:\n\ngetfacl 中的输出可用作 setfacl 的输入。使用 getfacl -R /directory 生成目录及其内容的输出，通过将此输出传递给 setfacl --set-file=file 进行批量更新，可保存此输出并可用于日后恢复。\n\nACL 掩码  \n\nACL  掩码定义可授予指定用户、组所有者和指定组的最大权限。它不限制文件所有者或其他用户的权限。所有实施 ACL 的文件和目录都将具有ACL 掩码。\n\n可使用 getfacl 查看掩码，并通过 setfacl 显示设置掩码。如果未显式设置，系统会自动计算并添加掩码；但也可从父目录默认掩码设置中继承掩码。默认情况下，每当添加、修改或删除任何受影响的 ACL 时，均会重新计算掩码。 \n\n###### ACL 权限优先级\n\n在决定一个进程（正在运行的程序）能否访问文件时，将按如下所示应用文件权限和 ACL ：\n\n*   如果正在以文件所有者身份运行进程，则应用文件的用户 ACL 权限。\n\n*   如果正在以指定用户 ACL 条目中列出的用户身份运行进程，则应用指定用户 ACL 权限（只要掩码允许）\n\n*   如果正在以与文件的组所有者相匹配的组身份运行进程，或者以具有显式指定组 ACL 条目的组身份运行进程，则应用相匹配的 ACL 权限（只要掩码允许 ）\n\n*   否则，将应用文件的其它 ACL 权限。\n\n\n##### 使用 ACL 保护文件安全\n\n###### 更改 ACL 文件权限\n\n使用 setfacl 添加、修改或删除文件和目录的标准 ACL \n\nACL 采用普通的权限文件系统表示法：rwx (读、写、执行)，“-”表示缺少相关权限。X(大写) 表示如果文件还没有相关的执行权限，则只设置目录的执行权限，用户同 chmod \n\n###### 添加或修改 ACL 权限\n\n可以使用 -m 通过合作行设置，或者使用 -M（使用“-”（短划线），而不使用 stdin 的文件名）通过文件传递 ACL 。这两个选项会为文件或目录添加新的 ACL 条目，或替换特定的现在 ACL 条目。文件或目录的任何其它现在 ACL 条目不变\n\n使用 --set 或 --set-file 选项来完全替换文件的 ACL 设置\n\n首次定义文件的 ACL 时，如果添加操作不包含文件所有者、组所有者或其它权限的设置，则系统会基于当前标准文件权限来设置以上权限的设置（这些设置也称为基础 ACL ，且无法删除），系统也会计算并添加新掩码值。\n\n要添加或修改用户 ACL 或指定用户 ACL ：\n```sh\nsetfacl -m u:name:rX file\n```\n如果 name 留空，则它适用于文件所有者，否则 name 可以是用户名或 UID 值。在本例中，授予权限为只读和执行（需要文件所属组有执行权限）（除非 file 为目录，此时目录设置执行权限，以允许进程目录搜索）\n\nACL 文件所有者和标准文件所有者权限相同，因此使用chmod 设置所有者权限对 ACL 没有任何影响\n\n要添加或修改组 ACL 或指定组 ACL \n```sh\nsetfacl -m g:name:rw file\n```\n与添加或修改用户 ACL 的模式相同，如果 name 留空，则它适用于所有者。否则请指定组名或 GID 值。\n\n对于具有 ACL 设置的谁的， chmod 的对任何组权限都没有影响，但会更新 ACL 掩码。  \n\n要添加或修改其它 ACL \n```sh\nsetfacl -m o::- file\n```\n其它 ACL 仅接受权限设置，权限通常为 “-”即无权限，或者指定任何标准权限 rwx \n\nACL 其它权限及标准其他权限相同，因此使用其它权限中的 chmod 等于使用其它权限中的 setfacl \n\n通过一条命令添加多个条目，并以逗号分隔各个条目\n```sh\nsetfacl -m u::rwx,g:sodor:rX,o::- file\n```\n###### 使用 getfacl 作为输入\n\ngetfacl 的输出作为 setfacl 输入\n```sh\ngetfacl file-A | setfacl --set-file=- file-B\n# --set-file 接受文件或 stdin 中的输入，‘-’指定了 stdin 的使用。在此例中，file-B 和 file-A 设置相同。\n```\n###### 设置明确的 ACL 掩码  \n\n可以明确设置文件或目录的 ACL 掩码，以限制指定用户、组所有者和指定组的最大有效权限。限制超出掩码的权限。\n```sh\nsetfacl -m m::r file\n```\n该操作会设置 ACL 的掩码值为只读权限，此设置不影响所有者和其它用户。\n\ngetfacl 时会在受掩码设置限制的条目旁边显示 “注释”\n\n###### TIPS:\n\n默认情况下，每当修改或删除受影响的 ACL 设置（指定用户、组所有者或指定组）时系统都会重新计算 ACL 掩码，进而可能重新设置上一个明确的掩码设置。\n\n为避免重新计算掩码，请使用 -n ,或者将掩码设置 （ -m m::perms） 包含在会修改受掩码影响的 ACL 设置的任何 setfacl 操作中。\n\n递归 ACL 修改，使用 -R 选项\n```sh\nsetfacl -R -m u:name:rX directory\n\n#该操作会将用户name 添加到 directory 和所有文件和子目录中，从而授予只读和条件执行权限。\n```\n###### 删除 ACL \n\n无需指定 \":perms（权限）\" 外，删除特定 ACL 条目与修改操作的基本形式相同。\n```sh\nsetfacl -x u:name,g:name file\n```\n该操作只会从文件或目录 ACL 列表中删除指定用户和指定组。任何其它现有 ACL 均保持活动。可以在同一 setfacl 操作中使用删除 (-x) 和 修改 （-m）操作。\n\n掩码只能在未设置其它 ACL （无法删除的基础 ACL 除外）的情况下删除。因此必须最后删除。文件不再有 ACL ，并且 ls -l 不会在权限字符串旁边显示 “+” 符号。要删除文件或目录的所有 ACL （包括目录的默认 ACL ）使用：\n```sh\nsetfacl -b file\n```\n###### 控制默认 ACL 文件权限\n\n目录可以设置默认 ACL ，这些 ACL 会由所有新文件和新子目录自动继承，可以针对各个标准 ACL 设置来设置默认 ACL 权限，其中包括默认掩码\n\n目录仍然需要具备标准 ACL 才能进程访问权限控制，因为默认 ACL 不会对目录实施访问权限控制；他们仅提供 ACL 权限继承支持。\n```sh\nsetfacl -m d:u:name:rx directory\n```\n该命令会添加一个默认的指定用户（d:u:name），该用户拥有对子目录的只读和执行权限。\n\n用于为各个 ACL 类型添加默认 ACL 的 setfacl 命令与用于标准 ACL 的命令完全相同，但是以 \"d:\" 开关，或者在命令行使用 \"-d\" 选项。\n\n###### TIPS：\n\n设置目录默认 ACL 时，需要在默认 ACL 中包含执行权限（X）来确保用户可以访问子目录.\n\n用户不会自动设置对新文件的常规文件执行权限，新常规文件的掩码为rw-\n\n新文件和新子目录会继续从创建用户设置自己的 UID 和主要组 GID 值，不过当父目录 setgid 标志启用时除外，这种情况下，主要组 GID 与 父目录 GID 相同。\n\n###### 删除默认 ACL\n```sh\nsetfacl -x d:u:name directory \nsetfacl -k /directory     #删除目录的所有默认 ACL \nsetfacl -b /directory     #删除目录的所有 ACL\n\nsetfacl -Rm g:sodor:rwX /shares/steamies    #递归授予sodor组 读取、写入、条件执行权限。（仅针对目录和现有可执行文件）\nsetfacl -Rm u:james:- /shares/steamies    #递归授予 james 无任何权限\nsetfacl -m d:g:sodor:rwx /shares/steamies    #添加sodor 组默认访问规则，steamies 目录的读取、写入、执行权限\nsetfacl -m d:u:james:- /share/steamies    #添加用户james 对steamies 目录无任何权限\n```\n","slug":"rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae","published":1,"updated":"2019-01-06T17:39:27.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqi20001qlxkjjuto19hl","content":"<h6 id=\"访问控制列表概念\"><a href=\"#访问控制列表概念\" class=\"headerlink\" title=\"访问控制列表概念\"></a>访问控制列表概念</h6><p>标准Linux 文件权限可以满足绝大多数情况的要求，但它也有局限性。限制访问文件的权限也仅限授予文件所有者、单组成员或其他任何人。进程（正在运行的程序）可能不适合成为文件所属的成员，授予所有人权限则更不是理想的操作。</p>\n<p>ACL 允许向文件分配细化权限。除标准的文件所有者、组所有者和其他文件权限之外，还可以向指定用户或指定组，以及由UID或GUID确定的用户和组授予权限。这个权限均应用相同的权限标志：r w x .</p>\n<p>文件所有者可以在单个文件或目录上设置ACL 。新文件和子目录可以自动从父目录默认ACL（若存在）中继承ACL设置。与常规文件的访问规则相似，父目录层次结构需要至少设置其他执行权限，以便启用指定用户和指定组的访问权限。</p>\n<h6 id=\"文件系统挂载选项\"><a href=\"#文件系统挂载选项\" class=\"headerlink\" title=\"文件系统挂载选项\"></a>文件系统挂载选项</h6><p>文件系统挂载已经启用的ACL 支持。XFS 文件系统内置有 ACL支持。在 RHEL 7上创建的ext4 文件系统默认启用了 acl 选项，而安装红帽早期版本中创建的ext4 文件系统则可能需要通过挂载请求包含ACL 选项，或者在超级块中设置选项。</p>\n<h6 id=\"查看和解释ACL-权限\"><a href=\"#查看和解释ACL-权限\" class=\"headerlink\" title=\"查看和解释ACL 权限\"></a>查看和解释ACL 权限</h6><p>ls -l 仅输入最少的 ACL 设置详细信息</p>\n<p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526285537683356.png\" alt=\"image.png\"></p>\n<p>如果由10个字符组成的权限字符串的末尾是 “+”，即表示此文件有相关联的ACL 设置 。对用户、组和其它的“rwx”标志解释如下：  </p>\n<ul>\n<li><p>用户：显示用户 ACL 设置，其与标准的用户文件设置相同：rwx</p>\n</li>\n<li><p>组：显示当前的 ACL 掩码设置，而不是组所有者设置：rw</p>\n</li>\n<li><p>其他：显示其他 ACL 设置，其与标准的其它文件设置相同，无访问权限。</p>\n</li>\n</ul>\n<h6 id=\"TIPS\"><a href=\"#TIPS\" class=\"headerlink\" title=\"TIPS:\"></a>TIPS:</h6><p>如果使用chmod 更改具有 ACL 文件的组权限，则不会更改组所有者仅限，而是更改 ACL 掩码。如果目的是更新文件的组所有者权限，需要使用<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> setfacl -m g::perms file</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"查看文件-acl\"><a href=\"#查看文件-acl\" class=\"headerlink\" title=\"查看文件 acl\"></a>查看文件 acl</h6><p>要显示文件上的 ACL 设置 ，使用 getfacl file</p>\n<p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526286552326310.png\" alt=\"image.png\"></p>\n<p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526286628954630.png\" alt=\"image.png\"></p>\n<p>#前三行是注释，用于识别文件名、所有者（student）、和组所有者（controller）.如果存在任何其它文件标志（如 setuid 或 setgid ),则会出现第四行注释来显示所设置的标志。</p>\n<p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526286600143773.png\" alt=\"image.png\"></p>\n<ol>\n<li><p>文件所有者权限。student 具有 rwx 。  </p>\n</li>\n<li><p>指定用户权限。与此文件相关联的每位指定用户均有一个条目。james 不具有任何权限。</p>\n</li>\n<li><p>指定用户权限。UID 1005 具有 rwx ，但是掩码将有效权限限制为rw </p>\n</li>\n</ol>\n<h6 id=\"掩码条目：\"><a href=\"#掩码条目：\" class=\"headerlink\" title=\"掩码条目：\"></a>掩码条目：</h6><p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526288457208748.png\" alt=\"image.png\"></p>\n<p>掩码设置显示可能为所有指定用户、组所有者和指定组提供的最大权限 。 UID 1005 、controller 和 GID 2210 无法执行此文件，即便每个条目增均已经设置执行权限。</p>\n<h6 id=\"其它条目：\"><a href=\"#其它条目：\" class=\"headerlink\" title=\"其它条目：\"></a>其它条目：</h6><p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526288467671948.png\" alt=\"image.png\"></p>\n<p>其他或“全局”权限。所有其他的UID 和GID 均无任何权限。</p>\n<h6 id=\"查看目录-ACL\"><a href=\"#查看目录-ACL\" class=\"headerlink\" title=\"查看目录 ACL\"></a>查看目录 ACL</h6><p>要显示目录上的 ACL 设置，使用 getfacl /direcotry:</p>\n<p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526288669879354.png\" alt=\"image.png\"></p>\n<h6 id=\"打开注释条目：\"><a href=\"#打开注释条目：\" class=\"headerlink\" title=\"打开注释条目：\"></a>打开注释条目：</h6><p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526288787444516.png\" alt=\"image.png\"></p>\n<p>前三行是注释，用于识别目录名、所有者（student)和组所有者（controller）。如果存在任何其他目录标志（如 setuid,setgid,sticky）,则会出现第四行注释来显示所设置的标志（示例为 setgid）</p>\n<h6 id=\"标准-ACL-条目\"><a href=\"#标准-ACL-条目\" class=\"headerlink\" title=\"标准 ACL 条目\"></a>标准 ACL 条目</h6><p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526347461483244.png\" alt=\"image.png\"></p>\n<p>此目录上的 ACL 权限与前述文件示例中的相同，但适用于目录。其关键区别在于这些条目包含了执行权限（适用时），以允许目录搜索权限  </p>\n<h6 id=\"默认条目\"><a href=\"#默认条目\" class=\"headerlink\" title=\"默认条目\"></a>默认条目</h6><p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526347563548361.png\" alt=\"image.png\"></p>\n<ol>\n<li><p>默认文件所有者 ACL 权限。 文件所有者将获得 rwx ，并在新子目录上执行操作  </p>\n</li>\n<li><p>默认指定用户 ACL 权限，每位指定用户均有一个条目，他们将自动获得应用到新文件或子目录的默认ACL ，james 始终默认设置为没有任何权限</p>\n</li>\n</ol>\n<p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526347790707759.png\" alt=\"image.png\"></p>\n<p>默认掩码设置显示可能为所有新建文件或目录，（其具有指定用户 ACL 、组所有者 ACL 或指定组 ACL ）提供的初始最大权限： 读取和写入新文件，对新子目录的执行权限，但是新文件永远不可获得执行权限。  </p>\n<p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526347988908292.png\" alt=\"image.png\"></p>\n<p>默认其它或“全局”权限，所有其它 UID 和 GID  对新文件或新子目录均没有任何权限。  </p>\n<p>上述示例中的默认条目不包括指定用户 （ UID 1005）和指定组（GID 2210），因此，它们不会自动获得添加至任何新文件或新子目录的初始 ACL 条目。这会有效的将他们限制在其已具有 ACL 的文件和子目录中，或者限制在相关文件所有者后来使用 setfacl 添加了 ACL 的文件和子目录。这些条目仍可创建自己的文件和子目录。</p>\n<h6 id=\"TIPS-1\"><a href=\"#TIPS-1\" class=\"headerlink\" title=\"TIPS:\"></a>TIPS:</h6><p>getfacl 中的输出可用作 setfacl 的输入。使用 getfacl -R /directory 生成目录及其内容的输出，通过将此输出传递给 setfacl –set-file=file 进行批量更新，可保存此输出并可用于日后恢复。</p>\n<p>ACL 掩码  </p>\n<p>ACL  掩码定义可授予指定用户、组所有者和指定组的最大权限。它不限制文件所有者或其他用户的权限。所有实施 ACL 的文件和目录都将具有ACL 掩码。</p>\n<p>可使用 getfacl 查看掩码，并通过 setfacl 显示设置掩码。如果未显式设置，系统会自动计算并添加掩码；但也可从父目录默认掩码设置中继承掩码。默认情况下，每当添加、修改或删除任何受影响的 ACL 时，均会重新计算掩码。 </p>\n<h6 id=\"ACL-权限优先级\"><a href=\"#ACL-权限优先级\" class=\"headerlink\" title=\"ACL 权限优先级\"></a>ACL 权限优先级</h6><p>在决定一个进程（正在运行的程序）能否访问文件时，将按如下所示应用文件权限和 ACL ：</p>\n<ul>\n<li><p>如果正在以文件所有者身份运行进程，则应用文件的用户 ACL 权限。</p>\n</li>\n<li><p>如果正在以指定用户 ACL 条目中列出的用户身份运行进程，则应用指定用户 ACL 权限（只要掩码允许）</p>\n</li>\n<li><p>如果正在以与文件的组所有者相匹配的组身份运行进程，或者以具有显式指定组 ACL 条目的组身份运行进程，则应用相匹配的 ACL 权限（只要掩码允许 ）</p>\n</li>\n<li><p>否则，将应用文件的其它 ACL 权限。</p>\n</li>\n</ul>\n<h5 id=\"使用-ACL-保护文件安全\"><a href=\"#使用-ACL-保护文件安全\" class=\"headerlink\" title=\"使用 ACL 保护文件安全\"></a>使用 ACL 保护文件安全</h5><h6 id=\"更改-ACL-文件权限\"><a href=\"#更改-ACL-文件权限\" class=\"headerlink\" title=\"更改 ACL 文件权限\"></a>更改 ACL 文件权限</h6><p>使用 setfacl 添加、修改或删除文件和目录的标准 ACL </p>\n<p>ACL 采用普通的权限文件系统表示法：rwx (读、写、执行)，“-”表示缺少相关权限。X(大写) 表示如果文件还没有相关的执行权限，则只设置目录的执行权限，用户同 chmod </p>\n<h6 id=\"添加或修改-ACL-权限\"><a href=\"#添加或修改-ACL-权限\" class=\"headerlink\" title=\"添加或修改 ACL 权限\"></a>添加或修改 ACL 权限</h6><p>可以使用 -m 通过合作行设置，或者使用 -M（使用“-”（短划线），而不使用 stdin 的文件名）通过文件传递 ACL 。这两个选项会为文件或目录添加新的 ACL 条目，或替换特定的现在 ACL 条目。文件或目录的任何其它现在 ACL 条目不变</p>\n<p>使用 –set 或 –set-file 选项来完全替换文件的 ACL 设置</p>\n<p>首次定义文件的 ACL 时，如果添加操作不包含文件所有者、组所有者或其它权限的设置，则系统会基于当前标准文件权限来设置以上权限的设置（这些设置也称为基础 ACL ，且无法删除），系统也会计算并添加新掩码值。</p>\n<p>要添加或修改用户 ACL 或指定用户 ACL ：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl -m u:name:rX file</span><br></pre></td></tr></table></figure></p>\n<p>如果 name 留空，则它适用于文件所有者，否则 name 可以是用户名或 UID 值。在本例中，授予权限为只读和执行（需要文件所属组有执行权限）（除非 file 为目录，此时目录设置执行权限，以允许进程目录搜索）</p>\n<p>ACL 文件所有者和标准文件所有者权限相同，因此使用chmod 设置所有者权限对 ACL 没有任何影响</p>\n<p>要添加或修改组 ACL 或指定组 ACL<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl -m g:name:rw file</span><br></pre></td></tr></table></figure></p>\n<p>与添加或修改用户 ACL 的模式相同，如果 name 留空，则它适用于所有者。否则请指定组名或 GID 值。</p>\n<p>对于具有 ACL 设置的谁的， chmod 的对任何组权限都没有影响，但会更新 ACL 掩码。  </p>\n<p>要添加或修改其它 ACL<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl -m o::- file</span><br></pre></td></tr></table></figure></p>\n<p>其它 ACL 仅接受权限设置，权限通常为 “-”即无权限，或者指定任何标准权限 rwx </p>\n<p>ACL 其它权限及标准其他权限相同，因此使用其它权限中的 chmod 等于使用其它权限中的 setfacl </p>\n<p>通过一条命令添加多个条目，并以逗号分隔各个条目<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl -m u::rwx,g:sodor:rX,o::- file</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"使用-getfacl-作为输入\"><a href=\"#使用-getfacl-作为输入\" class=\"headerlink\" title=\"使用 getfacl 作为输入\"></a>使用 getfacl 作为输入</h6><p>getfacl 的输出作为 setfacl 输入<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getfacl file-A | setfacl --<span class=\"built_in\">set</span>-file=- file-B</span><br><span class=\"line\"><span class=\"comment\"># --set-file 接受文件或 stdin 中的输入，‘-’指定了 stdin 的使用。在此例中，file-B 和 file-A 设置相同。</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"设置明确的-ACL-掩码\"><a href=\"#设置明确的-ACL-掩码\" class=\"headerlink\" title=\"设置明确的 ACL 掩码\"></a>设置明确的 ACL 掩码</h6><p>可以明确设置文件或目录的 ACL 掩码，以限制指定用户、组所有者和指定组的最大有效权限。限制超出掩码的权限。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl -m m::r file</span><br></pre></td></tr></table></figure></p>\n<p>该操作会设置 ACL 的掩码值为只读权限，此设置不影响所有者和其它用户。</p>\n<p>getfacl 时会在受掩码设置限制的条目旁边显示 “注释”</p>\n<h6 id=\"TIPS-2\"><a href=\"#TIPS-2\" class=\"headerlink\" title=\"TIPS:\"></a>TIPS:</h6><p>默认情况下，每当修改或删除受影响的 ACL 设置（指定用户、组所有者或指定组）时系统都会重新计算 ACL 掩码，进而可能重新设置上一个明确的掩码设置。</p>\n<p>为避免重新计算掩码，请使用 -n ,或者将掩码设置 （ -m m::perms） 包含在会修改受掩码影响的 ACL 设置的任何 setfacl 操作中。</p>\n<p>递归 ACL 修改，使用 -R 选项<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl -R -m u:name:rX directory</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#该操作会将用户name 添加到 directory 和所有文件和子目录中，从而授予只读和条件执行权限。</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"删除-ACL\"><a href=\"#删除-ACL\" class=\"headerlink\" title=\"删除 ACL\"></a>删除 ACL</h6><p>无需指定 “:perms（权限）” 外，删除特定 ACL 条目与修改操作的基本形式相同。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl -x u:name,g:name file</span><br></pre></td></tr></table></figure></p>\n<p>该操作只会从文件或目录 ACL 列表中删除指定用户和指定组。任何其它现有 ACL 均保持活动。可以在同一 setfacl 操作中使用删除 (-x) 和 修改 （-m）操作。</p>\n<p>掩码只能在未设置其它 ACL （无法删除的基础 ACL 除外）的情况下删除。因此必须最后删除。文件不再有 ACL ，并且 ls -l 不会在权限字符串旁边显示 “+” 符号。要删除文件或目录的所有 ACL （包括目录的默认 ACL ）使用：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl -b file</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"控制默认-ACL-文件权限\"><a href=\"#控制默认-ACL-文件权限\" class=\"headerlink\" title=\"控制默认 ACL 文件权限\"></a>控制默认 ACL 文件权限</h6><p>目录可以设置默认 ACL ，这些 ACL 会由所有新文件和新子目录自动继承，可以针对各个标准 ACL 设置来设置默认 ACL 权限，其中包括默认掩码</p>\n<p>目录仍然需要具备标准 ACL 才能进程访问权限控制，因为默认 ACL 不会对目录实施访问权限控制；他们仅提供 ACL 权限继承支持。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl -m d:u:name:rx directory</span><br></pre></td></tr></table></figure></p>\n<p>该命令会添加一个默认的指定用户（d:u:name），该用户拥有对子目录的只读和执行权限。</p>\n<p>用于为各个 ACL 类型添加默认 ACL 的 setfacl 命令与用于标准 ACL 的命令完全相同，但是以 “d:” 开关，或者在命令行使用 “-d” 选项。</p>\n<h6 id=\"TIPS：\"><a href=\"#TIPS：\" class=\"headerlink\" title=\"TIPS：\"></a>TIPS：</h6><p>设置目录默认 ACL 时，需要在默认 ACL 中包含执行权限（X）来确保用户可以访问子目录.</p>\n<p>用户不会自动设置对新文件的常规文件执行权限，新常规文件的掩码为rw-</p>\n<p>新文件和新子目录会继续从创建用户设置自己的 UID 和主要组 GID 值，不过当父目录 setgid 标志启用时除外，这种情况下，主要组 GID 与 父目录 GID 相同。</p>\n<h6 id=\"删除默认-ACL\"><a href=\"#删除默认-ACL\" class=\"headerlink\" title=\"删除默认 ACL\"></a>删除默认 ACL</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl -x d:u:name directory </span><br><span class=\"line\">setfacl -k /directory     <span class=\"comment\">#删除目录的所有默认 ACL </span></span><br><span class=\"line\">setfacl -b /directory     <span class=\"comment\">#删除目录的所有 ACL</span></span><br><span class=\"line\"></span><br><span class=\"line\">setfacl -Rm g:sodor:rwX /shares/steamies    <span class=\"comment\">#递归授予sodor组 读取、写入、条件执行权限。（仅针对目录和现有可执行文件）</span></span><br><span class=\"line\">setfacl -Rm u:james:- /shares/steamies    <span class=\"comment\">#递归授予 james 无任何权限</span></span><br><span class=\"line\">setfacl -m d:g:sodor:rwx /shares/steamies    <span class=\"comment\">#添加sodor 组默认访问规则，steamies 目录的读取、写入、执行权限</span></span><br><span class=\"line\">setfacl -m d:u:james:- /share/steamies    <span class=\"comment\">#添加用户james 对steamies 目录无任何权限</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"访问控制列表概念\"><a href=\"#访问控制列表概念\" class=\"headerlink\" title=\"访问控制列表概念\"></a>访问控制列表概念</h6><p>标准Linux 文件权限可以满足绝大多数情况的要求，但它也有局限性。限制访问文件的权限也仅限授予文件所有者、单组成员或其他任何人。进程（正在运行的程序）可能不适合成为文件所属的成员，授予所有人权限则更不是理想的操作。</p>\n<p>ACL 允许向文件分配细化权限。除标准的文件所有者、组所有者和其他文件权限之外，还可以向指定用户或指定组，以及由UID或GUID确定的用户和组授予权限。这个权限均应用相同的权限标志：r w x .</p>\n<p>文件所有者可以在单个文件或目录上设置ACL 。新文件和子目录可以自动从父目录默认ACL（若存在）中继承ACL设置。与常规文件的访问规则相似，父目录层次结构需要至少设置其他执行权限，以便启用指定用户和指定组的访问权限。</p>\n<h6 id=\"文件系统挂载选项\"><a href=\"#文件系统挂载选项\" class=\"headerlink\" title=\"文件系统挂载选项\"></a>文件系统挂载选项</h6><p>文件系统挂载已经启用的ACL 支持。XFS 文件系统内置有 ACL支持。在 RHEL 7上创建的ext4 文件系统默认启用了 acl 选项，而安装红帽早期版本中创建的ext4 文件系统则可能需要通过挂载请求包含ACL 选项，或者在超级块中设置选项。</p>\n<h6 id=\"查看和解释ACL-权限\"><a href=\"#查看和解释ACL-权限\" class=\"headerlink\" title=\"查看和解释ACL 权限\"></a>查看和解释ACL 权限</h6><p>ls -l 仅输入最少的 ACL 设置详细信息</p>\n<p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526285537683356.png\" alt=\"image.png\"></p>\n<p>如果由10个字符组成的权限字符串的末尾是 “+”，即表示此文件有相关联的ACL 设置 。对用户、组和其它的“rwx”标志解释如下：  </p>\n<ul>\n<li><p>用户：显示用户 ACL 设置，其与标准的用户文件设置相同：rwx</p>\n</li>\n<li><p>组：显示当前的 ACL 掩码设置，而不是组所有者设置：rw</p>\n</li>\n<li><p>其他：显示其他 ACL 设置，其与标准的其它文件设置相同，无访问权限。</p>\n</li>\n</ul>\n<h6 id=\"TIPS\"><a href=\"#TIPS\" class=\"headerlink\" title=\"TIPS:\"></a>TIPS:</h6><p>如果使用chmod 更改具有 ACL 文件的组权限，则不会更改组所有者仅限，而是更改 ACL 掩码。如果目的是更新文件的组所有者权限，需要使用<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> setfacl -m g::perms file</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"查看文件-acl\"><a href=\"#查看文件-acl\" class=\"headerlink\" title=\"查看文件 acl\"></a>查看文件 acl</h6><p>要显示文件上的 ACL 设置 ，使用 getfacl file</p>\n<p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526286552326310.png\" alt=\"image.png\"></p>\n<p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526286628954630.png\" alt=\"image.png\"></p>\n<p>#前三行是注释，用于识别文件名、所有者（student）、和组所有者（controller）.如果存在任何其它文件标志（如 setuid 或 setgid ),则会出现第四行注释来显示所设置的标志。</p>\n<p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526286600143773.png\" alt=\"image.png\"></p>\n<ol>\n<li><p>文件所有者权限。student 具有 rwx 。  </p>\n</li>\n<li><p>指定用户权限。与此文件相关联的每位指定用户均有一个条目。james 不具有任何权限。</p>\n</li>\n<li><p>指定用户权限。UID 1005 具有 rwx ，但是掩码将有效权限限制为rw </p>\n</li>\n</ol>\n<h6 id=\"掩码条目：\"><a href=\"#掩码条目：\" class=\"headerlink\" title=\"掩码条目：\"></a>掩码条目：</h6><p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526288457208748.png\" alt=\"image.png\"></p>\n<p>掩码设置显示可能为所有指定用户、组所有者和指定组提供的最大权限 。 UID 1005 、controller 和 GID 2210 无法执行此文件，即便每个条目增均已经设置执行权限。</p>\n<h6 id=\"其它条目：\"><a href=\"#其它条目：\" class=\"headerlink\" title=\"其它条目：\"></a>其它条目：</h6><p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526288467671948.png\" alt=\"image.png\"></p>\n<p>其他或“全局”权限。所有其他的UID 和GID 均无任何权限。</p>\n<h6 id=\"查看目录-ACL\"><a href=\"#查看目录-ACL\" class=\"headerlink\" title=\"查看目录 ACL\"></a>查看目录 ACL</h6><p>要显示目录上的 ACL 设置，使用 getfacl /direcotry:</p>\n<p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526288669879354.png\" alt=\"image.png\"></p>\n<h6 id=\"打开注释条目：\"><a href=\"#打开注释条目：\" class=\"headerlink\" title=\"打开注释条目：\"></a>打开注释条目：</h6><p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526288787444516.png\" alt=\"image.png\"></p>\n<p>前三行是注释，用于识别目录名、所有者（student)和组所有者（controller）。如果存在任何其他目录标志（如 setuid,setgid,sticky）,则会出现第四行注释来显示所设置的标志（示例为 setgid）</p>\n<h6 id=\"标准-ACL-条目\"><a href=\"#标准-ACL-条目\" class=\"headerlink\" title=\"标准 ACL 条目\"></a>标准 ACL 条目</h6><p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526347461483244.png\" alt=\"image.png\"></p>\n<p>此目录上的 ACL 权限与前述文件示例中的相同，但适用于目录。其关键区别在于这些条目包含了执行权限（适用时），以允许目录搜索权限  </p>\n<h6 id=\"默认条目\"><a href=\"#默认条目\" class=\"headerlink\" title=\"默认条目\"></a>默认条目</h6><p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526347563548361.png\" alt=\"image.png\"></p>\n<ol>\n<li><p>默认文件所有者 ACL 权限。 文件所有者将获得 rwx ，并在新子目录上执行操作  </p>\n</li>\n<li><p>默认指定用户 ACL 权限，每位指定用户均有一个条目，他们将自动获得应用到新文件或子目录的默认ACL ，james 始终默认设置为没有任何权限</p>\n</li>\n</ol>\n<p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526347790707759.png\" alt=\"image.png\"></p>\n<p>默认掩码设置显示可能为所有新建文件或目录，（其具有指定用户 ACL 、组所有者 ACL 或指定组 ACL ）提供的初始最大权限： 读取和写入新文件，对新子目录的执行权限，但是新文件永远不可获得执行权限。  </p>\n<p><img src=\"/2018/05/17/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526347988908292.png\" alt=\"image.png\"></p>\n<p>默认其它或“全局”权限，所有其它 UID 和 GID  对新文件或新子目录均没有任何权限。  </p>\n<p>上述示例中的默认条目不包括指定用户 （ UID 1005）和指定组（GID 2210），因此，它们不会自动获得添加至任何新文件或新子目录的初始 ACL 条目。这会有效的将他们限制在其已具有 ACL 的文件和子目录中，或者限制在相关文件所有者后来使用 setfacl 添加了 ACL 的文件和子目录。这些条目仍可创建自己的文件和子目录。</p>\n<h6 id=\"TIPS-1\"><a href=\"#TIPS-1\" class=\"headerlink\" title=\"TIPS:\"></a>TIPS:</h6><p>getfacl 中的输出可用作 setfacl 的输入。使用 getfacl -R /directory 生成目录及其内容的输出，通过将此输出传递给 setfacl –set-file=file 进行批量更新，可保存此输出并可用于日后恢复。</p>\n<p>ACL 掩码  </p>\n<p>ACL  掩码定义可授予指定用户、组所有者和指定组的最大权限。它不限制文件所有者或其他用户的权限。所有实施 ACL 的文件和目录都将具有ACL 掩码。</p>\n<p>可使用 getfacl 查看掩码，并通过 setfacl 显示设置掩码。如果未显式设置，系统会自动计算并添加掩码；但也可从父目录默认掩码设置中继承掩码。默认情况下，每当添加、修改或删除任何受影响的 ACL 时，均会重新计算掩码。 </p>\n<h6 id=\"ACL-权限优先级\"><a href=\"#ACL-权限优先级\" class=\"headerlink\" title=\"ACL 权限优先级\"></a>ACL 权限优先级</h6><p>在决定一个进程（正在运行的程序）能否访问文件时，将按如下所示应用文件权限和 ACL ：</p>\n<ul>\n<li><p>如果正在以文件所有者身份运行进程，则应用文件的用户 ACL 权限。</p>\n</li>\n<li><p>如果正在以指定用户 ACL 条目中列出的用户身份运行进程，则应用指定用户 ACL 权限（只要掩码允许）</p>\n</li>\n<li><p>如果正在以与文件的组所有者相匹配的组身份运行进程，或者以具有显式指定组 ACL 条目的组身份运行进程，则应用相匹配的 ACL 权限（只要掩码允许 ）</p>\n</li>\n<li><p>否则，将应用文件的其它 ACL 权限。</p>\n</li>\n</ul>\n<h5 id=\"使用-ACL-保护文件安全\"><a href=\"#使用-ACL-保护文件安全\" class=\"headerlink\" title=\"使用 ACL 保护文件安全\"></a>使用 ACL 保护文件安全</h5><h6 id=\"更改-ACL-文件权限\"><a href=\"#更改-ACL-文件权限\" class=\"headerlink\" title=\"更改 ACL 文件权限\"></a>更改 ACL 文件权限</h6><p>使用 setfacl 添加、修改或删除文件和目录的标准 ACL </p>\n<p>ACL 采用普通的权限文件系统表示法：rwx (读、写、执行)，“-”表示缺少相关权限。X(大写) 表示如果文件还没有相关的执行权限，则只设置目录的执行权限，用户同 chmod </p>\n<h6 id=\"添加或修改-ACL-权限\"><a href=\"#添加或修改-ACL-权限\" class=\"headerlink\" title=\"添加或修改 ACL 权限\"></a>添加或修改 ACL 权限</h6><p>可以使用 -m 通过合作行设置，或者使用 -M（使用“-”（短划线），而不使用 stdin 的文件名）通过文件传递 ACL 。这两个选项会为文件或目录添加新的 ACL 条目，或替换特定的现在 ACL 条目。文件或目录的任何其它现在 ACL 条目不变</p>\n<p>使用 –set 或 –set-file 选项来完全替换文件的 ACL 设置</p>\n<p>首次定义文件的 ACL 时，如果添加操作不包含文件所有者、组所有者或其它权限的设置，则系统会基于当前标准文件权限来设置以上权限的设置（这些设置也称为基础 ACL ，且无法删除），系统也会计算并添加新掩码值。</p>\n<p>要添加或修改用户 ACL 或指定用户 ACL ：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl -m u:name:rX file</span><br></pre></td></tr></table></figure></p>\n<p>如果 name 留空，则它适用于文件所有者，否则 name 可以是用户名或 UID 值。在本例中，授予权限为只读和执行（需要文件所属组有执行权限）（除非 file 为目录，此时目录设置执行权限，以允许进程目录搜索）</p>\n<p>ACL 文件所有者和标准文件所有者权限相同，因此使用chmod 设置所有者权限对 ACL 没有任何影响</p>\n<p>要添加或修改组 ACL 或指定组 ACL<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl -m g:name:rw file</span><br></pre></td></tr></table></figure></p>\n<p>与添加或修改用户 ACL 的模式相同，如果 name 留空，则它适用于所有者。否则请指定组名或 GID 值。</p>\n<p>对于具有 ACL 设置的谁的， chmod 的对任何组权限都没有影响，但会更新 ACL 掩码。  </p>\n<p>要添加或修改其它 ACL<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl -m o::- file</span><br></pre></td></tr></table></figure></p>\n<p>其它 ACL 仅接受权限设置，权限通常为 “-”即无权限，或者指定任何标准权限 rwx </p>\n<p>ACL 其它权限及标准其他权限相同，因此使用其它权限中的 chmod 等于使用其它权限中的 setfacl </p>\n<p>通过一条命令添加多个条目，并以逗号分隔各个条目<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl -m u::rwx,g:sodor:rX,o::- file</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"使用-getfacl-作为输入\"><a href=\"#使用-getfacl-作为输入\" class=\"headerlink\" title=\"使用 getfacl 作为输入\"></a>使用 getfacl 作为输入</h6><p>getfacl 的输出作为 setfacl 输入<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getfacl file-A | setfacl --<span class=\"built_in\">set</span>-file=- file-B</span><br><span class=\"line\"><span class=\"comment\"># --set-file 接受文件或 stdin 中的输入，‘-’指定了 stdin 的使用。在此例中，file-B 和 file-A 设置相同。</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"设置明确的-ACL-掩码\"><a href=\"#设置明确的-ACL-掩码\" class=\"headerlink\" title=\"设置明确的 ACL 掩码\"></a>设置明确的 ACL 掩码</h6><p>可以明确设置文件或目录的 ACL 掩码，以限制指定用户、组所有者和指定组的最大有效权限。限制超出掩码的权限。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl -m m::r file</span><br></pre></td></tr></table></figure></p>\n<p>该操作会设置 ACL 的掩码值为只读权限，此设置不影响所有者和其它用户。</p>\n<p>getfacl 时会在受掩码设置限制的条目旁边显示 “注释”</p>\n<h6 id=\"TIPS-2\"><a href=\"#TIPS-2\" class=\"headerlink\" title=\"TIPS:\"></a>TIPS:</h6><p>默认情况下，每当修改或删除受影响的 ACL 设置（指定用户、组所有者或指定组）时系统都会重新计算 ACL 掩码，进而可能重新设置上一个明确的掩码设置。</p>\n<p>为避免重新计算掩码，请使用 -n ,或者将掩码设置 （ -m m::perms） 包含在会修改受掩码影响的 ACL 设置的任何 setfacl 操作中。</p>\n<p>递归 ACL 修改，使用 -R 选项<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl -R -m u:name:rX directory</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#该操作会将用户name 添加到 directory 和所有文件和子目录中，从而授予只读和条件执行权限。</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"删除-ACL\"><a href=\"#删除-ACL\" class=\"headerlink\" title=\"删除 ACL\"></a>删除 ACL</h6><p>无需指定 “:perms（权限）” 外，删除特定 ACL 条目与修改操作的基本形式相同。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl -x u:name,g:name file</span><br></pre></td></tr></table></figure></p>\n<p>该操作只会从文件或目录 ACL 列表中删除指定用户和指定组。任何其它现有 ACL 均保持活动。可以在同一 setfacl 操作中使用删除 (-x) 和 修改 （-m）操作。</p>\n<p>掩码只能在未设置其它 ACL （无法删除的基础 ACL 除外）的情况下删除。因此必须最后删除。文件不再有 ACL ，并且 ls -l 不会在权限字符串旁边显示 “+” 符号。要删除文件或目录的所有 ACL （包括目录的默认 ACL ）使用：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl -b file</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"控制默认-ACL-文件权限\"><a href=\"#控制默认-ACL-文件权限\" class=\"headerlink\" title=\"控制默认 ACL 文件权限\"></a>控制默认 ACL 文件权限</h6><p>目录可以设置默认 ACL ，这些 ACL 会由所有新文件和新子目录自动继承，可以针对各个标准 ACL 设置来设置默认 ACL 权限，其中包括默认掩码</p>\n<p>目录仍然需要具备标准 ACL 才能进程访问权限控制，因为默认 ACL 不会对目录实施访问权限控制；他们仅提供 ACL 权限继承支持。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl -m d:u:name:rx directory</span><br></pre></td></tr></table></figure></p>\n<p>该命令会添加一个默认的指定用户（d:u:name），该用户拥有对子目录的只读和执行权限。</p>\n<p>用于为各个 ACL 类型添加默认 ACL 的 setfacl 命令与用于标准 ACL 的命令完全相同，但是以 “d:” 开关，或者在命令行使用 “-d” 选项。</p>\n<h6 id=\"TIPS：\"><a href=\"#TIPS：\" class=\"headerlink\" title=\"TIPS：\"></a>TIPS：</h6><p>设置目录默认 ACL 时，需要在默认 ACL 中包含执行权限（X）来确保用户可以访问子目录.</p>\n<p>用户不会自动设置对新文件的常规文件执行权限，新常规文件的掩码为rw-</p>\n<p>新文件和新子目录会继续从创建用户设置自己的 UID 和主要组 GID 值，不过当父目录 setgid 标志启用时除外，这种情况下，主要组 GID 与 父目录 GID 相同。</p>\n<h6 id=\"删除默认-ACL\"><a href=\"#删除默认-ACL\" class=\"headerlink\" title=\"删除默认 ACL\"></a>删除默认 ACL</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setfacl -x d:u:name directory </span><br><span class=\"line\">setfacl -k /directory     <span class=\"comment\">#删除目录的所有默认 ACL </span></span><br><span class=\"line\">setfacl -b /directory     <span class=\"comment\">#删除目录的所有 ACL</span></span><br><span class=\"line\"></span><br><span class=\"line\">setfacl -Rm g:sodor:rwX /shares/steamies    <span class=\"comment\">#递归授予sodor组 读取、写入、条件执行权限。（仅针对目录和现有可执行文件）</span></span><br><span class=\"line\">setfacl -Rm u:james:- /shares/steamies    <span class=\"comment\">#递归授予 james 无任何权限</span></span><br><span class=\"line\">setfacl -m d:g:sodor:rwx /shares/steamies    <span class=\"comment\">#添加sodor 组默认访问规则，steamies 目录的读取、写入、执行权限</span></span><br><span class=\"line\">setfacl -m d:u:james:- /share/steamies    <span class=\"comment\">#添加用户james 对steamies 目录无任何权限</span></span><br></pre></td></tr></table></figure>\n"},{"title":"RH134 第十一章 访问具有网络文件系统（NFS）的网络存储","url":"437.html","id":"437","date":"2018-09-10T09:47:03.000Z","_content":"\n###### 手动挂载和卸载 NFS 共享\n\nNFS （网络文件系统）是由Linux 、UNIX 及类似操作系统用作本地文件系统的一种互联网标准协议。它是一种活动扩展之下的开放标准，可支持本地 Linux 权限和文件系统功能。\n\nRHEL 7 在默认情况下支持NFSv4 （版本4）,向下兼容v3及v2版本。NFSv4使用 TCP 协议与服务器进行通信，而较早版本的NFS则可能使用 TCP 或UDP 。\n\nNFS 服务器导出共享（目录）,而NFS 客户端将导出的共享挂载到本地挂载点（目录）.本地挂载点必须已存在。可以通过多种方式挂载NFS 共享\n\n*   使用mount 命令手动挂载 NFS 共享。\n\n*   使用/etc/fstab 在启动时自动挂载 NFS共享。\n\n*   通过称为自动挂载的过程要挂需要挂载 NFS 共享。\n\n\n###### 保护 NFS 共享的文件访问权限\n\nNFS 服务器通过多种方法保护文件的访问权限：none ,sys,krb5,krb5i和 krb5p .NFS 服务器可以选择为每个导出的共享提供一种方式或多种广场。NFS 客户端必须使用为已导出共享规定的方法之一连接到该共享，该方法以挂载选项 sec=method 的形式指定。\n\n###### 安全性方法：  \n\nnone:可对文件进行匿名访问，对服务器的写入（如允许）将分配 UID,GID为nfsnobody \n\nsys:文件访问权限基于UID和GID的值的标准Linux 文件权限。如果未指定，则此方法是默认值\n\nkrb5:客户端必须使用Kerberos 证明身份，然后适用标准Linux 的文件权限 \n\nkrb5i:添加加密性强的保证，确保每个请求中的数据未被篡改。\n\nkrb5p:为客户端与服务器之间的所有请求添加加密，防止网络中的数据泄露。这会对性能产生影响。\n\n###### TIPS：\n\nKerberos 选项将至少需要 /etc/krb5,keytab和本节中未论述的其它身份验证配置（加入kerberos域）。/etc/krb5.keytab 通常将由身份验证或安全性管理员提供。请求包含主体和 / 或 nfs 主体（最好包含两者）的keytab\n\n连接到Kerberos 保护的共享时，NFS 使用 nfs-secure 服务来帮助协商和管理与服务器之间的通信。此服务必须正在运行，才能使用受保护的NFS共享；对其使用 start 和 enable 命令以确保其始终可用。\n```sh\nyum install -y nfs-secure\nsystemctl enable nfs-secure\nsystemctl start nfs-secure\n```\n######  挂载 NFS 共享有三个基本步骤：\n\n1、识别 NFS 服务器的管理员可能提供导出详细信息，包括安全性要求。或者 NFSv4 共享可通过挂载NFS 服务器的根文件并浏览已导出目录来识别。以root 用户身份执行此操作。使用 Kerberos 安全对共享的访问将被拒绝，但共享（目录）名称将可见。可以浏览其它共享目录。\n```sh\nmkdir /mountpoint\nmount /serverX:/ /mountpoint \nls /mountpoint\n```\n可以使用 showmount 发现 NFSv2和 NFSv3共享\n```sh\nshowmount -e serverX\n```\n2、挂载点：使用mkdir  在合适的地方创建挂载点\n```sh\nmkdir -p /mountpoint\n```\n3、挂载：这里有两种选择，手动挂载，或并入 /etc/fstab 文件中，为任一操作切换到root 或使用sudo\n\n*   手动使用 mount 命令\n\n```sh\nmount -t nfs -o sync serverX:/share /mountpoint\n```\n-t nfs 选择是 NFS 共享的文件系统类型（未严格要求）。-o sync 选择使用 mount 立即与 NFS 服务器同步写操作（默认为异步）。默认安全性方法（sec=sys）将用于尝试挂载NFS 共享，使用标准 Linux 文件权限。  \n\n*   /etc/fstab 使用vim 编辑 /etc/fstab 文件，将挂载条目添加到文件底部。 NFS 共享将在每次系统启动时挂载。\n\n```sh\n\nvim /etc/fstab \n……\nserverX:/share /mountpoint nfs sync 0 0\n\nroot 用户使用 umount  命令手动卸载共享  \n\numount /mountpoint\n```\n###### 通过 NFS 自动挂载网络存储\n\n自动挂载器是一种服务(autofs) ，它可以根据需要自动挂载 NFS 共享，并将在不再使用 NFS共享时自动卸载这些共享。\n\n自动挂载器优势\n\n*   用户无需具有root 特权就可以运行 mount /umount 命令\n\n*   自动挂载器中配置的 NFS 共享可供计算机上的所有用户使用，受访问权限约束\n\n*    NFS 共享不像 /etc/fstab 中的条目一样永久连接，从而可释放网络和系统资源。\n\n*   自动挂载器完全在客户端配置，无需进行任何服务器配置\n\n*   自动挂载器与 mount 命令使用相同的挂载选项，包括安全性选项。\n\n*   支持直接和间接挂载点映射，在挂载点位置方面提供了灵活性。\n\n*   间接挂载点可通过 autofs 创建和删除，从而减少了手动管理这些挂载点的需求。\n\n*   NFS 是自动挂载器的默认文件系统，但自动挂载器也可以用于自动挂载多种不同的文件系统 。\n\n*   autofs 是管理方式类似于其他系统服务的一种服务。\n\n\n###### 创建自动挂载\n\n配置自动挂载的过程包括多个步骤：\n\n1、安装 autofs \n```sh\nsudo yum -y install autofs\n```\n此软件包含使用自动挂载器挂载NFS 共享所需要的所有内容\n\n2、向/etc/auto.master.d 添加一个主映射文件；此文件确定用于挂载点的基础目录，并确定用于创建自动挂载的映射文件。\n\n使用vim 创建并编辑主映射文件：\n```sh\nsudo vim /etc/auto.master.d/demo.autofs\n```\n主映射文件的名称不重要，但它通常是一个有意义的名称，唯一的要求就是扩展名必须为.autofs ，主映射文件可以保存多个映射条目，或者使用多个文件来将配置数据分开。\n\n在此例中，为间接映射的挂载添加主映射条目：\n```sh\n/shares /etc/auto.demo\n```\n此条目将使用 /shares目录作为将来间接自动挂载的基础目录。/etc/auto.demo 文件包含挂载详细信息；使用绝对文件名，需要在启动autofs 服务之前 创建auto.demo 文件\n\n要使用直接映射 的挂载点，请向同一文件（或在单独的文件中）添加条目：\n```sh\n/- /etc/auto.direct\n```\n所有直接映射条目都使用 “/-”作为基础目录。在此例中，包含挂载详细信息的映射的文件是/etc/auto.direct \n\n3、创建映射文件，映射文件确定挂载点、挂载选项和挂载的源位置\n\n使用vim 创建并编辑映射文件\n```sh\n sudo vim /etc/auto.demo\n```\n文件名不重要，按照惯例，该文件位于 /etc 中并且名为 auto.name ，其中 name 是对所有包含内容有意义的名称\n```sh\nwork -rw,sync serverX:/shares/work\n```\n条目的格式为挂载点、挂载选项和源位置。此示例显示基本的间接映射条目。\n\n*   挂载点在 man page 中被称为 \"密钥\" ,它将由 autofs 服务自动创建和删除。在此例中完全限制挂载点将是 /shares/work; autofs 将根据需要创建和删除/shares 目录和 work 目录\n\n*   挂载选项以 “-”开关，并使用逗号分隔，不带空格。可以选项与手动挂载选项相同。几个常用的自动挂载器特定选项 -fstype= 和 -strict  文件文件系统 不是NFS 则使用fstype ，可指定文件系统 ；挂载文件系统时，使用strict 可将错误视为严重。\n\n*   NFS 共享的源位置遵循 host:/pathname 模式；在此示例中为 serverX:/shares/work ，此目录需要已在 serverX 上导出，并带有读/写访问权限和标准的linux 文件权限的支持，这样才能挂载成功。如果要挂载的文件系统以 “/”开关，例如本地设备条目或者SMB 共享，则需要添加一个“：”作为前缀，例如 SMB 共享为 ：//serverX/share。\n\n\n4、启动并启用自动挂载服务\n```sh\nsudo systemctl enable autofs\nsudo systemctl start autofs\n```\n##### 映射文件 \\- 直接映射\n\n直接映射用于将NFS 共享映射到现在的挂载点。自动挂载器不会尝试自动创建挂载点；在 autofs 服务启动之前 挂载点必须存在\n\n继续前面的示例，/etc/auto.direct 文件的内容可能 类似下文：\n```sh\n/mnt/docs -rw,sync serverX:/shares/docs\n```\n挂载点（或密钥）始终为绝对路径，以 \"/\" 开关。映射文件其余部分使用相同的结构。\n\n只有最右侧的目录受自动挂载程序控制，因此挂载点挂载点（此示例中为 /mnt ）以上的目录结构不会被 autofs 遮盖。\n\n##### 映射文件 \\-\\- 间接通配符映射\n\n当 NFS 服务器导出一个目录中的多个子目录时，可将自动挂载程序配置为使用单个映射条目访问这些子目录其中的任何一个，作为示例，对于从NFS 服务器自动挂载用户主目录，此功能非常有用。\n\n继续前面的示例，如果 serverX:/share 导出两个或多个子目录,并且能使用相同的挂载选项访问这些子目录，则/etc/auto.demo 文件内容可能类似于正文：\n\n* -rw,sync serverX:/shares/&\n\n挂载点是“\\*”，而源位置上的子目录是 \"&\" 。条目中的所有其它内容都相同\n\n当用户尝试访问/shares/work 时，挂载点 “\\*”（此示例中为work）将代替源位置中的 & 符号，并将挂载 serverX:/shares/work。对于间接示例，autofs 服务将自动创建和删除work 目录。\n\n\n\n\n\n##### 实验：\n\n###### 间接通配符映射\n\n```sh\nsudo -y install autofs\nvim /etc/auto.master.d/home.autofs   #主配置文件\n###\n/home/guests /etc/auto.home\n###\nvim /etc/auto.home    #详细信息\n###\n* -rw,sync classroom:/home/guests/&\n###\nsystemctl enable autofs\nsystemctl start autofs\n```\n###### 间接映射 \n```sh\nsudo -y install autofs\nvim /etc/auto.master.d/public.autofs   #主配置文件\n###\n/shares /etc/auto.public\n###\nvim /etc/auto.public    #详细信息\n###\npublic -rw,sync classroom:/shares/public\n###\nsystemctl enable autofs\nsystemctl start autofs\n```\n###### 直接映射（需要提前创建挂载点）\n```sh\nsudo -y install autofs\nvim /etc/auto.master.d/public.autofs   #主配置文件\n###\n/- /etc/auto.public\n###\nvim /etc/auto.public    #详细信息\n###\n/mnt/public -rw,sync classroom:/shares/public\n###\nmkdir /mnt/public     #创建目录\nsystemctl enable autofs\nsystemctl start autofs\n```\n","source":"_posts/rh134-e7-ac-ac-e5-8d-81-e4-b8-80-e7-ab-a0-e8-ae-bf-e9-97-ae-e5-85-b7-e6-9c-89-e7-bd-91-e7-bb-9c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f-ef-bc-88nfs-ef-bc-89-e7-9a-84-e7-bd-91-e7-bb-9c-e5-ad-98-e5-82-a8.md","raw":"---\ntitle: RH134 第十一章 访问具有网络文件系统（NFS）的网络存储\nurl: 437.html\nid: 437\ncategories:\n  - RHEL134\ndate: 2018-09-10 17:47:03\ntags:\n---\n\n###### 手动挂载和卸载 NFS 共享\n\nNFS （网络文件系统）是由Linux 、UNIX 及类似操作系统用作本地文件系统的一种互联网标准协议。它是一种活动扩展之下的开放标准，可支持本地 Linux 权限和文件系统功能。\n\nRHEL 7 在默认情况下支持NFSv4 （版本4）,向下兼容v3及v2版本。NFSv4使用 TCP 协议与服务器进行通信，而较早版本的NFS则可能使用 TCP 或UDP 。\n\nNFS 服务器导出共享（目录）,而NFS 客户端将导出的共享挂载到本地挂载点（目录）.本地挂载点必须已存在。可以通过多种方式挂载NFS 共享\n\n*   使用mount 命令手动挂载 NFS 共享。\n\n*   使用/etc/fstab 在启动时自动挂载 NFS共享。\n\n*   通过称为自动挂载的过程要挂需要挂载 NFS 共享。\n\n\n###### 保护 NFS 共享的文件访问权限\n\nNFS 服务器通过多种方法保护文件的访问权限：none ,sys,krb5,krb5i和 krb5p .NFS 服务器可以选择为每个导出的共享提供一种方式或多种广场。NFS 客户端必须使用为已导出共享规定的方法之一连接到该共享，该方法以挂载选项 sec=method 的形式指定。\n\n###### 安全性方法：  \n\nnone:可对文件进行匿名访问，对服务器的写入（如允许）将分配 UID,GID为nfsnobody \n\nsys:文件访问权限基于UID和GID的值的标准Linux 文件权限。如果未指定，则此方法是默认值\n\nkrb5:客户端必须使用Kerberos 证明身份，然后适用标准Linux 的文件权限 \n\nkrb5i:添加加密性强的保证，确保每个请求中的数据未被篡改。\n\nkrb5p:为客户端与服务器之间的所有请求添加加密，防止网络中的数据泄露。这会对性能产生影响。\n\n###### TIPS：\n\nKerberos 选项将至少需要 /etc/krb5,keytab和本节中未论述的其它身份验证配置（加入kerberos域）。/etc/krb5.keytab 通常将由身份验证或安全性管理员提供。请求包含主体和 / 或 nfs 主体（最好包含两者）的keytab\n\n连接到Kerberos 保护的共享时，NFS 使用 nfs-secure 服务来帮助协商和管理与服务器之间的通信。此服务必须正在运行，才能使用受保护的NFS共享；对其使用 start 和 enable 命令以确保其始终可用。\n```sh\nyum install -y nfs-secure\nsystemctl enable nfs-secure\nsystemctl start nfs-secure\n```\n######  挂载 NFS 共享有三个基本步骤：\n\n1、识别 NFS 服务器的管理员可能提供导出详细信息，包括安全性要求。或者 NFSv4 共享可通过挂载NFS 服务器的根文件并浏览已导出目录来识别。以root 用户身份执行此操作。使用 Kerberos 安全对共享的访问将被拒绝，但共享（目录）名称将可见。可以浏览其它共享目录。\n```sh\nmkdir /mountpoint\nmount /serverX:/ /mountpoint \nls /mountpoint\n```\n可以使用 showmount 发现 NFSv2和 NFSv3共享\n```sh\nshowmount -e serverX\n```\n2、挂载点：使用mkdir  在合适的地方创建挂载点\n```sh\nmkdir -p /mountpoint\n```\n3、挂载：这里有两种选择，手动挂载，或并入 /etc/fstab 文件中，为任一操作切换到root 或使用sudo\n\n*   手动使用 mount 命令\n\n```sh\nmount -t nfs -o sync serverX:/share /mountpoint\n```\n-t nfs 选择是 NFS 共享的文件系统类型（未严格要求）。-o sync 选择使用 mount 立即与 NFS 服务器同步写操作（默认为异步）。默认安全性方法（sec=sys）将用于尝试挂载NFS 共享，使用标准 Linux 文件权限。  \n\n*   /etc/fstab 使用vim 编辑 /etc/fstab 文件，将挂载条目添加到文件底部。 NFS 共享将在每次系统启动时挂载。\n\n```sh\n\nvim /etc/fstab \n……\nserverX:/share /mountpoint nfs sync 0 0\n\nroot 用户使用 umount  命令手动卸载共享  \n\numount /mountpoint\n```\n###### 通过 NFS 自动挂载网络存储\n\n自动挂载器是一种服务(autofs) ，它可以根据需要自动挂载 NFS 共享，并将在不再使用 NFS共享时自动卸载这些共享。\n\n自动挂载器优势\n\n*   用户无需具有root 特权就可以运行 mount /umount 命令\n\n*   自动挂载器中配置的 NFS 共享可供计算机上的所有用户使用，受访问权限约束\n\n*    NFS 共享不像 /etc/fstab 中的条目一样永久连接，从而可释放网络和系统资源。\n\n*   自动挂载器完全在客户端配置，无需进行任何服务器配置\n\n*   自动挂载器与 mount 命令使用相同的挂载选项，包括安全性选项。\n\n*   支持直接和间接挂载点映射，在挂载点位置方面提供了灵活性。\n\n*   间接挂载点可通过 autofs 创建和删除，从而减少了手动管理这些挂载点的需求。\n\n*   NFS 是自动挂载器的默认文件系统，但自动挂载器也可以用于自动挂载多种不同的文件系统 。\n\n*   autofs 是管理方式类似于其他系统服务的一种服务。\n\n\n###### 创建自动挂载\n\n配置自动挂载的过程包括多个步骤：\n\n1、安装 autofs \n```sh\nsudo yum -y install autofs\n```\n此软件包含使用自动挂载器挂载NFS 共享所需要的所有内容\n\n2、向/etc/auto.master.d 添加一个主映射文件；此文件确定用于挂载点的基础目录，并确定用于创建自动挂载的映射文件。\n\n使用vim 创建并编辑主映射文件：\n```sh\nsudo vim /etc/auto.master.d/demo.autofs\n```\n主映射文件的名称不重要，但它通常是一个有意义的名称，唯一的要求就是扩展名必须为.autofs ，主映射文件可以保存多个映射条目，或者使用多个文件来将配置数据分开。\n\n在此例中，为间接映射的挂载添加主映射条目：\n```sh\n/shares /etc/auto.demo\n```\n此条目将使用 /shares目录作为将来间接自动挂载的基础目录。/etc/auto.demo 文件包含挂载详细信息；使用绝对文件名，需要在启动autofs 服务之前 创建auto.demo 文件\n\n要使用直接映射 的挂载点，请向同一文件（或在单独的文件中）添加条目：\n```sh\n/- /etc/auto.direct\n```\n所有直接映射条目都使用 “/-”作为基础目录。在此例中，包含挂载详细信息的映射的文件是/etc/auto.direct \n\n3、创建映射文件，映射文件确定挂载点、挂载选项和挂载的源位置\n\n使用vim 创建并编辑映射文件\n```sh\n sudo vim /etc/auto.demo\n```\n文件名不重要，按照惯例，该文件位于 /etc 中并且名为 auto.name ，其中 name 是对所有包含内容有意义的名称\n```sh\nwork -rw,sync serverX:/shares/work\n```\n条目的格式为挂载点、挂载选项和源位置。此示例显示基本的间接映射条目。\n\n*   挂载点在 man page 中被称为 \"密钥\" ,它将由 autofs 服务自动创建和删除。在此例中完全限制挂载点将是 /shares/work; autofs 将根据需要创建和删除/shares 目录和 work 目录\n\n*   挂载选项以 “-”开关，并使用逗号分隔，不带空格。可以选项与手动挂载选项相同。几个常用的自动挂载器特定选项 -fstype= 和 -strict  文件文件系统 不是NFS 则使用fstype ，可指定文件系统 ；挂载文件系统时，使用strict 可将错误视为严重。\n\n*   NFS 共享的源位置遵循 host:/pathname 模式；在此示例中为 serverX:/shares/work ，此目录需要已在 serverX 上导出，并带有读/写访问权限和标准的linux 文件权限的支持，这样才能挂载成功。如果要挂载的文件系统以 “/”开关，例如本地设备条目或者SMB 共享，则需要添加一个“：”作为前缀，例如 SMB 共享为 ：//serverX/share。\n\n\n4、启动并启用自动挂载服务\n```sh\nsudo systemctl enable autofs\nsudo systemctl start autofs\n```\n##### 映射文件 \\- 直接映射\n\n直接映射用于将NFS 共享映射到现在的挂载点。自动挂载器不会尝试自动创建挂载点；在 autofs 服务启动之前 挂载点必须存在\n\n继续前面的示例，/etc/auto.direct 文件的内容可能 类似下文：\n```sh\n/mnt/docs -rw,sync serverX:/shares/docs\n```\n挂载点（或密钥）始终为绝对路径，以 \"/\" 开关。映射文件其余部分使用相同的结构。\n\n只有最右侧的目录受自动挂载程序控制，因此挂载点挂载点（此示例中为 /mnt ）以上的目录结构不会被 autofs 遮盖。\n\n##### 映射文件 \\-\\- 间接通配符映射\n\n当 NFS 服务器导出一个目录中的多个子目录时，可将自动挂载程序配置为使用单个映射条目访问这些子目录其中的任何一个，作为示例，对于从NFS 服务器自动挂载用户主目录，此功能非常有用。\n\n继续前面的示例，如果 serverX:/share 导出两个或多个子目录,并且能使用相同的挂载选项访问这些子目录，则/etc/auto.demo 文件内容可能类似于正文：\n\n* -rw,sync serverX:/shares/&\n\n挂载点是“\\*”，而源位置上的子目录是 \"&\" 。条目中的所有其它内容都相同\n\n当用户尝试访问/shares/work 时，挂载点 “\\*”（此示例中为work）将代替源位置中的 & 符号，并将挂载 serverX:/shares/work。对于间接示例，autofs 服务将自动创建和删除work 目录。\n\n\n\n\n\n##### 实验：\n\n###### 间接通配符映射\n\n```sh\nsudo -y install autofs\nvim /etc/auto.master.d/home.autofs   #主配置文件\n###\n/home/guests /etc/auto.home\n###\nvim /etc/auto.home    #详细信息\n###\n* -rw,sync classroom:/home/guests/&\n###\nsystemctl enable autofs\nsystemctl start autofs\n```\n###### 间接映射 \n```sh\nsudo -y install autofs\nvim /etc/auto.master.d/public.autofs   #主配置文件\n###\n/shares /etc/auto.public\n###\nvim /etc/auto.public    #详细信息\n###\npublic -rw,sync classroom:/shares/public\n###\nsystemctl enable autofs\nsystemctl start autofs\n```\n###### 直接映射（需要提前创建挂载点）\n```sh\nsudo -y install autofs\nvim /etc/auto.master.d/public.autofs   #主配置文件\n###\n/- /etc/auto.public\n###\nvim /etc/auto.public    #详细信息\n###\n/mnt/public -rw,sync classroom:/shares/public\n###\nmkdir /mnt/public     #创建目录\nsystemctl enable autofs\nsystemctl start autofs\n```\n","slug":"rh134-e7-ac-ac-e5-8d-81-e4-b8-80-e7-ab-a0-e8-ae-bf-e9-97-ae-e5-85-b7-e6-9c-89-e7-bd-91-e7-bb-9c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f-ef-bc-88nfs-ef-bc-89-e7-9a-84-e7-bd-91-e7-bb-9c-e5-ad-98-e5-82-a8","published":1,"updated":"2019-01-06T17:07:41.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqi22001tlxkjo2m7lloe","content":"<h6 id=\"手动挂载和卸载-NFS-共享\"><a href=\"#手动挂载和卸载-NFS-共享\" class=\"headerlink\" title=\"手动挂载和卸载 NFS 共享\"></a>手动挂载和卸载 NFS 共享</h6><p>NFS （网络文件系统）是由Linux 、UNIX 及类似操作系统用作本地文件系统的一种互联网标准协议。它是一种活动扩展之下的开放标准，可支持本地 Linux 权限和文件系统功能。</p>\n<p>RHEL 7 在默认情况下支持NFSv4 （版本4）,向下兼容v3及v2版本。NFSv4使用 TCP 协议与服务器进行通信，而较早版本的NFS则可能使用 TCP 或UDP 。</p>\n<p>NFS 服务器导出共享（目录）,而NFS 客户端将导出的共享挂载到本地挂载点（目录）.本地挂载点必须已存在。可以通过多种方式挂载NFS 共享</p>\n<ul>\n<li><p>使用mount 命令手动挂载 NFS 共享。</p>\n</li>\n<li><p>使用/etc/fstab 在启动时自动挂载 NFS共享。</p>\n</li>\n<li><p>通过称为自动挂载的过程要挂需要挂载 NFS 共享。</p>\n</li>\n</ul>\n<h6 id=\"保护-NFS-共享的文件访问权限\"><a href=\"#保护-NFS-共享的文件访问权限\" class=\"headerlink\" title=\"保护 NFS 共享的文件访问权限\"></a>保护 NFS 共享的文件访问权限</h6><p>NFS 服务器通过多种方法保护文件的访问权限：none ,sys,krb5,krb5i和 krb5p .NFS 服务器可以选择为每个导出的共享提供一种方式或多种广场。NFS 客户端必须使用为已导出共享规定的方法之一连接到该共享，该方法以挂载选项 sec=method 的形式指定。</p>\n<h6 id=\"安全性方法：\"><a href=\"#安全性方法：\" class=\"headerlink\" title=\"安全性方法：\"></a>安全性方法：</h6><p>none:可对文件进行匿名访问，对服务器的写入（如允许）将分配 UID,GID为nfsnobody </p>\n<p>sys:文件访问权限基于UID和GID的值的标准Linux 文件权限。如果未指定，则此方法是默认值</p>\n<p>krb5:客户端必须使用Kerberos 证明身份，然后适用标准Linux 的文件权限 </p>\n<p>krb5i:添加加密性强的保证，确保每个请求中的数据未被篡改。</p>\n<p>krb5p:为客户端与服务器之间的所有请求添加加密，防止网络中的数据泄露。这会对性能产生影响。</p>\n<h6 id=\"TIPS：\"><a href=\"#TIPS：\" class=\"headerlink\" title=\"TIPS：\"></a>TIPS：</h6><p>Kerberos 选项将至少需要 /etc/krb5,keytab和本节中未论述的其它身份验证配置（加入kerberos域）。/etc/krb5.keytab 通常将由身份验证或安全性管理员提供。请求包含主体和 / 或 nfs 主体（最好包含两者）的keytab</p>\n<p>连接到Kerberos 保护的共享时，NFS 使用 nfs-secure 服务来帮助协商和管理与服务器之间的通信。此服务必须正在运行，才能使用受保护的NFS共享；对其使用 start 和 enable 命令以确保其始终可用。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nfs-secure</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nfs-secure</span><br><span class=\"line\">systemctl start nfs-secure</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"挂载-NFS-共享有三个基本步骤：\"><a href=\"#挂载-NFS-共享有三个基本步骤：\" class=\"headerlink\" title=\"挂载 NFS 共享有三个基本步骤：\"></a>挂载 NFS 共享有三个基本步骤：</h6><p>1、识别 NFS 服务器的管理员可能提供导出详细信息，包括安全性要求。或者 NFSv4 共享可通过挂载NFS 服务器的根文件并浏览已导出目录来识别。以root 用户身份执行此操作。使用 Kerberos 安全对共享的访问将被拒绝，但共享（目录）名称将可见。可以浏览其它共享目录。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /mountpoint</span><br><span class=\"line\">mount /serverX:/ /mountpoint </span><br><span class=\"line\">ls /mountpoint</span><br></pre></td></tr></table></figure></p>\n<p>可以使用 showmount 发现 NFSv2和 NFSv3共享<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">showmount -e serverX</span><br></pre></td></tr></table></figure></p>\n<p>2、挂载点：使用mkdir  在合适的地方创建挂载点<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /mountpoint</span><br></pre></td></tr></table></figure></p>\n<p>3、挂载：这里有两种选择，手动挂载，或并入 /etc/fstab 文件中，为任一操作切换到root 或使用sudo</p>\n<ul>\n<li>手动使用 mount 命令</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount -t nfs -o sync serverX:/share /mountpoint</span><br></pre></td></tr></table></figure>\n<p>-t nfs 选择是 NFS 共享的文件系统类型（未严格要求）。-o sync 选择使用 mount 立即与 NFS 服务器同步写操作（默认为异步）。默认安全性方法（sec=sys）将用于尝试挂载NFS 共享，使用标准 Linux 文件权限。  </p>\n<ul>\n<li>/etc/fstab 使用vim 编辑 /etc/fstab 文件，将挂载条目添加到文件底部。 NFS 共享将在每次系统启动时挂载。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">vim /etc/fstab </span><br><span class=\"line\">……</span><br><span class=\"line\">serverX:/share /mountpoint nfs sync 0 0</span><br><span class=\"line\"></span><br><span class=\"line\">root 用户使用 umount  命令手动卸载共享  </span><br><span class=\"line\"></span><br><span class=\"line\">umount /mountpoint</span><br></pre></td></tr></table></figure>\n<h6 id=\"通过-NFS-自动挂载网络存储\"><a href=\"#通过-NFS-自动挂载网络存储\" class=\"headerlink\" title=\"通过 NFS 自动挂载网络存储\"></a>通过 NFS 自动挂载网络存储</h6><p>自动挂载器是一种服务(autofs) ，它可以根据需要自动挂载 NFS 共享，并将在不再使用 NFS共享时自动卸载这些共享。</p>\n<p>自动挂载器优势</p>\n<ul>\n<li><p>用户无需具有root 特权就可以运行 mount /umount 命令</p>\n</li>\n<li><p>自动挂载器中配置的 NFS 共享可供计算机上的所有用户使用，受访问权限约束</p>\n</li>\n<li><p>NFS 共享不像 /etc/fstab 中的条目一样永久连接，从而可释放网络和系统资源。</p>\n</li>\n<li><p>自动挂载器完全在客户端配置，无需进行任何服务器配置</p>\n</li>\n<li><p>自动挂载器与 mount 命令使用相同的挂载选项，包括安全性选项。</p>\n</li>\n<li><p>支持直接和间接挂载点映射，在挂载点位置方面提供了灵活性。</p>\n</li>\n<li><p>间接挂载点可通过 autofs 创建和删除，从而减少了手动管理这些挂载点的需求。</p>\n</li>\n<li><p>NFS 是自动挂载器的默认文件系统，但自动挂载器也可以用于自动挂载多种不同的文件系统 。</p>\n</li>\n<li><p>autofs 是管理方式类似于其他系统服务的一种服务。</p>\n</li>\n</ul>\n<h6 id=\"创建自动挂载\"><a href=\"#创建自动挂载\" class=\"headerlink\" title=\"创建自动挂载\"></a>创建自动挂载</h6><p>配置自动挂载的过程包括多个步骤：</p>\n<p>1、安装 autofs<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install autofs</span><br></pre></td></tr></table></figure></p>\n<p>此软件包含使用自动挂载器挂载NFS 共享所需要的所有内容</p>\n<p>2、向/etc/auto.master.d 添加一个主映射文件；此文件确定用于挂载点的基础目录，并确定用于创建自动挂载的映射文件。</p>\n<p>使用vim 创建并编辑主映射文件：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/auto.master.d/demo.autofs</span><br></pre></td></tr></table></figure></p>\n<p>主映射文件的名称不重要，但它通常是一个有意义的名称，唯一的要求就是扩展名必须为.autofs ，主映射文件可以保存多个映射条目，或者使用多个文件来将配置数据分开。</p>\n<p>在此例中，为间接映射的挂载添加主映射条目：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/shares /etc/auto.demo</span><br></pre></td></tr></table></figure></p>\n<p>此条目将使用 /shares目录作为将来间接自动挂载的基础目录。/etc/auto.demo 文件包含挂载详细信息；使用绝对文件名，需要在启动autofs 服务之前 创建auto.demo 文件</p>\n<p>要使用直接映射 的挂载点，请向同一文件（或在单独的文件中）添加条目：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/- /etc/auto.direct</span><br></pre></td></tr></table></figure></p>\n<p>所有直接映射条目都使用 “/-”作为基础目录。在此例中，包含挂载详细信息的映射的文件是/etc/auto.direct </p>\n<p>3、创建映射文件，映射文件确定挂载点、挂载选项和挂载的源位置</p>\n<p>使用vim 创建并编辑映射文件<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> sudo vim /etc/auto.demo</span><br></pre></td></tr></table></figure></p>\n<p>文件名不重要，按照惯例，该文件位于 /etc 中并且名为 auto.name ，其中 name 是对所有包含内容有意义的名称<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">work -rw,sync serverX:/shares/work</span><br></pre></td></tr></table></figure></p>\n<p>条目的格式为挂载点、挂载选项和源位置。此示例显示基本的间接映射条目。</p>\n<ul>\n<li><p>挂载点在 man page 中被称为 “密钥” ,它将由 autofs 服务自动创建和删除。在此例中完全限制挂载点将是 /shares/work; autofs 将根据需要创建和删除/shares 目录和 work 目录</p>\n</li>\n<li><p>挂载选项以 “-”开关，并使用逗号分隔，不带空格。可以选项与手动挂载选项相同。几个常用的自动挂载器特定选项 -fstype= 和 -strict  文件文件系统 不是NFS 则使用fstype ，可指定文件系统 ；挂载文件系统时，使用strict 可将错误视为严重。</p>\n</li>\n<li><p>NFS 共享的源位置遵循 host:/pathname 模式；在此示例中为 serverX:/shares/work ，此目录需要已在 serverX 上导出，并带有读/写访问权限和标准的linux 文件权限的支持，这样才能挂载成功。如果要挂载的文件系统以 “/”开关，例如本地设备条目或者SMB 共享，则需要添加一个“：”作为前缀，例如 SMB 共享为 ：//serverX/share。</p>\n</li>\n</ul>\n<p>4、启动并启用自动挂载服务<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> autofs</span><br><span class=\"line\">sudo systemctl start autofs</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"映射文件-直接映射\"><a href=\"#映射文件-直接映射\" class=\"headerlink\" title=\"映射文件 - 直接映射\"></a>映射文件 - 直接映射</h5><p>直接映射用于将NFS 共享映射到现在的挂载点。自动挂载器不会尝试自动创建挂载点；在 autofs 服务启动之前 挂载点必须存在</p>\n<p>继续前面的示例，/etc/auto.direct 文件的内容可能 类似下文：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/mnt/docs -rw,sync serverX:/shares/docs</span><br></pre></td></tr></table></figure></p>\n<p>挂载点（或密钥）始终为绝对路径，以 “/“ 开关。映射文件其余部分使用相同的结构。</p>\n<p>只有最右侧的目录受自动挂载程序控制，因此挂载点挂载点（此示例中为 /mnt ）以上的目录结构不会被 autofs 遮盖。</p>\n<h5 id=\"映射文件-间接通配符映射\"><a href=\"#映射文件-间接通配符映射\" class=\"headerlink\" title=\"映射文件 -- 间接通配符映射\"></a>映射文件 -- 间接通配符映射</h5><p>当 NFS 服务器导出一个目录中的多个子目录时，可将自动挂载程序配置为使用单个映射条目访问这些子目录其中的任何一个，作为示例，对于从NFS 服务器自动挂载用户主目录，此功能非常有用。</p>\n<p>继续前面的示例，如果 serverX:/share 导出两个或多个子目录,并且能使用相同的挂载选项访问这些子目录，则/etc/auto.demo 文件内容可能类似于正文：</p>\n<ul>\n<li>-rw,sync serverX:/shares/&amp;</li>\n</ul>\n<p>挂载点是“*”，而源位置上的子目录是 “&amp;” 。条目中的所有其它内容都相同</p>\n<p>当用户尝试访问/shares/work 时，挂载点 “*”（此示例中为work）将代替源位置中的 &amp; 符号，并将挂载 serverX:/shares/work。对于间接示例，autofs 服务将自动创建和删除work 目录。</p>\n<h5 id=\"实验：\"><a href=\"#实验：\" class=\"headerlink\" title=\"实验：\"></a>实验：</h5><h6 id=\"间接通配符映射\"><a href=\"#间接通配符映射\" class=\"headerlink\" title=\"间接通配符映射\"></a>间接通配符映射</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -y install autofs</span><br><span class=\"line\">vim /etc/auto.master.d/home.autofs   <span class=\"comment\">#主配置文件</span></span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">/home/guests /etc/auto.home</span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">vim /etc/auto.home    <span class=\"comment\">#详细信息</span></span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">* -rw,sync classroom:/home/guests/&amp;</span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> autofs</span><br><span class=\"line\">systemctl start autofs</span><br></pre></td></tr></table></figure>\n<h6 id=\"间接映射\"><a href=\"#间接映射\" class=\"headerlink\" title=\"间接映射\"></a>间接映射</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -y install autofs</span><br><span class=\"line\">vim /etc/auto.master.d/public.autofs   <span class=\"comment\">#主配置文件</span></span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">/shares /etc/auto.public</span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">vim /etc/auto.public    <span class=\"comment\">#详细信息</span></span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">public -rw,sync classroom:/shares/public</span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> autofs</span><br><span class=\"line\">systemctl start autofs</span><br></pre></td></tr></table></figure>\n<h6 id=\"直接映射（需要提前创建挂载点）\"><a href=\"#直接映射（需要提前创建挂载点）\" class=\"headerlink\" title=\"直接映射（需要提前创建挂载点）\"></a>直接映射（需要提前创建挂载点）</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -y install autofs</span><br><span class=\"line\">vim /etc/auto.master.d/public.autofs   <span class=\"comment\">#主配置文件</span></span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">/- /etc/auto.public</span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">vim /etc/auto.public    <span class=\"comment\">#详细信息</span></span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">/mnt/public -rw,sync classroom:/shares/public</span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">mkdir /mnt/public     <span class=\"comment\">#创建目录</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> autofs</span><br><span class=\"line\">systemctl start autofs</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"手动挂载和卸载-NFS-共享\"><a href=\"#手动挂载和卸载-NFS-共享\" class=\"headerlink\" title=\"手动挂载和卸载 NFS 共享\"></a>手动挂载和卸载 NFS 共享</h6><p>NFS （网络文件系统）是由Linux 、UNIX 及类似操作系统用作本地文件系统的一种互联网标准协议。它是一种活动扩展之下的开放标准，可支持本地 Linux 权限和文件系统功能。</p>\n<p>RHEL 7 在默认情况下支持NFSv4 （版本4）,向下兼容v3及v2版本。NFSv4使用 TCP 协议与服务器进行通信，而较早版本的NFS则可能使用 TCP 或UDP 。</p>\n<p>NFS 服务器导出共享（目录）,而NFS 客户端将导出的共享挂载到本地挂载点（目录）.本地挂载点必须已存在。可以通过多种方式挂载NFS 共享</p>\n<ul>\n<li><p>使用mount 命令手动挂载 NFS 共享。</p>\n</li>\n<li><p>使用/etc/fstab 在启动时自动挂载 NFS共享。</p>\n</li>\n<li><p>通过称为自动挂载的过程要挂需要挂载 NFS 共享。</p>\n</li>\n</ul>\n<h6 id=\"保护-NFS-共享的文件访问权限\"><a href=\"#保护-NFS-共享的文件访问权限\" class=\"headerlink\" title=\"保护 NFS 共享的文件访问权限\"></a>保护 NFS 共享的文件访问权限</h6><p>NFS 服务器通过多种方法保护文件的访问权限：none ,sys,krb5,krb5i和 krb5p .NFS 服务器可以选择为每个导出的共享提供一种方式或多种广场。NFS 客户端必须使用为已导出共享规定的方法之一连接到该共享，该方法以挂载选项 sec=method 的形式指定。</p>\n<h6 id=\"安全性方法：\"><a href=\"#安全性方法：\" class=\"headerlink\" title=\"安全性方法：\"></a>安全性方法：</h6><p>none:可对文件进行匿名访问，对服务器的写入（如允许）将分配 UID,GID为nfsnobody </p>\n<p>sys:文件访问权限基于UID和GID的值的标准Linux 文件权限。如果未指定，则此方法是默认值</p>\n<p>krb5:客户端必须使用Kerberos 证明身份，然后适用标准Linux 的文件权限 </p>\n<p>krb5i:添加加密性强的保证，确保每个请求中的数据未被篡改。</p>\n<p>krb5p:为客户端与服务器之间的所有请求添加加密，防止网络中的数据泄露。这会对性能产生影响。</p>\n<h6 id=\"TIPS：\"><a href=\"#TIPS：\" class=\"headerlink\" title=\"TIPS：\"></a>TIPS：</h6><p>Kerberos 选项将至少需要 /etc/krb5,keytab和本节中未论述的其它身份验证配置（加入kerberos域）。/etc/krb5.keytab 通常将由身份验证或安全性管理员提供。请求包含主体和 / 或 nfs 主体（最好包含两者）的keytab</p>\n<p>连接到Kerberos 保护的共享时，NFS 使用 nfs-secure 服务来帮助协商和管理与服务器之间的通信。此服务必须正在运行，才能使用受保护的NFS共享；对其使用 start 和 enable 命令以确保其始终可用。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nfs-secure</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nfs-secure</span><br><span class=\"line\">systemctl start nfs-secure</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"挂载-NFS-共享有三个基本步骤：\"><a href=\"#挂载-NFS-共享有三个基本步骤：\" class=\"headerlink\" title=\"挂载 NFS 共享有三个基本步骤：\"></a>挂载 NFS 共享有三个基本步骤：</h6><p>1、识别 NFS 服务器的管理员可能提供导出详细信息，包括安全性要求。或者 NFSv4 共享可通过挂载NFS 服务器的根文件并浏览已导出目录来识别。以root 用户身份执行此操作。使用 Kerberos 安全对共享的访问将被拒绝，但共享（目录）名称将可见。可以浏览其它共享目录。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /mountpoint</span><br><span class=\"line\">mount /serverX:/ /mountpoint </span><br><span class=\"line\">ls /mountpoint</span><br></pre></td></tr></table></figure></p>\n<p>可以使用 showmount 发现 NFSv2和 NFSv3共享<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">showmount -e serverX</span><br></pre></td></tr></table></figure></p>\n<p>2、挂载点：使用mkdir  在合适的地方创建挂载点<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /mountpoint</span><br></pre></td></tr></table></figure></p>\n<p>3、挂载：这里有两种选择，手动挂载，或并入 /etc/fstab 文件中，为任一操作切换到root 或使用sudo</p>\n<ul>\n<li>手动使用 mount 命令</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount -t nfs -o sync serverX:/share /mountpoint</span><br></pre></td></tr></table></figure>\n<p>-t nfs 选择是 NFS 共享的文件系统类型（未严格要求）。-o sync 选择使用 mount 立即与 NFS 服务器同步写操作（默认为异步）。默认安全性方法（sec=sys）将用于尝试挂载NFS 共享，使用标准 Linux 文件权限。  </p>\n<ul>\n<li>/etc/fstab 使用vim 编辑 /etc/fstab 文件，将挂载条目添加到文件底部。 NFS 共享将在每次系统启动时挂载。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">vim /etc/fstab </span><br><span class=\"line\">……</span><br><span class=\"line\">serverX:/share /mountpoint nfs sync 0 0</span><br><span class=\"line\"></span><br><span class=\"line\">root 用户使用 umount  命令手动卸载共享  </span><br><span class=\"line\"></span><br><span class=\"line\">umount /mountpoint</span><br></pre></td></tr></table></figure>\n<h6 id=\"通过-NFS-自动挂载网络存储\"><a href=\"#通过-NFS-自动挂载网络存储\" class=\"headerlink\" title=\"通过 NFS 自动挂载网络存储\"></a>通过 NFS 自动挂载网络存储</h6><p>自动挂载器是一种服务(autofs) ，它可以根据需要自动挂载 NFS 共享，并将在不再使用 NFS共享时自动卸载这些共享。</p>\n<p>自动挂载器优势</p>\n<ul>\n<li><p>用户无需具有root 特权就可以运行 mount /umount 命令</p>\n</li>\n<li><p>自动挂载器中配置的 NFS 共享可供计算机上的所有用户使用，受访问权限约束</p>\n</li>\n<li><p>NFS 共享不像 /etc/fstab 中的条目一样永久连接，从而可释放网络和系统资源。</p>\n</li>\n<li><p>自动挂载器完全在客户端配置，无需进行任何服务器配置</p>\n</li>\n<li><p>自动挂载器与 mount 命令使用相同的挂载选项，包括安全性选项。</p>\n</li>\n<li><p>支持直接和间接挂载点映射，在挂载点位置方面提供了灵活性。</p>\n</li>\n<li><p>间接挂载点可通过 autofs 创建和删除，从而减少了手动管理这些挂载点的需求。</p>\n</li>\n<li><p>NFS 是自动挂载器的默认文件系统，但自动挂载器也可以用于自动挂载多种不同的文件系统 。</p>\n</li>\n<li><p>autofs 是管理方式类似于其他系统服务的一种服务。</p>\n</li>\n</ul>\n<h6 id=\"创建自动挂载\"><a href=\"#创建自动挂载\" class=\"headerlink\" title=\"创建自动挂载\"></a>创建自动挂载</h6><p>配置自动挂载的过程包括多个步骤：</p>\n<p>1、安装 autofs<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install autofs</span><br></pre></td></tr></table></figure></p>\n<p>此软件包含使用自动挂载器挂载NFS 共享所需要的所有内容</p>\n<p>2、向/etc/auto.master.d 添加一个主映射文件；此文件确定用于挂载点的基础目录，并确定用于创建自动挂载的映射文件。</p>\n<p>使用vim 创建并编辑主映射文件：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/auto.master.d/demo.autofs</span><br></pre></td></tr></table></figure></p>\n<p>主映射文件的名称不重要，但它通常是一个有意义的名称，唯一的要求就是扩展名必须为.autofs ，主映射文件可以保存多个映射条目，或者使用多个文件来将配置数据分开。</p>\n<p>在此例中，为间接映射的挂载添加主映射条目：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/shares /etc/auto.demo</span><br></pre></td></tr></table></figure></p>\n<p>此条目将使用 /shares目录作为将来间接自动挂载的基础目录。/etc/auto.demo 文件包含挂载详细信息；使用绝对文件名，需要在启动autofs 服务之前 创建auto.demo 文件</p>\n<p>要使用直接映射 的挂载点，请向同一文件（或在单独的文件中）添加条目：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/- /etc/auto.direct</span><br></pre></td></tr></table></figure></p>\n<p>所有直接映射条目都使用 “/-”作为基础目录。在此例中，包含挂载详细信息的映射的文件是/etc/auto.direct </p>\n<p>3、创建映射文件，映射文件确定挂载点、挂载选项和挂载的源位置</p>\n<p>使用vim 创建并编辑映射文件<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> sudo vim /etc/auto.demo</span><br></pre></td></tr></table></figure></p>\n<p>文件名不重要，按照惯例，该文件位于 /etc 中并且名为 auto.name ，其中 name 是对所有包含内容有意义的名称<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">work -rw,sync serverX:/shares/work</span><br></pre></td></tr></table></figure></p>\n<p>条目的格式为挂载点、挂载选项和源位置。此示例显示基本的间接映射条目。</p>\n<ul>\n<li><p>挂载点在 man page 中被称为 “密钥” ,它将由 autofs 服务自动创建和删除。在此例中完全限制挂载点将是 /shares/work; autofs 将根据需要创建和删除/shares 目录和 work 目录</p>\n</li>\n<li><p>挂载选项以 “-”开关，并使用逗号分隔，不带空格。可以选项与手动挂载选项相同。几个常用的自动挂载器特定选项 -fstype= 和 -strict  文件文件系统 不是NFS 则使用fstype ，可指定文件系统 ；挂载文件系统时，使用strict 可将错误视为严重。</p>\n</li>\n<li><p>NFS 共享的源位置遵循 host:/pathname 模式；在此示例中为 serverX:/shares/work ，此目录需要已在 serverX 上导出，并带有读/写访问权限和标准的linux 文件权限的支持，这样才能挂载成功。如果要挂载的文件系统以 “/”开关，例如本地设备条目或者SMB 共享，则需要添加一个“：”作为前缀，例如 SMB 共享为 ：//serverX/share。</p>\n</li>\n</ul>\n<p>4、启动并启用自动挂载服务<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> autofs</span><br><span class=\"line\">sudo systemctl start autofs</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"映射文件-直接映射\"><a href=\"#映射文件-直接映射\" class=\"headerlink\" title=\"映射文件 - 直接映射\"></a>映射文件 - 直接映射</h5><p>直接映射用于将NFS 共享映射到现在的挂载点。自动挂载器不会尝试自动创建挂载点；在 autofs 服务启动之前 挂载点必须存在</p>\n<p>继续前面的示例，/etc/auto.direct 文件的内容可能 类似下文：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/mnt/docs -rw,sync serverX:/shares/docs</span><br></pre></td></tr></table></figure></p>\n<p>挂载点（或密钥）始终为绝对路径，以 “/“ 开关。映射文件其余部分使用相同的结构。</p>\n<p>只有最右侧的目录受自动挂载程序控制，因此挂载点挂载点（此示例中为 /mnt ）以上的目录结构不会被 autofs 遮盖。</p>\n<h5 id=\"映射文件-间接通配符映射\"><a href=\"#映射文件-间接通配符映射\" class=\"headerlink\" title=\"映射文件 -- 间接通配符映射\"></a>映射文件 -- 间接通配符映射</h5><p>当 NFS 服务器导出一个目录中的多个子目录时，可将自动挂载程序配置为使用单个映射条目访问这些子目录其中的任何一个，作为示例，对于从NFS 服务器自动挂载用户主目录，此功能非常有用。</p>\n<p>继续前面的示例，如果 serverX:/share 导出两个或多个子目录,并且能使用相同的挂载选项访问这些子目录，则/etc/auto.demo 文件内容可能类似于正文：</p>\n<ul>\n<li>-rw,sync serverX:/shares/&amp;</li>\n</ul>\n<p>挂载点是“*”，而源位置上的子目录是 “&amp;” 。条目中的所有其它内容都相同</p>\n<p>当用户尝试访问/shares/work 时，挂载点 “*”（此示例中为work）将代替源位置中的 &amp; 符号，并将挂载 serverX:/shares/work。对于间接示例，autofs 服务将自动创建和删除work 目录。</p>\n<h5 id=\"实验：\"><a href=\"#实验：\" class=\"headerlink\" title=\"实验：\"></a>实验：</h5><h6 id=\"间接通配符映射\"><a href=\"#间接通配符映射\" class=\"headerlink\" title=\"间接通配符映射\"></a>间接通配符映射</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -y install autofs</span><br><span class=\"line\">vim /etc/auto.master.d/home.autofs   <span class=\"comment\">#主配置文件</span></span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">/home/guests /etc/auto.home</span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">vim /etc/auto.home    <span class=\"comment\">#详细信息</span></span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">* -rw,sync classroom:/home/guests/&amp;</span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> autofs</span><br><span class=\"line\">systemctl start autofs</span><br></pre></td></tr></table></figure>\n<h6 id=\"间接映射\"><a href=\"#间接映射\" class=\"headerlink\" title=\"间接映射\"></a>间接映射</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -y install autofs</span><br><span class=\"line\">vim /etc/auto.master.d/public.autofs   <span class=\"comment\">#主配置文件</span></span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">/shares /etc/auto.public</span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">vim /etc/auto.public    <span class=\"comment\">#详细信息</span></span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">public -rw,sync classroom:/shares/public</span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> autofs</span><br><span class=\"line\">systemctl start autofs</span><br></pre></td></tr></table></figure>\n<h6 id=\"直接映射（需要提前创建挂载点）\"><a href=\"#直接映射（需要提前创建挂载点）\" class=\"headerlink\" title=\"直接映射（需要提前创建挂载点）\"></a>直接映射（需要提前创建挂载点）</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -y install autofs</span><br><span class=\"line\">vim /etc/auto.master.d/public.autofs   <span class=\"comment\">#主配置文件</span></span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">/- /etc/auto.public</span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">vim /etc/auto.public    <span class=\"comment\">#详细信息</span></span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">/mnt/public -rw,sync classroom:/shares/public</span><br><span class=\"line\"><span class=\"comment\">###</span></span><br><span class=\"line\">mkdir /mnt/public     <span class=\"comment\">#创建目录</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> autofs</span><br><span class=\"line\">systemctl start autofs</span><br></pre></td></tr></table></figure>\n"},{"title":"RH134 第十三章 对 RED HAT ENTERPRISE LINUX 启动过程进程控制故障排除","url":"505.html","id":"505","date":"2018-10-16T03:38:24.000Z","_content":"\n##### REHL 7 启动过程  \n\n1、计算机已接通电源\n\n2、系统固件搜索可启动设备\n\n3、系统固件从磁盘读取启动加载器，然后将系统控制权交给启动加载器。在 RHEL 7 中这通常是 grub2。\n\n 通过以下方式进行配置 ：grub2-install \n\n4、启动加载器从磁盘加载其配置，然后向用户显示用于启动的可能配置的菜单。\n\n   通过以下方式进行配置：/etc/grub.d/ 、/etc/default/grub 和 （非手动） /boot/grub2/grub.cfg  \n\n5、在用户做出选择（或发生自动超时）后，启动加载器会从磁盘加载配置的内核及initramfs 并将它们置于内存中。initramfs 是经过 gzip 的cpio 归档，其中包含启动时所有必要硬件的内核模块、初始化脚本等。在 RHEL7 中，initramfs 包含自身可用的整个系统。  \n\n  通过以下方式进行配置：/etc/dracut.conf  \n\n6、启动加载器将系统控制权交给内核，从而传递启动加载器的内核命令行中指定的任何选项，以及initramfs 在内存中的位置。\n\n   通过以下方式进行配置：/etc/grub.d/、/etc/default/grub 和 (非手动) /boot/grub2/grub.cfg  \n\n7、对于内核可在 initamfs 中找到驱动程序的所有硬件，内核会初始化这些硬件，然后作为 PID 1 从 initramfs 执行 /sbin/init 。在 RHEL 7 中initramfs 包含systemd 的工作副本作为 /sbin/init ，并包含 udev 守护进程\n\n  通过以下方式进行配置 init = 命令行参数  \n\n8、initramfs 中的 systemd 实例会执行 initrd.target 目标的所有单元。这包括在 /sysroot 上挂载实际的 root 文件系统 。\n\n   通过以下方式进行配置： /etc/fstab   \n\n9、内核 root 文件系统从initramfs root 文件系统切换（回转）为之前挂载于 /sysroot 上的系统 root 文件系统。随后 ，systemd 会使用系统中安装 systemd 副本来自动重新执行。\n\n10、systemd 会查找从内核命令传递或系统中配置的默认目标，然后启动（或停止）单元，以符合目标的配置，从而自动解决单元间的依赖关系。本质上，systemd 目标是一组应在激活后达到所需系统状态的单元。这些目标通常至少包含一个生成基于文本的登录或图形登录屏幕。\n\n   通过以下方式进行配置： /etc/systemd/system/default.target 、/etc/systemd/system/  \n\n##### 启动、重新启动和关闭  \n\n-------------\n\n要关闭或从命令行重新启动正在运行的系统，管理员可以使用systemcl 命令\n\nsystemctl poweroff 会停止所有运行的服务，卸载所有文件系统（或者在文件系统无法卸载时以只读形式将其重新挂载），然后关闭系统。\n\nsystemctl reboot 会停止所有运行的服务，卸载所有文件系统，然后重新启动系统。\n\n为了方便身后兼容，poweroff 和 reboot 命令仍然存在，但是在RHEL 7 中，它们是指向 systemctl 工具的的符号链接。\n\n### tips:\n\nsystemctl halt 和 halt 也用于停止系统，但与其poweroff 不同，这些命令不会关闭系统而是让系统进入能安全地手动关闭的状态。  \n\n### 选择systemd 目标\n\nsystemd 目标是一组应在启动后到达所需状态的systemd 单元。下表列出了这些目标的最重要的信息。\n\n|目标|用途\n| :--\n|graphical.target|多用户、图形+文本\n|multi-user.target|多用户、文本登录\n|rescue.target|sulogin 提示，表示基本系统初始化已完成\n|emergency.target|sulogin 提示，表示 initramfs 回转完成，且系统 root 以只读形式挂载于 / 上\n\n某个目标可能属于另一目标：例如 graphical.target 包含 multi-user.target 。后者反过来取决于 basic.target 和其他目标，使用以下命令可从命令行查看这些依赖关系；  \n```sh\nsystemctl list-dependencies graphical.target | grep target    #查看依赖关系\nsystemctl list-units --type=target --all #查看所有可用目标的描述\nsystemctl list-units-files --type=target --all #查看磁盘上安装的所有目标的概述\nsystemctl isolate multi-user.target    #在运行的系统中，切换到其他目标，类似于老版本 init 5\n```\n隔离某个目标会停止该目标（及其依赖项）不需要的所有服务，并启动任何尚未启动的所需服务。\n\n##### 注意：\n\n并非所有目标都能隔离。只有单元文件中设置了 AllowIsolate=yes 的目标才可以隔离；例如 graphical.target 目标可以隔离，但 cryptsetup.target 目标不能隔离。AllowIsolate 设置在target 文件中配置\n\n###### 设置默认目标\n\n在系统启动且将控制权从 initramfs 交给systemd 后，systemd 会尝试激活 default.target 目标。通常，default.target 目标是 (/etc/systemd/system中) 指向 graphical.target 或 multi-user.target 的符号链接。\n\nsystemctl 工具随附两个命令（get-default 和 set-default ） 用于管理该符号链接，而不是手动编辑该连接。\n```sh\n[root@client ~]# systemctl get-default\nmulti-user.target\n[root@client ~]# systemctl set-default graphical.target\nRemoved symlink /etc/systemd/system/default.target.\nCreated symlink from /etc/systemd/system/default.target to /usr/lib/systemd/system/graphical.target.\n```\n###### 在启动时选择其他目标  \n\n要在启动时选择其它目标，可从启动加载器将特殊选项附加到内核命令行：systemd.init= .\n\n例如，要使系统启动进入救援 shell  （在这种情况下，系统可在（几乎）没有任何服务运行的情况下进行配置更改），则在启动前，可从交互式启动加载器菜单中附加以下内容：\n\nsystemd.unit=rescue.target\n\n该配置更改仅影响单个启动，这使其成为排除启动过程故障的有用工具。\n\n要使用这种选择其他目标的方法，请针对 RHEL 7 系统执行以下步骤：\n\n1、（重新）启动系统 \n\n2、按任意键中断启动加载菜单倒计时。\n\n3、将光标移动至要启动的条目\n\n4、按e 编辑当前条目\n\n5、将光标移动至以 linux16 开关行。此为内核命令行\n\n6、附加 systemd.unit=desired.target \n\n7、按 Ctrl +x 使用这些更改进行启动.\n\n修复常见启动问题  \n\n-----------\n\n### 恢复root 密码  \n\n每个系统管理员都应该能完成一项任务是恢复丢失的root密码，如果管理员仍处于登录状态，不管是作为拥有完成sudo 访问权限的非特权用户，还是作为root 用户，这个任务都很简单。如果未登录则复杂一点。  \n\n有一些方法可用于设备新的root 密码。例如，系统管理员可以使用live cd 启动系统，从此处挂载root文件系统。然后编辑 /etc/shadow 。在本节中，我们将探讨一个无需使用外部介质的方法。\n\n###### 注意：\n\n在RHEL 6及早期版本中，管理员可以启动系统进入runlevel 1 然后看到一个root 提示。在 RHEL7 中与 runlevel 1 最接近的是 rescue.target  和emergency.target 目标，这两个目标都需要 root 密码才能登录 。\n\n在 RHEL 7中，可以使从 initramfs 运行的脚本在某些点暂停，提供 root shell ，然后在该 shell 存在的情况下继续 。虽然主要是为了进行调试，但也可用户恢复丢失的 root 密码。\n\n1、重新启动\n\n2、按任意键中断启动加载器倒计时。\n\n3、将光标移动到需要启动的条目\n\n4、按 e 编辑选定的条目\n\n5、将光标移到内核命令行（以 linux16开头的行）\n\n6、附加 rd.break （就在从initramfs 向实际系统移交控制权前，该操作会中断）。\n\n###### 注意：\n\n    initramfs 提示会显示在内核命令行中指定为最后的任何控制台中。  \n\n7、Ctrl +x 使用这些更改进行启动\n\n###### 注意：    \n\n    预建的映像可能会在内核中放置多个 console = 参数，以全支持各种各校的实施场景，对于 rd.break ，有一点需要注意的是，尽管许多内核消息将会发送到所有控制台，但提示符最终都将使用最后一个控制台。如果未看到提示符，可能要临时调整 console = 参数的顺序。  \n\n此时，会显示 root shell ，且实际系统的 root 文件系统会在 /sysroot 中以只读方式挂载。\n\n###### 重要：\n\n    由于此时尚未启动 selinux ，因此任何创建的新文件都不会创建分配有selinux 上下文。请记住，有些工具（如passwd ）首先会创建一个新文件，然后移动新文件以代替要编辑的文件，从而有地创建不 selinux 上下文的新文件。  \n\n###### 此时要恢复 root 密码，请使用以下步骤：\n\n1、以读写方式重新挂载 /sysroot \n\nmount -o remount,rw /sysroot\n\n2、切换为 chroot 存入位置，其中 /sysroot 被视为文件系统树的 root \n\nchroot /sysroot\n\n3、设置新 root 密码\n\npasswd root\n\n4、确保所有未标记的文件（包括此时的 /etc/shadow）在启动过程中都会重新获得标记。\n\ntouch /.autorelabel\n\n5、键入 exit 两次，第一次将退出 chroot 存放位置，第二次将退出 initramfs 调试 shell 。此时系统将继续进行启动，执行完整的 selinux 重新标记，然后再次重新启动。  \n\n#### 使用 journalctl \n\n查看以前（失败）启动日志会很有用。如果 journald 日志已被已久性的，则使用 journaclctl 工具即可查看。\n\n首先确定启用了永久性的 journald 记录\n```sh\nmkdir -p -m2775 /var/log/journal\nchwon :systemd-journal /var/log/journal\nkillall -USR1 systemd-journald\n```\n要检查上一次启动的日志文件，请在journalctl 中使用 -b 选项。无需任何参数，-b 选项即可将输出过滤为仅包含与该启动有关的消息，但是如果参数为负数，则此选项将过滤出上次启动。例如：\n```sh\njournalctl -b -l -p err\n```\n该命令将显示上次启动中被评为错误或更严重级别的所有消息。\n\n##### 诊断和修复 systemd 启动问题\n\n如果在启动服务过程中出现问题，则有几个工具可供管理员用于协助调试和 / 或故障排除：\n\n###### 早期调试 shell \n\n通过运行 systemctl enable debug-shell.service 启动序列早期将在 tty9 (Ctrl + Alt +f9 )上生成一个root shell 。该 shell 会自动作为 root 登录 ，这样管理员可以在系统仍在启动时使用一些其他高度工具。\n\n###### tips :  \n\n在完成调试后，请不要忘记禁用 debug-shell.service 服务，因为该服务会使未经身份验证的 root shell 向任何有本地控制台访问权限的人员开放。\n\n###### 紧急情况和救援目标\n\n通过从启动器加载将 systemd.unit=rescue.target 或 systemd.unit=emergency.target 附加到内核命令行，系统将生成特殊的救援或紧急情况 shell ，而不是正常启动。这两个 shell 都需要提供 root 密码。 emergency 目标使 root 文件系统以只读方式挂载，而rescue.target 等待sysinit.target 先完成，这样更多的系统会进行初始化 （例如日志记录、文件系统等）。\n\n这些 shell 可以用于修复妨碍系统正常启动的任何问题；例如，服务之间的依赖关系循环、或 /etc/fstab  中的错误条目。从这些 shell 退出后，系统会继续进行正常启动过程\n\n###### 阻塞作业\n\n在启动过程中，systemd 会生成大量作业。如果其中某些作业无法完成，则它们会妨碍其他作业运行。要检查当前作业列表，管理员可以使用命令 systemctl list-jobs 。所有列出为 running 的作业都必须先完成，然后列为 waiting 的作业可以继续。\n\n#### 修复在启动时出现的文件系统问题\n\n/etc/fstab 中的错误和损坏的文件系统可能会阻止系统启动。在大多数情况下，systemd 实际上会在超时后继续启动，或者降至需要提供 root 密码的紧急修复 shell \n\n|问题|结果\n| :--\n|损坏文件系统|systemd 将会尝试 fsck ,如果问题太严重而无法自动修复，则系统会提示用户从紧急 shell 手动运行 shell \n|/etc/fstab 中引用的设备 /UUID 不存在|systemd 将等待一定的时间，等设备变得可用。如果设备未变得可用，则系统会在超时后用户降至紧急 shell 。\n|/etc/fstab 中的挂载点不存在|systemd 会创建挂载点（如果可能） ; 否则，它会降至紧急 shell \n\n/etc/fstab 中指定的挂载点错误|系统将用户降至紧急 shell \n|在所有情况下，管理员都可以使用 emergency.target 目标来诊断和修复问题，因为在显示紧急 shell 之前 ，不会挂载任何文件系统。\n\n###### 注意：\n\n在文件系统问题中使用自动恢复 shell 时，请不要忘记在编辑 /etc/fstab 后发出 systemctl daemon-reload ，如果不重新加载，systemd 将继续使用旧版本。\n\n###### 修复启动加载器问题  \n\nRHEL 7 中默认使用的启动加载是 grub2, GRand Unified Bootloader 的第二个主要版本\n\ngrub2 可以用来在 BIOS和 UEFI系统中进行启动，并且支持启动现代硬件上运行的几乎所有操作系统。\n\ngrub2 的主要配置文件是 /boot/grub2/grub.cfg ，但是管理员不应直接编辑文件，而是应用使用一组不同的配置文件和安装的内核列表，并借助名为 grub2-mkconfig 的工具生成配置。\n\ngrub2-mkconifg 会查看 /etc/default/grub 的选项（例如要使用的默认菜单超时及内核命令行），然后在 /etc/grub.d/ 中使用一组脚本来生成配置文件。\n\n要永久更改启动加载器配置，管理员需要编辑前面列出的配置文件，然后运行以下命令：\n```sh\ngrub2-mkconfig > /boot/grub2/grub.cfg\n```\n在进行较大更改的情况下，管理员可能更喜欢不经过重定向即运行该命令，这样可以首先检查结果。\n\n###### 重要指令\n\n要为损坏的 grub2 配置排除故障，管理员需要先了解 /boot/grub2/grub.cfg 的语法。实际可启动条目是在 menuentry 块中编码的。在这些块中，linux16 和 initrd16 行指向（随内核命令行）从磁盘加载的内核以及要加载的 initramfs 。在启动时进行交互编辑的过程中，Tab 实例可用于查找这些文件。\n\n这些块中的 set root 行不指向 rhel 7 系统的root 文件系统，而是指向 grub2 应从加载内核及 initramfs 文件的文件系统。语法为 harddrive,partition ，其中 hd0 是系统中的第一个硬盘驱动器，hd1 是第二个硬盘驱动器，依此类推。指定为 msdos1 的分区是该驱动器上的第一个 MBR 分区，指定为 gpt1 分区的第一个GPT分区  \n\n###### 重新安装启动加载器\n\n在启动加载器自身已损坏的情况下，可以使用 grub2-install 命令重新安装。在 BIOS系统中，应提供 MBR 中应安装 grub2 的磁盘作为参数。在 UEFI 系统中，当 EFI 系统分区挂载于 /boot/efi/上时，无需提供任何参数。\n","source":"_posts/rh134-e7-ac-ac-e5-8d-81-e4-b8-89-e7-ab-a0-e5-af-b9-red-hat-enterprise-linux-e5-90-af-e5-8a-a8-e8-bf-87-e7-a8-8b-e8-bf-9b-e7-a8-8b-e6-8e-a7-e5-88-b6-e6-95-85-e9-9a-9c-e6-8e-92-e9-99-a4.md","raw":"---\ntitle: RH134 第十三章 对 RED HAT ENTERPRISE LINUX 启动过程进程控制故障排除\nurl: 505.html\nid: 505\ncategories:\n  - RHEL134\ndate: 2018-10-16 11:38:24\ntags:\n---\n\n##### REHL 7 启动过程  \n\n1、计算机已接通电源\n\n2、系统固件搜索可启动设备\n\n3、系统固件从磁盘读取启动加载器，然后将系统控制权交给启动加载器。在 RHEL 7 中这通常是 grub2。\n\n 通过以下方式进行配置 ：grub2-install \n\n4、启动加载器从磁盘加载其配置，然后向用户显示用于启动的可能配置的菜单。\n\n   通过以下方式进行配置：/etc/grub.d/ 、/etc/default/grub 和 （非手动） /boot/grub2/grub.cfg  \n\n5、在用户做出选择（或发生自动超时）后，启动加载器会从磁盘加载配置的内核及initramfs 并将它们置于内存中。initramfs 是经过 gzip 的cpio 归档，其中包含启动时所有必要硬件的内核模块、初始化脚本等。在 RHEL7 中，initramfs 包含自身可用的整个系统。  \n\n  通过以下方式进行配置：/etc/dracut.conf  \n\n6、启动加载器将系统控制权交给内核，从而传递启动加载器的内核命令行中指定的任何选项，以及initramfs 在内存中的位置。\n\n   通过以下方式进行配置：/etc/grub.d/、/etc/default/grub 和 (非手动) /boot/grub2/grub.cfg  \n\n7、对于内核可在 initamfs 中找到驱动程序的所有硬件，内核会初始化这些硬件，然后作为 PID 1 从 initramfs 执行 /sbin/init 。在 RHEL 7 中initramfs 包含systemd 的工作副本作为 /sbin/init ，并包含 udev 守护进程\n\n  通过以下方式进行配置 init = 命令行参数  \n\n8、initramfs 中的 systemd 实例会执行 initrd.target 目标的所有单元。这包括在 /sysroot 上挂载实际的 root 文件系统 。\n\n   通过以下方式进行配置： /etc/fstab   \n\n9、内核 root 文件系统从initramfs root 文件系统切换（回转）为之前挂载于 /sysroot 上的系统 root 文件系统。随后 ，systemd 会使用系统中安装 systemd 副本来自动重新执行。\n\n10、systemd 会查找从内核命令传递或系统中配置的默认目标，然后启动（或停止）单元，以符合目标的配置，从而自动解决单元间的依赖关系。本质上，systemd 目标是一组应在激活后达到所需系统状态的单元。这些目标通常至少包含一个生成基于文本的登录或图形登录屏幕。\n\n   通过以下方式进行配置： /etc/systemd/system/default.target 、/etc/systemd/system/  \n\n##### 启动、重新启动和关闭  \n\n-------------\n\n要关闭或从命令行重新启动正在运行的系统，管理员可以使用systemcl 命令\n\nsystemctl poweroff 会停止所有运行的服务，卸载所有文件系统（或者在文件系统无法卸载时以只读形式将其重新挂载），然后关闭系统。\n\nsystemctl reboot 会停止所有运行的服务，卸载所有文件系统，然后重新启动系统。\n\n为了方便身后兼容，poweroff 和 reboot 命令仍然存在，但是在RHEL 7 中，它们是指向 systemctl 工具的的符号链接。\n\n### tips:\n\nsystemctl halt 和 halt 也用于停止系统，但与其poweroff 不同，这些命令不会关闭系统而是让系统进入能安全地手动关闭的状态。  \n\n### 选择systemd 目标\n\nsystemd 目标是一组应在启动后到达所需状态的systemd 单元。下表列出了这些目标的最重要的信息。\n\n|目标|用途\n| :--\n|graphical.target|多用户、图形+文本\n|multi-user.target|多用户、文本登录\n|rescue.target|sulogin 提示，表示基本系统初始化已完成\n|emergency.target|sulogin 提示，表示 initramfs 回转完成，且系统 root 以只读形式挂载于 / 上\n\n某个目标可能属于另一目标：例如 graphical.target 包含 multi-user.target 。后者反过来取决于 basic.target 和其他目标，使用以下命令可从命令行查看这些依赖关系；  \n```sh\nsystemctl list-dependencies graphical.target | grep target    #查看依赖关系\nsystemctl list-units --type=target --all #查看所有可用目标的描述\nsystemctl list-units-files --type=target --all #查看磁盘上安装的所有目标的概述\nsystemctl isolate multi-user.target    #在运行的系统中，切换到其他目标，类似于老版本 init 5\n```\n隔离某个目标会停止该目标（及其依赖项）不需要的所有服务，并启动任何尚未启动的所需服务。\n\n##### 注意：\n\n并非所有目标都能隔离。只有单元文件中设置了 AllowIsolate=yes 的目标才可以隔离；例如 graphical.target 目标可以隔离，但 cryptsetup.target 目标不能隔离。AllowIsolate 设置在target 文件中配置\n\n###### 设置默认目标\n\n在系统启动且将控制权从 initramfs 交给systemd 后，systemd 会尝试激活 default.target 目标。通常，default.target 目标是 (/etc/systemd/system中) 指向 graphical.target 或 multi-user.target 的符号链接。\n\nsystemctl 工具随附两个命令（get-default 和 set-default ） 用于管理该符号链接，而不是手动编辑该连接。\n```sh\n[root@client ~]# systemctl get-default\nmulti-user.target\n[root@client ~]# systemctl set-default graphical.target\nRemoved symlink /etc/systemd/system/default.target.\nCreated symlink from /etc/systemd/system/default.target to /usr/lib/systemd/system/graphical.target.\n```\n###### 在启动时选择其他目标  \n\n要在启动时选择其它目标，可从启动加载器将特殊选项附加到内核命令行：systemd.init= .\n\n例如，要使系统启动进入救援 shell  （在这种情况下，系统可在（几乎）没有任何服务运行的情况下进行配置更改），则在启动前，可从交互式启动加载器菜单中附加以下内容：\n\nsystemd.unit=rescue.target\n\n该配置更改仅影响单个启动，这使其成为排除启动过程故障的有用工具。\n\n要使用这种选择其他目标的方法，请针对 RHEL 7 系统执行以下步骤：\n\n1、（重新）启动系统 \n\n2、按任意键中断启动加载菜单倒计时。\n\n3、将光标移动至要启动的条目\n\n4、按e 编辑当前条目\n\n5、将光标移动至以 linux16 开关行。此为内核命令行\n\n6、附加 systemd.unit=desired.target \n\n7、按 Ctrl +x 使用这些更改进行启动.\n\n修复常见启动问题  \n\n-----------\n\n### 恢复root 密码  \n\n每个系统管理员都应该能完成一项任务是恢复丢失的root密码，如果管理员仍处于登录状态，不管是作为拥有完成sudo 访问权限的非特权用户，还是作为root 用户，这个任务都很简单。如果未登录则复杂一点。  \n\n有一些方法可用于设备新的root 密码。例如，系统管理员可以使用live cd 启动系统，从此处挂载root文件系统。然后编辑 /etc/shadow 。在本节中，我们将探讨一个无需使用外部介质的方法。\n\n###### 注意：\n\n在RHEL 6及早期版本中，管理员可以启动系统进入runlevel 1 然后看到一个root 提示。在 RHEL7 中与 runlevel 1 最接近的是 rescue.target  和emergency.target 目标，这两个目标都需要 root 密码才能登录 。\n\n在 RHEL 7中，可以使从 initramfs 运行的脚本在某些点暂停，提供 root shell ，然后在该 shell 存在的情况下继续 。虽然主要是为了进行调试，但也可用户恢复丢失的 root 密码。\n\n1、重新启动\n\n2、按任意键中断启动加载器倒计时。\n\n3、将光标移动到需要启动的条目\n\n4、按 e 编辑选定的条目\n\n5、将光标移到内核命令行（以 linux16开头的行）\n\n6、附加 rd.break （就在从initramfs 向实际系统移交控制权前，该操作会中断）。\n\n###### 注意：\n\n    initramfs 提示会显示在内核命令行中指定为最后的任何控制台中。  \n\n7、Ctrl +x 使用这些更改进行启动\n\n###### 注意：    \n\n    预建的映像可能会在内核中放置多个 console = 参数，以全支持各种各校的实施场景，对于 rd.break ，有一点需要注意的是，尽管许多内核消息将会发送到所有控制台，但提示符最终都将使用最后一个控制台。如果未看到提示符，可能要临时调整 console = 参数的顺序。  \n\n此时，会显示 root shell ，且实际系统的 root 文件系统会在 /sysroot 中以只读方式挂载。\n\n###### 重要：\n\n    由于此时尚未启动 selinux ，因此任何创建的新文件都不会创建分配有selinux 上下文。请记住，有些工具（如passwd ）首先会创建一个新文件，然后移动新文件以代替要编辑的文件，从而有地创建不 selinux 上下文的新文件。  \n\n###### 此时要恢复 root 密码，请使用以下步骤：\n\n1、以读写方式重新挂载 /sysroot \n\nmount -o remount,rw /sysroot\n\n2、切换为 chroot 存入位置，其中 /sysroot 被视为文件系统树的 root \n\nchroot /sysroot\n\n3、设置新 root 密码\n\npasswd root\n\n4、确保所有未标记的文件（包括此时的 /etc/shadow）在启动过程中都会重新获得标记。\n\ntouch /.autorelabel\n\n5、键入 exit 两次，第一次将退出 chroot 存放位置，第二次将退出 initramfs 调试 shell 。此时系统将继续进行启动，执行完整的 selinux 重新标记，然后再次重新启动。  \n\n#### 使用 journalctl \n\n查看以前（失败）启动日志会很有用。如果 journald 日志已被已久性的，则使用 journaclctl 工具即可查看。\n\n首先确定启用了永久性的 journald 记录\n```sh\nmkdir -p -m2775 /var/log/journal\nchwon :systemd-journal /var/log/journal\nkillall -USR1 systemd-journald\n```\n要检查上一次启动的日志文件，请在journalctl 中使用 -b 选项。无需任何参数，-b 选项即可将输出过滤为仅包含与该启动有关的消息，但是如果参数为负数，则此选项将过滤出上次启动。例如：\n```sh\njournalctl -b -l -p err\n```\n该命令将显示上次启动中被评为错误或更严重级别的所有消息。\n\n##### 诊断和修复 systemd 启动问题\n\n如果在启动服务过程中出现问题，则有几个工具可供管理员用于协助调试和 / 或故障排除：\n\n###### 早期调试 shell \n\n通过运行 systemctl enable debug-shell.service 启动序列早期将在 tty9 (Ctrl + Alt +f9 )上生成一个root shell 。该 shell 会自动作为 root 登录 ，这样管理员可以在系统仍在启动时使用一些其他高度工具。\n\n###### tips :  \n\n在完成调试后，请不要忘记禁用 debug-shell.service 服务，因为该服务会使未经身份验证的 root shell 向任何有本地控制台访问权限的人员开放。\n\n###### 紧急情况和救援目标\n\n通过从启动器加载将 systemd.unit=rescue.target 或 systemd.unit=emergency.target 附加到内核命令行，系统将生成特殊的救援或紧急情况 shell ，而不是正常启动。这两个 shell 都需要提供 root 密码。 emergency 目标使 root 文件系统以只读方式挂载，而rescue.target 等待sysinit.target 先完成，这样更多的系统会进行初始化 （例如日志记录、文件系统等）。\n\n这些 shell 可以用于修复妨碍系统正常启动的任何问题；例如，服务之间的依赖关系循环、或 /etc/fstab  中的错误条目。从这些 shell 退出后，系统会继续进行正常启动过程\n\n###### 阻塞作业\n\n在启动过程中，systemd 会生成大量作业。如果其中某些作业无法完成，则它们会妨碍其他作业运行。要检查当前作业列表，管理员可以使用命令 systemctl list-jobs 。所有列出为 running 的作业都必须先完成，然后列为 waiting 的作业可以继续。\n\n#### 修复在启动时出现的文件系统问题\n\n/etc/fstab 中的错误和损坏的文件系统可能会阻止系统启动。在大多数情况下，systemd 实际上会在超时后继续启动，或者降至需要提供 root 密码的紧急修复 shell \n\n|问题|结果\n| :--\n|损坏文件系统|systemd 将会尝试 fsck ,如果问题太严重而无法自动修复，则系统会提示用户从紧急 shell 手动运行 shell \n|/etc/fstab 中引用的设备 /UUID 不存在|systemd 将等待一定的时间，等设备变得可用。如果设备未变得可用，则系统会在超时后用户降至紧急 shell 。\n|/etc/fstab 中的挂载点不存在|systemd 会创建挂载点（如果可能） ; 否则，它会降至紧急 shell \n\n/etc/fstab 中指定的挂载点错误|系统将用户降至紧急 shell \n|在所有情况下，管理员都可以使用 emergency.target 目标来诊断和修复问题，因为在显示紧急 shell 之前 ，不会挂载任何文件系统。\n\n###### 注意：\n\n在文件系统问题中使用自动恢复 shell 时，请不要忘记在编辑 /etc/fstab 后发出 systemctl daemon-reload ，如果不重新加载，systemd 将继续使用旧版本。\n\n###### 修复启动加载器问题  \n\nRHEL 7 中默认使用的启动加载是 grub2, GRand Unified Bootloader 的第二个主要版本\n\ngrub2 可以用来在 BIOS和 UEFI系统中进行启动，并且支持启动现代硬件上运行的几乎所有操作系统。\n\ngrub2 的主要配置文件是 /boot/grub2/grub.cfg ，但是管理员不应直接编辑文件，而是应用使用一组不同的配置文件和安装的内核列表，并借助名为 grub2-mkconfig 的工具生成配置。\n\ngrub2-mkconifg 会查看 /etc/default/grub 的选项（例如要使用的默认菜单超时及内核命令行），然后在 /etc/grub.d/ 中使用一组脚本来生成配置文件。\n\n要永久更改启动加载器配置，管理员需要编辑前面列出的配置文件，然后运行以下命令：\n```sh\ngrub2-mkconfig > /boot/grub2/grub.cfg\n```\n在进行较大更改的情况下，管理员可能更喜欢不经过重定向即运行该命令，这样可以首先检查结果。\n\n###### 重要指令\n\n要为损坏的 grub2 配置排除故障，管理员需要先了解 /boot/grub2/grub.cfg 的语法。实际可启动条目是在 menuentry 块中编码的。在这些块中，linux16 和 initrd16 行指向（随内核命令行）从磁盘加载的内核以及要加载的 initramfs 。在启动时进行交互编辑的过程中，Tab 实例可用于查找这些文件。\n\n这些块中的 set root 行不指向 rhel 7 系统的root 文件系统，而是指向 grub2 应从加载内核及 initramfs 文件的文件系统。语法为 harddrive,partition ，其中 hd0 是系统中的第一个硬盘驱动器，hd1 是第二个硬盘驱动器，依此类推。指定为 msdos1 的分区是该驱动器上的第一个 MBR 分区，指定为 gpt1 分区的第一个GPT分区  \n\n###### 重新安装启动加载器\n\n在启动加载器自身已损坏的情况下，可以使用 grub2-install 命令重新安装。在 BIOS系统中，应提供 MBR 中应安装 grub2 的磁盘作为参数。在 UEFI 系统中，当 EFI 系统分区挂载于 /boot/efi/上时，无需提供任何参数。\n","slug":"rh134-e7-ac-ac-e5-8d-81-e4-b8-89-e7-ab-a0-e5-af-b9-red-hat-enterprise-linux-e5-90-af-e5-8a-a8-e8-bf-87-e7-a8-8b-e8-bf-9b-e7-a8-8b-e6-8e-a7-e5-88-b6-e6-95-85-e9-9a-9c-e6-8e-92-e9-99-a4","published":1,"updated":"2019-01-06T17:13:29.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqi23001vlxkjacl3zqal","content":"<h5 id=\"REHL-7-启动过程\"><a href=\"#REHL-7-启动过程\" class=\"headerlink\" title=\"REHL 7 启动过程\"></a>REHL 7 启动过程</h5><p>1、计算机已接通电源</p>\n<p>2、系统固件搜索可启动设备</p>\n<p>3、系统固件从磁盘读取启动加载器，然后将系统控制权交给启动加载器。在 RHEL 7 中这通常是 grub2。</p>\n<p> 通过以下方式进行配置 ：grub2-install </p>\n<p>4、启动加载器从磁盘加载其配置，然后向用户显示用于启动的可能配置的菜单。</p>\n<p>   通过以下方式进行配置：/etc/grub.d/ 、/etc/default/grub 和 （非手动） /boot/grub2/grub.cfg  </p>\n<p>5、在用户做出选择（或发生自动超时）后，启动加载器会从磁盘加载配置的内核及initramfs 并将它们置于内存中。initramfs 是经过 gzip 的cpio 归档，其中包含启动时所有必要硬件的内核模块、初始化脚本等。在 RHEL7 中，initramfs 包含自身可用的整个系统。  </p>\n<p>  通过以下方式进行配置：/etc/dracut.conf  </p>\n<p>6、启动加载器将系统控制权交给内核，从而传递启动加载器的内核命令行中指定的任何选项，以及initramfs 在内存中的位置。</p>\n<p>   通过以下方式进行配置：/etc/grub.d/、/etc/default/grub 和 (非手动) /boot/grub2/grub.cfg  </p>\n<p>7、对于内核可在 initamfs 中找到驱动程序的所有硬件，内核会初始化这些硬件，然后作为 PID 1 从 initramfs 执行 /sbin/init 。在 RHEL 7 中initramfs 包含systemd 的工作副本作为 /sbin/init ，并包含 udev 守护进程</p>\n<p>  通过以下方式进行配置 init = 命令行参数  </p>\n<p>8、initramfs 中的 systemd 实例会执行 initrd.target 目标的所有单元。这包括在 /sysroot 上挂载实际的 root 文件系统 。</p>\n<p>   通过以下方式进行配置： /etc/fstab   </p>\n<p>9、内核 root 文件系统从initramfs root 文件系统切换（回转）为之前挂载于 /sysroot 上的系统 root 文件系统。随后 ，systemd 会使用系统中安装 systemd 副本来自动重新执行。</p>\n<p>10、systemd 会查找从内核命令传递或系统中配置的默认目标，然后启动（或停止）单元，以符合目标的配置，从而自动解决单元间的依赖关系。本质上，systemd 目标是一组应在激活后达到所需系统状态的单元。这些目标通常至少包含一个生成基于文本的登录或图形登录屏幕。</p>\n<p>   通过以下方式进行配置： /etc/systemd/system/default.target 、/etc/systemd/system/  </p>\n<h5 id=\"启动、重新启动和关闭\"><a href=\"#启动、重新启动和关闭\" class=\"headerlink\" title=\"启动、重新启动和关闭\"></a>启动、重新启动和关闭</h5><hr>\n<p>要关闭或从命令行重新启动正在运行的系统，管理员可以使用systemcl 命令</p>\n<p>systemctl poweroff 会停止所有运行的服务，卸载所有文件系统（或者在文件系统无法卸载时以只读形式将其重新挂载），然后关闭系统。</p>\n<p>systemctl reboot 会停止所有运行的服务，卸载所有文件系统，然后重新启动系统。</p>\n<p>为了方便身后兼容，poweroff 和 reboot 命令仍然存在，但是在RHEL 7 中，它们是指向 systemctl 工具的的符号链接。</p>\n<h3 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips:\"></a>tips:</h3><p>systemctl halt 和 halt 也用于停止系统，但与其poweroff 不同，这些命令不会关闭系统而是让系统进入能安全地手动关闭的状态。  </p>\n<h3 id=\"选择systemd-目标\"><a href=\"#选择systemd-目标\" class=\"headerlink\" title=\"选择systemd 目标\"></a>选择systemd 目标</h3><p>systemd 目标是一组应在启动后到达所需状态的systemd 单元。下表列出了这些目标的最重要的信息。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">目标</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">graphical.target</td>\n<td>多用户、图形+文本</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">multi-user.target</td>\n<td>多用户、文本登录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rescue.target</td>\n<td>sulogin 提示，表示基本系统初始化已完成</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">emergency.target</td>\n<td>sulogin 提示，表示 initramfs 回转完成，且系统 root 以只读形式挂载于 / 上</td>\n</tr>\n</tbody>\n</table>\n<p>某个目标可能属于另一目标：例如 graphical.target 包含 multi-user.target 。后者反过来取决于 basic.target 和其他目标，使用以下命令可从命令行查看这些依赖关系；<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl list-dependencies graphical.target | grep target    <span class=\"comment\">#查看依赖关系</span></span><br><span class=\"line\">systemctl list-units --<span class=\"built_in\">type</span>=target --all <span class=\"comment\">#查看所有可用目标的描述</span></span><br><span class=\"line\">systemctl list-units-files --<span class=\"built_in\">type</span>=target --all <span class=\"comment\">#查看磁盘上安装的所有目标的概述</span></span><br><span class=\"line\">systemctl isolate multi-user.target    <span class=\"comment\">#在运行的系统中，切换到其他目标，类似于老版本 init 5</span></span><br></pre></td></tr></table></figure></p>\n<p>隔离某个目标会停止该目标（及其依赖项）不需要的所有服务，并启动任何尚未启动的所需服务。</p>\n<h5 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h5><p>并非所有目标都能隔离。只有单元文件中设置了 AllowIsolate=yes 的目标才可以隔离；例如 graphical.target 目标可以隔离，但 cryptsetup.target 目标不能隔离。AllowIsolate 设置在target 文件中配置</p>\n<h6 id=\"设置默认目标\"><a href=\"#设置默认目标\" class=\"headerlink\" title=\"设置默认目标\"></a>设置默认目标</h6><p>在系统启动且将控制权从 initramfs 交给systemd 后，systemd 会尝试激活 default.target 目标。通常，default.target 目标是 (/etc/systemd/system中) 指向 graphical.target 或 multi-user.target 的符号链接。</p>\n<p>systemctl 工具随附两个命令（get-default 和 set-default ） 用于管理该符号链接，而不是手动编辑该连接。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@client ~]<span class=\"comment\"># systemctl get-default</span></span><br><span class=\"line\">multi-user.target</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># systemctl set-default graphical.target</span></span><br><span class=\"line\">Removed symlink /etc/systemd/system/default.target.</span><br><span class=\"line\">Created symlink from /etc/systemd/system/default.target to /usr/lib/systemd/system/graphical.target.</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"在启动时选择其他目标\"><a href=\"#在启动时选择其他目标\" class=\"headerlink\" title=\"在启动时选择其他目标\"></a>在启动时选择其他目标</h6><p>要在启动时选择其它目标，可从启动加载器将特殊选项附加到内核命令行：systemd.init= .</p>\n<p>例如，要使系统启动进入救援 shell  （在这种情况下，系统可在（几乎）没有任何服务运行的情况下进行配置更改），则在启动前，可从交互式启动加载器菜单中附加以下内容：</p>\n<p>systemd.unit=rescue.target</p>\n<p>该配置更改仅影响单个启动，这使其成为排除启动过程故障的有用工具。</p>\n<p>要使用这种选择其他目标的方法，请针对 RHEL 7 系统执行以下步骤：</p>\n<p>1、（重新）启动系统 </p>\n<p>2、按任意键中断启动加载菜单倒计时。</p>\n<p>3、将光标移动至要启动的条目</p>\n<p>4、按e 编辑当前条目</p>\n<p>5、将光标移动至以 linux16 开关行。此为内核命令行</p>\n<p>6、附加 systemd.unit=desired.target </p>\n<p>7、按 Ctrl +x 使用这些更改进行启动.</p>\n<p>修复常见启动问题  </p>\n<hr>\n<h3 id=\"恢复root-密码\"><a href=\"#恢复root-密码\" class=\"headerlink\" title=\"恢复root 密码\"></a>恢复root 密码</h3><p>每个系统管理员都应该能完成一项任务是恢复丢失的root密码，如果管理员仍处于登录状态，不管是作为拥有完成sudo 访问权限的非特权用户，还是作为root 用户，这个任务都很简单。如果未登录则复杂一点。  </p>\n<p>有一些方法可用于设备新的root 密码。例如，系统管理员可以使用live cd 启动系统，从此处挂载root文件系统。然后编辑 /etc/shadow 。在本节中，我们将探讨一个无需使用外部介质的方法。</p>\n<h6 id=\"注意：-1\"><a href=\"#注意：-1\" class=\"headerlink\" title=\"注意：\"></a>注意：</h6><p>在RHEL 6及早期版本中，管理员可以启动系统进入runlevel 1 然后看到一个root 提示。在 RHEL7 中与 runlevel 1 最接近的是 rescue.target  和emergency.target 目标，这两个目标都需要 root 密码才能登录 。</p>\n<p>在 RHEL 7中，可以使从 initramfs 运行的脚本在某些点暂停，提供 root shell ，然后在该 shell 存在的情况下继续 。虽然主要是为了进行调试，但也可用户恢复丢失的 root 密码。</p>\n<p>1、重新启动</p>\n<p>2、按任意键中断启动加载器倒计时。</p>\n<p>3、将光标移动到需要启动的条目</p>\n<p>4、按 e 编辑选定的条目</p>\n<p>5、将光标移到内核命令行（以 linux16开头的行）</p>\n<p>6、附加 rd.break （就在从initramfs 向实际系统移交控制权前，该操作会中断）。</p>\n<h6 id=\"注意：-2\"><a href=\"#注意：-2\" class=\"headerlink\" title=\"注意：\"></a>注意：</h6><pre><code>initramfs 提示会显示在内核命令行中指定为最后的任何控制台中。  \n</code></pre><p>7、Ctrl +x 使用这些更改进行启动</p>\n<h6 id=\"注意：-3\"><a href=\"#注意：-3\" class=\"headerlink\" title=\"注意：\"></a>注意：</h6><pre><code>预建的映像可能会在内核中放置多个 console = 参数，以全支持各种各校的实施场景，对于 rd.break ，有一点需要注意的是，尽管许多内核消息将会发送到所有控制台，但提示符最终都将使用最后一个控制台。如果未看到提示符，可能要临时调整 console = 参数的顺序。  \n</code></pre><p>此时，会显示 root shell ，且实际系统的 root 文件系统会在 /sysroot 中以只读方式挂载。</p>\n<h6 id=\"重要：\"><a href=\"#重要：\" class=\"headerlink\" title=\"重要：\"></a>重要：</h6><pre><code>由于此时尚未启动 selinux ，因此任何创建的新文件都不会创建分配有selinux 上下文。请记住，有些工具（如passwd ）首先会创建一个新文件，然后移动新文件以代替要编辑的文件，从而有地创建不 selinux 上下文的新文件。  \n</code></pre><h6 id=\"此时要恢复-root-密码，请使用以下步骤：\"><a href=\"#此时要恢复-root-密码，请使用以下步骤：\" class=\"headerlink\" title=\"此时要恢复 root 密码，请使用以下步骤：\"></a>此时要恢复 root 密码，请使用以下步骤：</h6><p>1、以读写方式重新挂载 /sysroot </p>\n<p>mount -o remount,rw /sysroot</p>\n<p>2、切换为 chroot 存入位置，其中 /sysroot 被视为文件系统树的 root </p>\n<p>chroot /sysroot</p>\n<p>3、设置新 root 密码</p>\n<p>passwd root</p>\n<p>4、确保所有未标记的文件（包括此时的 /etc/shadow）在启动过程中都会重新获得标记。</p>\n<p>touch /.autorelabel</p>\n<p>5、键入 exit 两次，第一次将退出 chroot 存放位置，第二次将退出 initramfs 调试 shell 。此时系统将继续进行启动，执行完整的 selinux 重新标记，然后再次重新启动。  </p>\n<h4 id=\"使用-journalctl\"><a href=\"#使用-journalctl\" class=\"headerlink\" title=\"使用 journalctl\"></a>使用 journalctl</h4><p>查看以前（失败）启动日志会很有用。如果 journald 日志已被已久性的，则使用 journaclctl 工具即可查看。</p>\n<p>首先确定启用了永久性的 journald 记录<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p -m2775 /var/<span class=\"built_in\">log</span>/journal</span><br><span class=\"line\">chwon :systemd-journal /var/<span class=\"built_in\">log</span>/journal</span><br><span class=\"line\">killall -USR1 systemd-journald</span><br></pre></td></tr></table></figure></p>\n<p>要检查上一次启动的日志文件，请在journalctl 中使用 -b 选项。无需任何参数，-b 选项即可将输出过滤为仅包含与该启动有关的消息，但是如果参数为负数，则此选项将过滤出上次启动。例如：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">journalctl -b -l -p err</span><br></pre></td></tr></table></figure></p>\n<p>该命令将显示上次启动中被评为错误或更严重级别的所有消息。</p>\n<h5 id=\"诊断和修复-systemd-启动问题\"><a href=\"#诊断和修复-systemd-启动问题\" class=\"headerlink\" title=\"诊断和修复 systemd 启动问题\"></a>诊断和修复 systemd 启动问题</h5><p>如果在启动服务过程中出现问题，则有几个工具可供管理员用于协助调试和 / 或故障排除：</p>\n<h6 id=\"早期调试-shell\"><a href=\"#早期调试-shell\" class=\"headerlink\" title=\"早期调试 shell\"></a>早期调试 shell</h6><p>通过运行 systemctl enable debug-shell.service 启动序列早期将在 tty9 (Ctrl + Alt +f9 )上生成一个root shell 。该 shell 会自动作为 root 登录 ，这样管理员可以在系统仍在启动时使用一些其他高度工具。</p>\n<h6 id=\"tips-1\"><a href=\"#tips-1\" class=\"headerlink\" title=\"tips :\"></a>tips :</h6><p>在完成调试后，请不要忘记禁用 debug-shell.service 服务，因为该服务会使未经身份验证的 root shell 向任何有本地控制台访问权限的人员开放。</p>\n<h6 id=\"紧急情况和救援目标\"><a href=\"#紧急情况和救援目标\" class=\"headerlink\" title=\"紧急情况和救援目标\"></a>紧急情况和救援目标</h6><p>通过从启动器加载将 systemd.unit=rescue.target 或 systemd.unit=emergency.target 附加到内核命令行，系统将生成特殊的救援或紧急情况 shell ，而不是正常启动。这两个 shell 都需要提供 root 密码。 emergency 目标使 root 文件系统以只读方式挂载，而rescue.target 等待sysinit.target 先完成，这样更多的系统会进行初始化 （例如日志记录、文件系统等）。</p>\n<p>这些 shell 可以用于修复妨碍系统正常启动的任何问题；例如，服务之间的依赖关系循环、或 /etc/fstab  中的错误条目。从这些 shell 退出后，系统会继续进行正常启动过程</p>\n<h6 id=\"阻塞作业\"><a href=\"#阻塞作业\" class=\"headerlink\" title=\"阻塞作业\"></a>阻塞作业</h6><p>在启动过程中，systemd 会生成大量作业。如果其中某些作业无法完成，则它们会妨碍其他作业运行。要检查当前作业列表，管理员可以使用命令 systemctl list-jobs 。所有列出为 running 的作业都必须先完成，然后列为 waiting 的作业可以继续。</p>\n<h4 id=\"修复在启动时出现的文件系统问题\"><a href=\"#修复在启动时出现的文件系统问题\" class=\"headerlink\" title=\"修复在启动时出现的文件系统问题\"></a>修复在启动时出现的文件系统问题</h4><p>/etc/fstab 中的错误和损坏的文件系统可能会阻止系统启动。在大多数情况下，systemd 实际上会在超时后继续启动，或者降至需要提供 root 密码的紧急修复 shell </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">问题</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">损坏文件系统</td>\n<td>systemd 将会尝试 fsck ,如果问题太严重而无法自动修复，则系统会提示用户从紧急 shell 手动运行 shell </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/etc/fstab 中引用的设备 /UUID 不存在</td>\n<td>systemd 将等待一定的时间，等设备变得可用。如果设备未变得可用，则系统会在超时后用户降至紧急 shell 。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/etc/fstab 中的挂载点不存在</td>\n<td>systemd 会创建挂载点（如果可能） ; 否则，它会降至紧急 shell </td>\n</tr>\n</tbody>\n</table>\n<p>/etc/fstab 中指定的挂载点错误|系统将用户降至紧急 shell<br>|在所有情况下，管理员都可以使用 emergency.target 目标来诊断和修复问题，因为在显示紧急 shell 之前 ，不会挂载任何文件系统。</p>\n<h6 id=\"注意：-4\"><a href=\"#注意：-4\" class=\"headerlink\" title=\"注意：\"></a>注意：</h6><p>在文件系统问题中使用自动恢复 shell 时，请不要忘记在编辑 /etc/fstab 后发出 systemctl daemon-reload ，如果不重新加载，systemd 将继续使用旧版本。</p>\n<h6 id=\"修复启动加载器问题\"><a href=\"#修复启动加载器问题\" class=\"headerlink\" title=\"修复启动加载器问题\"></a>修复启动加载器问题</h6><p>RHEL 7 中默认使用的启动加载是 grub2, GRand Unified Bootloader 的第二个主要版本</p>\n<p>grub2 可以用来在 BIOS和 UEFI系统中进行启动，并且支持启动现代硬件上运行的几乎所有操作系统。</p>\n<p>grub2 的主要配置文件是 /boot/grub2/grub.cfg ，但是管理员不应直接编辑文件，而是应用使用一组不同的配置文件和安装的内核列表，并借助名为 grub2-mkconfig 的工具生成配置。</p>\n<p>grub2-mkconifg 会查看 /etc/default/grub 的选项（例如要使用的默认菜单超时及内核命令行），然后在 /etc/grub.d/ 中使用一组脚本来生成配置文件。</p>\n<p>要永久更改启动加载器配置，管理员需要编辑前面列出的配置文件，然后运行以下命令：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grub2-mkconfig &gt; /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure></p>\n<p>在进行较大更改的情况下，管理员可能更喜欢不经过重定向即运行该命令，这样可以首先检查结果。</p>\n<h6 id=\"重要指令\"><a href=\"#重要指令\" class=\"headerlink\" title=\"重要指令\"></a>重要指令</h6><p>要为损坏的 grub2 配置排除故障，管理员需要先了解 /boot/grub2/grub.cfg 的语法。实际可启动条目是在 menuentry 块中编码的。在这些块中，linux16 和 initrd16 行指向（随内核命令行）从磁盘加载的内核以及要加载的 initramfs 。在启动时进行交互编辑的过程中，Tab 实例可用于查找这些文件。</p>\n<p>这些块中的 set root 行不指向 rhel 7 系统的root 文件系统，而是指向 grub2 应从加载内核及 initramfs 文件的文件系统。语法为 harddrive,partition ，其中 hd0 是系统中的第一个硬盘驱动器，hd1 是第二个硬盘驱动器，依此类推。指定为 msdos1 的分区是该驱动器上的第一个 MBR 分区，指定为 gpt1 分区的第一个GPT分区  </p>\n<h6 id=\"重新安装启动加载器\"><a href=\"#重新安装启动加载器\" class=\"headerlink\" title=\"重新安装启动加载器\"></a>重新安装启动加载器</h6><p>在启动加载器自身已损坏的情况下，可以使用 grub2-install 命令重新安装。在 BIOS系统中，应提供 MBR 中应安装 grub2 的磁盘作为参数。在 UEFI 系统中，当 EFI 系统分区挂载于 /boot/efi/上时，无需提供任何参数。</p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"REHL-7-启动过程\"><a href=\"#REHL-7-启动过程\" class=\"headerlink\" title=\"REHL 7 启动过程\"></a>REHL 7 启动过程</h5><p>1、计算机已接通电源</p>\n<p>2、系统固件搜索可启动设备</p>\n<p>3、系统固件从磁盘读取启动加载器，然后将系统控制权交给启动加载器。在 RHEL 7 中这通常是 grub2。</p>\n<p> 通过以下方式进行配置 ：grub2-install </p>\n<p>4、启动加载器从磁盘加载其配置，然后向用户显示用于启动的可能配置的菜单。</p>\n<p>   通过以下方式进行配置：/etc/grub.d/ 、/etc/default/grub 和 （非手动） /boot/grub2/grub.cfg  </p>\n<p>5、在用户做出选择（或发生自动超时）后，启动加载器会从磁盘加载配置的内核及initramfs 并将它们置于内存中。initramfs 是经过 gzip 的cpio 归档，其中包含启动时所有必要硬件的内核模块、初始化脚本等。在 RHEL7 中，initramfs 包含自身可用的整个系统。  </p>\n<p>  通过以下方式进行配置：/etc/dracut.conf  </p>\n<p>6、启动加载器将系统控制权交给内核，从而传递启动加载器的内核命令行中指定的任何选项，以及initramfs 在内存中的位置。</p>\n<p>   通过以下方式进行配置：/etc/grub.d/、/etc/default/grub 和 (非手动) /boot/grub2/grub.cfg  </p>\n<p>7、对于内核可在 initamfs 中找到驱动程序的所有硬件，内核会初始化这些硬件，然后作为 PID 1 从 initramfs 执行 /sbin/init 。在 RHEL 7 中initramfs 包含systemd 的工作副本作为 /sbin/init ，并包含 udev 守护进程</p>\n<p>  通过以下方式进行配置 init = 命令行参数  </p>\n<p>8、initramfs 中的 systemd 实例会执行 initrd.target 目标的所有单元。这包括在 /sysroot 上挂载实际的 root 文件系统 。</p>\n<p>   通过以下方式进行配置： /etc/fstab   </p>\n<p>9、内核 root 文件系统从initramfs root 文件系统切换（回转）为之前挂载于 /sysroot 上的系统 root 文件系统。随后 ，systemd 会使用系统中安装 systemd 副本来自动重新执行。</p>\n<p>10、systemd 会查找从内核命令传递或系统中配置的默认目标，然后启动（或停止）单元，以符合目标的配置，从而自动解决单元间的依赖关系。本质上，systemd 目标是一组应在激活后达到所需系统状态的单元。这些目标通常至少包含一个生成基于文本的登录或图形登录屏幕。</p>\n<p>   通过以下方式进行配置： /etc/systemd/system/default.target 、/etc/systemd/system/  </p>\n<h5 id=\"启动、重新启动和关闭\"><a href=\"#启动、重新启动和关闭\" class=\"headerlink\" title=\"启动、重新启动和关闭\"></a>启动、重新启动和关闭</h5><hr>\n<p>要关闭或从命令行重新启动正在运行的系统，管理员可以使用systemcl 命令</p>\n<p>systemctl poweroff 会停止所有运行的服务，卸载所有文件系统（或者在文件系统无法卸载时以只读形式将其重新挂载），然后关闭系统。</p>\n<p>systemctl reboot 会停止所有运行的服务，卸载所有文件系统，然后重新启动系统。</p>\n<p>为了方便身后兼容，poweroff 和 reboot 命令仍然存在，但是在RHEL 7 中，它们是指向 systemctl 工具的的符号链接。</p>\n<h3 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips:\"></a>tips:</h3><p>systemctl halt 和 halt 也用于停止系统，但与其poweroff 不同，这些命令不会关闭系统而是让系统进入能安全地手动关闭的状态。  </p>\n<h3 id=\"选择systemd-目标\"><a href=\"#选择systemd-目标\" class=\"headerlink\" title=\"选择systemd 目标\"></a>选择systemd 目标</h3><p>systemd 目标是一组应在启动后到达所需状态的systemd 单元。下表列出了这些目标的最重要的信息。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">目标</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">graphical.target</td>\n<td>多用户、图形+文本</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">multi-user.target</td>\n<td>多用户、文本登录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rescue.target</td>\n<td>sulogin 提示，表示基本系统初始化已完成</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">emergency.target</td>\n<td>sulogin 提示，表示 initramfs 回转完成，且系统 root 以只读形式挂载于 / 上</td>\n</tr>\n</tbody>\n</table>\n<p>某个目标可能属于另一目标：例如 graphical.target 包含 multi-user.target 。后者反过来取决于 basic.target 和其他目标，使用以下命令可从命令行查看这些依赖关系；<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl list-dependencies graphical.target | grep target    <span class=\"comment\">#查看依赖关系</span></span><br><span class=\"line\">systemctl list-units --<span class=\"built_in\">type</span>=target --all <span class=\"comment\">#查看所有可用目标的描述</span></span><br><span class=\"line\">systemctl list-units-files --<span class=\"built_in\">type</span>=target --all <span class=\"comment\">#查看磁盘上安装的所有目标的概述</span></span><br><span class=\"line\">systemctl isolate multi-user.target    <span class=\"comment\">#在运行的系统中，切换到其他目标，类似于老版本 init 5</span></span><br></pre></td></tr></table></figure></p>\n<p>隔离某个目标会停止该目标（及其依赖项）不需要的所有服务，并启动任何尚未启动的所需服务。</p>\n<h5 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h5><p>并非所有目标都能隔离。只有单元文件中设置了 AllowIsolate=yes 的目标才可以隔离；例如 graphical.target 目标可以隔离，但 cryptsetup.target 目标不能隔离。AllowIsolate 设置在target 文件中配置</p>\n<h6 id=\"设置默认目标\"><a href=\"#设置默认目标\" class=\"headerlink\" title=\"设置默认目标\"></a>设置默认目标</h6><p>在系统启动且将控制权从 initramfs 交给systemd 后，systemd 会尝试激活 default.target 目标。通常，default.target 目标是 (/etc/systemd/system中) 指向 graphical.target 或 multi-user.target 的符号链接。</p>\n<p>systemctl 工具随附两个命令（get-default 和 set-default ） 用于管理该符号链接，而不是手动编辑该连接。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@client ~]<span class=\"comment\"># systemctl get-default</span></span><br><span class=\"line\">multi-user.target</span><br><span class=\"line\">[root@client ~]<span class=\"comment\"># systemctl set-default graphical.target</span></span><br><span class=\"line\">Removed symlink /etc/systemd/system/default.target.</span><br><span class=\"line\">Created symlink from /etc/systemd/system/default.target to /usr/lib/systemd/system/graphical.target.</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"在启动时选择其他目标\"><a href=\"#在启动时选择其他目标\" class=\"headerlink\" title=\"在启动时选择其他目标\"></a>在启动时选择其他目标</h6><p>要在启动时选择其它目标，可从启动加载器将特殊选项附加到内核命令行：systemd.init= .</p>\n<p>例如，要使系统启动进入救援 shell  （在这种情况下，系统可在（几乎）没有任何服务运行的情况下进行配置更改），则在启动前，可从交互式启动加载器菜单中附加以下内容：</p>\n<p>systemd.unit=rescue.target</p>\n<p>该配置更改仅影响单个启动，这使其成为排除启动过程故障的有用工具。</p>\n<p>要使用这种选择其他目标的方法，请针对 RHEL 7 系统执行以下步骤：</p>\n<p>1、（重新）启动系统 </p>\n<p>2、按任意键中断启动加载菜单倒计时。</p>\n<p>3、将光标移动至要启动的条目</p>\n<p>4、按e 编辑当前条目</p>\n<p>5、将光标移动至以 linux16 开关行。此为内核命令行</p>\n<p>6、附加 systemd.unit=desired.target </p>\n<p>7、按 Ctrl +x 使用这些更改进行启动.</p>\n<p>修复常见启动问题  </p>\n<hr>\n<h3 id=\"恢复root-密码\"><a href=\"#恢复root-密码\" class=\"headerlink\" title=\"恢复root 密码\"></a>恢复root 密码</h3><p>每个系统管理员都应该能完成一项任务是恢复丢失的root密码，如果管理员仍处于登录状态，不管是作为拥有完成sudo 访问权限的非特权用户，还是作为root 用户，这个任务都很简单。如果未登录则复杂一点。  </p>\n<p>有一些方法可用于设备新的root 密码。例如，系统管理员可以使用live cd 启动系统，从此处挂载root文件系统。然后编辑 /etc/shadow 。在本节中，我们将探讨一个无需使用外部介质的方法。</p>\n<h6 id=\"注意：-1\"><a href=\"#注意：-1\" class=\"headerlink\" title=\"注意：\"></a>注意：</h6><p>在RHEL 6及早期版本中，管理员可以启动系统进入runlevel 1 然后看到一个root 提示。在 RHEL7 中与 runlevel 1 最接近的是 rescue.target  和emergency.target 目标，这两个目标都需要 root 密码才能登录 。</p>\n<p>在 RHEL 7中，可以使从 initramfs 运行的脚本在某些点暂停，提供 root shell ，然后在该 shell 存在的情况下继续 。虽然主要是为了进行调试，但也可用户恢复丢失的 root 密码。</p>\n<p>1、重新启动</p>\n<p>2、按任意键中断启动加载器倒计时。</p>\n<p>3、将光标移动到需要启动的条目</p>\n<p>4、按 e 编辑选定的条目</p>\n<p>5、将光标移到内核命令行（以 linux16开头的行）</p>\n<p>6、附加 rd.break （就在从initramfs 向实际系统移交控制权前，该操作会中断）。</p>\n<h6 id=\"注意：-2\"><a href=\"#注意：-2\" class=\"headerlink\" title=\"注意：\"></a>注意：</h6><pre><code>initramfs 提示会显示在内核命令行中指定为最后的任何控制台中。  \n</code></pre><p>7、Ctrl +x 使用这些更改进行启动</p>\n<h6 id=\"注意：-3\"><a href=\"#注意：-3\" class=\"headerlink\" title=\"注意：\"></a>注意：</h6><pre><code>预建的映像可能会在内核中放置多个 console = 参数，以全支持各种各校的实施场景，对于 rd.break ，有一点需要注意的是，尽管许多内核消息将会发送到所有控制台，但提示符最终都将使用最后一个控制台。如果未看到提示符，可能要临时调整 console = 参数的顺序。  \n</code></pre><p>此时，会显示 root shell ，且实际系统的 root 文件系统会在 /sysroot 中以只读方式挂载。</p>\n<h6 id=\"重要：\"><a href=\"#重要：\" class=\"headerlink\" title=\"重要：\"></a>重要：</h6><pre><code>由于此时尚未启动 selinux ，因此任何创建的新文件都不会创建分配有selinux 上下文。请记住，有些工具（如passwd ）首先会创建一个新文件，然后移动新文件以代替要编辑的文件，从而有地创建不 selinux 上下文的新文件。  \n</code></pre><h6 id=\"此时要恢复-root-密码，请使用以下步骤：\"><a href=\"#此时要恢复-root-密码，请使用以下步骤：\" class=\"headerlink\" title=\"此时要恢复 root 密码，请使用以下步骤：\"></a>此时要恢复 root 密码，请使用以下步骤：</h6><p>1、以读写方式重新挂载 /sysroot </p>\n<p>mount -o remount,rw /sysroot</p>\n<p>2、切换为 chroot 存入位置，其中 /sysroot 被视为文件系统树的 root </p>\n<p>chroot /sysroot</p>\n<p>3、设置新 root 密码</p>\n<p>passwd root</p>\n<p>4、确保所有未标记的文件（包括此时的 /etc/shadow）在启动过程中都会重新获得标记。</p>\n<p>touch /.autorelabel</p>\n<p>5、键入 exit 两次，第一次将退出 chroot 存放位置，第二次将退出 initramfs 调试 shell 。此时系统将继续进行启动，执行完整的 selinux 重新标记，然后再次重新启动。  </p>\n<h4 id=\"使用-journalctl\"><a href=\"#使用-journalctl\" class=\"headerlink\" title=\"使用 journalctl\"></a>使用 journalctl</h4><p>查看以前（失败）启动日志会很有用。如果 journald 日志已被已久性的，则使用 journaclctl 工具即可查看。</p>\n<p>首先确定启用了永久性的 journald 记录<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p -m2775 /var/<span class=\"built_in\">log</span>/journal</span><br><span class=\"line\">chwon :systemd-journal /var/<span class=\"built_in\">log</span>/journal</span><br><span class=\"line\">killall -USR1 systemd-journald</span><br></pre></td></tr></table></figure></p>\n<p>要检查上一次启动的日志文件，请在journalctl 中使用 -b 选项。无需任何参数，-b 选项即可将输出过滤为仅包含与该启动有关的消息，但是如果参数为负数，则此选项将过滤出上次启动。例如：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">journalctl -b -l -p err</span><br></pre></td></tr></table></figure></p>\n<p>该命令将显示上次启动中被评为错误或更严重级别的所有消息。</p>\n<h5 id=\"诊断和修复-systemd-启动问题\"><a href=\"#诊断和修复-systemd-启动问题\" class=\"headerlink\" title=\"诊断和修复 systemd 启动问题\"></a>诊断和修复 systemd 启动问题</h5><p>如果在启动服务过程中出现问题，则有几个工具可供管理员用于协助调试和 / 或故障排除：</p>\n<h6 id=\"早期调试-shell\"><a href=\"#早期调试-shell\" class=\"headerlink\" title=\"早期调试 shell\"></a>早期调试 shell</h6><p>通过运行 systemctl enable debug-shell.service 启动序列早期将在 tty9 (Ctrl + Alt +f9 )上生成一个root shell 。该 shell 会自动作为 root 登录 ，这样管理员可以在系统仍在启动时使用一些其他高度工具。</p>\n<h6 id=\"tips-1\"><a href=\"#tips-1\" class=\"headerlink\" title=\"tips :\"></a>tips :</h6><p>在完成调试后，请不要忘记禁用 debug-shell.service 服务，因为该服务会使未经身份验证的 root shell 向任何有本地控制台访问权限的人员开放。</p>\n<h6 id=\"紧急情况和救援目标\"><a href=\"#紧急情况和救援目标\" class=\"headerlink\" title=\"紧急情况和救援目标\"></a>紧急情况和救援目标</h6><p>通过从启动器加载将 systemd.unit=rescue.target 或 systemd.unit=emergency.target 附加到内核命令行，系统将生成特殊的救援或紧急情况 shell ，而不是正常启动。这两个 shell 都需要提供 root 密码。 emergency 目标使 root 文件系统以只读方式挂载，而rescue.target 等待sysinit.target 先完成，这样更多的系统会进行初始化 （例如日志记录、文件系统等）。</p>\n<p>这些 shell 可以用于修复妨碍系统正常启动的任何问题；例如，服务之间的依赖关系循环、或 /etc/fstab  中的错误条目。从这些 shell 退出后，系统会继续进行正常启动过程</p>\n<h6 id=\"阻塞作业\"><a href=\"#阻塞作业\" class=\"headerlink\" title=\"阻塞作业\"></a>阻塞作业</h6><p>在启动过程中，systemd 会生成大量作业。如果其中某些作业无法完成，则它们会妨碍其他作业运行。要检查当前作业列表，管理员可以使用命令 systemctl list-jobs 。所有列出为 running 的作业都必须先完成，然后列为 waiting 的作业可以继续。</p>\n<h4 id=\"修复在启动时出现的文件系统问题\"><a href=\"#修复在启动时出现的文件系统问题\" class=\"headerlink\" title=\"修复在启动时出现的文件系统问题\"></a>修复在启动时出现的文件系统问题</h4><p>/etc/fstab 中的错误和损坏的文件系统可能会阻止系统启动。在大多数情况下，systemd 实际上会在超时后继续启动，或者降至需要提供 root 密码的紧急修复 shell </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">问题</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">损坏文件系统</td>\n<td>systemd 将会尝试 fsck ,如果问题太严重而无法自动修复，则系统会提示用户从紧急 shell 手动运行 shell </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/etc/fstab 中引用的设备 /UUID 不存在</td>\n<td>systemd 将等待一定的时间，等设备变得可用。如果设备未变得可用，则系统会在超时后用户降至紧急 shell 。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/etc/fstab 中的挂载点不存在</td>\n<td>systemd 会创建挂载点（如果可能） ; 否则，它会降至紧急 shell </td>\n</tr>\n</tbody>\n</table>\n<p>/etc/fstab 中指定的挂载点错误|系统将用户降至紧急 shell<br>|在所有情况下，管理员都可以使用 emergency.target 目标来诊断和修复问题，因为在显示紧急 shell 之前 ，不会挂载任何文件系统。</p>\n<h6 id=\"注意：-4\"><a href=\"#注意：-4\" class=\"headerlink\" title=\"注意：\"></a>注意：</h6><p>在文件系统问题中使用自动恢复 shell 时，请不要忘记在编辑 /etc/fstab 后发出 systemctl daemon-reload ，如果不重新加载，systemd 将继续使用旧版本。</p>\n<h6 id=\"修复启动加载器问题\"><a href=\"#修复启动加载器问题\" class=\"headerlink\" title=\"修复启动加载器问题\"></a>修复启动加载器问题</h6><p>RHEL 7 中默认使用的启动加载是 grub2, GRand Unified Bootloader 的第二个主要版本</p>\n<p>grub2 可以用来在 BIOS和 UEFI系统中进行启动，并且支持启动现代硬件上运行的几乎所有操作系统。</p>\n<p>grub2 的主要配置文件是 /boot/grub2/grub.cfg ，但是管理员不应直接编辑文件，而是应用使用一组不同的配置文件和安装的内核列表，并借助名为 grub2-mkconfig 的工具生成配置。</p>\n<p>grub2-mkconifg 会查看 /etc/default/grub 的选项（例如要使用的默认菜单超时及内核命令行），然后在 /etc/grub.d/ 中使用一组脚本来生成配置文件。</p>\n<p>要永久更改启动加载器配置，管理员需要编辑前面列出的配置文件，然后运行以下命令：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grub2-mkconfig &gt; /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure></p>\n<p>在进行较大更改的情况下，管理员可能更喜欢不经过重定向即运行该命令，这样可以首先检查结果。</p>\n<h6 id=\"重要指令\"><a href=\"#重要指令\" class=\"headerlink\" title=\"重要指令\"></a>重要指令</h6><p>要为损坏的 grub2 配置排除故障，管理员需要先了解 /boot/grub2/grub.cfg 的语法。实际可启动条目是在 menuentry 块中编码的。在这些块中，linux16 和 initrd16 行指向（随内核命令行）从磁盘加载的内核以及要加载的 initramfs 。在启动时进行交互编辑的过程中，Tab 实例可用于查找这些文件。</p>\n<p>这些块中的 set root 行不指向 rhel 7 系统的root 文件系统，而是指向 grub2 应从加载内核及 initramfs 文件的文件系统。语法为 harddrive,partition ，其中 hd0 是系统中的第一个硬盘驱动器，hd1 是第二个硬盘驱动器，依此类推。指定为 msdos1 的分区是该驱动器上的第一个 MBR 分区，指定为 gpt1 分区的第一个GPT分区  </p>\n<h6 id=\"重新安装启动加载器\"><a href=\"#重新安装启动加载器\" class=\"headerlink\" title=\"重新安装启动加载器\"></a>重新安装启动加载器</h6><p>在启动加载器自身已损坏的情况下，可以使用 grub2-install 命令重新安装。在 BIOS系统中，应提供 MBR 中应安装 grub2 的磁盘作为参数。在 UEFI 系统中，当 EFI 系统分区挂载于 /boot/efi/上时，无需提供任何参数。</p>\n"},{"title":"RH134 第十五章 系统管理二总复习","url":"525.html","id":"525","date":"2018-10-18T09:17:36.000Z","_content":"\n一、系统应借助以下设置业验证使用 LDAP 和 Kerberos  的用户身份：  \n\n|   名称 |  值 |\n| :------ | :-------- |\n| LDAP 服务器 | classroom.example.com |\n| 搜索基础 | dc=example,dc=com |\n| 使用 TLS | 是 |\n| TLS CA 证 | http://classroom.example.com/pub/example-ca.crt |\n| Kerberos 域 | EXAMPLE.COM |\n| Kerberos KDC | classroom.example.com |\n| Kerberos 管理服务器 | classroom.example.com |\n\n\n为了进行测试，可用用户ldapuserX ,密码为kerberos \n\n1、安装 authconfig-gtk , sssd 软件包\n```sh\n[student@desktop0 Desktop]$ sudo yum install -y authconfig-gtk sssd\n```\n2、运行authconfig-gtk ,并输入提供的信息，请不要忘记取消选中使用 DNS 查找域的 KDC 选项  \n```sh\n[student@desktop0 Desktop]$ sudo authconfig-gtk\n```\n![image.png](1539846626591619.png)\n\n二、LDAP 用户的主目录应当在访问时自动挂载。这些主目录是由NFS 共享 classroom.example.com:/home/guests 提供的\n\n1、安装autofs 软件包\n```sh\n[student@desktop0 Desktop]$ sudo yum install autofs -y\n```\n2、创建包含以下内容的新文件 /etc/auto.master.d/guests.autofs\n```sh\n/home/guests /etc/auto.guests\n```\n3、创建包含以下内容的新文件 /etc/auto.guests\n```\n* -rw,sync classroom.example.com:/home/guests/&\n```\n4、启用并启动 autofs.service 服务\n```sh\n[student@desktop0 Desktop]$sudo systemctl enable autofs.service\n[student@desktop0 Desktop]$sudo systemctl start autofs.service\n```\n三、server0 会导出 CIFS 共享，westeros 。该共享应当在启动时自动挂载到挂载点 /mnt/westeros 。要挂载该共享，您需要使用用户名 tyrion 密码 slapjoffreyslap 。该密码不应存储在非特权用户只可以读取的任何位置。\n\n1、安装 cifs-utils 软件包\n```sh\n[student@desktop0 Desktop]$ sudo yum install cifs-utils -y\n```\n2、创建挂载点  \n```sh\n[student@desktop0 Desktop]$sudo mkdir -p /mnt/westeros\n```\n3、创建包含以下内容的凭据文件，/root/tyrion.creds，然后将该文件的权限设置为：0600  \n```\nusername=tyrion\npassword=slapjoffryslap\n```\n```sh\n[student@desktop0 Desktop]$sudo chmod 0600 /root/tyrion.creds\n```\n4、将以下行添加到 /etc/fstab：  \n```sh\n//server0.example.com/westeros /mnt/westeros cifs creds=/root/tyrion.creds 0 0\n```\n5、挂载所有文件系统，然后检查挂载的文件系统。  \n```sh\n[student@desktop0 Desktop]$sudo mount -a\n[student@desktop0 Desktop]$cat /mnt/westeros/README.txt\n```\n四、server0 会导出 NFSv4 共享 /essos  。需要使用 Kerberos 身份验证、加密和完整性检查来在启动时将该共享以只读写形式挂载到 /mnt/essos 。\n\n可以从 [http://classroom.example.com/pub/keytabs/desktop0.keytab](http://classroom.example.com/pub/keytabs/desktop0.keytab) 下载系统的keytab \n\n1、创建挂载点\n```sh\n[student@desktop0 Desktop]$sudo mkdir -p /mnt/essos\n```\n2、下载系统的 keytab   \n```sh\n[student@desktop0 Desktop]$sudo wget -O /etc/krb5.keytab http://classroom.example.com/pub/keytabs/desktop0.keytab\n```\n3、将以下行添加到 /etc/fstab :  \n```sh\n[student@desktop0 Desktop]$server0.example.com:/essos /mnt/essos nfs sec=kerb5p,rw 0 0\n```\n4、启动并启用 nfs-secure.service 服务  \n```sh\n[student@desktop0 Desktop]$sudo systemctl enable nfs-secure.service \n[student@desktop0 Desktop]$sudo systemctl start nfs-secure.service\n```\n5、挂载所有文件系统\n```sh\n[student@desktop0 Desktop]$sudo mount -a\n```\n五、在新的2 G 卷组stark 中配置新 512M 逻辑卷 arya 。  \n\n新逻辑卷应使用 xfs 文件系统进行格式化，并永久挂载到 /mnt/underfoot \n\n1、在第二块磁盘上创建 2G 的分区\n\n![image.png](1539847801848346.png)\n\n2、将新分区变为物理卷\n```sh\n[student@desktop0 Desktop]$sudo pvcreate /dev/sdb1\n```\n3、使用新物理卷构建新卷组  \n```sh\n[student@desktop0 Desktop]$sudo vgcreate stark /dev/sdb1\n```\n4、在新卷组中创建 512M 的新逻辑卷  \n```sh\n[student@desktop0 Desktop]$sudo lvcreate -n arya -L 512M stark\n```\n5、使用 xfs 文件系统对新 LV 进行格式化  \n```sh\n[student@desktop0 Desktop]$ sudo mkfs -t xfs /dev/mapper/stark-arya\n```\n6、创建挂载点   \n```sh\n[student@desktop0 Desktop]$sudo mkdir -p /mnt/underfoot\n```\n7、将以下行添加到 /etc/fstab   \n```sh\n/dev/mapper/stark-arya /mnt/underfoot xfs defaults 1 2\n```\n8、挂载所有文件系统  \n```sh\n[student@desktop0 Desktop]$sudo mount -a\n```\n六、系统应该配备新的 512 M 交换分区，并在启动时自动激活。  \n\n1、第二块磁盘上创建 512 M 的新分区，然后将该分区类型设置为 82 \n\n![image.png](1539848579837356.png)\n\n2、将新分区格式化成交换分区  \n```sh\n[student@desktop0 Desktop]$sudo mkswap /dev/sdb2\n```\n3、检索UUID 中的交换分区  \n```sh\n[student@desktop0 Desktop]$sudo blkid /dev/sdb2\n```\n4、向/etc/fstab 添加以下行；确保使用上一步找到的UUID，假设为UUID=dfce28a9-015d-4908-8206-840920260310  \n```sh\nUUID=dfce28a9-015d-4908-8206-840920260310  swap swap defaults 0 0\n```\n5、激活所有交换分区  \n```sh\n[student@desktop0 Desktop]$sudo swapon -a\n```\n七：创建新组 kings ，以及四个属于该组的新用户： stannis，joffery,renly和robb。  \n\n1、创建 kings 组\n```sh\n[student@desktop0 Desktop]$sudo groupadd kings\n```\n2、创建四个用户，并将他们添加到kings 组   \n```sh\n[student@desktop0 Desktop]$for NEWUSER in stannis joffrey renly robb; do\n>sudo useradd -G kings ${NEWUSER}\n>done\n```\n八、创建新目录 /ironthrone  该目录由拥有权限 0700 的 root:root 所有。\n\n配置该目录，以便 kings 组中的用户拥有该目录的读写权限，但用户 joffrey 除外，该用仅被授予读取特权。\n\n这些限制还应当应用到 /ironthrone 目录下创建的所有新文件和目录。\n\n1、创建权限正常的目录\n```sh\n[student@desktop0 Desktop]$sudo mkdir -m 0700 /ironthone\n```\n2、 在 /ironthone 中添加 ACL ，从而向 kings 组中的用户授予读写特权。请不忘记添加执行权限，因为这是一个目录。  \n```sh\n[student@desktop0 Desktop]$sudo setfacl -m g:kings:rwX /ironthone\n```\n3、为用户 joffrey 添加ACL ，使其拥有只读和执行权限  \n```sh\n[student@desktop0 Desktop]$sudo setfacl -m u:joffrey:r-x /ironthone\n```\n4、也添加前两个 ACL 作为默认 ACL   \n```sh\n[student@desktop0 Desktop]$sudo setfacl -m d:g:kings:rwx /ironthone\n[student@desktop0 Desktop]$sudo setfacl -m d:u:joffrey:r-x /ironthone\n```\n九、安装 httpd 和 mod_ssl 软件包，然后启用并启动 httpd.service 服务\n\n1、安装 httpd 和 mod_ssl 软件包\n```sh\n[student@desktop0 Desktop]$sudo yum install httpd mod_ssl -y\n```\n2、启动并启用 httpd.service 服务  \n```sh\n[student@desktop0 Desktop]$sudo systemctl enable httpd\n[student@desktop0 Desktop]$sudo systemctl start httpd\n```\n十、在系统上所有行防火墙的默认区域打开端口12345/tcp \n\n1、在防火墙默认区域永久配置中打开端口 12345/tcp \n```sh\n[student@desktop0 Desktop]$sudo firewall-cmd --permanent --add-port=12345/tcp\n```\n2、重新加载防火墙以激活更改  \n```sh\n[student@desktop0 Desktop]$sudo firewall-cmd --reload\n```\n十一、创建新目录 /docroot 。确保该目录的 SELinux 上下文设置为 Public\\_content\\_t ，并且该上下文在重新标记操作后继续生效  \n\n1、创建/docroot 目录\n```sh\n[student@desktop0 Desktop]$sudo mkdir /docroot\n```\n2、为 /docroot 目录及其所有子目录添加新的默认上下文  \n```sh\n[student@desktop0 Desktop]$sudo semanage fcontext -a -t public_content_t '/docroot(/.*)?'\n```\n3、重新标记 /docroot 目录  \n```sh\n [student@desktop0 Desktop]$sudo restorecon -RvF /docroot\n```\n十二、http://server0.example.com/logfile 包含最近项目的日志。下载该文件，然后将所有以 ERROR 或 FAIL 结尾的行提取到文件 /home/student/errors.txt ，所有行都应按日志文件中显示的顺序排列。  \n\n1、下载文件\n```sh\n[student@desktop0 Desktop]$wget http://server0.example.com/logfile\n```\n2、将以 ERROR 和 FAIL 结尾的第一行提取到文件 /home/student/errors.txt 中，同时保持行顺序不变  \n```sh\n[student@desktop0 Desktop]$grep -e \"ERROR$\" -e \"FAIL$\" logfile > /home/student/errors.txt\n```\n十三、系统中应该有一个用于存储临时文件 /run/veryveryvolatile 的新目录。每当运行 systemd-tmpfiles --clean 时，任何超过 5秒的文件都应该从该目录中删除。  \n\n该目录应该拥有权限 1777 并由 root:root 所有。\n\n1、创建包含以下内容的新文件 /etc/tmpfiles.d/veryveryvolatile.conf:\n```sh\nd /run/veryveryvolatile 1777 root root 5s\n```\n2、使用 systemd-tmpfiles 创建目录。  \n```sh\n[student@desktop0 Desktop]$sudo systemd-tmpfiles --create\n```\n","source":"_posts/rh134-e7-ac-ac-e5-8d-81-e4-ba-94-e7-ab-a0-e7-b3-bb-e7-bb-9f-e7-ae-a1-e7-90-86-e4-ba-8c-e6-80-bb-e5-a4-8d-e4-b9-a0.md","raw":"---\ntitle: RH134 第十五章 系统管理二总复习\nurl: 525.html\nid: 525\ncategories:\n  - RHEL134\ndate: 2018-10-18 17:17:36\ntags:\n---\n\n一、系统应借助以下设置业验证使用 LDAP 和 Kerberos  的用户身份：  \n\n|   名称 |  值 |\n| :------ | :-------- |\n| LDAP 服务器 | classroom.example.com |\n| 搜索基础 | dc=example,dc=com |\n| 使用 TLS | 是 |\n| TLS CA 证 | http://classroom.example.com/pub/example-ca.crt |\n| Kerberos 域 | EXAMPLE.COM |\n| Kerberos KDC | classroom.example.com |\n| Kerberos 管理服务器 | classroom.example.com |\n\n\n为了进行测试，可用用户ldapuserX ,密码为kerberos \n\n1、安装 authconfig-gtk , sssd 软件包\n```sh\n[student@desktop0 Desktop]$ sudo yum install -y authconfig-gtk sssd\n```\n2、运行authconfig-gtk ,并输入提供的信息，请不要忘记取消选中使用 DNS 查找域的 KDC 选项  \n```sh\n[student@desktop0 Desktop]$ sudo authconfig-gtk\n```\n![image.png](1539846626591619.png)\n\n二、LDAP 用户的主目录应当在访问时自动挂载。这些主目录是由NFS 共享 classroom.example.com:/home/guests 提供的\n\n1、安装autofs 软件包\n```sh\n[student@desktop0 Desktop]$ sudo yum install autofs -y\n```\n2、创建包含以下内容的新文件 /etc/auto.master.d/guests.autofs\n```sh\n/home/guests /etc/auto.guests\n```\n3、创建包含以下内容的新文件 /etc/auto.guests\n```\n* -rw,sync classroom.example.com:/home/guests/&\n```\n4、启用并启动 autofs.service 服务\n```sh\n[student@desktop0 Desktop]$sudo systemctl enable autofs.service\n[student@desktop0 Desktop]$sudo systemctl start autofs.service\n```\n三、server0 会导出 CIFS 共享，westeros 。该共享应当在启动时自动挂载到挂载点 /mnt/westeros 。要挂载该共享，您需要使用用户名 tyrion 密码 slapjoffreyslap 。该密码不应存储在非特权用户只可以读取的任何位置。\n\n1、安装 cifs-utils 软件包\n```sh\n[student@desktop0 Desktop]$ sudo yum install cifs-utils -y\n```\n2、创建挂载点  \n```sh\n[student@desktop0 Desktop]$sudo mkdir -p /mnt/westeros\n```\n3、创建包含以下内容的凭据文件，/root/tyrion.creds，然后将该文件的权限设置为：0600  \n```\nusername=tyrion\npassword=slapjoffryslap\n```\n```sh\n[student@desktop0 Desktop]$sudo chmod 0600 /root/tyrion.creds\n```\n4、将以下行添加到 /etc/fstab：  \n```sh\n//server0.example.com/westeros /mnt/westeros cifs creds=/root/tyrion.creds 0 0\n```\n5、挂载所有文件系统，然后检查挂载的文件系统。  \n```sh\n[student@desktop0 Desktop]$sudo mount -a\n[student@desktop0 Desktop]$cat /mnt/westeros/README.txt\n```\n四、server0 会导出 NFSv4 共享 /essos  。需要使用 Kerberos 身份验证、加密和完整性检查来在启动时将该共享以只读写形式挂载到 /mnt/essos 。\n\n可以从 [http://classroom.example.com/pub/keytabs/desktop0.keytab](http://classroom.example.com/pub/keytabs/desktop0.keytab) 下载系统的keytab \n\n1、创建挂载点\n```sh\n[student@desktop0 Desktop]$sudo mkdir -p /mnt/essos\n```\n2、下载系统的 keytab   \n```sh\n[student@desktop0 Desktop]$sudo wget -O /etc/krb5.keytab http://classroom.example.com/pub/keytabs/desktop0.keytab\n```\n3、将以下行添加到 /etc/fstab :  \n```sh\n[student@desktop0 Desktop]$server0.example.com:/essos /mnt/essos nfs sec=kerb5p,rw 0 0\n```\n4、启动并启用 nfs-secure.service 服务  \n```sh\n[student@desktop0 Desktop]$sudo systemctl enable nfs-secure.service \n[student@desktop0 Desktop]$sudo systemctl start nfs-secure.service\n```\n5、挂载所有文件系统\n```sh\n[student@desktop0 Desktop]$sudo mount -a\n```\n五、在新的2 G 卷组stark 中配置新 512M 逻辑卷 arya 。  \n\n新逻辑卷应使用 xfs 文件系统进行格式化，并永久挂载到 /mnt/underfoot \n\n1、在第二块磁盘上创建 2G 的分区\n\n![image.png](1539847801848346.png)\n\n2、将新分区变为物理卷\n```sh\n[student@desktop0 Desktop]$sudo pvcreate /dev/sdb1\n```\n3、使用新物理卷构建新卷组  \n```sh\n[student@desktop0 Desktop]$sudo vgcreate stark /dev/sdb1\n```\n4、在新卷组中创建 512M 的新逻辑卷  \n```sh\n[student@desktop0 Desktop]$sudo lvcreate -n arya -L 512M stark\n```\n5、使用 xfs 文件系统对新 LV 进行格式化  \n```sh\n[student@desktop0 Desktop]$ sudo mkfs -t xfs /dev/mapper/stark-arya\n```\n6、创建挂载点   \n```sh\n[student@desktop0 Desktop]$sudo mkdir -p /mnt/underfoot\n```\n7、将以下行添加到 /etc/fstab   \n```sh\n/dev/mapper/stark-arya /mnt/underfoot xfs defaults 1 2\n```\n8、挂载所有文件系统  \n```sh\n[student@desktop0 Desktop]$sudo mount -a\n```\n六、系统应该配备新的 512 M 交换分区，并在启动时自动激活。  \n\n1、第二块磁盘上创建 512 M 的新分区，然后将该分区类型设置为 82 \n\n![image.png](1539848579837356.png)\n\n2、将新分区格式化成交换分区  \n```sh\n[student@desktop0 Desktop]$sudo mkswap /dev/sdb2\n```\n3、检索UUID 中的交换分区  \n```sh\n[student@desktop0 Desktop]$sudo blkid /dev/sdb2\n```\n4、向/etc/fstab 添加以下行；确保使用上一步找到的UUID，假设为UUID=dfce28a9-015d-4908-8206-840920260310  \n```sh\nUUID=dfce28a9-015d-4908-8206-840920260310  swap swap defaults 0 0\n```\n5、激活所有交换分区  \n```sh\n[student@desktop0 Desktop]$sudo swapon -a\n```\n七：创建新组 kings ，以及四个属于该组的新用户： stannis，joffery,renly和robb。  \n\n1、创建 kings 组\n```sh\n[student@desktop0 Desktop]$sudo groupadd kings\n```\n2、创建四个用户，并将他们添加到kings 组   \n```sh\n[student@desktop0 Desktop]$for NEWUSER in stannis joffrey renly robb; do\n>sudo useradd -G kings ${NEWUSER}\n>done\n```\n八、创建新目录 /ironthrone  该目录由拥有权限 0700 的 root:root 所有。\n\n配置该目录，以便 kings 组中的用户拥有该目录的读写权限，但用户 joffrey 除外，该用仅被授予读取特权。\n\n这些限制还应当应用到 /ironthrone 目录下创建的所有新文件和目录。\n\n1、创建权限正常的目录\n```sh\n[student@desktop0 Desktop]$sudo mkdir -m 0700 /ironthone\n```\n2、 在 /ironthone 中添加 ACL ，从而向 kings 组中的用户授予读写特权。请不忘记添加执行权限，因为这是一个目录。  \n```sh\n[student@desktop0 Desktop]$sudo setfacl -m g:kings:rwX /ironthone\n```\n3、为用户 joffrey 添加ACL ，使其拥有只读和执行权限  \n```sh\n[student@desktop0 Desktop]$sudo setfacl -m u:joffrey:r-x /ironthone\n```\n4、也添加前两个 ACL 作为默认 ACL   \n```sh\n[student@desktop0 Desktop]$sudo setfacl -m d:g:kings:rwx /ironthone\n[student@desktop0 Desktop]$sudo setfacl -m d:u:joffrey:r-x /ironthone\n```\n九、安装 httpd 和 mod_ssl 软件包，然后启用并启动 httpd.service 服务\n\n1、安装 httpd 和 mod_ssl 软件包\n```sh\n[student@desktop0 Desktop]$sudo yum install httpd mod_ssl -y\n```\n2、启动并启用 httpd.service 服务  \n```sh\n[student@desktop0 Desktop]$sudo systemctl enable httpd\n[student@desktop0 Desktop]$sudo systemctl start httpd\n```\n十、在系统上所有行防火墙的默认区域打开端口12345/tcp \n\n1、在防火墙默认区域永久配置中打开端口 12345/tcp \n```sh\n[student@desktop0 Desktop]$sudo firewall-cmd --permanent --add-port=12345/tcp\n```\n2、重新加载防火墙以激活更改  \n```sh\n[student@desktop0 Desktop]$sudo firewall-cmd --reload\n```\n十一、创建新目录 /docroot 。确保该目录的 SELinux 上下文设置为 Public\\_content\\_t ，并且该上下文在重新标记操作后继续生效  \n\n1、创建/docroot 目录\n```sh\n[student@desktop0 Desktop]$sudo mkdir /docroot\n```\n2、为 /docroot 目录及其所有子目录添加新的默认上下文  \n```sh\n[student@desktop0 Desktop]$sudo semanage fcontext -a -t public_content_t '/docroot(/.*)?'\n```\n3、重新标记 /docroot 目录  \n```sh\n [student@desktop0 Desktop]$sudo restorecon -RvF /docroot\n```\n十二、http://server0.example.com/logfile 包含最近项目的日志。下载该文件，然后将所有以 ERROR 或 FAIL 结尾的行提取到文件 /home/student/errors.txt ，所有行都应按日志文件中显示的顺序排列。  \n\n1、下载文件\n```sh\n[student@desktop0 Desktop]$wget http://server0.example.com/logfile\n```\n2、将以 ERROR 和 FAIL 结尾的第一行提取到文件 /home/student/errors.txt 中，同时保持行顺序不变  \n```sh\n[student@desktop0 Desktop]$grep -e \"ERROR$\" -e \"FAIL$\" logfile > /home/student/errors.txt\n```\n十三、系统中应该有一个用于存储临时文件 /run/veryveryvolatile 的新目录。每当运行 systemd-tmpfiles --clean 时，任何超过 5秒的文件都应该从该目录中删除。  \n\n该目录应该拥有权限 1777 并由 root:root 所有。\n\n1、创建包含以下内容的新文件 /etc/tmpfiles.d/veryveryvolatile.conf:\n```sh\nd /run/veryveryvolatile 1777 root root 5s\n```\n2、使用 systemd-tmpfiles 创建目录。  \n```sh\n[student@desktop0 Desktop]$sudo systemd-tmpfiles --create\n```\n","slug":"rh134-e7-ac-ac-e5-8d-81-e4-ba-94-e7-ab-a0-e7-b3-bb-e7-bb-9f-e7-ae-a1-e7-90-86-e4-ba-8c-e6-80-bb-e5-a4-8d-e4-b9-a0","published":1,"updated":"2019-01-06T17:25:14.171Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqi25001xlxkj41dnuhex","content":"<p>一、系统应借助以下设置业验证使用 LDAP 和 Kerberos  的用户身份：  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">LDAP 服务器</td>\n<td style=\"text-align:left\">classroom.example.com</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">搜索基础</td>\n<td style=\"text-align:left\">dc=example,dc=com</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">使用 TLS</td>\n<td style=\"text-align:left\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TLS CA 证</td>\n<td style=\"text-align:left\"><a href=\"http://classroom.example.com/pub/example-ca.crt\" target=\"_blank\" rel=\"noopener\">http://classroom.example.com/pub/example-ca.crt</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Kerberos 域</td>\n<td style=\"text-align:left\">EXAMPLE.COM</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Kerberos KDC</td>\n<td style=\"text-align:left\">classroom.example.com</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Kerberos 管理服务器</td>\n<td style=\"text-align:left\">classroom.example.com</td>\n</tr>\n</tbody>\n</table>\n<p>为了进行测试，可用用户ldapuserX ,密码为kerberos </p>\n<p>1、安装 authconfig-gtk , sssd 软件包<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]$ sudo yum install -y authconfig-gtk sssd</span><br></pre></td></tr></table></figure></p>\n<p>2、运行authconfig-gtk ,并输入提供的信息，请不要忘记取消选中使用 DNS 查找域的 KDC 选项<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]$ sudo authconfig-gtk</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/10/18/rh134-e7-ac-ac-e5-8d-81-e4-ba-94-e7-ab-a0-e7-b3-bb-e7-bb-9f-e7-ae-a1-e7-90-86-e4-ba-8c-e6-80-bb-e5-a4-8d-e4-b9-a0/1539846626591619.png\" alt=\"image.png\"></p>\n<p>二、LDAP 用户的主目录应当在访问时自动挂载。这些主目录是由NFS 共享 classroom.example.com:/home/guests 提供的</p>\n<p>1、安装autofs 软件包<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]$ sudo yum install autofs -y</span><br></pre></td></tr></table></figure></p>\n<p>2、创建包含以下内容的新文件 /etc/auto.master.d/guests.autofs<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/guests /etc/auto.guests</span><br></pre></td></tr></table></figure></p>\n<p>3、创建包含以下内容的新文件 /etc/auto.guests<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* -rw,sync classroom.example.com:/home/guests/&amp;</span><br></pre></td></tr></table></figure></p>\n<p>4、启用并启动 autofs.service 服务<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> systemctl <span class=\"built_in\">enable</span> autofs.service</span><br><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> systemctl start autofs.service</span><br></pre></td></tr></table></figure></p>\n<p>三、server0 会导出 CIFS 共享，westeros 。该共享应当在启动时自动挂载到挂载点 /mnt/westeros 。要挂载该共享，您需要使用用户名 tyrion 密码 slapjoffreyslap 。该密码不应存储在非特权用户只可以读取的任何位置。</p>\n<p>1、安装 cifs-utils 软件包<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]$ sudo yum install cifs-utils -y</span><br></pre></td></tr></table></figure></p>\n<p>2、创建挂载点<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> mkdir -p /mnt/westeros</span><br></pre></td></tr></table></figure></p>\n<p>3、创建包含以下内容的凭据文件，/root/tyrion.creds，然后将该文件的权限设置为：0600<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username=tyrion</span><br><span class=\"line\">password=slapjoffryslap</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> chmod 0600 /root/tyrion.creds</span><br></pre></td></tr></table></figure>\n<p>4、将以下行添加到 /etc/fstab：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//server0.example.com/westeros /mnt/westeros cifs creds=/root/tyrion.creds 0 0</span><br></pre></td></tr></table></figure></p>\n<p>5、挂载所有文件系统，然后检查挂载的文件系统。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> mount -a</span><br><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$cat</span> /mnt/westeros/README.txt</span><br></pre></td></tr></table></figure></p>\n<p>四、server0 会导出 NFSv4 共享 /essos  。需要使用 Kerberos 身份验证、加密和完整性检查来在启动时将该共享以只读写形式挂载到 /mnt/essos 。</p>\n<p>可以从 <a href=\"http://classroom.example.com/pub/keytabs/desktop0.keytab\" target=\"_blank\" rel=\"noopener\">http://classroom.example.com/pub/keytabs/desktop0.keytab</a> 下载系统的keytab </p>\n<p>1、创建挂载点<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> mkdir -p /mnt/essos</span><br></pre></td></tr></table></figure></p>\n<p>2、下载系统的 keytab<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> wget -O /etc/krb5.keytab http://classroom.example.com/pub/keytabs/desktop0.keytab</span><br></pre></td></tr></table></figure></p>\n<p>3、将以下行添加到 /etc/fstab :<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$server0</span>.example.com:/essos /mnt/essos nfs sec=kerb5p,rw 0 0</span><br></pre></td></tr></table></figure></p>\n<p>4、启动并启用 nfs-secure.service 服务<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> systemctl <span class=\"built_in\">enable</span> nfs-secure.service </span><br><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> systemctl start nfs-secure.service</span><br></pre></td></tr></table></figure></p>\n<p>5、挂载所有文件系统<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> mount -a</span><br></pre></td></tr></table></figure></p>\n<p>五、在新的2 G 卷组stark 中配置新 512M 逻辑卷 arya 。  </p>\n<p>新逻辑卷应使用 xfs 文件系统进行格式化，并永久挂载到 /mnt/underfoot </p>\n<p>1、在第二块磁盘上创建 2G 的分区</p>\n<p><img src=\"/2018/10/18/rh134-e7-ac-ac-e5-8d-81-e4-ba-94-e7-ab-a0-e7-b3-bb-e7-bb-9f-e7-ae-a1-e7-90-86-e4-ba-8c-e6-80-bb-e5-a4-8d-e4-b9-a0/1539847801848346.png\" alt=\"image.png\"></p>\n<p>2、将新分区变为物理卷<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> pvcreate /dev/sdb1</span><br></pre></td></tr></table></figure></p>\n<p>3、使用新物理卷构建新卷组<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> vgcreate stark /dev/sdb1</span><br></pre></td></tr></table></figure></p>\n<p>4、在新卷组中创建 512M 的新逻辑卷<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> lvcreate -n arya -L 512M stark</span><br></pre></td></tr></table></figure></p>\n<p>5、使用 xfs 文件系统对新 LV 进行格式化<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]$ sudo mkfs -t xfs /dev/mapper/stark-arya</span><br></pre></td></tr></table></figure></p>\n<p>6、创建挂载点<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> mkdir -p /mnt/underfoot</span><br></pre></td></tr></table></figure></p>\n<p>7、将以下行添加到 /etc/fstab<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/mapper/stark-arya /mnt/underfoot xfs defaults 1 2</span><br></pre></td></tr></table></figure></p>\n<p>8、挂载所有文件系统<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> mount -a</span><br></pre></td></tr></table></figure></p>\n<p>六、系统应该配备新的 512 M 交换分区，并在启动时自动激活。  </p>\n<p>1、第二块磁盘上创建 512 M 的新分区，然后将该分区类型设置为 82 </p>\n<p><img src=\"/2018/10/18/rh134-e7-ac-ac-e5-8d-81-e4-ba-94-e7-ab-a0-e7-b3-bb-e7-bb-9f-e7-ae-a1-e7-90-86-e4-ba-8c-e6-80-bb-e5-a4-8d-e4-b9-a0/1539848579837356.png\" alt=\"image.png\"></p>\n<p>2、将新分区格式化成交换分区<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> mkswap /dev/sdb2</span><br></pre></td></tr></table></figure></p>\n<p>3、检索UUID 中的交换分区<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> blkid /dev/sdb2</span><br></pre></td></tr></table></figure></p>\n<p>4、向/etc/fstab 添加以下行；确保使用上一步找到的UUID，假设为UUID=dfce28a9-015d-4908-8206-840920260310<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UUID=dfce28a9-015d-4908-8206-840920260310  swap swap defaults 0 0</span><br></pre></td></tr></table></figure></p>\n<p>5、激活所有交换分区<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> swapon -a</span><br></pre></td></tr></table></figure></p>\n<p>七：创建新组 kings ，以及四个属于该组的新用户： stannis，joffery,renly和robb。  </p>\n<p>1、创建 kings 组<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> groupadd kings</span><br></pre></td></tr></table></figure></p>\n<p>2、创建四个用户，并将他们添加到kings 组<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$for</span> NEWUSER <span class=\"keyword\">in</span> stannis joffrey renly robb; <span class=\"keyword\">do</span></span><br><span class=\"line\">&gt;sudo useradd -G kings <span class=\"variable\">$&#123;NEWUSER&#125;</span></span><br><span class=\"line\">&gt;<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>八、创建新目录 /ironthrone  该目录由拥有权限 0700 的 root:root 所有。</p>\n<p>配置该目录，以便 kings 组中的用户拥有该目录的读写权限，但用户 joffrey 除外，该用仅被授予读取特权。</p>\n<p>这些限制还应当应用到 /ironthrone 目录下创建的所有新文件和目录。</p>\n<p>1、创建权限正常的目录<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> mkdir -m 0700 /ironthone</span><br></pre></td></tr></table></figure></p>\n<p>2、 在 /ironthone 中添加 ACL ，从而向 kings 组中的用户授予读写特权。请不忘记添加执行权限，因为这是一个目录。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> setfacl -m g:kings:rwX /ironthone</span><br></pre></td></tr></table></figure></p>\n<p>3、为用户 joffrey 添加ACL ，使其拥有只读和执行权限<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> setfacl -m u:joffrey:r-x /ironthone</span><br></pre></td></tr></table></figure></p>\n<p>4、也添加前两个 ACL 作为默认 ACL<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> setfacl -m d:g:kings:rwx /ironthone</span><br><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> setfacl -m d:u:joffrey:r-x /ironthone</span><br></pre></td></tr></table></figure></p>\n<p>九、安装 httpd 和 mod_ssl 软件包，然后启用并启动 httpd.service 服务</p>\n<p>1、安装 httpd 和 mod_ssl 软件包<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> yum install httpd mod_ssl -y</span><br></pre></td></tr></table></figure></p>\n<p>2、启动并启用 httpd.service 服务<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> systemctl <span class=\"built_in\">enable</span> httpd</span><br><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> systemctl start httpd</span><br></pre></td></tr></table></figure></p>\n<p>十、在系统上所有行防火墙的默认区域打开端口12345/tcp </p>\n<p>1、在防火墙默认区域永久配置中打开端口 12345/tcp<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> firewall-cmd --permanent --add-port=12345/tcp</span><br></pre></td></tr></table></figure></p>\n<p>2、重新加载防火墙以激活更改<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> firewall-cmd --reload</span><br></pre></td></tr></table></figure></p>\n<p>十一、创建新目录 /docroot 。确保该目录的 SELinux 上下文设置为 Public_content_t ，并且该上下文在重新标记操作后继续生效  </p>\n<p>1、创建/docroot 目录<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> mkdir /docroot</span><br></pre></td></tr></table></figure></p>\n<p>2、为 /docroot 目录及其所有子目录添加新的默认上下文<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> semanage fcontext -a -t public_content_t <span class=\"string\">'/docroot(/.*)?'</span></span><br></pre></td></tr></table></figure></p>\n<p>3、重新标记 /docroot 目录<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> [student@desktop0 Desktop]<span class=\"variable\">$sudo</span> restorecon -RvF /docroot</span><br></pre></td></tr></table></figure></p>\n<p>十二、<a href=\"http://server0.example.com/logfile\" target=\"_blank\" rel=\"noopener\">http://server0.example.com/logfile</a> 包含最近项目的日志。下载该文件，然后将所有以 ERROR 或 FAIL 结尾的行提取到文件 /home/student/errors.txt ，所有行都应按日志文件中显示的顺序排列。  </p>\n<p>1、下载文件<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$wget</span> http://server0.example.com/logfile</span><br></pre></td></tr></table></figure></p>\n<p>2、将以 ERROR 和 FAIL 结尾的第一行提取到文件 /home/student/errors.txt 中，同时保持行顺序不变<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$grep</span> -e <span class=\"string\">\"ERROR$\"</span> -e <span class=\"string\">\"FAIL$\"</span> logfile &gt; /home/student/errors.txt</span><br></pre></td></tr></table></figure></p>\n<p>十三、系统中应该有一个用于存储临时文件 /run/veryveryvolatile 的新目录。每当运行 systemd-tmpfiles –clean 时，任何超过 5秒的文件都应该从该目录中删除。  </p>\n<p>该目录应该拥有权限 1777 并由 root:root 所有。</p>\n<p>1、创建包含以下内容的新文件 /etc/tmpfiles.d/veryveryvolatile.conf:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d /run/veryveryvolatile 1777 root root 5s</span><br></pre></td></tr></table></figure></p>\n<p>2、使用 systemd-tmpfiles 创建目录。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> systemd-tmpfiles --create</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一、系统应借助以下设置业验证使用 LDAP 和 Kerberos  的用户身份：  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">LDAP 服务器</td>\n<td style=\"text-align:left\">classroom.example.com</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">搜索基础</td>\n<td style=\"text-align:left\">dc=example,dc=com</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">使用 TLS</td>\n<td style=\"text-align:left\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TLS CA 证</td>\n<td style=\"text-align:left\"><a href=\"http://classroom.example.com/pub/example-ca.crt\" target=\"_blank\" rel=\"noopener\">http://classroom.example.com/pub/example-ca.crt</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Kerberos 域</td>\n<td style=\"text-align:left\">EXAMPLE.COM</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Kerberos KDC</td>\n<td style=\"text-align:left\">classroom.example.com</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Kerberos 管理服务器</td>\n<td style=\"text-align:left\">classroom.example.com</td>\n</tr>\n</tbody>\n</table>\n<p>为了进行测试，可用用户ldapuserX ,密码为kerberos </p>\n<p>1、安装 authconfig-gtk , sssd 软件包<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]$ sudo yum install -y authconfig-gtk sssd</span><br></pre></td></tr></table></figure></p>\n<p>2、运行authconfig-gtk ,并输入提供的信息，请不要忘记取消选中使用 DNS 查找域的 KDC 选项<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]$ sudo authconfig-gtk</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/10/18/rh134-e7-ac-ac-e5-8d-81-e4-ba-94-e7-ab-a0-e7-b3-bb-e7-bb-9f-e7-ae-a1-e7-90-86-e4-ba-8c-e6-80-bb-e5-a4-8d-e4-b9-a0/1539846626591619.png\" alt=\"image.png\"></p>\n<p>二、LDAP 用户的主目录应当在访问时自动挂载。这些主目录是由NFS 共享 classroom.example.com:/home/guests 提供的</p>\n<p>1、安装autofs 软件包<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]$ sudo yum install autofs -y</span><br></pre></td></tr></table></figure></p>\n<p>2、创建包含以下内容的新文件 /etc/auto.master.d/guests.autofs<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/guests /etc/auto.guests</span><br></pre></td></tr></table></figure></p>\n<p>3、创建包含以下内容的新文件 /etc/auto.guests<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* -rw,sync classroom.example.com:/home/guests/&amp;</span><br></pre></td></tr></table></figure></p>\n<p>4、启用并启动 autofs.service 服务<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> systemctl <span class=\"built_in\">enable</span> autofs.service</span><br><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> systemctl start autofs.service</span><br></pre></td></tr></table></figure></p>\n<p>三、server0 会导出 CIFS 共享，westeros 。该共享应当在启动时自动挂载到挂载点 /mnt/westeros 。要挂载该共享，您需要使用用户名 tyrion 密码 slapjoffreyslap 。该密码不应存储在非特权用户只可以读取的任何位置。</p>\n<p>1、安装 cifs-utils 软件包<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]$ sudo yum install cifs-utils -y</span><br></pre></td></tr></table></figure></p>\n<p>2、创建挂载点<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> mkdir -p /mnt/westeros</span><br></pre></td></tr></table></figure></p>\n<p>3、创建包含以下内容的凭据文件，/root/tyrion.creds，然后将该文件的权限设置为：0600<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username=tyrion</span><br><span class=\"line\">password=slapjoffryslap</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> chmod 0600 /root/tyrion.creds</span><br></pre></td></tr></table></figure>\n<p>4、将以下行添加到 /etc/fstab：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//server0.example.com/westeros /mnt/westeros cifs creds=/root/tyrion.creds 0 0</span><br></pre></td></tr></table></figure></p>\n<p>5、挂载所有文件系统，然后检查挂载的文件系统。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> mount -a</span><br><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$cat</span> /mnt/westeros/README.txt</span><br></pre></td></tr></table></figure></p>\n<p>四、server0 会导出 NFSv4 共享 /essos  。需要使用 Kerberos 身份验证、加密和完整性检查来在启动时将该共享以只读写形式挂载到 /mnt/essos 。</p>\n<p>可以从 <a href=\"http://classroom.example.com/pub/keytabs/desktop0.keytab\" target=\"_blank\" rel=\"noopener\">http://classroom.example.com/pub/keytabs/desktop0.keytab</a> 下载系统的keytab </p>\n<p>1、创建挂载点<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> mkdir -p /mnt/essos</span><br></pre></td></tr></table></figure></p>\n<p>2、下载系统的 keytab<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> wget -O /etc/krb5.keytab http://classroom.example.com/pub/keytabs/desktop0.keytab</span><br></pre></td></tr></table></figure></p>\n<p>3、将以下行添加到 /etc/fstab :<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$server0</span>.example.com:/essos /mnt/essos nfs sec=kerb5p,rw 0 0</span><br></pre></td></tr></table></figure></p>\n<p>4、启动并启用 nfs-secure.service 服务<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> systemctl <span class=\"built_in\">enable</span> nfs-secure.service </span><br><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> systemctl start nfs-secure.service</span><br></pre></td></tr></table></figure></p>\n<p>5、挂载所有文件系统<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> mount -a</span><br></pre></td></tr></table></figure></p>\n<p>五、在新的2 G 卷组stark 中配置新 512M 逻辑卷 arya 。  </p>\n<p>新逻辑卷应使用 xfs 文件系统进行格式化，并永久挂载到 /mnt/underfoot </p>\n<p>1、在第二块磁盘上创建 2G 的分区</p>\n<p><img src=\"/2018/10/18/rh134-e7-ac-ac-e5-8d-81-e4-ba-94-e7-ab-a0-e7-b3-bb-e7-bb-9f-e7-ae-a1-e7-90-86-e4-ba-8c-e6-80-bb-e5-a4-8d-e4-b9-a0/1539847801848346.png\" alt=\"image.png\"></p>\n<p>2、将新分区变为物理卷<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> pvcreate /dev/sdb1</span><br></pre></td></tr></table></figure></p>\n<p>3、使用新物理卷构建新卷组<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> vgcreate stark /dev/sdb1</span><br></pre></td></tr></table></figure></p>\n<p>4、在新卷组中创建 512M 的新逻辑卷<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> lvcreate -n arya -L 512M stark</span><br></pre></td></tr></table></figure></p>\n<p>5、使用 xfs 文件系统对新 LV 进行格式化<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]$ sudo mkfs -t xfs /dev/mapper/stark-arya</span><br></pre></td></tr></table></figure></p>\n<p>6、创建挂载点<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> mkdir -p /mnt/underfoot</span><br></pre></td></tr></table></figure></p>\n<p>7、将以下行添加到 /etc/fstab<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/mapper/stark-arya /mnt/underfoot xfs defaults 1 2</span><br></pre></td></tr></table></figure></p>\n<p>8、挂载所有文件系统<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> mount -a</span><br></pre></td></tr></table></figure></p>\n<p>六、系统应该配备新的 512 M 交换分区，并在启动时自动激活。  </p>\n<p>1、第二块磁盘上创建 512 M 的新分区，然后将该分区类型设置为 82 </p>\n<p><img src=\"/2018/10/18/rh134-e7-ac-ac-e5-8d-81-e4-ba-94-e7-ab-a0-e7-b3-bb-e7-bb-9f-e7-ae-a1-e7-90-86-e4-ba-8c-e6-80-bb-e5-a4-8d-e4-b9-a0/1539848579837356.png\" alt=\"image.png\"></p>\n<p>2、将新分区格式化成交换分区<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> mkswap /dev/sdb2</span><br></pre></td></tr></table></figure></p>\n<p>3、检索UUID 中的交换分区<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> blkid /dev/sdb2</span><br></pre></td></tr></table></figure></p>\n<p>4、向/etc/fstab 添加以下行；确保使用上一步找到的UUID，假设为UUID=dfce28a9-015d-4908-8206-840920260310<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UUID=dfce28a9-015d-4908-8206-840920260310  swap swap defaults 0 0</span><br></pre></td></tr></table></figure></p>\n<p>5、激活所有交换分区<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> swapon -a</span><br></pre></td></tr></table></figure></p>\n<p>七：创建新组 kings ，以及四个属于该组的新用户： stannis，joffery,renly和robb。  </p>\n<p>1、创建 kings 组<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> groupadd kings</span><br></pre></td></tr></table></figure></p>\n<p>2、创建四个用户，并将他们添加到kings 组<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$for</span> NEWUSER <span class=\"keyword\">in</span> stannis joffrey renly robb; <span class=\"keyword\">do</span></span><br><span class=\"line\">&gt;sudo useradd -G kings <span class=\"variable\">$&#123;NEWUSER&#125;</span></span><br><span class=\"line\">&gt;<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>八、创建新目录 /ironthrone  该目录由拥有权限 0700 的 root:root 所有。</p>\n<p>配置该目录，以便 kings 组中的用户拥有该目录的读写权限，但用户 joffrey 除外，该用仅被授予读取特权。</p>\n<p>这些限制还应当应用到 /ironthrone 目录下创建的所有新文件和目录。</p>\n<p>1、创建权限正常的目录<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> mkdir -m 0700 /ironthone</span><br></pre></td></tr></table></figure></p>\n<p>2、 在 /ironthone 中添加 ACL ，从而向 kings 组中的用户授予读写特权。请不忘记添加执行权限，因为这是一个目录。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> setfacl -m g:kings:rwX /ironthone</span><br></pre></td></tr></table></figure></p>\n<p>3、为用户 joffrey 添加ACL ，使其拥有只读和执行权限<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> setfacl -m u:joffrey:r-x /ironthone</span><br></pre></td></tr></table></figure></p>\n<p>4、也添加前两个 ACL 作为默认 ACL<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> setfacl -m d:g:kings:rwx /ironthone</span><br><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> setfacl -m d:u:joffrey:r-x /ironthone</span><br></pre></td></tr></table></figure></p>\n<p>九、安装 httpd 和 mod_ssl 软件包，然后启用并启动 httpd.service 服务</p>\n<p>1、安装 httpd 和 mod_ssl 软件包<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> yum install httpd mod_ssl -y</span><br></pre></td></tr></table></figure></p>\n<p>2、启动并启用 httpd.service 服务<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> systemctl <span class=\"built_in\">enable</span> httpd</span><br><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> systemctl start httpd</span><br></pre></td></tr></table></figure></p>\n<p>十、在系统上所有行防火墙的默认区域打开端口12345/tcp </p>\n<p>1、在防火墙默认区域永久配置中打开端口 12345/tcp<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> firewall-cmd --permanent --add-port=12345/tcp</span><br></pre></td></tr></table></figure></p>\n<p>2、重新加载防火墙以激活更改<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> firewall-cmd --reload</span><br></pre></td></tr></table></figure></p>\n<p>十一、创建新目录 /docroot 。确保该目录的 SELinux 上下文设置为 Public_content_t ，并且该上下文在重新标记操作后继续生效  </p>\n<p>1、创建/docroot 目录<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> mkdir /docroot</span><br></pre></td></tr></table></figure></p>\n<p>2、为 /docroot 目录及其所有子目录添加新的默认上下文<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> semanage fcontext -a -t public_content_t <span class=\"string\">'/docroot(/.*)?'</span></span><br></pre></td></tr></table></figure></p>\n<p>3、重新标记 /docroot 目录<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> [student@desktop0 Desktop]<span class=\"variable\">$sudo</span> restorecon -RvF /docroot</span><br></pre></td></tr></table></figure></p>\n<p>十二、<a href=\"http://server0.example.com/logfile\" target=\"_blank\" rel=\"noopener\">http://server0.example.com/logfile</a> 包含最近项目的日志。下载该文件，然后将所有以 ERROR 或 FAIL 结尾的行提取到文件 /home/student/errors.txt ，所有行都应按日志文件中显示的顺序排列。  </p>\n<p>1、下载文件<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$wget</span> http://server0.example.com/logfile</span><br></pre></td></tr></table></figure></p>\n<p>2、将以 ERROR 和 FAIL 结尾的第一行提取到文件 /home/student/errors.txt 中，同时保持行顺序不变<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$grep</span> -e <span class=\"string\">\"ERROR$\"</span> -e <span class=\"string\">\"FAIL$\"</span> logfile &gt; /home/student/errors.txt</span><br></pre></td></tr></table></figure></p>\n<p>十三、系统中应该有一个用于存储临时文件 /run/veryveryvolatile 的新目录。每当运行 systemd-tmpfiles –clean 时，任何超过 5秒的文件都应该从该目录中删除。  </p>\n<p>该目录应该拥有权限 1777 并由 root:root 所有。</p>\n<p>1、创建包含以下内容的新文件 /etc/tmpfiles.d/veryveryvolatile.conf:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d /run/veryveryvolatile 1777 root root 5s</span><br></pre></td></tr></table></figure></p>\n<p>2、使用 systemd-tmpfiles 创建目录。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 Desktop]<span class=\"variable\">$sudo</span> systemd-tmpfiles --create</span><br></pre></td></tr></table></figure></p>\n"},{"title":"RH134 第十四章 使用 FIREWALLD 限制网络通信","url":"511.html","id":"511","date":"2018-10-17T10:20:04.000Z","_content":"\n##### Netfilter 和 firewalld 概念  \n\nLinux 内核包含一个强大的网络过滤子系统 netfilter.netfilter 子系统允许内核模块对遍历系统的每个数据进行检查。这表示在任何传入、传出或转发的网络数据包到达用户喷雾健康的组件之前，都可以通过编程方式检查 、修改、丢弃、或拒绝这些数据包。这是在 RHEL 7 计算机上构建防火墙的主要构建块。\n\n##### 与 netfilter 交互\n\n尽管管理员理论上可以编写自己的内核模块与 netfilter 交互，但通常不会这样做。取而代之会使用其他程序来与 netfilter 交互。这些程序中，最常见和最知名的是iptables 。在先前的 RHEL  版本中， iptables 是与内核 netfilter 子系统交互的主要方法。\n\niptables 命令是一个低级工具，使用该工具正常管理防火墙可能具有挑战性。此外，它仅能调整 ipv4 防火墙规则。为保证更完成的防火墙覆盖率，需要使用其他实用程序，例如用于 ipv6 的ip6tables 和用于软件桥的ebtalbes 。\n\n##### firewalld 简介。\n\nRHEL 7 中引入了一种与 netfilter 交互的新方法：firewalld , firewalld 是一个可以配置和监控系统防火墙规则的系统守护进程。应用可以通过 DBus 消息系统与 firewalld 通信以请求打开端口，此功能可以禁用或锁定。该守护进程不仅涵盖ipv4、ipv6，还能涵盖 ebtables 设备。 firewalld 守护进程从 firewalld 软件包安装。此软件包属于Base 安装的一部分，但不属于minimal安装的一部分。\n\nfirewalld 将所有网络流量分为多个区域，从而简化防火墙管理。根据数据包源 ip 地址或传入网络接口等条件。流量将转入相应的防火墙规则。每个区域都可以具有自己的要打开和关闭的端口和服务列表。\n\n###### tips:\n\n对于笔记本电脑或经常更改网络的其他计算机，可以使用 NetworkManager 自动设备连接防火墙区域。（ZONE=home）可以使用适于特定连接的规则来自定义区域。\n\n对于传入系统的每个数据包，将首先检查其源地址。如果该原地址关联到特定区域，则将分析该区域的规则。如果该源地址未关联某个区域，则将使用传入网络接口的区域。\n\n如果出于某种原因，网络接口未与某个区域关联，则将使用默认区域。默认区域本身不是一个单独的区域；它是其他区域中的一个。默认情况下使用 public 区域，但系统管理员可以更改此默认值。\n\n大多数区域会允许与特定端口和协议（“631/udp”）或预定义服务（\"ssh\"）的列表匹配的流量通过防火墙。如果流量不与允许的端口/协议或服务匹配，则通常会被拒绝。（trusted区域默认情况下允许所有流量，它是此规则的一个例外）。\n\n###### 预定义区域\n\n|区域名称  |默认配置\n| :--\n|trusted|允许所有传入流量\n|home|除非与传出流量相关，或与 ssh、mdsn、ipp-client、samba-client 或 dhcpv6-client 预定义服务匹配，否则拒绝传入流量\n|internal|除非与传出流量相关，或与 ssh、mdsn、ipp-client、samba-client 或 dhcpv6-client 预定义服务匹配，否则拒绝传入流量（一开始与 home 区域相同）\n|work|除非与传出流量相关，或与 ssh、ipp-client 或 dhcpv6-client 预定义服务匹配，否则拒绝传入流量\n|public|除非与传出流量相关，或与 ssh 或 dhcpv6-client 预定义服务匹配，否则拒绝传入流量，新增加网络接口的默认区域\n|external|除非与传出流量相关，或与 ssh 预定义服务匹配，否则拒绝传入流量，通过此区域转发的 ipv4 传出流量将进行伪装，以使其看起来像是来自传出接口的ipv4地址\n|dmz|除非与传出流量相关，或与 ssh 预定义服务匹配，否则拒绝传入流量\n|block|除非与传出流量相关，否则拒绝传入流量\n|drop|除非与传出流量相关，否则拒绝传入流量（甚至不产生包含 ICMP 错误的响应）\n\n有关所有可用预定义区域及其预期用途的列表，参阅 firewalld.zones(5)手册页。  \n\n###### 预定义服务  \n\nfirewalld 还随附一些预定义服务，这些服务可用于方便地允许特定网络服务的流量通过防火墙，下表详细说明了防火墙区域默认中使用的预定义的配置。\n\n|服务名称|配置\n| :--\n|ssh|本地ssh 服务器。到22/tcp的流量\n|dhcpv6-client|本地 DHCPv6客户端，到 fe80::/64 IPv6 网络中 546/udp 的流量\n|ipp-client|本地IPP 打印，到 631/udp的流量\n|samba-client|本地 windows 文件和打印共享客户端，到137/udp,和138/udp的流量\n|mdns|多播DNS(mDNS)本地链路名称解析。到5353/udp 指向 224.0.0.251 (IPv4)或 ff02::fb(IPv6)多播地址的流量\n|\n###### tips:\n\n还存在许多其他预定义服务。firewall-cmd --get-services 命令可以列出这些服务。可在 /usr/lib/firewalld/services 目录中找到用于定义 firewalld 软件包中所含预定义服务的配置文件，其格式由 firewalld.zone(5)定义。本章中不会进一步讨论这些文件。\n\n##### 配置防火墙设置\n\n###### 三种主要方式与 firewalld 交互。\n\n1、直接编辑配置文件\n\n2、使用 firewall-config 图形工具\n\n3、从命令行使用 firewall-cmd \n\n\n\n###### 使用firewall-cmd 配置防火墙设置\n\nfirewall-cmd 作为主firewalld 软件包的一部分安装。firewall-cmd 可以执行 firewall-config 能够执行的相同操作。\n\n常用 firewall-cmd 命令及其说明（默认修改运行配置），当指定 --permanent （永久）选项时除外。\n\n|firewall-cmd 命令  |说明\n| :--\n|--get-default-zone|查询当前默认区域\n|--set-default-zone=<ZONE>|设置当前默认区域\n|--get-zones|列出所有可用区域\n|--get-active-zones|列出当前正在使用的所有区域（具有关联的端口或者源）及其接口信息\n|--add-source=<CIDR>\\[--zone=<ZONE>\\]|将来自 IP 地址或网络 /子网掩码 <CIDR> 的所有流量路由到指定区域，如果未提供 --zone= 选项，则将使用默认区域。\n|--remove-source=<CIDR>|从指定区域中删除用于路由来自 ip 地址或 网络/子掩码<CIDR>的所有流量的规则 。如果未提供 --zone= 选项，则将使用默认区域。\n|--add-interface=<INTERFACE>|将来自<INTERFACE>网卡的所有流量路由到指定区域。如果未提供 --zone=选项，则将使用默认区域。\n|--change-interface=<INTERFACE>|将接口与 <ZONE>而非其当前区域关联。如果未提供 --zone 选项，则将使用默认区域\n|--list-all|列出<ZONE>的所有已经配置接口、源、服务和端口。如果未提供 --zone 选项，则将使用默认区域\n|--list-all-zoness  |检索所有区域的所有信息。（接口、源、服务、端口）\n|--add-service=<SERVICE>|允许到<SERVICE>的流量。如果未提供--zone 选项。则将使用默认区域\n|--add-port=<PORT/PROTOCOL>|允许到<PORT/PROTOCOL>端口的流量。如果未提供 --zone 则将使用默认区域\n|--remove-service=<SERVICE>|从区域的允许 列表中删除<SERVICE>.如果未提供 --zone 选项则将使用默认区域\n|--remove-port=<PORT/PROTOCAL>|从区域的允许列表中删除<PORT/PROTOCOL>端口。如果未提供 --zone 选项，则将使用默认区域\n|--reload|丢弃运行时配置并应用永久配置\n\n###### firewall-cmd 示例：\n\n下例显示默认区域设备为 dmz ,来自192.168.0.0/24 网络的所有流量都被分配给 internal 区域。而 internal 区域上打开了用于mysql 的网络端口\n```sh\nfirewall-cmd --set-default-zone=dmz\nfirewall-cmd --set-source=192.168.0.0/24 --zone=internal    #临时生效\nfirewall-cmd --add-service=mysql --zone=internal    #临时生效\nfirewall-cmd --permanent --set-source=192.168.0.0/24 --zone=internal    #永久配置\nfirewall-cmd --permanent --set-service=mysql --zone=internal    #永久配置\nfirewall-cmd --reload    #永久配置才需要\n```\n###### tips:  \n\n对于 firewalld 的基本语法不够的情况，系统管理员还可以添加富规则（一种更具表达力的语法）来编写更加复杂的规则，如果富规则语法也不够，系统管理员还可以直接配置规则，基本上是将与 firewalld 规则混合使用的原始 iptables 语法。\n","source":"_posts/rh134-e7-ac-ac-e5-8d-81-e5-9b-9b-e7-ab-a0-e4-bd-bf-e7-94-a8-firewalld-e9-99-90-e5-88-b6-e7-bd-91-e7-bb-9c-e9-80-9a-e4-bf-a1.md","raw":"---\ntitle: RH134 第十四章 使用 FIREWALLD 限制网络通信\nurl: 511.html\nid: 511\ncategories:\n  - RHEL134\ndate: 2018-10-17 18:20:04\ntags:\n---\n\n##### Netfilter 和 firewalld 概念  \n\nLinux 内核包含一个强大的网络过滤子系统 netfilter.netfilter 子系统允许内核模块对遍历系统的每个数据进行检查。这表示在任何传入、传出或转发的网络数据包到达用户喷雾健康的组件之前，都可以通过编程方式检查 、修改、丢弃、或拒绝这些数据包。这是在 RHEL 7 计算机上构建防火墙的主要构建块。\n\n##### 与 netfilter 交互\n\n尽管管理员理论上可以编写自己的内核模块与 netfilter 交互，但通常不会这样做。取而代之会使用其他程序来与 netfilter 交互。这些程序中，最常见和最知名的是iptables 。在先前的 RHEL  版本中， iptables 是与内核 netfilter 子系统交互的主要方法。\n\niptables 命令是一个低级工具，使用该工具正常管理防火墙可能具有挑战性。此外，它仅能调整 ipv4 防火墙规则。为保证更完成的防火墙覆盖率，需要使用其他实用程序，例如用于 ipv6 的ip6tables 和用于软件桥的ebtalbes 。\n\n##### firewalld 简介。\n\nRHEL 7 中引入了一种与 netfilter 交互的新方法：firewalld , firewalld 是一个可以配置和监控系统防火墙规则的系统守护进程。应用可以通过 DBus 消息系统与 firewalld 通信以请求打开端口，此功能可以禁用或锁定。该守护进程不仅涵盖ipv4、ipv6，还能涵盖 ebtables 设备。 firewalld 守护进程从 firewalld 软件包安装。此软件包属于Base 安装的一部分，但不属于minimal安装的一部分。\n\nfirewalld 将所有网络流量分为多个区域，从而简化防火墙管理。根据数据包源 ip 地址或传入网络接口等条件。流量将转入相应的防火墙规则。每个区域都可以具有自己的要打开和关闭的端口和服务列表。\n\n###### tips:\n\n对于笔记本电脑或经常更改网络的其他计算机，可以使用 NetworkManager 自动设备连接防火墙区域。（ZONE=home）可以使用适于特定连接的规则来自定义区域。\n\n对于传入系统的每个数据包，将首先检查其源地址。如果该原地址关联到特定区域，则将分析该区域的规则。如果该源地址未关联某个区域，则将使用传入网络接口的区域。\n\n如果出于某种原因，网络接口未与某个区域关联，则将使用默认区域。默认区域本身不是一个单独的区域；它是其他区域中的一个。默认情况下使用 public 区域，但系统管理员可以更改此默认值。\n\n大多数区域会允许与特定端口和协议（“631/udp”）或预定义服务（\"ssh\"）的列表匹配的流量通过防火墙。如果流量不与允许的端口/协议或服务匹配，则通常会被拒绝。（trusted区域默认情况下允许所有流量，它是此规则的一个例外）。\n\n###### 预定义区域\n\n|区域名称  |默认配置\n| :--\n|trusted|允许所有传入流量\n|home|除非与传出流量相关，或与 ssh、mdsn、ipp-client、samba-client 或 dhcpv6-client 预定义服务匹配，否则拒绝传入流量\n|internal|除非与传出流量相关，或与 ssh、mdsn、ipp-client、samba-client 或 dhcpv6-client 预定义服务匹配，否则拒绝传入流量（一开始与 home 区域相同）\n|work|除非与传出流量相关，或与 ssh、ipp-client 或 dhcpv6-client 预定义服务匹配，否则拒绝传入流量\n|public|除非与传出流量相关，或与 ssh 或 dhcpv6-client 预定义服务匹配，否则拒绝传入流量，新增加网络接口的默认区域\n|external|除非与传出流量相关，或与 ssh 预定义服务匹配，否则拒绝传入流量，通过此区域转发的 ipv4 传出流量将进行伪装，以使其看起来像是来自传出接口的ipv4地址\n|dmz|除非与传出流量相关，或与 ssh 预定义服务匹配，否则拒绝传入流量\n|block|除非与传出流量相关，否则拒绝传入流量\n|drop|除非与传出流量相关，否则拒绝传入流量（甚至不产生包含 ICMP 错误的响应）\n\n有关所有可用预定义区域及其预期用途的列表，参阅 firewalld.zones(5)手册页。  \n\n###### 预定义服务  \n\nfirewalld 还随附一些预定义服务，这些服务可用于方便地允许特定网络服务的流量通过防火墙，下表详细说明了防火墙区域默认中使用的预定义的配置。\n\n|服务名称|配置\n| :--\n|ssh|本地ssh 服务器。到22/tcp的流量\n|dhcpv6-client|本地 DHCPv6客户端，到 fe80::/64 IPv6 网络中 546/udp 的流量\n|ipp-client|本地IPP 打印，到 631/udp的流量\n|samba-client|本地 windows 文件和打印共享客户端，到137/udp,和138/udp的流量\n|mdns|多播DNS(mDNS)本地链路名称解析。到5353/udp 指向 224.0.0.251 (IPv4)或 ff02::fb(IPv6)多播地址的流量\n|\n###### tips:\n\n还存在许多其他预定义服务。firewall-cmd --get-services 命令可以列出这些服务。可在 /usr/lib/firewalld/services 目录中找到用于定义 firewalld 软件包中所含预定义服务的配置文件，其格式由 firewalld.zone(5)定义。本章中不会进一步讨论这些文件。\n\n##### 配置防火墙设置\n\n###### 三种主要方式与 firewalld 交互。\n\n1、直接编辑配置文件\n\n2、使用 firewall-config 图形工具\n\n3、从命令行使用 firewall-cmd \n\n\n\n###### 使用firewall-cmd 配置防火墙设置\n\nfirewall-cmd 作为主firewalld 软件包的一部分安装。firewall-cmd 可以执行 firewall-config 能够执行的相同操作。\n\n常用 firewall-cmd 命令及其说明（默认修改运行配置），当指定 --permanent （永久）选项时除外。\n\n|firewall-cmd 命令  |说明\n| :--\n|--get-default-zone|查询当前默认区域\n|--set-default-zone=<ZONE>|设置当前默认区域\n|--get-zones|列出所有可用区域\n|--get-active-zones|列出当前正在使用的所有区域（具有关联的端口或者源）及其接口信息\n|--add-source=<CIDR>\\[--zone=<ZONE>\\]|将来自 IP 地址或网络 /子网掩码 <CIDR> 的所有流量路由到指定区域，如果未提供 --zone= 选项，则将使用默认区域。\n|--remove-source=<CIDR>|从指定区域中删除用于路由来自 ip 地址或 网络/子掩码<CIDR>的所有流量的规则 。如果未提供 --zone= 选项，则将使用默认区域。\n|--add-interface=<INTERFACE>|将来自<INTERFACE>网卡的所有流量路由到指定区域。如果未提供 --zone=选项，则将使用默认区域。\n|--change-interface=<INTERFACE>|将接口与 <ZONE>而非其当前区域关联。如果未提供 --zone 选项，则将使用默认区域\n|--list-all|列出<ZONE>的所有已经配置接口、源、服务和端口。如果未提供 --zone 选项，则将使用默认区域\n|--list-all-zoness  |检索所有区域的所有信息。（接口、源、服务、端口）\n|--add-service=<SERVICE>|允许到<SERVICE>的流量。如果未提供--zone 选项。则将使用默认区域\n|--add-port=<PORT/PROTOCOL>|允许到<PORT/PROTOCOL>端口的流量。如果未提供 --zone 则将使用默认区域\n|--remove-service=<SERVICE>|从区域的允许 列表中删除<SERVICE>.如果未提供 --zone 选项则将使用默认区域\n|--remove-port=<PORT/PROTOCAL>|从区域的允许列表中删除<PORT/PROTOCOL>端口。如果未提供 --zone 选项，则将使用默认区域\n|--reload|丢弃运行时配置并应用永久配置\n\n###### firewall-cmd 示例：\n\n下例显示默认区域设备为 dmz ,来自192.168.0.0/24 网络的所有流量都被分配给 internal 区域。而 internal 区域上打开了用于mysql 的网络端口\n```sh\nfirewall-cmd --set-default-zone=dmz\nfirewall-cmd --set-source=192.168.0.0/24 --zone=internal    #临时生效\nfirewall-cmd --add-service=mysql --zone=internal    #临时生效\nfirewall-cmd --permanent --set-source=192.168.0.0/24 --zone=internal    #永久配置\nfirewall-cmd --permanent --set-service=mysql --zone=internal    #永久配置\nfirewall-cmd --reload    #永久配置才需要\n```\n###### tips:  \n\n对于 firewalld 的基本语法不够的情况，系统管理员还可以添加富规则（一种更具表达力的语法）来编写更加复杂的规则，如果富规则语法也不够，系统管理员还可以直接配置规则，基本上是将与 firewalld 规则混合使用的原始 iptables 语法。\n","slug":"rh134-e7-ac-ac-e5-8d-81-e5-9b-9b-e7-ab-a0-e4-bd-bf-e7-94-a8-firewalld-e9-99-90-e5-88-b6-e7-bd-91-e7-bb-9c-e9-80-9a-e4-bf-a1","published":1,"updated":"2019-01-06T17:28:53.640Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqi27001zlxkjithfrqk4","content":"<h5 id=\"Netfilter-和-firewalld-概念\"><a href=\"#Netfilter-和-firewalld-概念\" class=\"headerlink\" title=\"Netfilter 和 firewalld 概念\"></a>Netfilter 和 firewalld 概念</h5><p>Linux 内核包含一个强大的网络过滤子系统 netfilter.netfilter 子系统允许内核模块对遍历系统的每个数据进行检查。这表示在任何传入、传出或转发的网络数据包到达用户喷雾健康的组件之前，都可以通过编程方式检查 、修改、丢弃、或拒绝这些数据包。这是在 RHEL 7 计算机上构建防火墙的主要构建块。</p>\n<h5 id=\"与-netfilter-交互\"><a href=\"#与-netfilter-交互\" class=\"headerlink\" title=\"与 netfilter 交互\"></a>与 netfilter 交互</h5><p>尽管管理员理论上可以编写自己的内核模块与 netfilter 交互，但通常不会这样做。取而代之会使用其他程序来与 netfilter 交互。这些程序中，最常见和最知名的是iptables 。在先前的 RHEL  版本中， iptables 是与内核 netfilter 子系统交互的主要方法。</p>\n<p>iptables 命令是一个低级工具，使用该工具正常管理防火墙可能具有挑战性。此外，它仅能调整 ipv4 防火墙规则。为保证更完成的防火墙覆盖率，需要使用其他实用程序，例如用于 ipv6 的ip6tables 和用于软件桥的ebtalbes 。</p>\n<h5 id=\"firewalld-简介。\"><a href=\"#firewalld-简介。\" class=\"headerlink\" title=\"firewalld 简介。\"></a>firewalld 简介。</h5><p>RHEL 7 中引入了一种与 netfilter 交互的新方法：firewalld , firewalld 是一个可以配置和监控系统防火墙规则的系统守护进程。应用可以通过 DBus 消息系统与 firewalld 通信以请求打开端口，此功能可以禁用或锁定。该守护进程不仅涵盖ipv4、ipv6，还能涵盖 ebtables 设备。 firewalld 守护进程从 firewalld 软件包安装。此软件包属于Base 安装的一部分，但不属于minimal安装的一部分。</p>\n<p>firewalld 将所有网络流量分为多个区域，从而简化防火墙管理。根据数据包源 ip 地址或传入网络接口等条件。流量将转入相应的防火墙规则。每个区域都可以具有自己的要打开和关闭的端口和服务列表。</p>\n<h6 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips:\"></a>tips:</h6><p>对于笔记本电脑或经常更改网络的其他计算机，可以使用 NetworkManager 自动设备连接防火墙区域。（ZONE=home）可以使用适于特定连接的规则来自定义区域。</p>\n<p>对于传入系统的每个数据包，将首先检查其源地址。如果该原地址关联到特定区域，则将分析该区域的规则。如果该源地址未关联某个区域，则将使用传入网络接口的区域。</p>\n<p>如果出于某种原因，网络接口未与某个区域关联，则将使用默认区域。默认区域本身不是一个单独的区域；它是其他区域中的一个。默认情况下使用 public 区域，但系统管理员可以更改此默认值。</p>\n<p>大多数区域会允许与特定端口和协议（“631/udp”）或预定义服务（”ssh”）的列表匹配的流量通过防火墙。如果流量不与允许的端口/协议或服务匹配，则通常会被拒绝。（trusted区域默认情况下允许所有流量，它是此规则的一个例外）。</p>\n<h6 id=\"预定义区域\"><a href=\"#预定义区域\" class=\"headerlink\" title=\"预定义区域\"></a>预定义区域</h6><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">区域名称</th>\n<th>默认配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">trusted</td>\n<td>允许所有传入流量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">home</td>\n<td>除非与传出流量相关，或与 ssh、mdsn、ipp-client、samba-client 或 dhcpv6-client 预定义服务匹配，否则拒绝传入流量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">internal</td>\n<td>除非与传出流量相关，或与 ssh、mdsn、ipp-client、samba-client 或 dhcpv6-client 预定义服务匹配，否则拒绝传入流量（一开始与 home 区域相同）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">work</td>\n<td>除非与传出流量相关，或与 ssh、ipp-client 或 dhcpv6-client 预定义服务匹配，否则拒绝传入流量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">public</td>\n<td>除非与传出流量相关，或与 ssh 或 dhcpv6-client 预定义服务匹配，否则拒绝传入流量，新增加网络接口的默认区域</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">external</td>\n<td>除非与传出流量相关，或与 ssh 预定义服务匹配，否则拒绝传入流量，通过此区域转发的 ipv4 传出流量将进行伪装，以使其看起来像是来自传出接口的ipv4地址</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dmz</td>\n<td>除非与传出流量相关，或与 ssh 预定义服务匹配，否则拒绝传入流量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">block</td>\n<td>除非与传出流量相关，否则拒绝传入流量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">drop</td>\n<td>除非与传出流量相关，否则拒绝传入流量（甚至不产生包含 ICMP 错误的响应）</td>\n</tr>\n</tbody>\n</table>\n<p>有关所有可用预定义区域及其预期用途的列表，参阅 firewalld.zones(5)手册页。  </p>\n<h6 id=\"预定义服务\"><a href=\"#预定义服务\" class=\"headerlink\" title=\"预定义服务\"></a>预定义服务</h6><p>firewalld 还随附一些预定义服务，这些服务可用于方便地允许特定网络服务的流量通过防火墙，下表详细说明了防火墙区域默认中使用的预定义的配置。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">服务名称</th>\n<th>配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ssh</td>\n<td>本地ssh 服务器。到22/tcp的流量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dhcpv6-client</td>\n<td>本地 DHCPv6客户端，到 fe80::/64 IPv6 网络中 546/udp 的流量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ipp-client</td>\n<td>本地IPP 打印，到 631/udp的流量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">samba-client</td>\n<td>本地 windows 文件和打印共享客户端，到137/udp,和138/udp的流量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mdns</td>\n<td>多播DNS(mDNS)本地链路名称解析。到5353/udp 指向 224.0.0.251 (IPv4)或 ff02::fb(IPv6)多播地址的流量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"tips-1\"><a href=\"#tips-1\" class=\"headerlink\" title=\"tips:\"></a>tips:</h6><p>还存在许多其他预定义服务。firewall-cmd –get-services 命令可以列出这些服务。可在 /usr/lib/firewalld/services 目录中找到用于定义 firewalld 软件包中所含预定义服务的配置文件，其格式由 firewalld.zone(5)定义。本章中不会进一步讨论这些文件。</p>\n<h5 id=\"配置防火墙设置\"><a href=\"#配置防火墙设置\" class=\"headerlink\" title=\"配置防火墙设置\"></a>配置防火墙设置</h5><h6 id=\"三种主要方式与-firewalld-交互。\"><a href=\"#三种主要方式与-firewalld-交互。\" class=\"headerlink\" title=\"三种主要方式与 firewalld 交互。\"></a>三种主要方式与 firewalld 交互。</h6><p>1、直接编辑配置文件</p>\n<p>2、使用 firewall-config 图形工具</p>\n<p>3、从命令行使用 firewall-cmd </p>\n<h6 id=\"使用firewall-cmd-配置防火墙设置\"><a href=\"#使用firewall-cmd-配置防火墙设置\" class=\"headerlink\" title=\"使用firewall-cmd 配置防火墙设置\"></a>使用firewall-cmd 配置防火墙设置</h6><p>firewall-cmd 作为主firewalld 软件包的一部分安装。firewall-cmd 可以执行 firewall-config 能够执行的相同操作。</p>\n<p>常用 firewall-cmd 命令及其说明（默认修改运行配置），当指定 –permanent （永久）选项时除外。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">firewall-cmd 命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">–get-default-zone</td>\n<td>查询当前默认区域</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–set-default-zone=<zone></zone></td>\n<td>设置当前默认区域</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–get-zones</td>\n<td>列出所有可用区域</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–get-active-zones</td>\n<td>列出当前正在使用的所有区域（具有关联的端口或者源）及其接口信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–add-source=<cidr>[–zone=<zone>]</zone></cidr></td>\n<td>将来自 IP 地址或网络 /子网掩码 <cidr> 的所有流量路由到指定区域，如果未提供 –zone= 选项，则将使用默认区域。</cidr></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–remove-source=<cidr></cidr></td>\n<td>从指定区域中删除用于路由来自 ip 地址或 网络/子掩码<cidr>的所有流量的规则 。如果未提供 –zone= 选项，则将使用默认区域。</cidr></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–add-interface=<interface></interface></td>\n<td>将来自<interface>网卡的所有流量路由到指定区域。如果未提供 –zone=选项，则将使用默认区域。</interface></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–change-interface=<interface></interface></td>\n<td>将接口与 <zone>而非其当前区域关联。如果未提供 –zone 选项，则将使用默认区域</zone></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–list-all</td>\n<td>列出<zone>的所有已经配置接口、源、服务和端口。如果未提供 –zone 选项，则将使用默认区域</zone></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–list-all-zoness</td>\n<td>检索所有区域的所有信息。（接口、源、服务、端口）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–add-service=<service></service></td>\n<td>允许到<service>的流量。如果未提供–zone 选项。则将使用默认区域</service></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–add-port=&lt;PORT/PROTOCOL&gt;</td>\n<td>允许到&lt;PORT/PROTOCOL&gt;端口的流量。如果未提供 –zone 则将使用默认区域</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–remove-service=<service></service></td>\n<td>从区域的允许 列表中删除<service>.如果未提供 –zone 选项则将使用默认区域</service></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–remove-port=&lt;PORT/PROTOCAL&gt;</td>\n<td>从区域的允许列表中删除&lt;PORT/PROTOCOL&gt;端口。如果未提供 –zone 选项，则将使用默认区域</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–reload</td>\n<td>丢弃运行时配置并应用永久配置</td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"firewall-cmd-示例：\"><a href=\"#firewall-cmd-示例：\" class=\"headerlink\" title=\"firewall-cmd 示例：\"></a>firewall-cmd 示例：</h6><p>下例显示默认区域设备为 dmz ,来自192.168.0.0/24 网络的所有流量都被分配给 internal 区域。而 internal 区域上打开了用于mysql 的网络端口<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --<span class=\"built_in\">set</span>-default-zone=dmz</span><br><span class=\"line\">firewall-cmd --<span class=\"built_in\">set</span>-source=192.168.0.0/24 --zone=internal    <span class=\"comment\">#临时生效</span></span><br><span class=\"line\">firewall-cmd --add-service=mysql --zone=internal    <span class=\"comment\">#临时生效</span></span><br><span class=\"line\">firewall-cmd --permanent --<span class=\"built_in\">set</span>-source=192.168.0.0/24 --zone=internal    <span class=\"comment\">#永久配置</span></span><br><span class=\"line\">firewall-cmd --permanent --<span class=\"built_in\">set</span>-service=mysql --zone=internal    <span class=\"comment\">#永久配置</span></span><br><span class=\"line\">firewall-cmd --reload    <span class=\"comment\">#永久配置才需要</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"tips-2\"><a href=\"#tips-2\" class=\"headerlink\" title=\"tips:\"></a>tips:</h6><p>对于 firewalld 的基本语法不够的情况，系统管理员还可以添加富规则（一种更具表达力的语法）来编写更加复杂的规则，如果富规则语法也不够，系统管理员还可以直接配置规则，基本上是将与 firewalld 规则混合使用的原始 iptables 语法。</p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"Netfilter-和-firewalld-概念\"><a href=\"#Netfilter-和-firewalld-概念\" class=\"headerlink\" title=\"Netfilter 和 firewalld 概念\"></a>Netfilter 和 firewalld 概念</h5><p>Linux 内核包含一个强大的网络过滤子系统 netfilter.netfilter 子系统允许内核模块对遍历系统的每个数据进行检查。这表示在任何传入、传出或转发的网络数据包到达用户喷雾健康的组件之前，都可以通过编程方式检查 、修改、丢弃、或拒绝这些数据包。这是在 RHEL 7 计算机上构建防火墙的主要构建块。</p>\n<h5 id=\"与-netfilter-交互\"><a href=\"#与-netfilter-交互\" class=\"headerlink\" title=\"与 netfilter 交互\"></a>与 netfilter 交互</h5><p>尽管管理员理论上可以编写自己的内核模块与 netfilter 交互，但通常不会这样做。取而代之会使用其他程序来与 netfilter 交互。这些程序中，最常见和最知名的是iptables 。在先前的 RHEL  版本中， iptables 是与内核 netfilter 子系统交互的主要方法。</p>\n<p>iptables 命令是一个低级工具，使用该工具正常管理防火墙可能具有挑战性。此外，它仅能调整 ipv4 防火墙规则。为保证更完成的防火墙覆盖率，需要使用其他实用程序，例如用于 ipv6 的ip6tables 和用于软件桥的ebtalbes 。</p>\n<h5 id=\"firewalld-简介。\"><a href=\"#firewalld-简介。\" class=\"headerlink\" title=\"firewalld 简介。\"></a>firewalld 简介。</h5><p>RHEL 7 中引入了一种与 netfilter 交互的新方法：firewalld , firewalld 是一个可以配置和监控系统防火墙规则的系统守护进程。应用可以通过 DBus 消息系统与 firewalld 通信以请求打开端口，此功能可以禁用或锁定。该守护进程不仅涵盖ipv4、ipv6，还能涵盖 ebtables 设备。 firewalld 守护进程从 firewalld 软件包安装。此软件包属于Base 安装的一部分，但不属于minimal安装的一部分。</p>\n<p>firewalld 将所有网络流量分为多个区域，从而简化防火墙管理。根据数据包源 ip 地址或传入网络接口等条件。流量将转入相应的防火墙规则。每个区域都可以具有自己的要打开和关闭的端口和服务列表。</p>\n<h6 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips:\"></a>tips:</h6><p>对于笔记本电脑或经常更改网络的其他计算机，可以使用 NetworkManager 自动设备连接防火墙区域。（ZONE=home）可以使用适于特定连接的规则来自定义区域。</p>\n<p>对于传入系统的每个数据包，将首先检查其源地址。如果该原地址关联到特定区域，则将分析该区域的规则。如果该源地址未关联某个区域，则将使用传入网络接口的区域。</p>\n<p>如果出于某种原因，网络接口未与某个区域关联，则将使用默认区域。默认区域本身不是一个单独的区域；它是其他区域中的一个。默认情况下使用 public 区域，但系统管理员可以更改此默认值。</p>\n<p>大多数区域会允许与特定端口和协议（“631/udp”）或预定义服务（”ssh”）的列表匹配的流量通过防火墙。如果流量不与允许的端口/协议或服务匹配，则通常会被拒绝。（trusted区域默认情况下允许所有流量，它是此规则的一个例外）。</p>\n<h6 id=\"预定义区域\"><a href=\"#预定义区域\" class=\"headerlink\" title=\"预定义区域\"></a>预定义区域</h6><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">区域名称</th>\n<th>默认配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">trusted</td>\n<td>允许所有传入流量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">home</td>\n<td>除非与传出流量相关，或与 ssh、mdsn、ipp-client、samba-client 或 dhcpv6-client 预定义服务匹配，否则拒绝传入流量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">internal</td>\n<td>除非与传出流量相关，或与 ssh、mdsn、ipp-client、samba-client 或 dhcpv6-client 预定义服务匹配，否则拒绝传入流量（一开始与 home 区域相同）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">work</td>\n<td>除非与传出流量相关，或与 ssh、ipp-client 或 dhcpv6-client 预定义服务匹配，否则拒绝传入流量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">public</td>\n<td>除非与传出流量相关，或与 ssh 或 dhcpv6-client 预定义服务匹配，否则拒绝传入流量，新增加网络接口的默认区域</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">external</td>\n<td>除非与传出流量相关，或与 ssh 预定义服务匹配，否则拒绝传入流量，通过此区域转发的 ipv4 传出流量将进行伪装，以使其看起来像是来自传出接口的ipv4地址</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dmz</td>\n<td>除非与传出流量相关，或与 ssh 预定义服务匹配，否则拒绝传入流量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">block</td>\n<td>除非与传出流量相关，否则拒绝传入流量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">drop</td>\n<td>除非与传出流量相关，否则拒绝传入流量（甚至不产生包含 ICMP 错误的响应）</td>\n</tr>\n</tbody>\n</table>\n<p>有关所有可用预定义区域及其预期用途的列表，参阅 firewalld.zones(5)手册页。  </p>\n<h6 id=\"预定义服务\"><a href=\"#预定义服务\" class=\"headerlink\" title=\"预定义服务\"></a>预定义服务</h6><p>firewalld 还随附一些预定义服务，这些服务可用于方便地允许特定网络服务的流量通过防火墙，下表详细说明了防火墙区域默认中使用的预定义的配置。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">服务名称</th>\n<th>配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ssh</td>\n<td>本地ssh 服务器。到22/tcp的流量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dhcpv6-client</td>\n<td>本地 DHCPv6客户端，到 fe80::/64 IPv6 网络中 546/udp 的流量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ipp-client</td>\n<td>本地IPP 打印，到 631/udp的流量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">samba-client</td>\n<td>本地 windows 文件和打印共享客户端，到137/udp,和138/udp的流量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mdns</td>\n<td>多播DNS(mDNS)本地链路名称解析。到5353/udp 指向 224.0.0.251 (IPv4)或 ff02::fb(IPv6)多播地址的流量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"tips-1\"><a href=\"#tips-1\" class=\"headerlink\" title=\"tips:\"></a>tips:</h6><p>还存在许多其他预定义服务。firewall-cmd –get-services 命令可以列出这些服务。可在 /usr/lib/firewalld/services 目录中找到用于定义 firewalld 软件包中所含预定义服务的配置文件，其格式由 firewalld.zone(5)定义。本章中不会进一步讨论这些文件。</p>\n<h5 id=\"配置防火墙设置\"><a href=\"#配置防火墙设置\" class=\"headerlink\" title=\"配置防火墙设置\"></a>配置防火墙设置</h5><h6 id=\"三种主要方式与-firewalld-交互。\"><a href=\"#三种主要方式与-firewalld-交互。\" class=\"headerlink\" title=\"三种主要方式与 firewalld 交互。\"></a>三种主要方式与 firewalld 交互。</h6><p>1、直接编辑配置文件</p>\n<p>2、使用 firewall-config 图形工具</p>\n<p>3、从命令行使用 firewall-cmd </p>\n<h6 id=\"使用firewall-cmd-配置防火墙设置\"><a href=\"#使用firewall-cmd-配置防火墙设置\" class=\"headerlink\" title=\"使用firewall-cmd 配置防火墙设置\"></a>使用firewall-cmd 配置防火墙设置</h6><p>firewall-cmd 作为主firewalld 软件包的一部分安装。firewall-cmd 可以执行 firewall-config 能够执行的相同操作。</p>\n<p>常用 firewall-cmd 命令及其说明（默认修改运行配置），当指定 –permanent （永久）选项时除外。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">firewall-cmd 命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">–get-default-zone</td>\n<td>查询当前默认区域</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–set-default-zone=<zone></zone></td>\n<td>设置当前默认区域</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–get-zones</td>\n<td>列出所有可用区域</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–get-active-zones</td>\n<td>列出当前正在使用的所有区域（具有关联的端口或者源）及其接口信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–add-source=<cidr>[–zone=<zone>]</zone></cidr></td>\n<td>将来自 IP 地址或网络 /子网掩码 <cidr> 的所有流量路由到指定区域，如果未提供 –zone= 选项，则将使用默认区域。</cidr></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–remove-source=<cidr></cidr></td>\n<td>从指定区域中删除用于路由来自 ip 地址或 网络/子掩码<cidr>的所有流量的规则 。如果未提供 –zone= 选项，则将使用默认区域。</cidr></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–add-interface=<interface></interface></td>\n<td>将来自<interface>网卡的所有流量路由到指定区域。如果未提供 –zone=选项，则将使用默认区域。</interface></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–change-interface=<interface></interface></td>\n<td>将接口与 <zone>而非其当前区域关联。如果未提供 –zone 选项，则将使用默认区域</zone></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–list-all</td>\n<td>列出<zone>的所有已经配置接口、源、服务和端口。如果未提供 –zone 选项，则将使用默认区域</zone></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–list-all-zoness</td>\n<td>检索所有区域的所有信息。（接口、源、服务、端口）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–add-service=<service></service></td>\n<td>允许到<service>的流量。如果未提供–zone 选项。则将使用默认区域</service></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–add-port=&lt;PORT/PROTOCOL&gt;</td>\n<td>允许到&lt;PORT/PROTOCOL&gt;端口的流量。如果未提供 –zone 则将使用默认区域</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–remove-service=<service></service></td>\n<td>从区域的允许 列表中删除<service>.如果未提供 –zone 选项则将使用默认区域</service></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–remove-port=&lt;PORT/PROTOCAL&gt;</td>\n<td>从区域的允许列表中删除&lt;PORT/PROTOCOL&gt;端口。如果未提供 –zone 选项，则将使用默认区域</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–reload</td>\n<td>丢弃运行时配置并应用永久配置</td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"firewall-cmd-示例：\"><a href=\"#firewall-cmd-示例：\" class=\"headerlink\" title=\"firewall-cmd 示例：\"></a>firewall-cmd 示例：</h6><p>下例显示默认区域设备为 dmz ,来自192.168.0.0/24 网络的所有流量都被分配给 internal 区域。而 internal 区域上打开了用于mysql 的网络端口<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --<span class=\"built_in\">set</span>-default-zone=dmz</span><br><span class=\"line\">firewall-cmd --<span class=\"built_in\">set</span>-source=192.168.0.0/24 --zone=internal    <span class=\"comment\">#临时生效</span></span><br><span class=\"line\">firewall-cmd --add-service=mysql --zone=internal    <span class=\"comment\">#临时生效</span></span><br><span class=\"line\">firewall-cmd --permanent --<span class=\"built_in\">set</span>-source=192.168.0.0/24 --zone=internal    <span class=\"comment\">#永久配置</span></span><br><span class=\"line\">firewall-cmd --permanent --<span class=\"built_in\">set</span>-service=mysql --zone=internal    <span class=\"comment\">#永久配置</span></span><br><span class=\"line\">firewall-cmd --reload    <span class=\"comment\">#永久配置才需要</span></span><br></pre></td></tr></table></figure></p>\n<h6 id=\"tips-2\"><a href=\"#tips-2\" class=\"headerlink\" title=\"tips:\"></a>tips:</h6><p>对于 firewalld 的基本语法不够的情况，系统管理员还可以添加富规则（一种更具表达力的语法）来编写更加复杂的规则，如果富规则语法也不够，系统管理员还可以直接配置规则，基本上是将与 firewalld 规则混合使用的原始 iptables 语法。</p>\n"},{"title":"RH134 第四章 计划将来的linux 任务","url":"354.html","id":"354","date":"2018-05-14T01:25:12.000Z","_content":"\n**使用at 计划一次性任务**\n\nat 不是单机工具，而是一个系统守护进程（atd），它有一组命令行工具可与守护进程（at,atd 等）进行交互。在默认的RHEL安装过程中，atd 守护进程将自动安装和启用。atd 守护进程可以在at软件包中找到。\n\n用户（包括root）可使用命令行工具 at 为 atd 守护进程的作业排除。atd 守护进程提供了 a 到 z 共26个队列。作业按字母顺序排列，队列越后，系统优先级越低\n\n**计划作业**\n\n使用命令 at <TIMESPEC> 可以计划新作业。at 随后会读取从stdin 执行的命令。对于较大的命令以及错别字敏感的命令，使用来自脚本文件(例如at now +5min <myscript) 的输入重定向比在终端窗口中手动输入所有命令要简单。手动输入命令时，可以通过 Ctrl +D 来完成输入。\n\n<TIMESPEC> 允许许多强大的组合，使用户（几乎）可以自由地来说明应运行作业的确切时间。通常这些组合以时间（例如02:00pm,13:59 甚至teatime）开头，后面接一个可选日期或将来的天数。\n\n*   now +5min\n\n*   teatime tomorrow (下等茶时间16:00)\n\n*   noon +4    days  (noon 12:00)\n\n*   5pm august 3 2016 \n\n\n**检查管理作业**\n\nstq 或者 at -l \n```sh\n[root@desktop0 ~]# at -l    #查看任务计划\n1Wed May  9 12:00:00 2018 a root\n#共4列\n```\n\n\n*   作业编号，当前为1\n\n*   该作业计划的日期和时间，Wed May 9 12:00:00 2018\n\n*   作业所在队列是a\n\n*   作业所有者（以及将运行作业的用户身份），当前为root\n\n\n\n\n普通的非特权用户只能查看和控制自己的作业。root 可以查看和管理所有作业  \n\n要检查执行作业时运行的实际命令，请使用命令at -c <JobNumber> ,该输入首先会显示所设置作业环境，以便在用户创建作业时反映用户的环境，后跟运行的实际命令。\n\n**删除作业**\n\natrm <JobNumber\\> 将会删除计划的作业。当不再需要作业时（例如，远程防火墙配置成功且不需要重置时）\n\natrm 1    #删除任务计划 1\n\n```sh\n\n[root@desktop0 ~]# echo \"date > ~/myjob\" | at now +3min    #设置任务计划\njob 4 at Tue May  8 15:16:00 2018\n[root@desktop0 ~]# atq        #查看任务计划\n4Tue May  8 15:16:00 2018 a root\n\n[root@desktop0 ~]# at -q g teatime tomorrow    #在任务队列 g 创建作业任务\nat> touch /home/student/tea            #任务内容\nat> <EOT>                        #Ctrl + D 退出任务编辑\njob 6 at Wed May  9 16:00:00 2018\n[root@desktop0 ~]# atq        #   查看任务\n6Wed May  9 16:00:00 2018 g root\n[root@desktop0 ~]# at -q b 16:05 tomorrow    #在任务队列 b 创建作业任务\nat> touch /home/student/cookies\nat> <EOT>\njob 7 at Wed May  9 16:05:00 2018\n[root@desktop0 ~]# atq    #查看\n6\tWed May  9 16:00:00 2018 g root\n7\tWed May  9 16:05:00 2018 b root\n[root@desktop0 ~]# at -c 6     #查看作业任务6的详细信息\n[root@desktop0 ~]# atrm 6    #删除\n[root@desktop0 ~]# atq\n7\tWed May  9 16:05:00 2018 b root\n```\n\n**使用cron计划周期性作业**\n\nat 是一次性作业任务，在RHEL 中附带了特别针对周期性作业的crond 守护进程，且默认开机启用并启动。crond 是由多个配置文件和系统范围内的文件控制的，每个用户对应一个配置文件（使用crontab(1) 命令进行编辑）。这些配置文件使用户和管理员拥有细微的控制权，可以控制应执行周期性作业的确切时间。crond 守护进程作为 cronie软件包的一部分安装。  \n\n如果从cron 作业运行的命令向末重定向的 stdout 或 stderr 生成任何输出，则crond 守护进程将尝试使用系统中配置的邮件服务器将该输出通过电子邮件发送给拥有该作业的用户（除非被覆盖）。根据环境，这可能需要其它配置。\n\n**计划作业**\n\n普通用户使用crontab 命令来管理作业，可以通过四种方式调用该\n命令：\n\n|命令|预期用途\n| :--\n|crontab -l|列出当前用户的计划任务\n|crontab -r|删除当前用户的所有计划任务\n|crontab -c|编辑当前用户的计划任务\n|crontab <filename>|删除所有作业，并替换为从<filename>读取作业。如果未指定任何文件，则将使用stdin \n\nroot 可以使用 -u  username 选项管理其他用户的作业。不建议使用crontab 命令来管理系统作业。\n\n在使用crontab -e 编辑作业时，编辑器会启动（如果editor 环境变量尚未设置其它值，则默认为vi），正在编辑的文件，每行均有一个作业。允许有空行，并且注释的行以 （#）开头。环境变量也可以使用格式：NAME=value 来声明，并且会影响声明所在行下面的所有行。crontab 中的常见变量包括 SHELL 和 MAILTO 。设置SHELL 变量将会更改用于其下面的行中执行命令的shell ，而设置 MAILTO 变量将会更改发送到电子邮件地址输出（所有）\n\n重要提示：发送电子邮件可能需要另外配置本地邮件服务器或系统中的SMTP转发\n\n各个作业都包含 6 个字段，详述了执行的时间和内容，如果前 5 个字段都与当前日期和时间相匹配，则会执行最后一个字段中的命令，这些字段包括：\n\n*   分钟 \n\n*   小时 \n\n*   几号 \n\n*   月份 \n\n*   星期几 \n\n*   命令\n\n\n如果几号和星期几字段都不是 \\* ，则该命令将在其中任一字段匹配时执行，例如 \\* \\* 15 * 5 ls ,将在每月 15 号或每周 5 执行ls命令\n\n前 5 个字段全部使用相同的语法规则：\n\n*   \\* 表示“无关紧要”/始终\n\n*   数字可用于指定分钟，小时，日期或工作日。（对于工作日0 - 7，0表示星期日，1表示星期一，依次类推。7也表示星期日）\n\n*   x-y 表示范围，x到y(含)\n\n*   x,y 表示列表。列表也可以包含范围，例如“分钟”列中的5,10-13,17,表示作业应当在每小时的第5，10-13，17分钟分别运行一次\n\n*   \\*/x 表示x的时间间隔，例如分钟列 \\*/7 表示每 7 分钟运行一次。\n\n\n此外，可以使用三个字母的英文缩写来表示月份和工作日，例如Jan ,Feb 以及 Tue , Wed .\n\n最后一个字段包含要执行的命令，如果尚未声明shell的环境变量，则该命令将由 /bin/sh 执行。如果命令中包含未转义的百分比符号(%),则该百分比符号将被当作新行，且百分比符号之后的所有内容将反馈到stdin 中的命令。\n```sh\n0 9 2 2 * /usr/local/bin/yearly\\_bakcup    #在每年的2月2上午9点整执行命令 /usr/local/yearly\\_backup\n*/7 9-16 * Jul 5 echo \"China\"      #在七月每周五的上午9点 和下午5点之间，每七分钟向该作业的所有者发送包含单词的 China 的电子 邮件\n58 23 * * 1-5 /usr/local/bin/daily\\_report    #在每个工作日午夜前2分钟运行命令/usr/local/daily\\_report\n0 9 * * 1-5 mutt -s \"Checking in\" boss@example.com % Hi there boss ,just checking in . \n#在每个工作日（周一到周五）的上午9点整，使用mutt 向 boss@example.com 发送邮件。\n```\n\n```sh\n[student@desktop0 ~]$ crontab -e\nno crontab for student - using an empty one\ncrontab: installing new crontab\n[student@desktop0 ~]$ crontab -l\n*/2 9-16 * * 1-5 date >> /home/student/my_first_cron_job\n[student@desktop0 ~]$ cat my_first_cron_job \nTue May  8 17:10:02 CST 2018\n[student@desktop0 ~]$ crontab -r\n[student@desktop0 ~]$ crontab -l\nno crontab for student\n[student@desktop0 ~]$\n```\n**计划系统cron作业**\n\n除了用户cron作业外，还有系统cron作业，系统cron作业不是使用crontab 命令定义的，而是在一组配置文件中配置的。这些配置文件之间主要区别在于一个额外的的字段，该字段位置位置星期几和命令字段之间，指定了作业应在哪个用户下运行。\n\n/etc/crontab 的随附注释中包含了实用的语法图\n\n![image.png](1525771056304457.png)\n\n系统作业配置文件在 /etc/crontab 和 /etc/cron.d/* .安装cron 作业的软件包应当通过在/etc/cron.d/ 中放置文件才能执行安装操作，但是，管理员还可以使用此位置来更轻松的将相关作业分到单个文件中，或者使用配置管理系统推送作业。\n\n还有预定义作业每小时，每天、每周和每月运行一次，这个作业将分别执行位于/etc/cron.hourly/ 、/etc/cron.daily/、/etc/cron.weekly 和 /etc/cron.monthly/ 中的所有脚本，请注意，这些目录包含可执行脚本，而不包含cron配置文件 。\n\n/etc/cron.hourly/* 脚本是使用run-parts 命令从/ec/cron.d/0hourly 中定义的作业执行的，每日、每周和每月的作业也使用run-parts命令执行，但是人其它配置文件 /etc/anacrontab 执行。  \n\n过程anacrontab 是由单独的守护进程(anacron)处理的，但是在RHEL 7 中，该文件由常规crond 守护进程解析。该文件旨在确保重要的作业始终运行，且不会因为系统在应执行作业时关闭或休眠而意外跳过。\n\n/etc/anacrontab 的语法与其它cron 配置文件有所不同。它每行正好包含四个字段：\n\nPeriod in days    #每多少天运行一次\nDelay in minutes     #在启动该作业前，cron守护进程应等待的时间\nJob identifier     #此为 /var/spool/anacron/ 中文件的名称，该文件将用于检查该作业是否已运行。在cron 从/etc/anacrontab 启动作业时，它会更新此文件的时间戳。同一时间戳可用于检查 作业上次运行的时间。\nCommand    #要执行的命令\n\n\n\n/etc/anacrontab 还包含使用语法 NAME=value 的环境变量声明，特别相关的是 START\\_HOURS\\_RANGE: 作业不会在些范围外启动。\n\n**管理临时文件**\n\n使用systemd-tmpfiles 管理临时文件\n\n用户高度可见的临时文件和目录（常规用户所使用和滥用的/tmp）  \n\n特定于任务的历史文件和目录（例如守护进程以及/run下特定用户的易失性目录，易失性的文件值存在内存中，在系统重启或断电时，所有内容都会丢失。）\n\n为保持系统充分运行，有必要创建那些不存在的目录和文件，因为守护进程可能会依靠它们存在，而清除旧文件后就不会填满磁盘空间或提供错误信息。\n\n旧版本中，系统管理员依靠RPM软件包和systemV初始脚本来创建这些目录，依靠名为tmpwatch的工具来配置目录中删除未使用的旧文件。在RHEL7 中，systemd 提供了一个更加结构化的可配置方法来管理临时目录和文件，systemd-tmpfiles.\n\n在systemd启动系统后，其中一个启动的服务单元是systemd-tmpfiles-setup。该服务运行命令：\n```sh\nsystemd-tmpfiles --create\nsystemd-tmpfiles --remove\nsystemd-tmpfiles --clean\n```\n\n\n该命令会从 /usr/lib/tmpfiles.d/\\*.conf、/run/tmpfiles.d/\\*.conf 和 /etc/tmpfiles.d/\\*.conf 读取配置文件。系统将会删除这些配置文件中标记要删除的任何文件和目录，并且会创建标记要创建（或修复权限）的任何文件和目录，并使其拥有正确的权限（如有必要）\n\n**定期清理**\n\n为确保长期运行的系统不会用陈旧数据填满磁盘，也有一个systemd 定时器单元会按固定间隔调用systemd-tmpfiles --clean \n\nsystemd 定时器单元是一类特殊的systemd服务，它有一个\\[Timer\\]块会指示同名服务的启动频率。\n\n在RHEL 7 系统中，systemd-tmpfiles-clean.timer 单元的配置如下所示：\n\n![blob.png](1526219726507971.png)\n\n这表示同名服务（systemd-tmpfiles-clean.service）将在systemd启动15分钟后启动，然后每隔24小时启动一次。\n\n命令systemd-tmpfiles --clean 解析的配置文件与systemd-tmpfiles --create 相同，但前者不会创建文件和目录，而是会清楚在比配置文件中定义的最长期限更近的时间尚未访问、更改或修改的所有文件。\n\n**tip:**\n\nman page tmpfiles.d(5)声称，系统会删除时间“长于”配置文件中日期字段的期限文件。这并不完全正确。\n\nLinux 文件系统中遵循PSOSIX标准的文件有三个时间戳：atime(上次访问文件的时间)、mtime（上次修改文件内容的时间）、以及 ctime （上次由 chown 、chmod等更改文件状态的时间）。大多数 Linux 文件系统都没有创建时间戳。这在类似Unlix 的文件系统中很常见。\n\n如果这三个时间戳比systemd-tmpfiles期限配置都旧，则文件将会被视为未使用。如果其中任一时间戳比期限配置新，则根据systemd-tmpfiles的期限将不会删除文件。\n\n可以在文件上运行stat 命令(stat filename)，以查看所有这三个时间戳的值，ls -l 命令通常会显示mtime。\n\n\n\n**systemd-tmpfiles 配置文件**\n\ntmpfiles.d(5) 手册中详述了system-tmpfiles的配置文件格式\n\n基本语法由七列构成：“类型”、“路径”、“模式”、UID、GID、“期限”和“参数”。“类型”指的是systemd-tmpfiles应执行的操作；例如 d 表示创建还不存在的目录，或者 Z 表示以递归方式恢复SElinux 上下文以及文件权限和所有权。  \n\nd /run/systemd/seats 0755 root root -\n\\#在创建文件和目录是，如果目录/run/systemd/seats还不存在，则创建该目录，所有者为用户root和组root,权限设置为 rwxr-xr-x.系统不会清除该目录。\nD /home/student 0700 student student 1d\n\\#如果目录/home/student 还不存在，请创建该目录。如果存在，则清空其所有内容。运行systemd-timpfiles --clean 时，删除在超过一天时间内尚未被访问、更改或修改过的所有文件\nL /run/fstablink - root root /etc/fastab\n\\#创建指向/etc/fstab的符号链接 /run/fstablink 。绝对不要自动清除这一行。\n\n\n\n配置文件优先级，配置文件位置可位于三个位置：\n\n/etc/tmpfiles.d/*.conf\n/run/tmpfiles.d/*.conf\n/usr/lib/tmpfiles.d/*.conf\n\n\n\n/usr/lib/tmpfiles.d/ 中的文件是由相关RPM软件包提供的，不应该由系统管理员进行编辑。\n\n/run/tmpfiles.d/ 下的文件本身是易失性文件，通常有守护进程用来管理自己运行时的临时文件。\n\n/etc/tmpfiles.d/ 下的文件旨在供管理员配置自定义临时位置，以及覆盖供应商提供的默认值。\n\n如果出现同名配置文件优先权依次是： /etc/tmpfiles.d/ >> /run/tmpfiles.d/ >> /usr/lib/tmpfiles.d/ 。\n\n给定优先权规则后，管理员将相关文件复制到/etc/tmpfiles.d/ 然后编辑该配置文件，即可轻松覆盖供应商提供的设置。如果以这种方式工作，则确保可从中央配置管理系统轻松管理管理员提供的设置，并且软件包的更新不会覆盖这些设置。  \n\n在测试新配置或修改后的配置时，对于仅在一个配置文件外应用命令会十分有用。在命令行中指定配置文件中的名称即可实现这一点。\n\nsystemd-tmpfiles --creat tmp.conf    #测试tmp.conf文件\nsystemd-tmpfiles --clean tmp.conf\n","source":"_posts/rh134-e7-ac-ac-e5-9b-9b-e7-ab-a0-e8-ae-a1-e5-88-92-e5-b0-86-e6-9d-a5-e7-9a-84linux-e4-bb-bb-e5-8a-a1.md","raw":"---\ntitle: RH134 第四章 计划将来的linux 任务\nurl: 354.html\nid: 354\ncategories:\n  - RHEL134\ndate: 2018-05-14 09:25:12\ntags:\n---\n\n**使用at 计划一次性任务**\n\nat 不是单机工具，而是一个系统守护进程（atd），它有一组命令行工具可与守护进程（at,atd 等）进行交互。在默认的RHEL安装过程中，atd 守护进程将自动安装和启用。atd 守护进程可以在at软件包中找到。\n\n用户（包括root）可使用命令行工具 at 为 atd 守护进程的作业排除。atd 守护进程提供了 a 到 z 共26个队列。作业按字母顺序排列，队列越后，系统优先级越低\n\n**计划作业**\n\n使用命令 at <TIMESPEC> 可以计划新作业。at 随后会读取从stdin 执行的命令。对于较大的命令以及错别字敏感的命令，使用来自脚本文件(例如at now +5min <myscript) 的输入重定向比在终端窗口中手动输入所有命令要简单。手动输入命令时，可以通过 Ctrl +D 来完成输入。\n\n<TIMESPEC> 允许许多强大的组合，使用户（几乎）可以自由地来说明应运行作业的确切时间。通常这些组合以时间（例如02:00pm,13:59 甚至teatime）开头，后面接一个可选日期或将来的天数。\n\n*   now +5min\n\n*   teatime tomorrow (下等茶时间16:00)\n\n*   noon +4    days  (noon 12:00)\n\n*   5pm august 3 2016 \n\n\n**检查管理作业**\n\nstq 或者 at -l \n```sh\n[root@desktop0 ~]# at -l    #查看任务计划\n1Wed May  9 12:00:00 2018 a root\n#共4列\n```\n\n\n*   作业编号，当前为1\n\n*   该作业计划的日期和时间，Wed May 9 12:00:00 2018\n\n*   作业所在队列是a\n\n*   作业所有者（以及将运行作业的用户身份），当前为root\n\n\n\n\n普通的非特权用户只能查看和控制自己的作业。root 可以查看和管理所有作业  \n\n要检查执行作业时运行的实际命令，请使用命令at -c <JobNumber> ,该输入首先会显示所设置作业环境，以便在用户创建作业时反映用户的环境，后跟运行的实际命令。\n\n**删除作业**\n\natrm <JobNumber\\> 将会删除计划的作业。当不再需要作业时（例如，远程防火墙配置成功且不需要重置时）\n\natrm 1    #删除任务计划 1\n\n```sh\n\n[root@desktop0 ~]# echo \"date > ~/myjob\" | at now +3min    #设置任务计划\njob 4 at Tue May  8 15:16:00 2018\n[root@desktop0 ~]# atq        #查看任务计划\n4Tue May  8 15:16:00 2018 a root\n\n[root@desktop0 ~]# at -q g teatime tomorrow    #在任务队列 g 创建作业任务\nat> touch /home/student/tea            #任务内容\nat> <EOT>                        #Ctrl + D 退出任务编辑\njob 6 at Wed May  9 16:00:00 2018\n[root@desktop0 ~]# atq        #   查看任务\n6Wed May  9 16:00:00 2018 g root\n[root@desktop0 ~]# at -q b 16:05 tomorrow    #在任务队列 b 创建作业任务\nat> touch /home/student/cookies\nat> <EOT>\njob 7 at Wed May  9 16:05:00 2018\n[root@desktop0 ~]# atq    #查看\n6\tWed May  9 16:00:00 2018 g root\n7\tWed May  9 16:05:00 2018 b root\n[root@desktop0 ~]# at -c 6     #查看作业任务6的详细信息\n[root@desktop0 ~]# atrm 6    #删除\n[root@desktop0 ~]# atq\n7\tWed May  9 16:05:00 2018 b root\n```\n\n**使用cron计划周期性作业**\n\nat 是一次性作业任务，在RHEL 中附带了特别针对周期性作业的crond 守护进程，且默认开机启用并启动。crond 是由多个配置文件和系统范围内的文件控制的，每个用户对应一个配置文件（使用crontab(1) 命令进行编辑）。这些配置文件使用户和管理员拥有细微的控制权，可以控制应执行周期性作业的确切时间。crond 守护进程作为 cronie软件包的一部分安装。  \n\n如果从cron 作业运行的命令向末重定向的 stdout 或 stderr 生成任何输出，则crond 守护进程将尝试使用系统中配置的邮件服务器将该输出通过电子邮件发送给拥有该作业的用户（除非被覆盖）。根据环境，这可能需要其它配置。\n\n**计划作业**\n\n普通用户使用crontab 命令来管理作业，可以通过四种方式调用该\n命令：\n\n|命令|预期用途\n| :--\n|crontab -l|列出当前用户的计划任务\n|crontab -r|删除当前用户的所有计划任务\n|crontab -c|编辑当前用户的计划任务\n|crontab <filename>|删除所有作业，并替换为从<filename>读取作业。如果未指定任何文件，则将使用stdin \n\nroot 可以使用 -u  username 选项管理其他用户的作业。不建议使用crontab 命令来管理系统作业。\n\n在使用crontab -e 编辑作业时，编辑器会启动（如果editor 环境变量尚未设置其它值，则默认为vi），正在编辑的文件，每行均有一个作业。允许有空行，并且注释的行以 （#）开头。环境变量也可以使用格式：NAME=value 来声明，并且会影响声明所在行下面的所有行。crontab 中的常见变量包括 SHELL 和 MAILTO 。设置SHELL 变量将会更改用于其下面的行中执行命令的shell ，而设置 MAILTO 变量将会更改发送到电子邮件地址输出（所有）\n\n重要提示：发送电子邮件可能需要另外配置本地邮件服务器或系统中的SMTP转发\n\n各个作业都包含 6 个字段，详述了执行的时间和内容，如果前 5 个字段都与当前日期和时间相匹配，则会执行最后一个字段中的命令，这些字段包括：\n\n*   分钟 \n\n*   小时 \n\n*   几号 \n\n*   月份 \n\n*   星期几 \n\n*   命令\n\n\n如果几号和星期几字段都不是 \\* ，则该命令将在其中任一字段匹配时执行，例如 \\* \\* 15 * 5 ls ,将在每月 15 号或每周 5 执行ls命令\n\n前 5 个字段全部使用相同的语法规则：\n\n*   \\* 表示“无关紧要”/始终\n\n*   数字可用于指定分钟，小时，日期或工作日。（对于工作日0 - 7，0表示星期日，1表示星期一，依次类推。7也表示星期日）\n\n*   x-y 表示范围，x到y(含)\n\n*   x,y 表示列表。列表也可以包含范围，例如“分钟”列中的5,10-13,17,表示作业应当在每小时的第5，10-13，17分钟分别运行一次\n\n*   \\*/x 表示x的时间间隔，例如分钟列 \\*/7 表示每 7 分钟运行一次。\n\n\n此外，可以使用三个字母的英文缩写来表示月份和工作日，例如Jan ,Feb 以及 Tue , Wed .\n\n最后一个字段包含要执行的命令，如果尚未声明shell的环境变量，则该命令将由 /bin/sh 执行。如果命令中包含未转义的百分比符号(%),则该百分比符号将被当作新行，且百分比符号之后的所有内容将反馈到stdin 中的命令。\n```sh\n0 9 2 2 * /usr/local/bin/yearly\\_bakcup    #在每年的2月2上午9点整执行命令 /usr/local/yearly\\_backup\n*/7 9-16 * Jul 5 echo \"China\"      #在七月每周五的上午9点 和下午5点之间，每七分钟向该作业的所有者发送包含单词的 China 的电子 邮件\n58 23 * * 1-5 /usr/local/bin/daily\\_report    #在每个工作日午夜前2分钟运行命令/usr/local/daily\\_report\n0 9 * * 1-5 mutt -s \"Checking in\" boss@example.com % Hi there boss ,just checking in . \n#在每个工作日（周一到周五）的上午9点整，使用mutt 向 boss@example.com 发送邮件。\n```\n\n```sh\n[student@desktop0 ~]$ crontab -e\nno crontab for student - using an empty one\ncrontab: installing new crontab\n[student@desktop0 ~]$ crontab -l\n*/2 9-16 * * 1-5 date >> /home/student/my_first_cron_job\n[student@desktop0 ~]$ cat my_first_cron_job \nTue May  8 17:10:02 CST 2018\n[student@desktop0 ~]$ crontab -r\n[student@desktop0 ~]$ crontab -l\nno crontab for student\n[student@desktop0 ~]$\n```\n**计划系统cron作业**\n\n除了用户cron作业外，还有系统cron作业，系统cron作业不是使用crontab 命令定义的，而是在一组配置文件中配置的。这些配置文件之间主要区别在于一个额外的的字段，该字段位置位置星期几和命令字段之间，指定了作业应在哪个用户下运行。\n\n/etc/crontab 的随附注释中包含了实用的语法图\n\n![image.png](1525771056304457.png)\n\n系统作业配置文件在 /etc/crontab 和 /etc/cron.d/* .安装cron 作业的软件包应当通过在/etc/cron.d/ 中放置文件才能执行安装操作，但是，管理员还可以使用此位置来更轻松的将相关作业分到单个文件中，或者使用配置管理系统推送作业。\n\n还有预定义作业每小时，每天、每周和每月运行一次，这个作业将分别执行位于/etc/cron.hourly/ 、/etc/cron.daily/、/etc/cron.weekly 和 /etc/cron.monthly/ 中的所有脚本，请注意，这些目录包含可执行脚本，而不包含cron配置文件 。\n\n/etc/cron.hourly/* 脚本是使用run-parts 命令从/ec/cron.d/0hourly 中定义的作业执行的，每日、每周和每月的作业也使用run-parts命令执行，但是人其它配置文件 /etc/anacrontab 执行。  \n\n过程anacrontab 是由单独的守护进程(anacron)处理的，但是在RHEL 7 中，该文件由常规crond 守护进程解析。该文件旨在确保重要的作业始终运行，且不会因为系统在应执行作业时关闭或休眠而意外跳过。\n\n/etc/anacrontab 的语法与其它cron 配置文件有所不同。它每行正好包含四个字段：\n\nPeriod in days    #每多少天运行一次\nDelay in minutes     #在启动该作业前，cron守护进程应等待的时间\nJob identifier     #此为 /var/spool/anacron/ 中文件的名称，该文件将用于检查该作业是否已运行。在cron 从/etc/anacrontab 启动作业时，它会更新此文件的时间戳。同一时间戳可用于检查 作业上次运行的时间。\nCommand    #要执行的命令\n\n\n\n/etc/anacrontab 还包含使用语法 NAME=value 的环境变量声明，特别相关的是 START\\_HOURS\\_RANGE: 作业不会在些范围外启动。\n\n**管理临时文件**\n\n使用systemd-tmpfiles 管理临时文件\n\n用户高度可见的临时文件和目录（常规用户所使用和滥用的/tmp）  \n\n特定于任务的历史文件和目录（例如守护进程以及/run下特定用户的易失性目录，易失性的文件值存在内存中，在系统重启或断电时，所有内容都会丢失。）\n\n为保持系统充分运行，有必要创建那些不存在的目录和文件，因为守护进程可能会依靠它们存在，而清除旧文件后就不会填满磁盘空间或提供错误信息。\n\n旧版本中，系统管理员依靠RPM软件包和systemV初始脚本来创建这些目录，依靠名为tmpwatch的工具来配置目录中删除未使用的旧文件。在RHEL7 中，systemd 提供了一个更加结构化的可配置方法来管理临时目录和文件，systemd-tmpfiles.\n\n在systemd启动系统后，其中一个启动的服务单元是systemd-tmpfiles-setup。该服务运行命令：\n```sh\nsystemd-tmpfiles --create\nsystemd-tmpfiles --remove\nsystemd-tmpfiles --clean\n```\n\n\n该命令会从 /usr/lib/tmpfiles.d/\\*.conf、/run/tmpfiles.d/\\*.conf 和 /etc/tmpfiles.d/\\*.conf 读取配置文件。系统将会删除这些配置文件中标记要删除的任何文件和目录，并且会创建标记要创建（或修复权限）的任何文件和目录，并使其拥有正确的权限（如有必要）\n\n**定期清理**\n\n为确保长期运行的系统不会用陈旧数据填满磁盘，也有一个systemd 定时器单元会按固定间隔调用systemd-tmpfiles --clean \n\nsystemd 定时器单元是一类特殊的systemd服务，它有一个\\[Timer\\]块会指示同名服务的启动频率。\n\n在RHEL 7 系统中，systemd-tmpfiles-clean.timer 单元的配置如下所示：\n\n![blob.png](1526219726507971.png)\n\n这表示同名服务（systemd-tmpfiles-clean.service）将在systemd启动15分钟后启动，然后每隔24小时启动一次。\n\n命令systemd-tmpfiles --clean 解析的配置文件与systemd-tmpfiles --create 相同，但前者不会创建文件和目录，而是会清楚在比配置文件中定义的最长期限更近的时间尚未访问、更改或修改的所有文件。\n\n**tip:**\n\nman page tmpfiles.d(5)声称，系统会删除时间“长于”配置文件中日期字段的期限文件。这并不完全正确。\n\nLinux 文件系统中遵循PSOSIX标准的文件有三个时间戳：atime(上次访问文件的时间)、mtime（上次修改文件内容的时间）、以及 ctime （上次由 chown 、chmod等更改文件状态的时间）。大多数 Linux 文件系统都没有创建时间戳。这在类似Unlix 的文件系统中很常见。\n\n如果这三个时间戳比systemd-tmpfiles期限配置都旧，则文件将会被视为未使用。如果其中任一时间戳比期限配置新，则根据systemd-tmpfiles的期限将不会删除文件。\n\n可以在文件上运行stat 命令(stat filename)，以查看所有这三个时间戳的值，ls -l 命令通常会显示mtime。\n\n\n\n**systemd-tmpfiles 配置文件**\n\ntmpfiles.d(5) 手册中详述了system-tmpfiles的配置文件格式\n\n基本语法由七列构成：“类型”、“路径”、“模式”、UID、GID、“期限”和“参数”。“类型”指的是systemd-tmpfiles应执行的操作；例如 d 表示创建还不存在的目录，或者 Z 表示以递归方式恢复SElinux 上下文以及文件权限和所有权。  \n\nd /run/systemd/seats 0755 root root -\n\\#在创建文件和目录是，如果目录/run/systemd/seats还不存在，则创建该目录，所有者为用户root和组root,权限设置为 rwxr-xr-x.系统不会清除该目录。\nD /home/student 0700 student student 1d\n\\#如果目录/home/student 还不存在，请创建该目录。如果存在，则清空其所有内容。运行systemd-timpfiles --clean 时，删除在超过一天时间内尚未被访问、更改或修改过的所有文件\nL /run/fstablink - root root /etc/fastab\n\\#创建指向/etc/fstab的符号链接 /run/fstablink 。绝对不要自动清除这一行。\n\n\n\n配置文件优先级，配置文件位置可位于三个位置：\n\n/etc/tmpfiles.d/*.conf\n/run/tmpfiles.d/*.conf\n/usr/lib/tmpfiles.d/*.conf\n\n\n\n/usr/lib/tmpfiles.d/ 中的文件是由相关RPM软件包提供的，不应该由系统管理员进行编辑。\n\n/run/tmpfiles.d/ 下的文件本身是易失性文件，通常有守护进程用来管理自己运行时的临时文件。\n\n/etc/tmpfiles.d/ 下的文件旨在供管理员配置自定义临时位置，以及覆盖供应商提供的默认值。\n\n如果出现同名配置文件优先权依次是： /etc/tmpfiles.d/ >> /run/tmpfiles.d/ >> /usr/lib/tmpfiles.d/ 。\n\n给定优先权规则后，管理员将相关文件复制到/etc/tmpfiles.d/ 然后编辑该配置文件，即可轻松覆盖供应商提供的设置。如果以这种方式工作，则确保可从中央配置管理系统轻松管理管理员提供的设置，并且软件包的更新不会覆盖这些设置。  \n\n在测试新配置或修改后的配置时，对于仅在一个配置文件外应用命令会十分有用。在命令行中指定配置文件中的名称即可实现这一点。\n\nsystemd-tmpfiles --creat tmp.conf    #测试tmp.conf文件\nsystemd-tmpfiles --clean tmp.conf\n","slug":"rh134-e7-ac-ac-e5-9b-9b-e7-ab-a0-e8-ae-a1-e5-88-92-e5-b0-86-e6-9d-a5-e7-9a-84linux-e4-bb-bb-e5-8a-a1","published":1,"updated":"2019-01-06T17:34:45.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqi290021lxkjyuwsqv3o","content":"<p><strong>使用at 计划一次性任务</strong></p>\n<p>at 不是单机工具，而是一个系统守护进程（atd），它有一组命令行工具可与守护进程（at,atd 等）进行交互。在默认的RHEL安装过程中，atd 守护进程将自动安装和启用。atd 守护进程可以在at软件包中找到。</p>\n<p>用户（包括root）可使用命令行工具 at 为 atd 守护进程的作业排除。atd 守护进程提供了 a 到 z 共26个队列。作业按字母顺序排列，队列越后，系统优先级越低</p>\n<p><strong>计划作业</strong></p>\n<p>使用命令 at <timespec> 可以计划新作业。at 随后会读取从stdin 执行的命令。对于较大的命令以及错别字敏感的命令，使用来自脚本文件(例如at now +5min &lt;myscript) 的输入重定向比在终端窗口中手动输入所有命令要简单。手动输入命令时，可以通过 Ctrl +D 来完成输入。</timespec></p>\n<p><timespec> 允许许多强大的组合，使用户（几乎）可以自由地来说明应运行作业的确切时间。通常这些组合以时间（例如02:00pm,13:59 甚至teatime）开头，后面接一个可选日期或将来的天数。</timespec></p>\n<ul>\n<li><p>now +5min</p>\n</li>\n<li><p>teatime tomorrow (下等茶时间16:00)</p>\n</li>\n<li><p>noon +4    days  (noon 12:00)</p>\n</li>\n<li><p>5pm august 3 2016 </p>\n</li>\n</ul>\n<p><strong>检查管理作业</strong></p>\n<p>stq 或者 at -l<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@desktop0 ~]<span class=\"comment\"># at -l    #查看任务计划</span></span><br><span class=\"line\">1Wed May  9 12:00:00 2018 a root</span><br><span class=\"line\"><span class=\"comment\">#共4列</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>作业编号，当前为1</p>\n</li>\n<li><p>该作业计划的日期和时间，Wed May 9 12:00:00 2018</p>\n</li>\n<li><p>作业所在队列是a</p>\n</li>\n<li><p>作业所有者（以及将运行作业的用户身份），当前为root</p>\n</li>\n</ul>\n<p>普通的非特权用户只能查看和控制自己的作业。root 可以查看和管理所有作业  </p>\n<p>要检查执行作业时运行的实际命令，请使用命令at -c <jobnumber> ,该输入首先会显示所设置作业环境，以便在用户创建作业时反映用户的环境，后跟运行的实际命令。</jobnumber></p>\n<p><strong>删除作业</strong></p>\n<p>atrm &lt;JobNumber> 将会删除计划的作业。当不再需要作业时（例如，远程防火墙配置成功且不需要重置时）</p>\n<p>atrm 1    #删除任务计划 1</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@desktop0 ~]<span class=\"comment\"># echo \"date &gt; ~/myjob\" | at now +3min    #设置任务计划</span></span><br><span class=\"line\">job 4 at Tue May  8 15:16:00 2018</span><br><span class=\"line\">[root@desktop0 ~]<span class=\"comment\"># atq        #查看任务计划</span></span><br><span class=\"line\">4Tue May  8 15:16:00 2018 a root</span><br><span class=\"line\"></span><br><span class=\"line\">[root@desktop0 ~]<span class=\"comment\"># at -q g teatime tomorrow    #在任务队列 g 创建作业任务</span></span><br><span class=\"line\">at&gt; touch /home/student/tea            <span class=\"comment\">#任务内容</span></span><br><span class=\"line\">at&gt; &lt;EOT&gt;                        <span class=\"comment\">#Ctrl + D 退出任务编辑</span></span><br><span class=\"line\">job 6 at Wed May  9 16:00:00 2018</span><br><span class=\"line\">[root@desktop0 ~]<span class=\"comment\"># atq        #   查看任务</span></span><br><span class=\"line\">6Wed May  9 16:00:00 2018 g root</span><br><span class=\"line\">[root@desktop0 ~]<span class=\"comment\"># at -q b 16:05 tomorrow    #在任务队列 b 创建作业任务</span></span><br><span class=\"line\">at&gt; touch /home/student/cookies</span><br><span class=\"line\">at&gt; &lt;EOT&gt;</span><br><span class=\"line\">job 7 at Wed May  9 16:05:00 2018</span><br><span class=\"line\">[root@desktop0 ~]<span class=\"comment\"># atq    #查看</span></span><br><span class=\"line\">6\tWed May  9 16:00:00 2018 g root</span><br><span class=\"line\">7\tWed May  9 16:05:00 2018 b root</span><br><span class=\"line\">[root@desktop0 ~]<span class=\"comment\"># at -c 6     #查看作业任务6的详细信息</span></span><br><span class=\"line\">[root@desktop0 ~]<span class=\"comment\"># atrm 6    #删除</span></span><br><span class=\"line\">[root@desktop0 ~]<span class=\"comment\"># atq</span></span><br><span class=\"line\">7\tWed May  9 16:05:00 2018 b root</span><br></pre></td></tr></table></figure>\n<p><strong>使用cron计划周期性作业</strong></p>\n<p>at 是一次性作业任务，在RHEL 中附带了特别针对周期性作业的crond 守护进程，且默认开机启用并启动。crond 是由多个配置文件和系统范围内的文件控制的，每个用户对应一个配置文件（使用crontab(1) 命令进行编辑）。这些配置文件使用户和管理员拥有细微的控制权，可以控制应执行周期性作业的确切时间。crond 守护进程作为 cronie软件包的一部分安装。  </p>\n<p>如果从cron 作业运行的命令向末重定向的 stdout 或 stderr 生成任何输出，则crond 守护进程将尝试使用系统中配置的邮件服务器将该输出通过电子邮件发送给拥有该作业的用户（除非被覆盖）。根据环境，这可能需要其它配置。</p>\n<p><strong>计划作业</strong></p>\n<p>普通用户使用crontab 命令来管理作业，可以通过四种方式调用该<br>命令：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th>预期用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">crontab -l</td>\n<td>列出当前用户的计划任务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">crontab -r</td>\n<td>删除当前用户的所有计划任务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">crontab -c</td>\n<td>编辑当前用户的计划任务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">crontab <filename></filename></td>\n<td>删除所有作业，并替换为从<filename>读取作业。如果未指定任何文件，则将使用stdin </filename></td>\n</tr>\n</tbody>\n</table>\n<p>root 可以使用 -u  username 选项管理其他用户的作业。不建议使用crontab 命令来管理系统作业。</p>\n<p>在使用crontab -e 编辑作业时，编辑器会启动（如果editor 环境变量尚未设置其它值，则默认为vi），正在编辑的文件，每行均有一个作业。允许有空行，并且注释的行以 （#）开头。环境变量也可以使用格式：NAME=value 来声明，并且会影响声明所在行下面的所有行。crontab 中的常见变量包括 SHELL 和 MAILTO 。设置SHELL 变量将会更改用于其下面的行中执行命令的shell ，而设置 MAILTO 变量将会更改发送到电子邮件地址输出（所有）</p>\n<p>重要提示：发送电子邮件可能需要另外配置本地邮件服务器或系统中的SMTP转发</p>\n<p>各个作业都包含 6 个字段，详述了执行的时间和内容，如果前 5 个字段都与当前日期和时间相匹配，则会执行最后一个字段中的命令，这些字段包括：</p>\n<ul>\n<li><p>分钟 </p>\n</li>\n<li><p>小时 </p>\n</li>\n<li><p>几号 </p>\n</li>\n<li><p>月份 </p>\n</li>\n<li><p>星期几 </p>\n</li>\n<li><p>命令</p>\n</li>\n</ul>\n<p>如果几号和星期几字段都不是 * ，则该命令将在其中任一字段匹配时执行，例如 * * 15 * 5 ls ,将在每月 15 号或每周 5 执行ls命令</p>\n<p>前 5 个字段全部使用相同的语法规则：</p>\n<ul>\n<li><p>* 表示“无关紧要”/始终</p>\n</li>\n<li><p>数字可用于指定分钟，小时，日期或工作日。（对于工作日0 - 7，0表示星期日，1表示星期一，依次类推。7也表示星期日）</p>\n</li>\n<li><p>x-y 表示范围，x到y(含)</p>\n</li>\n<li><p>x,y 表示列表。列表也可以包含范围，例如“分钟”列中的5,10-13,17,表示作业应当在每小时的第5，10-13，17分钟分别运行一次</p>\n</li>\n<li><p>*/x 表示x的时间间隔，例如分钟列 */7 表示每 7 分钟运行一次。</p>\n</li>\n</ul>\n<p>此外，可以使用三个字母的英文缩写来表示月份和工作日，例如Jan ,Feb 以及 Tue , Wed .</p>\n<p>最后一个字段包含要执行的命令，如果尚未声明shell的环境变量，则该命令将由 /bin/sh 执行。如果命令中包含未转义的百分比符号(%),则该百分比符号将被当作新行，且百分比符号之后的所有内容将反馈到stdin 中的命令。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 9 2 2 * /usr/<span class=\"built_in\">local</span>/bin/yearly\\_bakcup    <span class=\"comment\">#在每年的2月2上午9点整执行命令 /usr/local/yearly\\_backup</span></span><br><span class=\"line\">*/7 9-16 * Jul 5 <span class=\"built_in\">echo</span> <span class=\"string\">\"China\"</span>      <span class=\"comment\">#在七月每周五的上午9点 和下午5点之间，每七分钟向该作业的所有者发送包含单词的 China 的电子 邮件</span></span><br><span class=\"line\">58 23 * * 1-5 /usr/<span class=\"built_in\">local</span>/bin/daily\\_report    <span class=\"comment\">#在每个工作日午夜前2分钟运行命令/usr/local/daily\\_report</span></span><br><span class=\"line\">0 9 * * 1-5 mutt -s <span class=\"string\">\"Checking in\"</span> boss@example.com % Hi there boss ,just checking <span class=\"keyword\">in</span> . </span><br><span class=\"line\"><span class=\"comment\">#在每个工作日（周一到周五）的上午9点整，使用mutt 向 boss@example.com 发送邮件。</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 ~]$ crontab -e</span><br><span class=\"line\">no crontab <span class=\"keyword\">for</span> student - using an empty one</span><br><span class=\"line\">crontab: installing new crontab</span><br><span class=\"line\">[student@desktop0 ~]$ crontab -l</span><br><span class=\"line\">*/2 9-16 * * 1-5 date &gt;&gt; /home/student/my_first_cron_job</span><br><span class=\"line\">[student@desktop0 ~]$ cat my_first_cron_job </span><br><span class=\"line\">Tue May  8 17:10:02 CST 2018</span><br><span class=\"line\">[student@desktop0 ~]$ crontab -r</span><br><span class=\"line\">[student@desktop0 ~]$ crontab -l</span><br><span class=\"line\">no crontab <span class=\"keyword\">for</span> student</span><br><span class=\"line\">[student@desktop0 ~]$</span><br></pre></td></tr></table></figure>\n<p><strong>计划系统cron作业</strong></p>\n<p>除了用户cron作业外，还有系统cron作业，系统cron作业不是使用crontab 命令定义的，而是在一组配置文件中配置的。这些配置文件之间主要区别在于一个额外的的字段，该字段位置位置星期几和命令字段之间，指定了作业应在哪个用户下运行。</p>\n<p>/etc/crontab 的随附注释中包含了实用的语法图</p>\n<p><img src=\"/2018/05/14/rh134-e7-ac-ac-e5-9b-9b-e7-ab-a0-e8-ae-a1-e5-88-92-e5-b0-86-e6-9d-a5-e7-9a-84linux-e4-bb-bb-e5-8a-a1/1525771056304457.png\" alt=\"image.png\"></p>\n<p>系统作业配置文件在 /etc/crontab 和 /etc/cron.d/* .安装cron 作业的软件包应当通过在/etc/cron.d/ 中放置文件才能执行安装操作，但是，管理员还可以使用此位置来更轻松的将相关作业分到单个文件中，或者使用配置管理系统推送作业。</p>\n<p>还有预定义作业每小时，每天、每周和每月运行一次，这个作业将分别执行位于/etc/cron.hourly/ 、/etc/cron.daily/、/etc/cron.weekly 和 /etc/cron.monthly/ 中的所有脚本，请注意，这些目录包含可执行脚本，而不包含cron配置文件 。</p>\n<p>/etc/cron.hourly/* 脚本是使用run-parts 命令从/ec/cron.d/0hourly 中定义的作业执行的，每日、每周和每月的作业也使用run-parts命令执行，但是人其它配置文件 /etc/anacrontab 执行。  </p>\n<p>过程anacrontab 是由单独的守护进程(anacron)处理的，但是在RHEL 7 中，该文件由常规crond 守护进程解析。该文件旨在确保重要的作业始终运行，且不会因为系统在应执行作业时关闭或休眠而意外跳过。</p>\n<p>/etc/anacrontab 的语法与其它cron 配置文件有所不同。它每行正好包含四个字段：</p>\n<p>Period in days    #每多少天运行一次<br>Delay in minutes     #在启动该作业前，cron守护进程应等待的时间<br>Job identifier     #此为 /var/spool/anacron/ 中文件的名称，该文件将用于检查该作业是否已运行。在cron 从/etc/anacrontab 启动作业时，它会更新此文件的时间戳。同一时间戳可用于检查 作业上次运行的时间。<br>Command    #要执行的命令</p>\n<p>/etc/anacrontab 还包含使用语法 NAME=value 的环境变量声明，特别相关的是 START_HOURS_RANGE: 作业不会在些范围外启动。</p>\n<p><strong>管理临时文件</strong></p>\n<p>使用systemd-tmpfiles 管理临时文件</p>\n<p>用户高度可见的临时文件和目录（常规用户所使用和滥用的/tmp）  </p>\n<p>特定于任务的历史文件和目录（例如守护进程以及/run下特定用户的易失性目录，易失性的文件值存在内存中，在系统重启或断电时，所有内容都会丢失。）</p>\n<p>为保持系统充分运行，有必要创建那些不存在的目录和文件，因为守护进程可能会依靠它们存在，而清除旧文件后就不会填满磁盘空间或提供错误信息。</p>\n<p>旧版本中，系统管理员依靠RPM软件包和systemV初始脚本来创建这些目录，依靠名为tmpwatch的工具来配置目录中删除未使用的旧文件。在RHEL7 中，systemd 提供了一个更加结构化的可配置方法来管理临时目录和文件，systemd-tmpfiles.</p>\n<p>在systemd启动系统后，其中一个启动的服务单元是systemd-tmpfiles-setup。该服务运行命令：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemd-tmpfiles --create</span><br><span class=\"line\">systemd-tmpfiles --remove</span><br><span class=\"line\">systemd-tmpfiles --clean</span><br></pre></td></tr></table></figure></p>\n<p>该命令会从 /usr/lib/tmpfiles.d/*.conf、/run/tmpfiles.d/*.conf 和 /etc/tmpfiles.d/*.conf 读取配置文件。系统将会删除这些配置文件中标记要删除的任何文件和目录，并且会创建标记要创建（或修复权限）的任何文件和目录，并使其拥有正确的权限（如有必要）</p>\n<p><strong>定期清理</strong></p>\n<p>为确保长期运行的系统不会用陈旧数据填满磁盘，也有一个systemd 定时器单元会按固定间隔调用systemd-tmpfiles –clean </p>\n<p>systemd 定时器单元是一类特殊的systemd服务，它有一个[Timer]块会指示同名服务的启动频率。</p>\n<p>在RHEL 7 系统中，systemd-tmpfiles-clean.timer 单元的配置如下所示：</p>\n<p><img src=\"/2018/05/14/rh134-e7-ac-ac-e5-9b-9b-e7-ab-a0-e8-ae-a1-e5-88-92-e5-b0-86-e6-9d-a5-e7-9a-84linux-e4-bb-bb-e5-8a-a1/1526219726507971.png\" alt=\"blob.png\"></p>\n<p>这表示同名服务（systemd-tmpfiles-clean.service）将在systemd启动15分钟后启动，然后每隔24小时启动一次。</p>\n<p>命令systemd-tmpfiles –clean 解析的配置文件与systemd-tmpfiles –create 相同，但前者不会创建文件和目录，而是会清楚在比配置文件中定义的最长期限更近的时间尚未访问、更改或修改的所有文件。</p>\n<p><strong>tip:</strong></p>\n<p>man page tmpfiles.d(5)声称，系统会删除时间“长于”配置文件中日期字段的期限文件。这并不完全正确。</p>\n<p>Linux 文件系统中遵循PSOSIX标准的文件有三个时间戳：atime(上次访问文件的时间)、mtime（上次修改文件内容的时间）、以及 ctime （上次由 chown 、chmod等更改文件状态的时间）。大多数 Linux 文件系统都没有创建时间戳。这在类似Unlix 的文件系统中很常见。</p>\n<p>如果这三个时间戳比systemd-tmpfiles期限配置都旧，则文件将会被视为未使用。如果其中任一时间戳比期限配置新，则根据systemd-tmpfiles的期限将不会删除文件。</p>\n<p>可以在文件上运行stat 命令(stat filename)，以查看所有这三个时间戳的值，ls -l 命令通常会显示mtime。</p>\n<p><strong>systemd-tmpfiles 配置文件</strong></p>\n<p>tmpfiles.d(5) 手册中详述了system-tmpfiles的配置文件格式</p>\n<p>基本语法由七列构成：“类型”、“路径”、“模式”、UID、GID、“期限”和“参数”。“类型”指的是systemd-tmpfiles应执行的操作；例如 d 表示创建还不存在的目录，或者 Z 表示以递归方式恢复SElinux 上下文以及文件权限和所有权。  </p>\n<p>d /run/systemd/seats 0755 root root -<br>#在创建文件和目录是，如果目录/run/systemd/seats还不存在，则创建该目录，所有者为用户root和组root,权限设置为 rwxr-xr-x.系统不会清除该目录。<br>D /home/student 0700 student student 1d<br>#如果目录/home/student 还不存在，请创建该目录。如果存在，则清空其所有内容。运行systemd-timpfiles –clean 时，删除在超过一天时间内尚未被访问、更改或修改过的所有文件<br>L /run/fstablink - root root /etc/fastab<br>#创建指向/etc/fstab的符号链接 /run/fstablink 。绝对不要自动清除这一行。</p>\n<p>配置文件优先级，配置文件位置可位于三个位置：</p>\n<p>/etc/tmpfiles.d/<em>.conf<br>/run/tmpfiles.d/</em>.conf<br>/usr/lib/tmpfiles.d/*.conf</p>\n<p>/usr/lib/tmpfiles.d/ 中的文件是由相关RPM软件包提供的，不应该由系统管理员进行编辑。</p>\n<p>/run/tmpfiles.d/ 下的文件本身是易失性文件，通常有守护进程用来管理自己运行时的临时文件。</p>\n<p>/etc/tmpfiles.d/ 下的文件旨在供管理员配置自定义临时位置，以及覆盖供应商提供的默认值。</p>\n<p>如果出现同名配置文件优先权依次是： /etc/tmpfiles.d/ &gt;&gt; /run/tmpfiles.d/ &gt;&gt; /usr/lib/tmpfiles.d/ 。</p>\n<p>给定优先权规则后，管理员将相关文件复制到/etc/tmpfiles.d/ 然后编辑该配置文件，即可轻松覆盖供应商提供的设置。如果以这种方式工作，则确保可从中央配置管理系统轻松管理管理员提供的设置，并且软件包的更新不会覆盖这些设置。  </p>\n<p>在测试新配置或修改后的配置时，对于仅在一个配置文件外应用命令会十分有用。在命令行中指定配置文件中的名称即可实现这一点。</p>\n<p>systemd-tmpfiles –creat tmp.conf    #测试tmp.conf文件<br>systemd-tmpfiles –clean tmp.conf</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>使用at 计划一次性任务</strong></p>\n<p>at 不是单机工具，而是一个系统守护进程（atd），它有一组命令行工具可与守护进程（at,atd 等）进行交互。在默认的RHEL安装过程中，atd 守护进程将自动安装和启用。atd 守护进程可以在at软件包中找到。</p>\n<p>用户（包括root）可使用命令行工具 at 为 atd 守护进程的作业排除。atd 守护进程提供了 a 到 z 共26个队列。作业按字母顺序排列，队列越后，系统优先级越低</p>\n<p><strong>计划作业</strong></p>\n<p>使用命令 at <timespec> 可以计划新作业。at 随后会读取从stdin 执行的命令。对于较大的命令以及错别字敏感的命令，使用来自脚本文件(例如at now +5min &lt;myscript) 的输入重定向比在终端窗口中手动输入所有命令要简单。手动输入命令时，可以通过 Ctrl +D 来完成输入。</timespec></p>\n<p><timespec> 允许许多强大的组合，使用户（几乎）可以自由地来说明应运行作业的确切时间。通常这些组合以时间（例如02:00pm,13:59 甚至teatime）开头，后面接一个可选日期或将来的天数。</timespec></p>\n<ul>\n<li><p>now +5min</p>\n</li>\n<li><p>teatime tomorrow (下等茶时间16:00)</p>\n</li>\n<li><p>noon +4    days  (noon 12:00)</p>\n</li>\n<li><p>5pm august 3 2016 </p>\n</li>\n</ul>\n<p><strong>检查管理作业</strong></p>\n<p>stq 或者 at -l<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@desktop0 ~]<span class=\"comment\"># at -l    #查看任务计划</span></span><br><span class=\"line\">1Wed May  9 12:00:00 2018 a root</span><br><span class=\"line\"><span class=\"comment\">#共4列</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>作业编号，当前为1</p>\n</li>\n<li><p>该作业计划的日期和时间，Wed May 9 12:00:00 2018</p>\n</li>\n<li><p>作业所在队列是a</p>\n</li>\n<li><p>作业所有者（以及将运行作业的用户身份），当前为root</p>\n</li>\n</ul>\n<p>普通的非特权用户只能查看和控制自己的作业。root 可以查看和管理所有作业  </p>\n<p>要检查执行作业时运行的实际命令，请使用命令at -c <jobnumber> ,该输入首先会显示所设置作业环境，以便在用户创建作业时反映用户的环境，后跟运行的实际命令。</jobnumber></p>\n<p><strong>删除作业</strong></p>\n<p>atrm &lt;JobNumber> 将会删除计划的作业。当不再需要作业时（例如，远程防火墙配置成功且不需要重置时）</p>\n<p>atrm 1    #删除任务计划 1</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@desktop0 ~]<span class=\"comment\"># echo \"date &gt; ~/myjob\" | at now +3min    #设置任务计划</span></span><br><span class=\"line\">job 4 at Tue May  8 15:16:00 2018</span><br><span class=\"line\">[root@desktop0 ~]<span class=\"comment\"># atq        #查看任务计划</span></span><br><span class=\"line\">4Tue May  8 15:16:00 2018 a root</span><br><span class=\"line\"></span><br><span class=\"line\">[root@desktop0 ~]<span class=\"comment\"># at -q g teatime tomorrow    #在任务队列 g 创建作业任务</span></span><br><span class=\"line\">at&gt; touch /home/student/tea            <span class=\"comment\">#任务内容</span></span><br><span class=\"line\">at&gt; &lt;EOT&gt;                        <span class=\"comment\">#Ctrl + D 退出任务编辑</span></span><br><span class=\"line\">job 6 at Wed May  9 16:00:00 2018</span><br><span class=\"line\">[root@desktop0 ~]<span class=\"comment\"># atq        #   查看任务</span></span><br><span class=\"line\">6Wed May  9 16:00:00 2018 g root</span><br><span class=\"line\">[root@desktop0 ~]<span class=\"comment\"># at -q b 16:05 tomorrow    #在任务队列 b 创建作业任务</span></span><br><span class=\"line\">at&gt; touch /home/student/cookies</span><br><span class=\"line\">at&gt; &lt;EOT&gt;</span><br><span class=\"line\">job 7 at Wed May  9 16:05:00 2018</span><br><span class=\"line\">[root@desktop0 ~]<span class=\"comment\"># atq    #查看</span></span><br><span class=\"line\">6\tWed May  9 16:00:00 2018 g root</span><br><span class=\"line\">7\tWed May  9 16:05:00 2018 b root</span><br><span class=\"line\">[root@desktop0 ~]<span class=\"comment\"># at -c 6     #查看作业任务6的详细信息</span></span><br><span class=\"line\">[root@desktop0 ~]<span class=\"comment\"># atrm 6    #删除</span></span><br><span class=\"line\">[root@desktop0 ~]<span class=\"comment\"># atq</span></span><br><span class=\"line\">7\tWed May  9 16:05:00 2018 b root</span><br></pre></td></tr></table></figure>\n<p><strong>使用cron计划周期性作业</strong></p>\n<p>at 是一次性作业任务，在RHEL 中附带了特别针对周期性作业的crond 守护进程，且默认开机启用并启动。crond 是由多个配置文件和系统范围内的文件控制的，每个用户对应一个配置文件（使用crontab(1) 命令进行编辑）。这些配置文件使用户和管理员拥有细微的控制权，可以控制应执行周期性作业的确切时间。crond 守护进程作为 cronie软件包的一部分安装。  </p>\n<p>如果从cron 作业运行的命令向末重定向的 stdout 或 stderr 生成任何输出，则crond 守护进程将尝试使用系统中配置的邮件服务器将该输出通过电子邮件发送给拥有该作业的用户（除非被覆盖）。根据环境，这可能需要其它配置。</p>\n<p><strong>计划作业</strong></p>\n<p>普通用户使用crontab 命令来管理作业，可以通过四种方式调用该<br>命令：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th>预期用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">crontab -l</td>\n<td>列出当前用户的计划任务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">crontab -r</td>\n<td>删除当前用户的所有计划任务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">crontab -c</td>\n<td>编辑当前用户的计划任务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">crontab <filename></filename></td>\n<td>删除所有作业，并替换为从<filename>读取作业。如果未指定任何文件，则将使用stdin </filename></td>\n</tr>\n</tbody>\n</table>\n<p>root 可以使用 -u  username 选项管理其他用户的作业。不建议使用crontab 命令来管理系统作业。</p>\n<p>在使用crontab -e 编辑作业时，编辑器会启动（如果editor 环境变量尚未设置其它值，则默认为vi），正在编辑的文件，每行均有一个作业。允许有空行，并且注释的行以 （#）开头。环境变量也可以使用格式：NAME=value 来声明，并且会影响声明所在行下面的所有行。crontab 中的常见变量包括 SHELL 和 MAILTO 。设置SHELL 变量将会更改用于其下面的行中执行命令的shell ，而设置 MAILTO 变量将会更改发送到电子邮件地址输出（所有）</p>\n<p>重要提示：发送电子邮件可能需要另外配置本地邮件服务器或系统中的SMTP转发</p>\n<p>各个作业都包含 6 个字段，详述了执行的时间和内容，如果前 5 个字段都与当前日期和时间相匹配，则会执行最后一个字段中的命令，这些字段包括：</p>\n<ul>\n<li><p>分钟 </p>\n</li>\n<li><p>小时 </p>\n</li>\n<li><p>几号 </p>\n</li>\n<li><p>月份 </p>\n</li>\n<li><p>星期几 </p>\n</li>\n<li><p>命令</p>\n</li>\n</ul>\n<p>如果几号和星期几字段都不是 * ，则该命令将在其中任一字段匹配时执行，例如 * * 15 * 5 ls ,将在每月 15 号或每周 5 执行ls命令</p>\n<p>前 5 个字段全部使用相同的语法规则：</p>\n<ul>\n<li><p>* 表示“无关紧要”/始终</p>\n</li>\n<li><p>数字可用于指定分钟，小时，日期或工作日。（对于工作日0 - 7，0表示星期日，1表示星期一，依次类推。7也表示星期日）</p>\n</li>\n<li><p>x-y 表示范围，x到y(含)</p>\n</li>\n<li><p>x,y 表示列表。列表也可以包含范围，例如“分钟”列中的5,10-13,17,表示作业应当在每小时的第5，10-13，17分钟分别运行一次</p>\n</li>\n<li><p>*/x 表示x的时间间隔，例如分钟列 */7 表示每 7 分钟运行一次。</p>\n</li>\n</ul>\n<p>此外，可以使用三个字母的英文缩写来表示月份和工作日，例如Jan ,Feb 以及 Tue , Wed .</p>\n<p>最后一个字段包含要执行的命令，如果尚未声明shell的环境变量，则该命令将由 /bin/sh 执行。如果命令中包含未转义的百分比符号(%),则该百分比符号将被当作新行，且百分比符号之后的所有内容将反馈到stdin 中的命令。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 9 2 2 * /usr/<span class=\"built_in\">local</span>/bin/yearly\\_bakcup    <span class=\"comment\">#在每年的2月2上午9点整执行命令 /usr/local/yearly\\_backup</span></span><br><span class=\"line\">*/7 9-16 * Jul 5 <span class=\"built_in\">echo</span> <span class=\"string\">\"China\"</span>      <span class=\"comment\">#在七月每周五的上午9点 和下午5点之间，每七分钟向该作业的所有者发送包含单词的 China 的电子 邮件</span></span><br><span class=\"line\">58 23 * * 1-5 /usr/<span class=\"built_in\">local</span>/bin/daily\\_report    <span class=\"comment\">#在每个工作日午夜前2分钟运行命令/usr/local/daily\\_report</span></span><br><span class=\"line\">0 9 * * 1-5 mutt -s <span class=\"string\">\"Checking in\"</span> boss@example.com % Hi there boss ,just checking <span class=\"keyword\">in</span> . </span><br><span class=\"line\"><span class=\"comment\">#在每个工作日（周一到周五）的上午9点整，使用mutt 向 boss@example.com 发送邮件。</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[student@desktop0 ~]$ crontab -e</span><br><span class=\"line\">no crontab <span class=\"keyword\">for</span> student - using an empty one</span><br><span class=\"line\">crontab: installing new crontab</span><br><span class=\"line\">[student@desktop0 ~]$ crontab -l</span><br><span class=\"line\">*/2 9-16 * * 1-5 date &gt;&gt; /home/student/my_first_cron_job</span><br><span class=\"line\">[student@desktop0 ~]$ cat my_first_cron_job </span><br><span class=\"line\">Tue May  8 17:10:02 CST 2018</span><br><span class=\"line\">[student@desktop0 ~]$ crontab -r</span><br><span class=\"line\">[student@desktop0 ~]$ crontab -l</span><br><span class=\"line\">no crontab <span class=\"keyword\">for</span> student</span><br><span class=\"line\">[student@desktop0 ~]$</span><br></pre></td></tr></table></figure>\n<p><strong>计划系统cron作业</strong></p>\n<p>除了用户cron作业外，还有系统cron作业，系统cron作业不是使用crontab 命令定义的，而是在一组配置文件中配置的。这些配置文件之间主要区别在于一个额外的的字段，该字段位置位置星期几和命令字段之间，指定了作业应在哪个用户下运行。</p>\n<p>/etc/crontab 的随附注释中包含了实用的语法图</p>\n<p><img src=\"/2018/05/14/rh134-e7-ac-ac-e5-9b-9b-e7-ab-a0-e8-ae-a1-e5-88-92-e5-b0-86-e6-9d-a5-e7-9a-84linux-e4-bb-bb-e5-8a-a1/1525771056304457.png\" alt=\"image.png\"></p>\n<p>系统作业配置文件在 /etc/crontab 和 /etc/cron.d/* .安装cron 作业的软件包应当通过在/etc/cron.d/ 中放置文件才能执行安装操作，但是，管理员还可以使用此位置来更轻松的将相关作业分到单个文件中，或者使用配置管理系统推送作业。</p>\n<p>还有预定义作业每小时，每天、每周和每月运行一次，这个作业将分别执行位于/etc/cron.hourly/ 、/etc/cron.daily/、/etc/cron.weekly 和 /etc/cron.monthly/ 中的所有脚本，请注意，这些目录包含可执行脚本，而不包含cron配置文件 。</p>\n<p>/etc/cron.hourly/* 脚本是使用run-parts 命令从/ec/cron.d/0hourly 中定义的作业执行的，每日、每周和每月的作业也使用run-parts命令执行，但是人其它配置文件 /etc/anacrontab 执行。  </p>\n<p>过程anacrontab 是由单独的守护进程(anacron)处理的，但是在RHEL 7 中，该文件由常规crond 守护进程解析。该文件旨在确保重要的作业始终运行，且不会因为系统在应执行作业时关闭或休眠而意外跳过。</p>\n<p>/etc/anacrontab 的语法与其它cron 配置文件有所不同。它每行正好包含四个字段：</p>\n<p>Period in days    #每多少天运行一次<br>Delay in minutes     #在启动该作业前，cron守护进程应等待的时间<br>Job identifier     #此为 /var/spool/anacron/ 中文件的名称，该文件将用于检查该作业是否已运行。在cron 从/etc/anacrontab 启动作业时，它会更新此文件的时间戳。同一时间戳可用于检查 作业上次运行的时间。<br>Command    #要执行的命令</p>\n<p>/etc/anacrontab 还包含使用语法 NAME=value 的环境变量声明，特别相关的是 START_HOURS_RANGE: 作业不会在些范围外启动。</p>\n<p><strong>管理临时文件</strong></p>\n<p>使用systemd-tmpfiles 管理临时文件</p>\n<p>用户高度可见的临时文件和目录（常规用户所使用和滥用的/tmp）  </p>\n<p>特定于任务的历史文件和目录（例如守护进程以及/run下特定用户的易失性目录，易失性的文件值存在内存中，在系统重启或断电时，所有内容都会丢失。）</p>\n<p>为保持系统充分运行，有必要创建那些不存在的目录和文件，因为守护进程可能会依靠它们存在，而清除旧文件后就不会填满磁盘空间或提供错误信息。</p>\n<p>旧版本中，系统管理员依靠RPM软件包和systemV初始脚本来创建这些目录，依靠名为tmpwatch的工具来配置目录中删除未使用的旧文件。在RHEL7 中，systemd 提供了一个更加结构化的可配置方法来管理临时目录和文件，systemd-tmpfiles.</p>\n<p>在systemd启动系统后，其中一个启动的服务单元是systemd-tmpfiles-setup。该服务运行命令：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemd-tmpfiles --create</span><br><span class=\"line\">systemd-tmpfiles --remove</span><br><span class=\"line\">systemd-tmpfiles --clean</span><br></pre></td></tr></table></figure></p>\n<p>该命令会从 /usr/lib/tmpfiles.d/*.conf、/run/tmpfiles.d/*.conf 和 /etc/tmpfiles.d/*.conf 读取配置文件。系统将会删除这些配置文件中标记要删除的任何文件和目录，并且会创建标记要创建（或修复权限）的任何文件和目录，并使其拥有正确的权限（如有必要）</p>\n<p><strong>定期清理</strong></p>\n<p>为确保长期运行的系统不会用陈旧数据填满磁盘，也有一个systemd 定时器单元会按固定间隔调用systemd-tmpfiles –clean </p>\n<p>systemd 定时器单元是一类特殊的systemd服务，它有一个[Timer]块会指示同名服务的启动频率。</p>\n<p>在RHEL 7 系统中，systemd-tmpfiles-clean.timer 单元的配置如下所示：</p>\n<p><img src=\"/2018/05/14/rh134-e7-ac-ac-e5-9b-9b-e7-ab-a0-e8-ae-a1-e5-88-92-e5-b0-86-e6-9d-a5-e7-9a-84linux-e4-bb-bb-e5-8a-a1/1526219726507971.png\" alt=\"blob.png\"></p>\n<p>这表示同名服务（systemd-tmpfiles-clean.service）将在systemd启动15分钟后启动，然后每隔24小时启动一次。</p>\n<p>命令systemd-tmpfiles –clean 解析的配置文件与systemd-tmpfiles –create 相同，但前者不会创建文件和目录，而是会清楚在比配置文件中定义的最长期限更近的时间尚未访问、更改或修改的所有文件。</p>\n<p><strong>tip:</strong></p>\n<p>man page tmpfiles.d(5)声称，系统会删除时间“长于”配置文件中日期字段的期限文件。这并不完全正确。</p>\n<p>Linux 文件系统中遵循PSOSIX标准的文件有三个时间戳：atime(上次访问文件的时间)、mtime（上次修改文件内容的时间）、以及 ctime （上次由 chown 、chmod等更改文件状态的时间）。大多数 Linux 文件系统都没有创建时间戳。这在类似Unlix 的文件系统中很常见。</p>\n<p>如果这三个时间戳比systemd-tmpfiles期限配置都旧，则文件将会被视为未使用。如果其中任一时间戳比期限配置新，则根据systemd-tmpfiles的期限将不会删除文件。</p>\n<p>可以在文件上运行stat 命令(stat filename)，以查看所有这三个时间戳的值，ls -l 命令通常会显示mtime。</p>\n<p><strong>systemd-tmpfiles 配置文件</strong></p>\n<p>tmpfiles.d(5) 手册中详述了system-tmpfiles的配置文件格式</p>\n<p>基本语法由七列构成：“类型”、“路径”、“模式”、UID、GID、“期限”和“参数”。“类型”指的是systemd-tmpfiles应执行的操作；例如 d 表示创建还不存在的目录，或者 Z 表示以递归方式恢复SElinux 上下文以及文件权限和所有权。  </p>\n<p>d /run/systemd/seats 0755 root root -<br>#在创建文件和目录是，如果目录/run/systemd/seats还不存在，则创建该目录，所有者为用户root和组root,权限设置为 rwxr-xr-x.系统不会清除该目录。<br>D /home/student 0700 student student 1d<br>#如果目录/home/student 还不存在，请创建该目录。如果存在，则清空其所有内容。运行systemd-timpfiles –clean 时，删除在超过一天时间内尚未被访问、更改或修改过的所有文件<br>L /run/fstablink - root root /etc/fastab<br>#创建指向/etc/fstab的符号链接 /run/fstablink 。绝对不要自动清除这一行。</p>\n<p>配置文件优先级，配置文件位置可位于三个位置：</p>\n<p>/etc/tmpfiles.d/<em>.conf<br>/run/tmpfiles.d/</em>.conf<br>/usr/lib/tmpfiles.d/*.conf</p>\n<p>/usr/lib/tmpfiles.d/ 中的文件是由相关RPM软件包提供的，不应该由系统管理员进行编辑。</p>\n<p>/run/tmpfiles.d/ 下的文件本身是易失性文件，通常有守护进程用来管理自己运行时的临时文件。</p>\n<p>/etc/tmpfiles.d/ 下的文件旨在供管理员配置自定义临时位置，以及覆盖供应商提供的默认值。</p>\n<p>如果出现同名配置文件优先权依次是： /etc/tmpfiles.d/ &gt;&gt; /run/tmpfiles.d/ &gt;&gt; /usr/lib/tmpfiles.d/ 。</p>\n<p>给定优先权规则后，管理员将相关文件复制到/etc/tmpfiles.d/ 然后编辑该配置文件，即可轻松覆盖供应商提供的设置。如果以这种方式工作，则确保可从中央配置管理系统轻松管理管理员提供的设置，并且软件包的更新不会覆盖这些设置。  </p>\n<p>在测试新配置或修改后的配置时，对于仅在一个配置文件外应用命令会十分有用。在命令行中指定配置文件中的名称即可实现这一点。</p>\n<p>systemd-tmpfiles –creat tmp.conf    #测试tmp.conf文件<br>systemd-tmpfiles –clean tmp.conf</p>\n"},{"title":"RH134 第十章 管理逻辑卷管理(LVM)存储","url":"415.html","id":"415","date":"2018-07-31T09:42:47.000Z","_content":"\n### 逻辑卷管理（LVM）概念  \n\n逻辑卷和逻辑卷管理有助于更加轻松的管理磁盘空间。如果 LVM 托管的文件系统需要更多的空间，可以将其卷组中的可用空间分配给逻辑卷，并且可以调整文件系统的大小。如果磁盘开始出现错误，可以将替换磁盘注册为物理卷放入卷组中，并且逻辑卷的区块可迁移到新磁盘。\n\n\n\n\n\n![image.png](1532914548221728.png)\n\n\n\n*   物理设备是用于保留逻辑卷中所存储的存储设备。它们是块设备，可以是磁盘分区、整个磁盘、RAID阵列或SAN磁盘。设备必须初始化为 LVM 物理卷，才能与 LVM结合使用。整个”设备“将作用一个物理卷。\n\n*   物理卷（PV）用于注册基础物理设备以便在卷组中使用。 LVM 自动将 PV划分为物理区块(PE);它们是充当 PV 是最小的存储块的小块数据。\n\n*   卷组（VG） 是存储池，由一个或多个物理卷组成。一个PV只能分配给一个 VG ，VG 可以包含未使用的空间和任意数目的逻辑卷。\n\n*   逻辑卷（LV）根据卷组中的空闲物理范围创建，提供应用、用户和操作系统所使用的”存储“设备。 LV是逻辑区块 （ LE）的集合， LE映射到物理区块（PV 的最小存储块）。默认情况下，每个 LE将映射到一个PE ，设置特定的 LV选项将会更改此映射；例如：镜像会导致每个 LE映射到两个 PE。\n\n\n![image.png](1532915362809606.png)\n\n#### 管理逻辑卷  \n\n##### 创建逻辑卷  \n\n###### 创建可用的逻辑卷需要五个步骤：\n\n1、准备物理设备\n\n 使用 fdisk 、gdisk 或 parted 创建新分区，以便与 LVM 结合使用。在 LVM 分区上，始终将分区类型设备为 Linux LVM 。也可以使用完成的磁盘、RAID 阵列或 SAN 磁盘。\n\n![image.png](1532915604992709.png)\n\n2、创建物理卷\n\n使用pvcreate 为分区（或其他物理设备）添加标签，使其作为物理卷与 LVM 结合使用。会将用于存储 LVM 配置数据的一个标头直接写入到 PV ，PV 分为多个固定大小的物理范围（PE），以空格分隔多个设备名。  \n\n![image.png](1532915758521488.png)\n\n此命令会将设备 /dev/vda2 和 /dev/vdb1 标记为 PV，准备好分配到卷组中。\n\n仅当没有空闲的 PV 可以创建或扩展 VG 时，才需要创建 PV\n\n3、创建卷组\n\n vgcreate 用于创建包含一个或多个物理卷的池，称为卷组。 VG 的大小由池中的物理范围的总数决定。 VG  负责通过向 LV 分配空闲 PE 来托管一个或多个逻辑卷；因此 ，在创建 LV时 ,VG 必须具有足够的空闲 PE 可用。\n\n以 vgcreate 的参数形式，定义 VG 名称并列出一个或多个要分配给 VG 的 PV。\n\n![image.png](1532916156887043.png)\n\n此命令将创建名为 vg-alpha 的 VG ，它的大小是 /dev/sda2 和 /dev/vdb1 ，这两个PV的总大小（以PE单位计）\n\n仅当没有现有 VG 时才需要创建VG.可能会出于管理原因创建额外的 VG ，用于管理 PV和 LV的使用。否则，可在需要时扩展现有 VG 以容纳新的 LV。\n\n4、创建逻辑卷\n\n lvcreate 根据卷组中的可用物理范围创建新的逻辑卷。至少为 lvcreate 使用以下参数：使用 -n 选项设置 LV名称，使用 -L 选项设置 LV 大小（以字节为单位），并确定要在其中创建 LV 的 VG 名称。\n\n![image.png](1532916442904085.png)\n\n此命令将在 VG vg-alpha 中创建一个名为 hercules 的 LV ，其大小为 2GB.必须有足够的空闲物理范围来分配 2GB，如有必要会将其取整为 PE 单元大小的倍数。\n\n有多种方式可以指定大小： -L 要求以字节或更大指定值为单位的大小。例如 M,G。-l 选项要求以物理范围数为单位进行衡量的大小。\n\nlvcreate -L 128M,将逻辑卷的大小确定为正好 128 MiB\n\nlvcreate -l 128,将逻辑卷的大小确定为正好128个范围（PE）的大小，大小取决于 PE 块的大小。\n\n###### TIPS :\n\n不同的工具将使用传统名称 /dev/vgname/lvname 或内核设备映射程序名。 /dev/mapper/vgname-lvname 。显示逻辑卷名。\n\n5、添加文件系统\n\n使用 mkfs 在新逻辑卷上创建文件系统（xfs,ext4）\n\n![image.png](1532917059786660.png)\n\n##### 删除逻辑卷\n\n###### 删除所有逻辑卷组件需要四个步骤：\n\n1、准备文件系统\n\n将必须保留的所有数据移动到另一个文件系统，然后使用 umount 卸载该文件系统。不要忘记删除与此文件系统关联的任何/etc/fstab 条目\n\n![image.png](1532923101657518.png)\n\n###### tips:  \n\n删除逻辑卷会破坏该逻辑卷上存储的所有数据。删除逻辑卷之前，请备份或移动数据 \n\n2、删除逻辑卷\n\n使用 lvremove 删除不再使用的逻辑卷。使用设备名称作为参数。\n\n![image.png](1532923218881106.png)\n\n运行此命令之前，必须卸载 LV 文件系统。删除 LV 之前，将请求确认\n\nLV 的物理范围将会被释放，并可用于分配给卷组中的现在 LV 或新 LV。\n\n3、删除卷组\n\n使用 vgremove 删除不再需要的卷组。使用 VG 名称作为参数。\n\n![image.png](1532923227946554.png)\n\nVG 的物理卷组会被释放，并可用于分配给系统中的现在 VG 或新 VG\n\n4、删除物理卷\n\n使用 pvremove 删除不再需要的物理卷。使用空格分隔的 PV 设备列表同时删除多个 PV 。PV 元数据将从分区（或磁盘）清除，分区现在已空闲，可重新分配或重新格式化。\n\n![image.png](1532923483491728.png)\n\n##### 查看 LVM 状态信息\n\n使用 pvdisplay 显示有关物理卷的信息。如果未随命令指定任何参数，则它将列出有关系统上所有 PV 的信息。如果参数为特定设备名称，则将仅显示特定 PV 的信息。\n\n![image.png](1532923530769371.png)\n\n1.  PV Name 映射到设备名称\n\n2.  VG Name 显示将 PV 分配到的卷组。\n\n3.  PV Size 显示 PV 的物理大小，包括任何不可用的空间。\n\n4.  PE Size 是物理范围大小，它是逻辑卷中可分配的最小大小。\n\n\n1.  它也是计算以 PE 单位报告的任何值（如 Free PE）的大小时的倍数，例如：26个 PE x 4MiB（PE Size）可提供104 MiB 可用空间。逻辑卷大小将取整为 PE 单位的倍数。  \n\n\n6.  Free PE 显示有多少 PE 单位可用于分配给新逻辑卷。\n\n\n###### 卷组\n\n 使用 vgdisplay 显示有关卷组的信息。如果没有为命令指定任何变量，则它将显示有关所有 VG 的信息， 使用 VG 名称作为变量将仅显示该特定 VG 的信息。\n\n![image.png](1532923545926922.png)\n\n1.  VG Name 是此卷组的名称\n\n2.  VG Size 是存储池可用于逻辑卷分配的总大小。\n\n3.  Total PE 是以 PE 单位表示的总大小\n\n4.  Free PE /Size 显示 VG 中有多少空闲空间可用于分配给新 LV 或扩展现在 LV。\n\n\n###### 逻辑卷\n\n 使用 lvdisplay 显示有关逻辑卷的信息。同样，如果未随命令指定任何参数，则将显示有关所有 LV 的信息； 而使用 LV 设备名称任何参数将仅显示有关该特定设备的信息。\n\n![image.png](1532923602504982.png)\n\n1.  LV Patch 显示此逻辑卷的设备名称；某些工具可能会将设备名报告为/dev/mapper/vgname-lvname; 两个名称都表示同一 LV \n\n2.  VG Name 显示从其分配 LV的卷组。\n\n3.  LV Size 显示 LV的总大小。使用文件系统工具检查可用空间和数据存储的已用空间。\n\n4.  Current LE 显示此 LV 使用的逻辑范围数。 LE 通常映射到 VG 中的物理范围，并因此映射到物理卷。\n\n\n\n\n##### 扩展逻辑卷  \n\n###### 扩展和缩减卷组\n\n可以通过添加额外的物理卷来为卷组增加更多磁盘空间。这种做法称为扩展卷组。由额外的物理卷提供的新物理区段可以分配给逻辑卷。\n\n可以将未使用的物理卷从卷组中删除。这种做法称为缩减卷组。可以使用名为 pvmove 的工具，将数据从一个物理卷上的区段移动到卷组中其他物理卷上的区段。通过这种方式，可以将新磁盘添加到现在卷组，将数据从较旧或较慢的磁盘移动到新磁盘，并将旧磁盘从卷组中删除。可在卷组中的逻辑卷正在使用时完成这些操作。\n\n###### 扩展卷组可能需要四个步骤：\n\n1、准备物理设备\n\n![image.png](1532934683798263.png)\n\n2、创建物理卷\n\n![image.png](1532934694227911.png)\n\n3、扩展卷组\n\nvgextend 用于向卷组添加新物理卷。使用 VG 名称和 PV 设备名称作为 vgextend 的参数。\n\n![image.png](1532934705170371.png)\n\n4、验证新空间是否可用\n\n![image.png](1532934716787931.png)\n\n###### 缩减卷组需要两个步骤：\n\n1、移动物理区段\n\n使用 pvmove将物理卷上使用的任何物理区段重新分配给 VG 中的其他 PV。仅当 VG 中存在足够的空间范围，且所有这些范围都来自其他 PV 时，才能执行此操作。使用将移动的 PE 所属的 PV 设备名称作为该命令的参数。\n\n![image.png](1532934896111896.png)\n\n##### 警告：  \n\n使用 pvmove 前建议备份卷组所有逻辑卷上存储的数据。如果操作期间意外断电，可能会导致卷组状态不一致。这可能导致卷组中逻辑卷上的数据丢失。\n\n2、缩减卷组\n\n使用 vgreduce 将物理卷从卷组中删除。使用VG 名称和 PV 设备名称作为该命令参数。\n\n![image.png](1532935348576038.png)\n\n/dev/vdb2 PV 现在已从 vg-alpha VG 删除，并可以添加到其他 VG 。或者 ，也可以使用 pvremove 永久停止将设备用作 PV。\n\n##### 扩展逻辑卷和 XFS 文件系统\n\n逻辑卷是一个优势在于能够在不停机的情况下增加其大小。可将卷组中的空闲物理区段添加到逻辑卷以扩展其容量，然后可使用逻辑卷扩展所包含的文件系统。\n\n###### 扩展逻辑卷需要三个步骤：  \n\n1、验证卷组是否具有可用的空间\n\n 使用 vgdisplay 验证是否有足够的物理区段供使用。\n\n![image.png](1532935692930444.png)\n\n检查输入中的 Free PE /Size ，它应该报告一个等于或大于所需额外空间的值 。如果没有足够的可用空间，则卷组扩展幅度至少要达到所需空间的大小。\n\n2、扩展逻辑卷\n\n lvextend 可将逻辑卷扩展为新的大小。添加 LV设备名称作为命令的最后一个参数。\n\n![image.png](1532935843642498.png)\n\n此命令可将逻辑卷 hercules 的大小增加 300 M 。请注意空间大小前面的”+“，它表示 向现有大小增加此值；如无该符号，该值定义 LV 的最终确切大小。  \n\n与 lvcreate 类似，有多种方式可以指定大小：-l 通常要求物理区段值，而 -L 要求以字节或更大的单位表示 。\n\nlvextend -l 128 ：将逻辑卷的大小调整为正好 128 个范围\n\nlvextend -l +128：向逻辑卷的当前大小添加128 个范围\n\nlvextend -L 128M：将逻辑卷的大小调整为正好128M\n\nlvextend -L +128M：向逻辑卷的当前大小增加128M\n\nlvextend -l +50%FREEE：向 LV 添加 VG 中当前可以空间的 50%\n\n3、扩展文件系统\n\nxfs_growfs /mountpoint 扩展文件系统以占用已扩展的 LV。 xfs_growfs 要求在文件系统运行时进行搭载该系统；在调整大小操作期间仍然可以使用该文件系统。\n\n![image.png](1532936322407591.png)\n\n###### 注意：\n\n常见错误是运行 lvextend 但忘记运行 xfs_growfs  。两步合二为一的方法是 lvextend 使用 -r 作为命令的一个选项，这将使用 fsadm（8） 在扩展 LV后调整文件系统的大小。它可以用于多种不同的文件系统。\n\n###### 验证已挂载文件系统的新大小：\n```sh\ndf -h /mountpoint\n```\n###### 扩展逻辑卷和ext 4文件系统  \n\n扩展基于ext4 的逻辑卷的步骤基本和扩展基于 xfs的 LV 相同，只有调整文件系统大小的步骤不同\n\n1、验证卷组的可用性\n\n2、扩展逻辑卷\n\n3、扩展文件系统\n\nresize2fs /dev/vgname/lvname 扩展文件系统以占用新扩展的 LV。正与 xfs_growfs 一样，可以在文件系统正在运行时挂载该文件系统（可选）包含 -p 选项以查看调整大小操作的进度。\n\n![image.png](1533021882431708.png)\n\n###### 注意：\n\nxfs_growfs 与 resize2fs 之间的主要区别是为识别文件系统而传递的参数。\n\nxfs_growfs 采用挂载点，而resize2fs  采用逻辑卷名称。\n\n##### 总结：\n\n###### 管理逻辑卷\n\n*   pvcreate、pvremove和pvdisplay 创建、删除和列出物理卷（PV）\n\n*   vgcreate、vgremove和vgdisplay 创建、删除和列出卷组（VG）\n\n*   lvcreate、lvremove和lvdisplay 创建、删除和列出逻辑卷（LV）\n\n*   添加逻辑卷以 PV、VG、和 LV的先后顺序完成。\n\n*   删除逻辑卷以 LV、VG、和 PV 的先后顺序完成。\n\n\n###### 扩展逻辑卷\n\n*   使用 pvcreate 和 vgextend 扩展卷组（VG）；使用vgdisplay 检查结果。\n\n*   使用pvmove 和 vgreduce 缩减 VG 。\n\n*   使用xfs_growfs 调整xfs 文件系统的大小。\n\n*   使用 resize2fs 调整ext4 文件系统的大小。\n","source":"_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8.md","raw":"---\ntitle: RH134 第十章 管理逻辑卷管理(LVM)存储\nurl: 415.html\nid: 415\ncategories:\n  - RHEL134\ndate: 2018-07-31 17:42:47\ntags:\n---\n\n### 逻辑卷管理（LVM）概念  \n\n逻辑卷和逻辑卷管理有助于更加轻松的管理磁盘空间。如果 LVM 托管的文件系统需要更多的空间，可以将其卷组中的可用空间分配给逻辑卷，并且可以调整文件系统的大小。如果磁盘开始出现错误，可以将替换磁盘注册为物理卷放入卷组中，并且逻辑卷的区块可迁移到新磁盘。\n\n\n\n\n\n![image.png](1532914548221728.png)\n\n\n\n*   物理设备是用于保留逻辑卷中所存储的存储设备。它们是块设备，可以是磁盘分区、整个磁盘、RAID阵列或SAN磁盘。设备必须初始化为 LVM 物理卷，才能与 LVM结合使用。整个”设备“将作用一个物理卷。\n\n*   物理卷（PV）用于注册基础物理设备以便在卷组中使用。 LVM 自动将 PV划分为物理区块(PE);它们是充当 PV 是最小的存储块的小块数据。\n\n*   卷组（VG） 是存储池，由一个或多个物理卷组成。一个PV只能分配给一个 VG ，VG 可以包含未使用的空间和任意数目的逻辑卷。\n\n*   逻辑卷（LV）根据卷组中的空闲物理范围创建，提供应用、用户和操作系统所使用的”存储“设备。 LV是逻辑区块 （ LE）的集合， LE映射到物理区块（PV 的最小存储块）。默认情况下，每个 LE将映射到一个PE ，设置特定的 LV选项将会更改此映射；例如：镜像会导致每个 LE映射到两个 PE。\n\n\n![image.png](1532915362809606.png)\n\n#### 管理逻辑卷  \n\n##### 创建逻辑卷  \n\n###### 创建可用的逻辑卷需要五个步骤：\n\n1、准备物理设备\n\n 使用 fdisk 、gdisk 或 parted 创建新分区，以便与 LVM 结合使用。在 LVM 分区上，始终将分区类型设备为 Linux LVM 。也可以使用完成的磁盘、RAID 阵列或 SAN 磁盘。\n\n![image.png](1532915604992709.png)\n\n2、创建物理卷\n\n使用pvcreate 为分区（或其他物理设备）添加标签，使其作为物理卷与 LVM 结合使用。会将用于存储 LVM 配置数据的一个标头直接写入到 PV ，PV 分为多个固定大小的物理范围（PE），以空格分隔多个设备名。  \n\n![image.png](1532915758521488.png)\n\n此命令会将设备 /dev/vda2 和 /dev/vdb1 标记为 PV，准备好分配到卷组中。\n\n仅当没有空闲的 PV 可以创建或扩展 VG 时，才需要创建 PV\n\n3、创建卷组\n\n vgcreate 用于创建包含一个或多个物理卷的池，称为卷组。 VG 的大小由池中的物理范围的总数决定。 VG  负责通过向 LV 分配空闲 PE 来托管一个或多个逻辑卷；因此 ，在创建 LV时 ,VG 必须具有足够的空闲 PE 可用。\n\n以 vgcreate 的参数形式，定义 VG 名称并列出一个或多个要分配给 VG 的 PV。\n\n![image.png](1532916156887043.png)\n\n此命令将创建名为 vg-alpha 的 VG ，它的大小是 /dev/sda2 和 /dev/vdb1 ，这两个PV的总大小（以PE单位计）\n\n仅当没有现有 VG 时才需要创建VG.可能会出于管理原因创建额外的 VG ，用于管理 PV和 LV的使用。否则，可在需要时扩展现有 VG 以容纳新的 LV。\n\n4、创建逻辑卷\n\n lvcreate 根据卷组中的可用物理范围创建新的逻辑卷。至少为 lvcreate 使用以下参数：使用 -n 选项设置 LV名称，使用 -L 选项设置 LV 大小（以字节为单位），并确定要在其中创建 LV 的 VG 名称。\n\n![image.png](1532916442904085.png)\n\n此命令将在 VG vg-alpha 中创建一个名为 hercules 的 LV ，其大小为 2GB.必须有足够的空闲物理范围来分配 2GB，如有必要会将其取整为 PE 单元大小的倍数。\n\n有多种方式可以指定大小： -L 要求以字节或更大指定值为单位的大小。例如 M,G。-l 选项要求以物理范围数为单位进行衡量的大小。\n\nlvcreate -L 128M,将逻辑卷的大小确定为正好 128 MiB\n\nlvcreate -l 128,将逻辑卷的大小确定为正好128个范围（PE）的大小，大小取决于 PE 块的大小。\n\n###### TIPS :\n\n不同的工具将使用传统名称 /dev/vgname/lvname 或内核设备映射程序名。 /dev/mapper/vgname-lvname 。显示逻辑卷名。\n\n5、添加文件系统\n\n使用 mkfs 在新逻辑卷上创建文件系统（xfs,ext4）\n\n![image.png](1532917059786660.png)\n\n##### 删除逻辑卷\n\n###### 删除所有逻辑卷组件需要四个步骤：\n\n1、准备文件系统\n\n将必须保留的所有数据移动到另一个文件系统，然后使用 umount 卸载该文件系统。不要忘记删除与此文件系统关联的任何/etc/fstab 条目\n\n![image.png](1532923101657518.png)\n\n###### tips:  \n\n删除逻辑卷会破坏该逻辑卷上存储的所有数据。删除逻辑卷之前，请备份或移动数据 \n\n2、删除逻辑卷\n\n使用 lvremove 删除不再使用的逻辑卷。使用设备名称作为参数。\n\n![image.png](1532923218881106.png)\n\n运行此命令之前，必须卸载 LV 文件系统。删除 LV 之前，将请求确认\n\nLV 的物理范围将会被释放，并可用于分配给卷组中的现在 LV 或新 LV。\n\n3、删除卷组\n\n使用 vgremove 删除不再需要的卷组。使用 VG 名称作为参数。\n\n![image.png](1532923227946554.png)\n\nVG 的物理卷组会被释放，并可用于分配给系统中的现在 VG 或新 VG\n\n4、删除物理卷\n\n使用 pvremove 删除不再需要的物理卷。使用空格分隔的 PV 设备列表同时删除多个 PV 。PV 元数据将从分区（或磁盘）清除，分区现在已空闲，可重新分配或重新格式化。\n\n![image.png](1532923483491728.png)\n\n##### 查看 LVM 状态信息\n\n使用 pvdisplay 显示有关物理卷的信息。如果未随命令指定任何参数，则它将列出有关系统上所有 PV 的信息。如果参数为特定设备名称，则将仅显示特定 PV 的信息。\n\n![image.png](1532923530769371.png)\n\n1.  PV Name 映射到设备名称\n\n2.  VG Name 显示将 PV 分配到的卷组。\n\n3.  PV Size 显示 PV 的物理大小，包括任何不可用的空间。\n\n4.  PE Size 是物理范围大小，它是逻辑卷中可分配的最小大小。\n\n\n1.  它也是计算以 PE 单位报告的任何值（如 Free PE）的大小时的倍数，例如：26个 PE x 4MiB（PE Size）可提供104 MiB 可用空间。逻辑卷大小将取整为 PE 单位的倍数。  \n\n\n6.  Free PE 显示有多少 PE 单位可用于分配给新逻辑卷。\n\n\n###### 卷组\n\n 使用 vgdisplay 显示有关卷组的信息。如果没有为命令指定任何变量，则它将显示有关所有 VG 的信息， 使用 VG 名称作为变量将仅显示该特定 VG 的信息。\n\n![image.png](1532923545926922.png)\n\n1.  VG Name 是此卷组的名称\n\n2.  VG Size 是存储池可用于逻辑卷分配的总大小。\n\n3.  Total PE 是以 PE 单位表示的总大小\n\n4.  Free PE /Size 显示 VG 中有多少空闲空间可用于分配给新 LV 或扩展现在 LV。\n\n\n###### 逻辑卷\n\n 使用 lvdisplay 显示有关逻辑卷的信息。同样，如果未随命令指定任何参数，则将显示有关所有 LV 的信息； 而使用 LV 设备名称任何参数将仅显示有关该特定设备的信息。\n\n![image.png](1532923602504982.png)\n\n1.  LV Patch 显示此逻辑卷的设备名称；某些工具可能会将设备名报告为/dev/mapper/vgname-lvname; 两个名称都表示同一 LV \n\n2.  VG Name 显示从其分配 LV的卷组。\n\n3.  LV Size 显示 LV的总大小。使用文件系统工具检查可用空间和数据存储的已用空间。\n\n4.  Current LE 显示此 LV 使用的逻辑范围数。 LE 通常映射到 VG 中的物理范围，并因此映射到物理卷。\n\n\n\n\n##### 扩展逻辑卷  \n\n###### 扩展和缩减卷组\n\n可以通过添加额外的物理卷来为卷组增加更多磁盘空间。这种做法称为扩展卷组。由额外的物理卷提供的新物理区段可以分配给逻辑卷。\n\n可以将未使用的物理卷从卷组中删除。这种做法称为缩减卷组。可以使用名为 pvmove 的工具，将数据从一个物理卷上的区段移动到卷组中其他物理卷上的区段。通过这种方式，可以将新磁盘添加到现在卷组，将数据从较旧或较慢的磁盘移动到新磁盘，并将旧磁盘从卷组中删除。可在卷组中的逻辑卷正在使用时完成这些操作。\n\n###### 扩展卷组可能需要四个步骤：\n\n1、准备物理设备\n\n![image.png](1532934683798263.png)\n\n2、创建物理卷\n\n![image.png](1532934694227911.png)\n\n3、扩展卷组\n\nvgextend 用于向卷组添加新物理卷。使用 VG 名称和 PV 设备名称作为 vgextend 的参数。\n\n![image.png](1532934705170371.png)\n\n4、验证新空间是否可用\n\n![image.png](1532934716787931.png)\n\n###### 缩减卷组需要两个步骤：\n\n1、移动物理区段\n\n使用 pvmove将物理卷上使用的任何物理区段重新分配给 VG 中的其他 PV。仅当 VG 中存在足够的空间范围，且所有这些范围都来自其他 PV 时，才能执行此操作。使用将移动的 PE 所属的 PV 设备名称作为该命令的参数。\n\n![image.png](1532934896111896.png)\n\n##### 警告：  \n\n使用 pvmove 前建议备份卷组所有逻辑卷上存储的数据。如果操作期间意外断电，可能会导致卷组状态不一致。这可能导致卷组中逻辑卷上的数据丢失。\n\n2、缩减卷组\n\n使用 vgreduce 将物理卷从卷组中删除。使用VG 名称和 PV 设备名称作为该命令参数。\n\n![image.png](1532935348576038.png)\n\n/dev/vdb2 PV 现在已从 vg-alpha VG 删除，并可以添加到其他 VG 。或者 ，也可以使用 pvremove 永久停止将设备用作 PV。\n\n##### 扩展逻辑卷和 XFS 文件系统\n\n逻辑卷是一个优势在于能够在不停机的情况下增加其大小。可将卷组中的空闲物理区段添加到逻辑卷以扩展其容量，然后可使用逻辑卷扩展所包含的文件系统。\n\n###### 扩展逻辑卷需要三个步骤：  \n\n1、验证卷组是否具有可用的空间\n\n 使用 vgdisplay 验证是否有足够的物理区段供使用。\n\n![image.png](1532935692930444.png)\n\n检查输入中的 Free PE /Size ，它应该报告一个等于或大于所需额外空间的值 。如果没有足够的可用空间，则卷组扩展幅度至少要达到所需空间的大小。\n\n2、扩展逻辑卷\n\n lvextend 可将逻辑卷扩展为新的大小。添加 LV设备名称作为命令的最后一个参数。\n\n![image.png](1532935843642498.png)\n\n此命令可将逻辑卷 hercules 的大小增加 300 M 。请注意空间大小前面的”+“，它表示 向现有大小增加此值；如无该符号，该值定义 LV 的最终确切大小。  \n\n与 lvcreate 类似，有多种方式可以指定大小：-l 通常要求物理区段值，而 -L 要求以字节或更大的单位表示 。\n\nlvextend -l 128 ：将逻辑卷的大小调整为正好 128 个范围\n\nlvextend -l +128：向逻辑卷的当前大小添加128 个范围\n\nlvextend -L 128M：将逻辑卷的大小调整为正好128M\n\nlvextend -L +128M：向逻辑卷的当前大小增加128M\n\nlvextend -l +50%FREEE：向 LV 添加 VG 中当前可以空间的 50%\n\n3、扩展文件系统\n\nxfs_growfs /mountpoint 扩展文件系统以占用已扩展的 LV。 xfs_growfs 要求在文件系统运行时进行搭载该系统；在调整大小操作期间仍然可以使用该文件系统。\n\n![image.png](1532936322407591.png)\n\n###### 注意：\n\n常见错误是运行 lvextend 但忘记运行 xfs_growfs  。两步合二为一的方法是 lvextend 使用 -r 作为命令的一个选项，这将使用 fsadm（8） 在扩展 LV后调整文件系统的大小。它可以用于多种不同的文件系统。\n\n###### 验证已挂载文件系统的新大小：\n```sh\ndf -h /mountpoint\n```\n###### 扩展逻辑卷和ext 4文件系统  \n\n扩展基于ext4 的逻辑卷的步骤基本和扩展基于 xfs的 LV 相同，只有调整文件系统大小的步骤不同\n\n1、验证卷组的可用性\n\n2、扩展逻辑卷\n\n3、扩展文件系统\n\nresize2fs /dev/vgname/lvname 扩展文件系统以占用新扩展的 LV。正与 xfs_growfs 一样，可以在文件系统正在运行时挂载该文件系统（可选）包含 -p 选项以查看调整大小操作的进度。\n\n![image.png](1533021882431708.png)\n\n###### 注意：\n\nxfs_growfs 与 resize2fs 之间的主要区别是为识别文件系统而传递的参数。\n\nxfs_growfs 采用挂载点，而resize2fs  采用逻辑卷名称。\n\n##### 总结：\n\n###### 管理逻辑卷\n\n*   pvcreate、pvremove和pvdisplay 创建、删除和列出物理卷（PV）\n\n*   vgcreate、vgremove和vgdisplay 创建、删除和列出卷组（VG）\n\n*   lvcreate、lvremove和lvdisplay 创建、删除和列出逻辑卷（LV）\n\n*   添加逻辑卷以 PV、VG、和 LV的先后顺序完成。\n\n*   删除逻辑卷以 LV、VG、和 PV 的先后顺序完成。\n\n\n###### 扩展逻辑卷\n\n*   使用 pvcreate 和 vgextend 扩展卷组（VG）；使用vgdisplay 检查结果。\n\n*   使用pvmove 和 vgreduce 缩减 VG 。\n\n*   使用xfs_growfs 调整xfs 文件系统的大小。\n\n*   使用 resize2fs 调整ext4 文件系统的大小。\n","slug":"rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8","published":1,"updated":"2019-01-06T17:45:52.945Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqmlqi2b0023lxkjai60f8o1","content":"<h3 id=\"逻辑卷管理（LVM）概念\"><a href=\"#逻辑卷管理（LVM）概念\" class=\"headerlink\" title=\"逻辑卷管理（LVM）概念\"></a>逻辑卷管理（LVM）概念</h3><p>逻辑卷和逻辑卷管理有助于更加轻松的管理磁盘空间。如果 LVM 托管的文件系统需要更多的空间，可以将其卷组中的可用空间分配给逻辑卷，并且可以调整文件系统的大小。如果磁盘开始出现错误，可以将替换磁盘注册为物理卷放入卷组中，并且逻辑卷的区块可迁移到新磁盘。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532914548221728.png\" alt=\"image.png\"></p>\n<ul>\n<li><p>物理设备是用于保留逻辑卷中所存储的存储设备。它们是块设备，可以是磁盘分区、整个磁盘、RAID阵列或SAN磁盘。设备必须初始化为 LVM 物理卷，才能与 LVM结合使用。整个”设备“将作用一个物理卷。</p>\n</li>\n<li><p>物理卷（PV）用于注册基础物理设备以便在卷组中使用。 LVM 自动将 PV划分为物理区块(PE);它们是充当 PV 是最小的存储块的小块数据。</p>\n</li>\n<li><p>卷组（VG） 是存储池，由一个或多个物理卷组成。一个PV只能分配给一个 VG ，VG 可以包含未使用的空间和任意数目的逻辑卷。</p>\n</li>\n<li><p>逻辑卷（LV）根据卷组中的空闲物理范围创建，提供应用、用户和操作系统所使用的”存储“设备。 LV是逻辑区块 （ LE）的集合， LE映射到物理区块（PV 的最小存储块）。默认情况下，每个 LE将映射到一个PE ，设置特定的 LV选项将会更改此映射；例如：镜像会导致每个 LE映射到两个 PE。</p>\n</li>\n</ul>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532915362809606.png\" alt=\"image.png\"></p>\n<h4 id=\"管理逻辑卷\"><a href=\"#管理逻辑卷\" class=\"headerlink\" title=\"管理逻辑卷\"></a>管理逻辑卷</h4><h5 id=\"创建逻辑卷\"><a href=\"#创建逻辑卷\" class=\"headerlink\" title=\"创建逻辑卷\"></a>创建逻辑卷</h5><h6 id=\"创建可用的逻辑卷需要五个步骤：\"><a href=\"#创建可用的逻辑卷需要五个步骤：\" class=\"headerlink\" title=\"创建可用的逻辑卷需要五个步骤：\"></a>创建可用的逻辑卷需要五个步骤：</h6><p>1、准备物理设备</p>\n<p> 使用 fdisk 、gdisk 或 parted 创建新分区，以便与 LVM 结合使用。在 LVM 分区上，始终将分区类型设备为 Linux LVM 。也可以使用完成的磁盘、RAID 阵列或 SAN 磁盘。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532915604992709.png\" alt=\"image.png\"></p>\n<p>2、创建物理卷</p>\n<p>使用pvcreate 为分区（或其他物理设备）添加标签，使其作为物理卷与 LVM 结合使用。会将用于存储 LVM 配置数据的一个标头直接写入到 PV ，PV 分为多个固定大小的物理范围（PE），以空格分隔多个设备名。  </p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532915758521488.png\" alt=\"image.png\"></p>\n<p>此命令会将设备 /dev/vda2 和 /dev/vdb1 标记为 PV，准备好分配到卷组中。</p>\n<p>仅当没有空闲的 PV 可以创建或扩展 VG 时，才需要创建 PV</p>\n<p>3、创建卷组</p>\n<p> vgcreate 用于创建包含一个或多个物理卷的池，称为卷组。 VG 的大小由池中的物理范围的总数决定。 VG  负责通过向 LV 分配空闲 PE 来托管一个或多个逻辑卷；因此 ，在创建 LV时 ,VG 必须具有足够的空闲 PE 可用。</p>\n<p>以 vgcreate 的参数形式，定义 VG 名称并列出一个或多个要分配给 VG 的 PV。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532916156887043.png\" alt=\"image.png\"></p>\n<p>此命令将创建名为 vg-alpha 的 VG ，它的大小是 /dev/sda2 和 /dev/vdb1 ，这两个PV的总大小（以PE单位计）</p>\n<p>仅当没有现有 VG 时才需要创建VG.可能会出于管理原因创建额外的 VG ，用于管理 PV和 LV的使用。否则，可在需要时扩展现有 VG 以容纳新的 LV。</p>\n<p>4、创建逻辑卷</p>\n<p> lvcreate 根据卷组中的可用物理范围创建新的逻辑卷。至少为 lvcreate 使用以下参数：使用 -n 选项设置 LV名称，使用 -L 选项设置 LV 大小（以字节为单位），并确定要在其中创建 LV 的 VG 名称。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532916442904085.png\" alt=\"image.png\"></p>\n<p>此命令将在 VG vg-alpha 中创建一个名为 hercules 的 LV ，其大小为 2GB.必须有足够的空闲物理范围来分配 2GB，如有必要会将其取整为 PE 单元大小的倍数。</p>\n<p>有多种方式可以指定大小： -L 要求以字节或更大指定值为单位的大小。例如 M,G。-l 选项要求以物理范围数为单位进行衡量的大小。</p>\n<p>lvcreate -L 128M,将逻辑卷的大小确定为正好 128 MiB</p>\n<p>lvcreate -l 128,将逻辑卷的大小确定为正好128个范围（PE）的大小，大小取决于 PE 块的大小。</p>\n<h6 id=\"TIPS\"><a href=\"#TIPS\" class=\"headerlink\" title=\"TIPS :\"></a>TIPS :</h6><p>不同的工具将使用传统名称 /dev/vgname/lvname 或内核设备映射程序名。 /dev/mapper/vgname-lvname 。显示逻辑卷名。</p>\n<p>5、添加文件系统</p>\n<p>使用 mkfs 在新逻辑卷上创建文件系统（xfs,ext4）</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532917059786660.png\" alt=\"image.png\"></p>\n<h5 id=\"删除逻辑卷\"><a href=\"#删除逻辑卷\" class=\"headerlink\" title=\"删除逻辑卷\"></a>删除逻辑卷</h5><h6 id=\"删除所有逻辑卷组件需要四个步骤：\"><a href=\"#删除所有逻辑卷组件需要四个步骤：\" class=\"headerlink\" title=\"删除所有逻辑卷组件需要四个步骤：\"></a>删除所有逻辑卷组件需要四个步骤：</h6><p>1、准备文件系统</p>\n<p>将必须保留的所有数据移动到另一个文件系统，然后使用 umount 卸载该文件系统。不要忘记删除与此文件系统关联的任何/etc/fstab 条目</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923101657518.png\" alt=\"image.png\"></p>\n<h6 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips:\"></a>tips:</h6><p>删除逻辑卷会破坏该逻辑卷上存储的所有数据。删除逻辑卷之前，请备份或移动数据 </p>\n<p>2、删除逻辑卷</p>\n<p>使用 lvremove 删除不再使用的逻辑卷。使用设备名称作为参数。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923218881106.png\" alt=\"image.png\"></p>\n<p>运行此命令之前，必须卸载 LV 文件系统。删除 LV 之前，将请求确认</p>\n<p>LV 的物理范围将会被释放，并可用于分配给卷组中的现在 LV 或新 LV。</p>\n<p>3、删除卷组</p>\n<p>使用 vgremove 删除不再需要的卷组。使用 VG 名称作为参数。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923227946554.png\" alt=\"image.png\"></p>\n<p>VG 的物理卷组会被释放，并可用于分配给系统中的现在 VG 或新 VG</p>\n<p>4、删除物理卷</p>\n<p>使用 pvremove 删除不再需要的物理卷。使用空格分隔的 PV 设备列表同时删除多个 PV 。PV 元数据将从分区（或磁盘）清除，分区现在已空闲，可重新分配或重新格式化。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923483491728.png\" alt=\"image.png\"></p>\n<h5 id=\"查看-LVM-状态信息\"><a href=\"#查看-LVM-状态信息\" class=\"headerlink\" title=\"查看 LVM 状态信息\"></a>查看 LVM 状态信息</h5><p>使用 pvdisplay 显示有关物理卷的信息。如果未随命令指定任何参数，则它将列出有关系统上所有 PV 的信息。如果参数为特定设备名称，则将仅显示特定 PV 的信息。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923530769371.png\" alt=\"image.png\"></p>\n<ol>\n<li><p>PV Name 映射到设备名称</p>\n</li>\n<li><p>VG Name 显示将 PV 分配到的卷组。</p>\n</li>\n<li><p>PV Size 显示 PV 的物理大小，包括任何不可用的空间。</p>\n</li>\n<li><p>PE Size 是物理范围大小，它是逻辑卷中可分配的最小大小。</p>\n</li>\n</ol>\n<ol>\n<li>它也是计算以 PE 单位报告的任何值（如 Free PE）的大小时的倍数，例如：26个 PE x 4MiB（PE Size）可提供104 MiB 可用空间。逻辑卷大小将取整为 PE 单位的倍数。  </li>\n</ol>\n<ol start=\"6\">\n<li>Free PE 显示有多少 PE 单位可用于分配给新逻辑卷。</li>\n</ol>\n<h6 id=\"卷组\"><a href=\"#卷组\" class=\"headerlink\" title=\"卷组\"></a>卷组</h6><p> 使用 vgdisplay 显示有关卷组的信息。如果没有为命令指定任何变量，则它将显示有关所有 VG 的信息， 使用 VG 名称作为变量将仅显示该特定 VG 的信息。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923545926922.png\" alt=\"image.png\"></p>\n<ol>\n<li><p>VG Name 是此卷组的名称</p>\n</li>\n<li><p>VG Size 是存储池可用于逻辑卷分配的总大小。</p>\n</li>\n<li><p>Total PE 是以 PE 单位表示的总大小</p>\n</li>\n<li><p>Free PE /Size 显示 VG 中有多少空闲空间可用于分配给新 LV 或扩展现在 LV。</p>\n</li>\n</ol>\n<h6 id=\"逻辑卷\"><a href=\"#逻辑卷\" class=\"headerlink\" title=\"逻辑卷\"></a>逻辑卷</h6><p> 使用 lvdisplay 显示有关逻辑卷的信息。同样，如果未随命令指定任何参数，则将显示有关所有 LV 的信息； 而使用 LV 设备名称任何参数将仅显示有关该特定设备的信息。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923602504982.png\" alt=\"image.png\"></p>\n<ol>\n<li><p>LV Patch 显示此逻辑卷的设备名称；某些工具可能会将设备名报告为/dev/mapper/vgname-lvname; 两个名称都表示同一 LV </p>\n</li>\n<li><p>VG Name 显示从其分配 LV的卷组。</p>\n</li>\n<li><p>LV Size 显示 LV的总大小。使用文件系统工具检查可用空间和数据存储的已用空间。</p>\n</li>\n<li><p>Current LE 显示此 LV 使用的逻辑范围数。 LE 通常映射到 VG 中的物理范围，并因此映射到物理卷。</p>\n</li>\n</ol>\n<h5 id=\"扩展逻辑卷\"><a href=\"#扩展逻辑卷\" class=\"headerlink\" title=\"扩展逻辑卷\"></a>扩展逻辑卷</h5><h6 id=\"扩展和缩减卷组\"><a href=\"#扩展和缩减卷组\" class=\"headerlink\" title=\"扩展和缩减卷组\"></a>扩展和缩减卷组</h6><p>可以通过添加额外的物理卷来为卷组增加更多磁盘空间。这种做法称为扩展卷组。由额外的物理卷提供的新物理区段可以分配给逻辑卷。</p>\n<p>可以将未使用的物理卷从卷组中删除。这种做法称为缩减卷组。可以使用名为 pvmove 的工具，将数据从一个物理卷上的区段移动到卷组中其他物理卷上的区段。通过这种方式，可以将新磁盘添加到现在卷组，将数据从较旧或较慢的磁盘移动到新磁盘，并将旧磁盘从卷组中删除。可在卷组中的逻辑卷正在使用时完成这些操作。</p>\n<h6 id=\"扩展卷组可能需要四个步骤：\"><a href=\"#扩展卷组可能需要四个步骤：\" class=\"headerlink\" title=\"扩展卷组可能需要四个步骤：\"></a>扩展卷组可能需要四个步骤：</h6><p>1、准备物理设备</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934683798263.png\" alt=\"image.png\"></p>\n<p>2、创建物理卷</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934694227911.png\" alt=\"image.png\"></p>\n<p>3、扩展卷组</p>\n<p>vgextend 用于向卷组添加新物理卷。使用 VG 名称和 PV 设备名称作为 vgextend 的参数。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934705170371.png\" alt=\"image.png\"></p>\n<p>4、验证新空间是否可用</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934716787931.png\" alt=\"image.png\"></p>\n<h6 id=\"缩减卷组需要两个步骤：\"><a href=\"#缩减卷组需要两个步骤：\" class=\"headerlink\" title=\"缩减卷组需要两个步骤：\"></a>缩减卷组需要两个步骤：</h6><p>1、移动物理区段</p>\n<p>使用 pvmove将物理卷上使用的任何物理区段重新分配给 VG 中的其他 PV。仅当 VG 中存在足够的空间范围，且所有这些范围都来自其他 PV 时，才能执行此操作。使用将移动的 PE 所属的 PV 设备名称作为该命令的参数。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934896111896.png\" alt=\"image.png\"></p>\n<h5 id=\"警告：\"><a href=\"#警告：\" class=\"headerlink\" title=\"警告：\"></a>警告：</h5><p>使用 pvmove 前建议备份卷组所有逻辑卷上存储的数据。如果操作期间意外断电，可能会导致卷组状态不一致。这可能导致卷组中逻辑卷上的数据丢失。</p>\n<p>2、缩减卷组</p>\n<p>使用 vgreduce 将物理卷从卷组中删除。使用VG 名称和 PV 设备名称作为该命令参数。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532935348576038.png\" alt=\"image.png\"></p>\n<p>/dev/vdb2 PV 现在已从 vg-alpha VG 删除，并可以添加到其他 VG 。或者 ，也可以使用 pvremove 永久停止将设备用作 PV。</p>\n<h5 id=\"扩展逻辑卷和-XFS-文件系统\"><a href=\"#扩展逻辑卷和-XFS-文件系统\" class=\"headerlink\" title=\"扩展逻辑卷和 XFS 文件系统\"></a>扩展逻辑卷和 XFS 文件系统</h5><p>逻辑卷是一个优势在于能够在不停机的情况下增加其大小。可将卷组中的空闲物理区段添加到逻辑卷以扩展其容量，然后可使用逻辑卷扩展所包含的文件系统。</p>\n<h6 id=\"扩展逻辑卷需要三个步骤：\"><a href=\"#扩展逻辑卷需要三个步骤：\" class=\"headerlink\" title=\"扩展逻辑卷需要三个步骤：\"></a>扩展逻辑卷需要三个步骤：</h6><p>1、验证卷组是否具有可用的空间</p>\n<p> 使用 vgdisplay 验证是否有足够的物理区段供使用。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532935692930444.png\" alt=\"image.png\"></p>\n<p>检查输入中的 Free PE /Size ，它应该报告一个等于或大于所需额外空间的值 。如果没有足够的可用空间，则卷组扩展幅度至少要达到所需空间的大小。</p>\n<p>2、扩展逻辑卷</p>\n<p> lvextend 可将逻辑卷扩展为新的大小。添加 LV设备名称作为命令的最后一个参数。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532935843642498.png\" alt=\"image.png\"></p>\n<p>此命令可将逻辑卷 hercules 的大小增加 300 M 。请注意空间大小前面的”+“，它表示 向现有大小增加此值；如无该符号，该值定义 LV 的最终确切大小。  </p>\n<p>与 lvcreate 类似，有多种方式可以指定大小：-l 通常要求物理区段值，而 -L 要求以字节或更大的单位表示 。</p>\n<p>lvextend -l 128 ：将逻辑卷的大小调整为正好 128 个范围</p>\n<p>lvextend -l +128：向逻辑卷的当前大小添加128 个范围</p>\n<p>lvextend -L 128M：将逻辑卷的大小调整为正好128M</p>\n<p>lvextend -L +128M：向逻辑卷的当前大小增加128M</p>\n<p>lvextend -l +50%FREEE：向 LV 添加 VG 中当前可以空间的 50%</p>\n<p>3、扩展文件系统</p>\n<p>xfs_growfs /mountpoint 扩展文件系统以占用已扩展的 LV。 xfs_growfs 要求在文件系统运行时进行搭载该系统；在调整大小操作期间仍然可以使用该文件系统。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532936322407591.png\" alt=\"image.png\"></p>\n<h6 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h6><p>常见错误是运行 lvextend 但忘记运行 xfs_growfs  。两步合二为一的方法是 lvextend 使用 -r 作为命令的一个选项，这将使用 fsadm（8） 在扩展 LV后调整文件系统的大小。它可以用于多种不同的文件系统。</p>\n<h6 id=\"验证已挂载文件系统的新大小：\"><a href=\"#验证已挂载文件系统的新大小：\" class=\"headerlink\" title=\"验证已挂载文件系统的新大小：\"></a>验证已挂载文件系统的新大小：</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h /mountpoint</span><br></pre></td></tr></table></figure>\n<h6 id=\"扩展逻辑卷和ext-4文件系统\"><a href=\"#扩展逻辑卷和ext-4文件系统\" class=\"headerlink\" title=\"扩展逻辑卷和ext 4文件系统\"></a>扩展逻辑卷和ext 4文件系统</h6><p>扩展基于ext4 的逻辑卷的步骤基本和扩展基于 xfs的 LV 相同，只有调整文件系统大小的步骤不同</p>\n<p>1、验证卷组的可用性</p>\n<p>2、扩展逻辑卷</p>\n<p>3、扩展文件系统</p>\n<p>resize2fs /dev/vgname/lvname 扩展文件系统以占用新扩展的 LV。正与 xfs_growfs 一样，可以在文件系统正在运行时挂载该文件系统（可选）包含 -p 选项以查看调整大小操作的进度。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1533021882431708.png\" alt=\"image.png\"></p>\n<h6 id=\"注意：-1\"><a href=\"#注意：-1\" class=\"headerlink\" title=\"注意：\"></a>注意：</h6><p>xfs_growfs 与 resize2fs 之间的主要区别是为识别文件系统而传递的参数。</p>\n<p>xfs_growfs 采用挂载点，而resize2fs  采用逻辑卷名称。</p>\n<h5 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h5><h6 id=\"管理逻辑卷-1\"><a href=\"#管理逻辑卷-1\" class=\"headerlink\" title=\"管理逻辑卷\"></a>管理逻辑卷</h6><ul>\n<li><p>pvcreate、pvremove和pvdisplay 创建、删除和列出物理卷（PV）</p>\n</li>\n<li><p>vgcreate、vgremove和vgdisplay 创建、删除和列出卷组（VG）</p>\n</li>\n<li><p>lvcreate、lvremove和lvdisplay 创建、删除和列出逻辑卷（LV）</p>\n</li>\n<li><p>添加逻辑卷以 PV、VG、和 LV的先后顺序完成。</p>\n</li>\n<li><p>删除逻辑卷以 LV、VG、和 PV 的先后顺序完成。</p>\n</li>\n</ul>\n<h6 id=\"扩展逻辑卷-1\"><a href=\"#扩展逻辑卷-1\" class=\"headerlink\" title=\"扩展逻辑卷\"></a>扩展逻辑卷</h6><ul>\n<li><p>使用 pvcreate 和 vgextend 扩展卷组（VG）；使用vgdisplay 检查结果。</p>\n</li>\n<li><p>使用pvmove 和 vgreduce 缩减 VG 。</p>\n</li>\n<li><p>使用xfs_growfs 调整xfs 文件系统的大小。</p>\n</li>\n<li><p>使用 resize2fs 调整ext4 文件系统的大小。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"逻辑卷管理（LVM）概念\"><a href=\"#逻辑卷管理（LVM）概念\" class=\"headerlink\" title=\"逻辑卷管理（LVM）概念\"></a>逻辑卷管理（LVM）概念</h3><p>逻辑卷和逻辑卷管理有助于更加轻松的管理磁盘空间。如果 LVM 托管的文件系统需要更多的空间，可以将其卷组中的可用空间分配给逻辑卷，并且可以调整文件系统的大小。如果磁盘开始出现错误，可以将替换磁盘注册为物理卷放入卷组中，并且逻辑卷的区块可迁移到新磁盘。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532914548221728.png\" alt=\"image.png\"></p>\n<ul>\n<li><p>物理设备是用于保留逻辑卷中所存储的存储设备。它们是块设备，可以是磁盘分区、整个磁盘、RAID阵列或SAN磁盘。设备必须初始化为 LVM 物理卷，才能与 LVM结合使用。整个”设备“将作用一个物理卷。</p>\n</li>\n<li><p>物理卷（PV）用于注册基础物理设备以便在卷组中使用。 LVM 自动将 PV划分为物理区块(PE);它们是充当 PV 是最小的存储块的小块数据。</p>\n</li>\n<li><p>卷组（VG） 是存储池，由一个或多个物理卷组成。一个PV只能分配给一个 VG ，VG 可以包含未使用的空间和任意数目的逻辑卷。</p>\n</li>\n<li><p>逻辑卷（LV）根据卷组中的空闲物理范围创建，提供应用、用户和操作系统所使用的”存储“设备。 LV是逻辑区块 （ LE）的集合， LE映射到物理区块（PV 的最小存储块）。默认情况下，每个 LE将映射到一个PE ，设置特定的 LV选项将会更改此映射；例如：镜像会导致每个 LE映射到两个 PE。</p>\n</li>\n</ul>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532915362809606.png\" alt=\"image.png\"></p>\n<h4 id=\"管理逻辑卷\"><a href=\"#管理逻辑卷\" class=\"headerlink\" title=\"管理逻辑卷\"></a>管理逻辑卷</h4><h5 id=\"创建逻辑卷\"><a href=\"#创建逻辑卷\" class=\"headerlink\" title=\"创建逻辑卷\"></a>创建逻辑卷</h5><h6 id=\"创建可用的逻辑卷需要五个步骤：\"><a href=\"#创建可用的逻辑卷需要五个步骤：\" class=\"headerlink\" title=\"创建可用的逻辑卷需要五个步骤：\"></a>创建可用的逻辑卷需要五个步骤：</h6><p>1、准备物理设备</p>\n<p> 使用 fdisk 、gdisk 或 parted 创建新分区，以便与 LVM 结合使用。在 LVM 分区上，始终将分区类型设备为 Linux LVM 。也可以使用完成的磁盘、RAID 阵列或 SAN 磁盘。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532915604992709.png\" alt=\"image.png\"></p>\n<p>2、创建物理卷</p>\n<p>使用pvcreate 为分区（或其他物理设备）添加标签，使其作为物理卷与 LVM 结合使用。会将用于存储 LVM 配置数据的一个标头直接写入到 PV ，PV 分为多个固定大小的物理范围（PE），以空格分隔多个设备名。  </p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532915758521488.png\" alt=\"image.png\"></p>\n<p>此命令会将设备 /dev/vda2 和 /dev/vdb1 标记为 PV，准备好分配到卷组中。</p>\n<p>仅当没有空闲的 PV 可以创建或扩展 VG 时，才需要创建 PV</p>\n<p>3、创建卷组</p>\n<p> vgcreate 用于创建包含一个或多个物理卷的池，称为卷组。 VG 的大小由池中的物理范围的总数决定。 VG  负责通过向 LV 分配空闲 PE 来托管一个或多个逻辑卷；因此 ，在创建 LV时 ,VG 必须具有足够的空闲 PE 可用。</p>\n<p>以 vgcreate 的参数形式，定义 VG 名称并列出一个或多个要分配给 VG 的 PV。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532916156887043.png\" alt=\"image.png\"></p>\n<p>此命令将创建名为 vg-alpha 的 VG ，它的大小是 /dev/sda2 和 /dev/vdb1 ，这两个PV的总大小（以PE单位计）</p>\n<p>仅当没有现有 VG 时才需要创建VG.可能会出于管理原因创建额外的 VG ，用于管理 PV和 LV的使用。否则，可在需要时扩展现有 VG 以容纳新的 LV。</p>\n<p>4、创建逻辑卷</p>\n<p> lvcreate 根据卷组中的可用物理范围创建新的逻辑卷。至少为 lvcreate 使用以下参数：使用 -n 选项设置 LV名称，使用 -L 选项设置 LV 大小（以字节为单位），并确定要在其中创建 LV 的 VG 名称。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532916442904085.png\" alt=\"image.png\"></p>\n<p>此命令将在 VG vg-alpha 中创建一个名为 hercules 的 LV ，其大小为 2GB.必须有足够的空闲物理范围来分配 2GB，如有必要会将其取整为 PE 单元大小的倍数。</p>\n<p>有多种方式可以指定大小： -L 要求以字节或更大指定值为单位的大小。例如 M,G。-l 选项要求以物理范围数为单位进行衡量的大小。</p>\n<p>lvcreate -L 128M,将逻辑卷的大小确定为正好 128 MiB</p>\n<p>lvcreate -l 128,将逻辑卷的大小确定为正好128个范围（PE）的大小，大小取决于 PE 块的大小。</p>\n<h6 id=\"TIPS\"><a href=\"#TIPS\" class=\"headerlink\" title=\"TIPS :\"></a>TIPS :</h6><p>不同的工具将使用传统名称 /dev/vgname/lvname 或内核设备映射程序名。 /dev/mapper/vgname-lvname 。显示逻辑卷名。</p>\n<p>5、添加文件系统</p>\n<p>使用 mkfs 在新逻辑卷上创建文件系统（xfs,ext4）</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532917059786660.png\" alt=\"image.png\"></p>\n<h5 id=\"删除逻辑卷\"><a href=\"#删除逻辑卷\" class=\"headerlink\" title=\"删除逻辑卷\"></a>删除逻辑卷</h5><h6 id=\"删除所有逻辑卷组件需要四个步骤：\"><a href=\"#删除所有逻辑卷组件需要四个步骤：\" class=\"headerlink\" title=\"删除所有逻辑卷组件需要四个步骤：\"></a>删除所有逻辑卷组件需要四个步骤：</h6><p>1、准备文件系统</p>\n<p>将必须保留的所有数据移动到另一个文件系统，然后使用 umount 卸载该文件系统。不要忘记删除与此文件系统关联的任何/etc/fstab 条目</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923101657518.png\" alt=\"image.png\"></p>\n<h6 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips:\"></a>tips:</h6><p>删除逻辑卷会破坏该逻辑卷上存储的所有数据。删除逻辑卷之前，请备份或移动数据 </p>\n<p>2、删除逻辑卷</p>\n<p>使用 lvremove 删除不再使用的逻辑卷。使用设备名称作为参数。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923218881106.png\" alt=\"image.png\"></p>\n<p>运行此命令之前，必须卸载 LV 文件系统。删除 LV 之前，将请求确认</p>\n<p>LV 的物理范围将会被释放，并可用于分配给卷组中的现在 LV 或新 LV。</p>\n<p>3、删除卷组</p>\n<p>使用 vgremove 删除不再需要的卷组。使用 VG 名称作为参数。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923227946554.png\" alt=\"image.png\"></p>\n<p>VG 的物理卷组会被释放，并可用于分配给系统中的现在 VG 或新 VG</p>\n<p>4、删除物理卷</p>\n<p>使用 pvremove 删除不再需要的物理卷。使用空格分隔的 PV 设备列表同时删除多个 PV 。PV 元数据将从分区（或磁盘）清除，分区现在已空闲，可重新分配或重新格式化。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923483491728.png\" alt=\"image.png\"></p>\n<h5 id=\"查看-LVM-状态信息\"><a href=\"#查看-LVM-状态信息\" class=\"headerlink\" title=\"查看 LVM 状态信息\"></a>查看 LVM 状态信息</h5><p>使用 pvdisplay 显示有关物理卷的信息。如果未随命令指定任何参数，则它将列出有关系统上所有 PV 的信息。如果参数为特定设备名称，则将仅显示特定 PV 的信息。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923530769371.png\" alt=\"image.png\"></p>\n<ol>\n<li><p>PV Name 映射到设备名称</p>\n</li>\n<li><p>VG Name 显示将 PV 分配到的卷组。</p>\n</li>\n<li><p>PV Size 显示 PV 的物理大小，包括任何不可用的空间。</p>\n</li>\n<li><p>PE Size 是物理范围大小，它是逻辑卷中可分配的最小大小。</p>\n</li>\n</ol>\n<ol>\n<li>它也是计算以 PE 单位报告的任何值（如 Free PE）的大小时的倍数，例如：26个 PE x 4MiB（PE Size）可提供104 MiB 可用空间。逻辑卷大小将取整为 PE 单位的倍数。  </li>\n</ol>\n<ol start=\"6\">\n<li>Free PE 显示有多少 PE 单位可用于分配给新逻辑卷。</li>\n</ol>\n<h6 id=\"卷组\"><a href=\"#卷组\" class=\"headerlink\" title=\"卷组\"></a>卷组</h6><p> 使用 vgdisplay 显示有关卷组的信息。如果没有为命令指定任何变量，则它将显示有关所有 VG 的信息， 使用 VG 名称作为变量将仅显示该特定 VG 的信息。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923545926922.png\" alt=\"image.png\"></p>\n<ol>\n<li><p>VG Name 是此卷组的名称</p>\n</li>\n<li><p>VG Size 是存储池可用于逻辑卷分配的总大小。</p>\n</li>\n<li><p>Total PE 是以 PE 单位表示的总大小</p>\n</li>\n<li><p>Free PE /Size 显示 VG 中有多少空闲空间可用于分配给新 LV 或扩展现在 LV。</p>\n</li>\n</ol>\n<h6 id=\"逻辑卷\"><a href=\"#逻辑卷\" class=\"headerlink\" title=\"逻辑卷\"></a>逻辑卷</h6><p> 使用 lvdisplay 显示有关逻辑卷的信息。同样，如果未随命令指定任何参数，则将显示有关所有 LV 的信息； 而使用 LV 设备名称任何参数将仅显示有关该特定设备的信息。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923602504982.png\" alt=\"image.png\"></p>\n<ol>\n<li><p>LV Patch 显示此逻辑卷的设备名称；某些工具可能会将设备名报告为/dev/mapper/vgname-lvname; 两个名称都表示同一 LV </p>\n</li>\n<li><p>VG Name 显示从其分配 LV的卷组。</p>\n</li>\n<li><p>LV Size 显示 LV的总大小。使用文件系统工具检查可用空间和数据存储的已用空间。</p>\n</li>\n<li><p>Current LE 显示此 LV 使用的逻辑范围数。 LE 通常映射到 VG 中的物理范围，并因此映射到物理卷。</p>\n</li>\n</ol>\n<h5 id=\"扩展逻辑卷\"><a href=\"#扩展逻辑卷\" class=\"headerlink\" title=\"扩展逻辑卷\"></a>扩展逻辑卷</h5><h6 id=\"扩展和缩减卷组\"><a href=\"#扩展和缩减卷组\" class=\"headerlink\" title=\"扩展和缩减卷组\"></a>扩展和缩减卷组</h6><p>可以通过添加额外的物理卷来为卷组增加更多磁盘空间。这种做法称为扩展卷组。由额外的物理卷提供的新物理区段可以分配给逻辑卷。</p>\n<p>可以将未使用的物理卷从卷组中删除。这种做法称为缩减卷组。可以使用名为 pvmove 的工具，将数据从一个物理卷上的区段移动到卷组中其他物理卷上的区段。通过这种方式，可以将新磁盘添加到现在卷组，将数据从较旧或较慢的磁盘移动到新磁盘，并将旧磁盘从卷组中删除。可在卷组中的逻辑卷正在使用时完成这些操作。</p>\n<h6 id=\"扩展卷组可能需要四个步骤：\"><a href=\"#扩展卷组可能需要四个步骤：\" class=\"headerlink\" title=\"扩展卷组可能需要四个步骤：\"></a>扩展卷组可能需要四个步骤：</h6><p>1、准备物理设备</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934683798263.png\" alt=\"image.png\"></p>\n<p>2、创建物理卷</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934694227911.png\" alt=\"image.png\"></p>\n<p>3、扩展卷组</p>\n<p>vgextend 用于向卷组添加新物理卷。使用 VG 名称和 PV 设备名称作为 vgextend 的参数。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934705170371.png\" alt=\"image.png\"></p>\n<p>4、验证新空间是否可用</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934716787931.png\" alt=\"image.png\"></p>\n<h6 id=\"缩减卷组需要两个步骤：\"><a href=\"#缩减卷组需要两个步骤：\" class=\"headerlink\" title=\"缩减卷组需要两个步骤：\"></a>缩减卷组需要两个步骤：</h6><p>1、移动物理区段</p>\n<p>使用 pvmove将物理卷上使用的任何物理区段重新分配给 VG 中的其他 PV。仅当 VG 中存在足够的空间范围，且所有这些范围都来自其他 PV 时，才能执行此操作。使用将移动的 PE 所属的 PV 设备名称作为该命令的参数。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934896111896.png\" alt=\"image.png\"></p>\n<h5 id=\"警告：\"><a href=\"#警告：\" class=\"headerlink\" title=\"警告：\"></a>警告：</h5><p>使用 pvmove 前建议备份卷组所有逻辑卷上存储的数据。如果操作期间意外断电，可能会导致卷组状态不一致。这可能导致卷组中逻辑卷上的数据丢失。</p>\n<p>2、缩减卷组</p>\n<p>使用 vgreduce 将物理卷从卷组中删除。使用VG 名称和 PV 设备名称作为该命令参数。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532935348576038.png\" alt=\"image.png\"></p>\n<p>/dev/vdb2 PV 现在已从 vg-alpha VG 删除，并可以添加到其他 VG 。或者 ，也可以使用 pvremove 永久停止将设备用作 PV。</p>\n<h5 id=\"扩展逻辑卷和-XFS-文件系统\"><a href=\"#扩展逻辑卷和-XFS-文件系统\" class=\"headerlink\" title=\"扩展逻辑卷和 XFS 文件系统\"></a>扩展逻辑卷和 XFS 文件系统</h5><p>逻辑卷是一个优势在于能够在不停机的情况下增加其大小。可将卷组中的空闲物理区段添加到逻辑卷以扩展其容量，然后可使用逻辑卷扩展所包含的文件系统。</p>\n<h6 id=\"扩展逻辑卷需要三个步骤：\"><a href=\"#扩展逻辑卷需要三个步骤：\" class=\"headerlink\" title=\"扩展逻辑卷需要三个步骤：\"></a>扩展逻辑卷需要三个步骤：</h6><p>1、验证卷组是否具有可用的空间</p>\n<p> 使用 vgdisplay 验证是否有足够的物理区段供使用。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532935692930444.png\" alt=\"image.png\"></p>\n<p>检查输入中的 Free PE /Size ，它应该报告一个等于或大于所需额外空间的值 。如果没有足够的可用空间，则卷组扩展幅度至少要达到所需空间的大小。</p>\n<p>2、扩展逻辑卷</p>\n<p> lvextend 可将逻辑卷扩展为新的大小。添加 LV设备名称作为命令的最后一个参数。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532935843642498.png\" alt=\"image.png\"></p>\n<p>此命令可将逻辑卷 hercules 的大小增加 300 M 。请注意空间大小前面的”+“，它表示 向现有大小增加此值；如无该符号，该值定义 LV 的最终确切大小。  </p>\n<p>与 lvcreate 类似，有多种方式可以指定大小：-l 通常要求物理区段值，而 -L 要求以字节或更大的单位表示 。</p>\n<p>lvextend -l 128 ：将逻辑卷的大小调整为正好 128 个范围</p>\n<p>lvextend -l +128：向逻辑卷的当前大小添加128 个范围</p>\n<p>lvextend -L 128M：将逻辑卷的大小调整为正好128M</p>\n<p>lvextend -L +128M：向逻辑卷的当前大小增加128M</p>\n<p>lvextend -l +50%FREEE：向 LV 添加 VG 中当前可以空间的 50%</p>\n<p>3、扩展文件系统</p>\n<p>xfs_growfs /mountpoint 扩展文件系统以占用已扩展的 LV。 xfs_growfs 要求在文件系统运行时进行搭载该系统；在调整大小操作期间仍然可以使用该文件系统。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532936322407591.png\" alt=\"image.png\"></p>\n<h6 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h6><p>常见错误是运行 lvextend 但忘记运行 xfs_growfs  。两步合二为一的方法是 lvextend 使用 -r 作为命令的一个选项，这将使用 fsadm（8） 在扩展 LV后调整文件系统的大小。它可以用于多种不同的文件系统。</p>\n<h6 id=\"验证已挂载文件系统的新大小：\"><a href=\"#验证已挂载文件系统的新大小：\" class=\"headerlink\" title=\"验证已挂载文件系统的新大小：\"></a>验证已挂载文件系统的新大小：</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h /mountpoint</span><br></pre></td></tr></table></figure>\n<h6 id=\"扩展逻辑卷和ext-4文件系统\"><a href=\"#扩展逻辑卷和ext-4文件系统\" class=\"headerlink\" title=\"扩展逻辑卷和ext 4文件系统\"></a>扩展逻辑卷和ext 4文件系统</h6><p>扩展基于ext4 的逻辑卷的步骤基本和扩展基于 xfs的 LV 相同，只有调整文件系统大小的步骤不同</p>\n<p>1、验证卷组的可用性</p>\n<p>2、扩展逻辑卷</p>\n<p>3、扩展文件系统</p>\n<p>resize2fs /dev/vgname/lvname 扩展文件系统以占用新扩展的 LV。正与 xfs_growfs 一样，可以在文件系统正在运行时挂载该文件系统（可选）包含 -p 选项以查看调整大小操作的进度。</p>\n<p><img src=\"/2018/07/31/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1533021882431708.png\" alt=\"image.png\"></p>\n<h6 id=\"注意：-1\"><a href=\"#注意：-1\" class=\"headerlink\" title=\"注意：\"></a>注意：</h6><p>xfs_growfs 与 resize2fs 之间的主要区别是为识别文件系统而传递的参数。</p>\n<p>xfs_growfs 采用挂载点，而resize2fs  采用逻辑卷名称。</p>\n<h5 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h5><h6 id=\"管理逻辑卷-1\"><a href=\"#管理逻辑卷-1\" class=\"headerlink\" title=\"管理逻辑卷\"></a>管理逻辑卷</h6><ul>\n<li><p>pvcreate、pvremove和pvdisplay 创建、删除和列出物理卷（PV）</p>\n</li>\n<li><p>vgcreate、vgremove和vgdisplay 创建、删除和列出卷组（VG）</p>\n</li>\n<li><p>lvcreate、lvremove和lvdisplay 创建、删除和列出逻辑卷（LV）</p>\n</li>\n<li><p>添加逻辑卷以 PV、VG、和 LV的先后顺序完成。</p>\n</li>\n<li><p>删除逻辑卷以 LV、VG、和 PV 的先后顺序完成。</p>\n</li>\n</ul>\n<h6 id=\"扩展逻辑卷-1\"><a href=\"#扩展逻辑卷-1\" class=\"headerlink\" title=\"扩展逻辑卷\"></a>扩展逻辑卷</h6><ul>\n<li><p>使用 pvcreate 和 vgextend 扩展卷组（VG）；使用vgdisplay 检查结果。</p>\n</li>\n<li><p>使用pvmove 和 vgreduce 缩减 VG 。</p>\n</li>\n<li><p>使用xfs_growfs 调整xfs 文件系统的大小。</p>\n</li>\n<li><p>使用 resize2fs 调整ext4 文件系统的大小。</p>\n</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/chapter-12-archiving-and-copying-files/1523583168668639.png","post":"cjqmlqhyo0004lxkjla5svw9n","slug":"1523583168668639.png","modified":1,"renderable":1},{"_id":"source/_posts/chapter-15-using-virtualized-system/1524011869875353.png","slug":"1524011869875353.png","post":"cjqmlqhyq0005lxkj367vvw9u","modified":1,"renderable":0},{"_id":"source/_posts/chapter-2-managing-files-from-the-command-line/1524194156616572.png","post":"cjqmlqhys0007lxkjhesune6b","slug":"1524194156616572.png","modified":1,"renderable":1},{"_id":"source/_posts/chapter-8-systemctl/1523433401385622.png","post":"cjqmlqhz6000hlxkjvzbnqhl7","slug":"1523433401385622.png","modified":1,"renderable":1},{"_id":"source/_posts/Chapter-10-Analyzing-and-Storing-Logs/1523427823840955.png","post":"cjqmlqhy80000lxkjwomnby1k","slug":"1523427823840955.png","modified":1,"renderable":1},{"_id":"source/_posts/Chapter-10-Analyzing-and-Storing-Logs/1523429897556805.png","post":"cjqmlqhy80000lxkjwomnby1k","slug":"1523429897556805.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85/1525422261580488.png","post":"cjqmlqhzf000ulxkjcd2n49ns","slug":"1525422261580488.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85/1525422300234129.png","post":"cjqmlqhzf000ulxkjcd2n49ns","slug":"1525422300234129.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85/1525422328135998.png","post":"cjqmlqhzf000ulxkjcd2n49ns","slug":"1525422328135998.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-80-e7-ab-a0-e4-bd-bf-e7-94-a8kickstart-e8-87-aa-e5-8a-a8-e5-ae-89-e8-a3-85/1525422388734744.png","post":"cjqmlqhzf000ulxkjcd2n49ns","slug":"1525422388734744.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526262567734231.png","post":"cjqmlqhzg000wlxkj06i4f3g7","slug":"1526262567734231.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526266653786433.png","post":"cjqmlqhzg000wlxkj06i4f3g7","slug":"1526266653786433.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526266685205928.png","post":"cjqmlqhzg000wlxkj06i4f3g7","slug":"1526266685205928.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526266722562134.png","post":"cjqmlqhzg000wlxkj06i4f3g7","slug":"1526266722562134.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-ba-94-e7-ab-a0-e7-ae-a1-e7-90-86linux-e8-bf-9b-e7-a8-8b-e4-bc-98-e5-85-88-e7-ba-a7/1526266750818667.png","post":"cjqmlqhzg000wlxkj06i4f3g7","slug":"1526266750818667.png","modified":1,"renderable":1},{"_id":"source/_posts/chapter-4-creatingviewingand-editing-text-files/1524818166553035.png","post":"cjqmlqhz0000blxkjkbjlofk4","slug":"1524818166553035.png","modified":1,"renderable":1},{"_id":"source/_posts/chapter-4-creatingviewingand-editing-text-files/1524818174855912.png","post":"cjqmlqhz0000blxkjkbjlofk4","slug":"1524818174855912.png","modified":1,"renderable":1},{"_id":"source/_posts/chapter-4-creatingviewingand-editing-text-files/1524818180473442.png","post":"cjqmlqhz0000blxkjkbjlofk4","slug":"1524818180473442.png","modified":1,"renderable":1},{"_id":"source/_posts/chapter-4-creatingviewingand-editing-text-files/1524818191991552.png","post":"cjqmlqhz0000blxkjkbjlofk4","slug":"1524818191991552.png","modified":1,"renderable":1},{"_id":"source/_posts/chapter-4-creatingviewingand-editing-text-files/1524818205308304.png","post":"cjqmlqhz0000blxkjkbjlofk4","slug":"1524818205308304.png","modified":1,"renderable":1},{"_id":"source/_posts/chapter-4-creatingviewingand-editing-text-files/1524818219547743.png","post":"cjqmlqhz0000blxkjkbjlofk4","slug":"1524818219547743.png","modified":1,"renderable":1},{"_id":"source/_posts/chapter-4-creatingviewingand-editing-text-files/1524823338808284.png","post":"cjqmlqhz0000blxkjkbjlofk4","slug":"1524823338808284.png","modified":1,"renderable":1},{"_id":"source/_posts/chapter-4-creatingviewingand-editing-text-files/1524823368317604.png","post":"cjqmlqhz0000blxkjkbjlofk4","slug":"1524823368317604.png","modified":1,"renderable":1},{"_id":"source/_posts/chapter-4-creatingviewingand-editing-text-files/1524823380758403.png","post":"cjqmlqhz0000blxkjkbjlofk4","slug":"1524823380758403.png","modified":1,"renderable":1},{"_id":"source/_posts/chatper-13-installing-and-updating-software-packages/1523863565421240.png","post":"cjqmlqi1q001flxkjjlgy9o2c","slug":"1523863565421240.png","modified":1,"renderable":1},{"_id":"source/_posts/chapter-14-accessing-linux-file-system/1523949252627674.png","post":"cjqmlqi1n001blxkjx8rfj2vu","slug":"1523949252627674.png","modified":1,"renderable":1},{"_id":"source/_posts/chapter-14-accessing-linux-file-system/1523949409259777.png","post":"cjqmlqi1n001blxkjx8rfj2vu","slug":"1523949409259777.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ab-e7-ab-a0-e8-bf-9e-e6-8e-a5-e5-88-b0-e7-bd-91-e7-bb-9c-e5-ae-9a-e4-b9-89-e7-9a-84-e7-94-a8-e6-88-b7-e5-92-8c-e7-bb-84/1530842356574303.png","post":"cjqmlqi1z001nlxkjcojie3a6","slug":"1530842356574303.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ab-e7-ab-a0-e8-bf-9e-e6-8e-a5-e5-88-b0-e7-bd-91-e7-bb-9c-e5-ae-9a-e4-b9-89-e7-9a-84-e7-94-a8-e6-88-b7-e5-92-8c-e7-bb-84/1530861460111883.png","post":"cjqmlqi1z001nlxkjcojie3a6","slug":"1530861460111883.png","modified":1,"renderable":1},{"_id":"source/_posts/chapter-5-managing-local-linux-users-and-groups/1524823773815913.png","post":"cjqmlqi1p001elxkjoso1mm8e","slug":"1524823773815913.png","modified":1,"renderable":1},{"_id":"source/_posts/chapter-5-managing-local-linux-users-and-groups/1525166687554964.png","post":"cjqmlqi1p001elxkjoso1mm8e","slug":"1525166687554964.png","modified":1,"renderable":1},{"_id":"source/_posts/chapter-5-managing-local-linux-users-and-groups/1525167668913001.png","post":"cjqmlqi1p001elxkjoso1mm8e","slug":"1525167668913001.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e5-8d-81-e4-ba-94-e7-ab-a0-e7-b3-bb-e7-bb-9f-e7-ae-a1-e7-90-86-e4-ba-8c-e6-80-bb-e5-a4-8d-e4-b9-a0/1539846626591619.png","post":"cjqmlqi25001xlxkj41dnuhex","slug":"1539846626591619.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e5-8d-81-e4-ba-94-e7-ab-a0-e7-b3-bb-e7-bb-9f-e7-ae-a1-e7-90-86-e4-ba-8c-e6-80-bb-e5-a4-8d-e4-b9-a0/1539847801848346.png","post":"cjqmlqi25001xlxkj41dnuhex","slug":"1539847801848346.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e5-8d-81-e4-ba-94-e7-ab-a0-e7-b3-bb-e7-bb-9f-e7-ae-a1-e7-90-86-e4-ba-8c-e6-80-bb-e5-a4-8d-e4-b9-a0/1539848579837356.png","post":"cjqmlqi25001xlxkj41dnuhex","slug":"1539848579837356.png","modified":1,"renderable":1},{"_id":"source/_drafts/RH254-控制服务和守护进程/QQ截图20190103131704.png","post":"cjqmlqi1k001alxkj9pp3d1ri","slug":"QQ截图20190103131704.png","modified":1,"renderable":1},{"_id":"source/_drafts/RH254-控制服务和守护进程/QQ截图20190103143253.png","post":"cjqmlqi1k001alxkj9pp3d1ri","slug":"QQ截图20190103143253.png","modified":1,"renderable":1},{"_id":"source/_drafts/RH254-控制服务和守护进程/QQ截图20190103143415.png","post":"cjqmlqi1k001alxkj9pp3d1ri","slug":"QQ截图20190103143415.png","modified":1,"renderable":1},{"_id":"source/_drafts/RH254-控制服务和守护进程/QQ截图20190103143559.png","post":"cjqmlqi1k001alxkj9pp3d1ri","slug":"QQ截图20190103143559.png","modified":1,"renderable":1},{"_id":"source/_drafts/RH254-控制服务和守护进程/image-1.png","post":"cjqmlqi1k001alxkj9pp3d1ri","slug":"image-1.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526607016211181.png","post":"cjqmlqi1s001glxkjbnv8y6ss","slug":"1526607016211181.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526867174600183.png","post":"cjqmlqi1s001glxkjbnv8y6ss","slug":"1526867174600183.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526868364153324.png","post":"cjqmlqi1s001glxkjbnv8y6ss","slug":"1526868364153324.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526868454617069.png","post":"cjqmlqi1s001glxkjbnv8y6ss","slug":"1526868454617069.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526868484423514.png","post":"cjqmlqi1s001glxkjbnv8y6ss","slug":"1526868484423514.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526871627344712.png","post":"cjqmlqi1s001glxkjbnv8y6ss","slug":"1526871627344712.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526872601651338.png","post":"cjqmlqi1s001glxkjbnv8y6ss","slug":"1526872601651338.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526892834926496.png","post":"cjqmlqi1s001glxkjbnv8y6ss","slug":"1526892834926496.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526892877639896.png","post":"cjqmlqi1s001glxkjbnv8y6ss","slug":"1526892877639896.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526892917350022.png","post":"cjqmlqi1s001glxkjbnv8y6ss","slug":"1526892917350022.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b8-83-e7-ab-a0-e7-ae-a1-e7-90-86-selinux-e5-ae-89-e5-85-a8-e6-80-a7/1526892939342968.png","post":"cjqmlqi1s001glxkjbnv8y6ss","slug":"1526892939342968.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526285537683356.png","post":"cjqmlqi20001qlxkjjuto19hl","slug":"1526285537683356.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526286552326310.png","post":"cjqmlqi20001qlxkjjuto19hl","slug":"1526286552326310.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526286600143773.png","post":"cjqmlqi20001qlxkjjuto19hl","slug":"1526286600143773.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526286628954630.png","post":"cjqmlqi20001qlxkjjuto19hl","slug":"1526286628954630.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526288457208748.png","post":"cjqmlqi20001qlxkjjuto19hl","slug":"1526288457208748.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526288467671948.png","post":"cjqmlqi20001qlxkjjuto19hl","slug":"1526288467671948.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526288669879354.png","post":"cjqmlqi20001qlxkjjuto19hl","slug":"1526288669879354.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526288787444516.png","post":"cjqmlqi20001qlxkjjuto19hl","slug":"1526288787444516.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526347461483244.png","post":"cjqmlqi20001qlxkjjuto19hl","slug":"1526347461483244.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526347563548361.png","post":"cjqmlqi20001qlxkjjuto19hl","slug":"1526347563548361.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526347790707759.png","post":"cjqmlqi20001qlxkjjuto19hl","slug":"1526347790707759.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e5-85-ad-e7-ab-a0-e4-bd-bf-e7-94-a8-e8-ae-bf-e9-97-ae-e6-8e-a7-e5-88-b6-e5-88-97-e8-a1-a8-ef-bc-88acl-ef-bc-89-e6-8e-a7-e5-88-b6-e5-af-b9-e6-96-87-e4-bb-b6-e7-9a-84-e8-ae-bf-e9-97-ae/1526347988908292.png","post":"cjqmlqi20001qlxkjjuto19hl","slug":"1526347988908292.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276497330227.png","post":"cjqmlqi1x001llxkjp60zqyni","slug":"1531276497330227.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276592930306.png","post":"cjqmlqi1x001llxkjp60zqyni","slug":"1531276592930306.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276722303229.png","post":"cjqmlqi1x001llxkjp60zqyni","slug":"1531276722303229.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276804698343.png","post":"cjqmlqi1x001llxkjp60zqyni","slug":"1531276804698343.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276896690206.png","post":"cjqmlqi1x001llxkjp60zqyni","slug":"1531276896690206.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276914317730.png","post":"cjqmlqi1x001llxkjp60zqyni","slug":"1531276914317730.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276934798991.png","post":"cjqmlqi1x001llxkjp60zqyni","slug":"1531276934798991.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276954842354.png","post":"cjqmlqi1x001llxkjp60zqyni","slug":"1531276954842354.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276971677806.png","post":"cjqmlqi1x001llxkjp60zqyni","slug":"1531276971677806.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531276989994678.png","post":"cjqmlqi1x001llxkjp60zqyni","slug":"1531276989994678.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531277008909144.png","post":"cjqmlqi1x001llxkjp60zqyni","slug":"1531277008909144.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531296248918343.png","post":"cjqmlqi1x001llxkjp60zqyni","slug":"1531296248918343.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531296936475764.png","post":"cjqmlqi1x001llxkjp60zqyni","slug":"1531296936475764.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531297457952475.png","post":"cjqmlqi1x001llxkjp60zqyni","slug":"1531297457952475.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531297827908462.png","post":"cjqmlqi1x001llxkjp60zqyni","slug":"1531297827908462.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531359731927864.png","post":"cjqmlqi1x001llxkjp60zqyni","slug":"1531359731927864.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531359756116868.png","post":"cjqmlqi1x001llxkjp60zqyni","slug":"1531359756116868.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531359953672134.png","post":"cjqmlqi1x001llxkjp60zqyni","slug":"1531359953672134.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531359975493820.png","post":"cjqmlqi1x001llxkjp60zqyni","slug":"1531359975493820.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531360582174595.png","post":"cjqmlqi1x001llxkjp60zqyni","slug":"1531360582174595.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531360808313305.png","post":"cjqmlqi1x001llxkjp60zqyni","slug":"1531360808313305.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e4-b9-9d-e7-ab-a0-e5-90-91linux-e7-b3-bb-e7-bb-9f-e6-b7-bb-e5-8a-a0-e7-a3-81-e7-9b-98-e3-80-81-e5-88-86-e5-8c-ba-e5-92-8c-e6-96-87-e4-bb-b6-e7-b3-bb-e7-bb-9f/1531365704503638.png","post":"cjqmlqi1x001llxkjp60zqyni","slug":"1531365704503638.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e5-9b-9b-e7-ab-a0-e8-ae-a1-e5-88-92-e5-b0-86-e6-9d-a5-e7-9a-84linux-e4-bb-bb-e5-8a-a1/1525771056304457.png","post":"cjqmlqi290021lxkjyuwsqv3o","slug":"1525771056304457.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ac-ac-e5-9b-9b-e7-ab-a0-e8-ae-a1-e5-88-92-e5-b0-86-e6-9d-a5-e7-9a-84linux-e4-bb-bb-e5-8a-a1/1526219726507971.png","post":"cjqmlqi290021lxkjyuwsqv3o","slug":"1526219726507971.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532914548221728.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532914548221728.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532915362809606.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532915362809606.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532915604992709.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532915604992709.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532915758521488.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532915758521488.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532916156887043.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532916156887043.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532916442904085.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532916442904085.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532917059786660.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532917059786660.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923101657518.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532923101657518.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923218881106.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532923218881106.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923227946554.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532923227946554.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923483491728.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532923483491728.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923530769371.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532923530769371.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923545926922.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532923545926922.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532923602504982.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532923602504982.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934683798263.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532934683798263.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934694227911.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532934694227911.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934705170371.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532934705170371.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934716787931.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532934716787931.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532934896111896.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532934896111896.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532935348576038.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532935348576038.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532935692930444.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532935692930444.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532935843642498.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532935843642498.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1532936322407591.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1532936322407591.png","modified":1,"renderable":1},{"_id":"source/_posts/rh134-e7-ae-a1-e7-90-86-e9-80-bb-e8-be-91-e5-8d-b7-e7-ae-a1-e7-90-86lvm-e5-ad-98-e5-82-a8/1533021882431708.png","post":"cjqmlqi2b0023lxkjai60f8o1","slug":"1533021882431708.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjqmlqhyo0004lxkjla5svw9n","category_id":"cjqmlqhyj0002lxkj0cyofy4b","_id":"cjqmlqhyw0009lxkjwme2zjsn"},{"post_id":"cjqmlqhy80000lxkjwomnby1k","category_id":"cjqmlqhyj0002lxkj0cyofy4b","_id":"cjqmlqhz2000clxkjcv6zhg5n"},{"post_id":"cjqmlqhyq0005lxkj367vvw9u","category_id":"cjqmlqhyj0002lxkj0cyofy4b","_id":"cjqmlqhz4000elxkjr8jvsqvc"},{"post_id":"cjqmlqhys0007lxkjhesune6b","category_id":"cjqmlqhyj0002lxkj0cyofy4b","_id":"cjqmlqhz6000glxkjigvfisqc"},{"post_id":"cjqmlqhyg0001lxkjw29jzzv9","category_id":"cjqmlqhyr0006lxkjxabqfawl","_id":"cjqmlqhz7000ilxkj262dfk1r"},{"post_id":"cjqmlqhyt0008lxkjyma6bp5m","category_id":"cjqmlqhyj0002lxkj0cyofy4b","_id":"cjqmlqhz8000klxkj5k9uv5is"},{"post_id":"cjqmlqhz0000blxkjkbjlofk4","category_id":"cjqmlqhyj0002lxkj0cyofy4b","_id":"cjqmlqhz9000mlxkj5ou4zd24"},{"post_id":"cjqmlqhyl0003lxkjp6odous2","category_id":"cjqmlqhyj0002lxkj0cyofy4b","_id":"cjqmlqhzb000olxkjyl968ziw"},{"post_id":"cjqmlqhz3000dlxkjob331f7u","category_id":"cjqmlqhyj0002lxkj0cyofy4b","_id":"cjqmlqhzd000qlxkjm5n9roa8"},{"post_id":"cjqmlqhz5000flxkjo4ovmwt7","category_id":"cjqmlqhyj0002lxkj0cyofy4b","_id":"cjqmlqhze000tlxkjtrhvnbtl"},{"post_id":"cjqmlqhz6000hlxkjvzbnqhl7","category_id":"cjqmlqhyj0002lxkj0cyofy4b","_id":"cjqmlqhzg000vlxkjbqrbh6az"},{"post_id":"cjqmlqhz7000jlxkjw6c4fw6g","category_id":"cjqmlqhyj0002lxkj0cyofy4b","_id":"cjqmlqhzh000xlxkjp8e55e1i"},{"post_id":"cjqmlqhz8000llxkjuuchxvoi","category_id":"cjqmlqhyj0002lxkj0cyofy4b","_id":"cjqmlqhzj0010lxkj9e9iai63"},{"post_id":"cjqmlqhzc000plxkj40vcxdu3","category_id":"cjqmlqhyr0006lxkjxabqfawl","_id":"cjqmlqhzj0011lxkjvilk7p77"},{"post_id":"cjqmlqhze000slxkjou3kiqnj","category_id":"cjqmlqhyj0002lxkj0cyofy4b","_id":"cjqmlqhzk0013lxkjhmqciikm"},{"post_id":"cjqmlqhzf000ulxkjcd2n49ns","category_id":"cjqmlqhzd000rlxkjy06tywhz","_id":"cjqmlqhzk0015lxkjzkk5vcqj"},{"post_id":"cjqmlqhza000nlxkjd38i1qvq","category_id":"cjqmlqhzd000rlxkjy06tywhz","_id":"cjqmlqhzl0016lxkjjvgeic2m"},{"post_id":"cjqmlqhzg000wlxkj06i4f3g7","category_id":"cjqmlqhzd000rlxkjy06tywhz","_id":"cjqmlqhzl0018lxkjy0h1wahj"},{"post_id":"cjqmlqhzi000zlxkj2a36d5rr","category_id":"cjqmlqhzd000rlxkjy06tywhz","_id":"cjqmlqhzl0019lxkj8izbcsbr"},{"post_id":"cjqmlqi1n001blxkjx8rfj2vu","category_id":"cjqmlqhyj0002lxkj0cyofy4b","_id":"cjqmlqi1t001hlxkj36ac1xl0"},{"post_id":"cjqmlqi1p001elxkjoso1mm8e","category_id":"cjqmlqhyj0002lxkj0cyofy4b","_id":"cjqmlqi1w001klxkjjsykai7w"},{"post_id":"cjqmlqi1q001flxkjjlgy9o2c","category_id":"cjqmlqhyj0002lxkj0cyofy4b","_id":"cjqmlqi1y001mlxkjzdjegol9"},{"post_id":"cjqmlqi1k001alxkj9pp3d1ri","category_id":"cjqmlqi1o001clxkj7zvpto88","_id":"cjqmlqi20001olxkjw0tdat21"},{"post_id":"cjqmlqi1s001glxkjbnv8y6ss","category_id":"cjqmlqhzd000rlxkjy06tywhz","_id":"cjqmlqi21001rlxkj6i1yg0dv"},{"post_id":"cjqmlqi1u001jlxkjm7khln5n","category_id":"cjqmlqhzd000rlxkjy06tywhz","_id":"cjqmlqi23001ulxkjkcka7am8"},{"post_id":"cjqmlqi1x001llxkjp60zqyni","category_id":"cjqmlqhzd000rlxkjy06tywhz","_id":"cjqmlqi24001wlxkjjsnb2y15"},{"post_id":"cjqmlqi1z001nlxkjcojie3a6","category_id":"cjqmlqhzd000rlxkjy06tywhz","_id":"cjqmlqi25001ylxkjfg397ros"},{"post_id":"cjqmlqi20001qlxkjjuto19hl","category_id":"cjqmlqhzd000rlxkjy06tywhz","_id":"cjqmlqi290020lxkjgv2mrzbg"},{"post_id":"cjqmlqi22001tlxkjo2m7lloe","category_id":"cjqmlqhzd000rlxkjy06tywhz","_id":"cjqmlqi2b0022lxkjfurexjf2"},{"post_id":"cjqmlqi23001vlxkjacl3zqal","category_id":"cjqmlqhzd000rlxkjy06tywhz","_id":"cjqmlqi2c0024lxkj4kpou6jf"},{"post_id":"cjqmlqi25001xlxkj41dnuhex","category_id":"cjqmlqhzd000rlxkjy06tywhz","_id":"cjqmlqi2d0025lxkjugdahak9"},{"post_id":"cjqmlqi27001zlxkjithfrqk4","category_id":"cjqmlqhzd000rlxkjy06tywhz","_id":"cjqmlqi2d0026lxkjp6kcg2nt"},{"post_id":"cjqmlqi290021lxkjyuwsqv3o","category_id":"cjqmlqhzd000rlxkjy06tywhz","_id":"cjqmlqi2d0027lxkjjmc9bhcb"},{"post_id":"cjqmlqi2b0023lxkjai60f8o1","category_id":"cjqmlqhzd000rlxkjy06tywhz","_id":"cjqmlqi2d0028lxkjvino20t0"}],"PostTag":[{"post_id":"cjqmlqhzf000ulxkjcd2n49ns","tag_id":"cjqmlqhzh000ylxkj1hvets5o","_id":"cjqmlqhzk0014lxkjtzey1jch"},{"post_id":"cjqmlqhzi000zlxkj2a36d5rr","tag_id":"cjqmlqhzk0012lxkjc5uls8sq","_id":"cjqmlqhzl0017lxkjyr9ovnjq"},{"post_id":"cjqmlqi1k001alxkj9pp3d1ri","tag_id":"cjqmlqi1o001dlxkjo5g9azm1","_id":"cjqmlqi20001plxkjvnfqxwzt"},{"post_id":"cjqmlqi1k001alxkj9pp3d1ri","tag_id":"cjqmlqi1t001ilxkje5f8f453","_id":"cjqmlqi21001slxkjcpxn8h66"}],"Tag":[{"name":"pxe","_id":"cjqmlqhzh000ylxkj1hvets5o"},{"name":"samba","_id":"cjqmlqhzk0012lxkjc5uls8sq"},{"name":"systemctl","_id":"cjqmlqi1o001dlxkjo5g9azm1"},{"name":"systemd","_id":"cjqmlqi1t001ilxkje5f8f453"}]}}